
VCU2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ab0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08008c60  08008c60  00009c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d88  08008d88  0000a060  2**0
                  CONTENTS
  4 .ARM          00000000  08008d88  08008d88  0000a060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d88  08008d88  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d88  08008d88  00009d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d8c  08008d8c  00009d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008d90  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ca4  20000060  08008df0  0000a060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d04  08008df0  0000ad04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e794  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004086  00000000  00000000  00028824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a80  00000000  00000000  0002c8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000148c  00000000  00000000  0002e330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bb2a  00000000  00000000  0002f7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e178  00000000  00000000  0005b2e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e2f7  00000000  00000000  0007945e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00187755  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000743c  00000000  00000000  00187798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0018ebd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008c48 	.word	0x08008c48

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08008c48 	.word	0x08008c48

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2uiz>:
 800098c:	004a      	lsls	r2, r1, #1
 800098e:	d211      	bcs.n	80009b4 <__aeabi_d2uiz+0x28>
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000994:	d211      	bcs.n	80009ba <__aeabi_d2uiz+0x2e>
 8000996:	d50d      	bpl.n	80009b4 <__aeabi_d2uiz+0x28>
 8000998:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d40e      	bmi.n	80009c0 <__aeabi_d2uiz+0x34>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009be:	d102      	bne.n	80009c6 <__aeabi_d2uiz+0x3a>
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	0000      	movs	r0, r0
	...

08000a70 <INA226_Initialize>:
#include <INA226.h>
#include <stdio.h>
#include <math.h>

//Initialize INA226 Component using max current expected and resistance of shunt resistor.
HAL_StatusTypeDef  INA226_Initialize(INA226_t *dev, I2C_HandleTypeDef *i2cHandle, float maxCurrent, float shuntResistance ){
 8000a70:	b5b0      	push	{r4, r5, r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a7e:	edc7 0a00 	vstr	s1, [r7]
	dev->i2cHandle = i2cHandle;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	601a      	str	r2, [r3, #0]
	dev->config = 0;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	829a      	strh	r2, [r3, #20]
	dev->shuntVoltage = 0; //max is 81.92mV
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2200      	movs	r2, #0
 8000a92:	82da      	strh	r2, [r3, #22]
	dev->busVoltage = 0;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2200      	movs	r2, #0
 8000a98:	831a      	strh	r2, [r3, #24]
	dev->power = 0;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	835a      	strh	r2, [r3, #26]
	dev->current = 0;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	839a      	strh	r2, [r3, #28]
	dev->calibration = 0;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	83da      	strh	r2, [r3, #30]

	//Current LSB = (Maximum Expected Current)/2^15
	dev->current_LSB = (maxCurrent) / pow(2, 15); // 10A
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff fd03 	bl	80004b8 <__aeabi_f2d>
 8000ab2:	f04f 0200 	mov.w	r2, #0
 8000ab6:	4b44      	ldr	r3, [pc, #272]	@ (8000bc8 <INA226_Initialize+0x158>)
 8000ab8:	f7ff fe80 	bl	80007bc <__aeabi_ddiv>
 8000abc:	4602      	mov	r2, r0
 8000abe:	460b      	mov	r3, r1
 8000ac0:	68f9      	ldr	r1, [r7, #12]
 8000ac2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dev->rShunt = shuntResistance; //20 mOHM
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	611a      	str	r2, [r3, #16]

	//store # of errors to check for issues
	uint8_t errNum = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	75fb      	strb	r3, [r7, #23]


	//Check device manufacturing and DIE ID


	status = INA226_ReadRegister(dev,INA226_MANUF_ID_REG , &regData);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	21fe      	movs	r1, #254	@ 0xfe
 8000ad8:	68f8      	ldr	r0, [r7, #12]
 8000ada:	f000 f877 	bl	8000bcc <INA226_ReadRegister>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	75bb      	strb	r3, [r7, #22]

	if(regData != INA226_MANUF_ID){
 8000ae2:	8abb      	ldrh	r3, [r7, #20]
 8000ae4:	f245 4249 	movw	r2, #21577	@ 0x5449
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d001      	beq.n	8000af0 <INA226_Initialize+0x80>
		//leave since ID doesn't match
		return 255;
 8000aec:	23ff      	movs	r3, #255	@ 0xff
 8000aee:	e061      	b.n	8000bb4 <INA226_Initialize+0x144>
	}

	status = INA226_ReadRegister(dev,INA226_DIE_ID_REG, &regData);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	461a      	mov	r2, r3
 8000af6:	21ff      	movs	r1, #255	@ 0xff
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f000 f867 	bl	8000bcc <INA226_ReadRegister>
 8000afe:	4603      	mov	r3, r0
 8000b00:	75bb      	strb	r3, [r7, #22]

	if(regData != INA226_DIE_ID){
 8000b02:	8abb      	ldrh	r3, [r7, #20]
 8000b04:	f242 2260 	movw	r2, #8800	@ 0x2260
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d001      	beq.n	8000b10 <INA226_Initialize+0xa0>
		//leave since ID doesn't match
		return 255;
 8000b0c:	23ff      	movs	r3, #255	@ 0xff
 8000b0e:	e051      	b.n	8000bb4 <INA226_Initialize+0x144>

	//Configutation Register: Sets different measuring parameters (Page 22-23)
	  // Bit(B)15 -> reset, B11-B9 -> determines average # of samples taken, B8-6 -> Bus Voltage Conversion Time(CT)
	  // B5-B3 -> Shunt Voltage CT, B2-B0 -> Operating Mode (probing timeframe)

	status = INA226_ReadRegister(dev,INA226_CONFIG_REG , &regData);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	461a      	mov	r2, r3
 8000b16:	2100      	movs	r1, #0
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	f000 f857 	bl	8000bcc <INA226_ReadRegister>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 8000b22:	7dbb      	ldrb	r3, [r7, #22]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf14      	ite	ne
 8000b28:	2301      	movne	r3, #1
 8000b2a:	2300      	moveq	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	7dfb      	ldrb	r3, [r7, #23]
 8000b32:	4413      	add	r3, r2
 8000b34:	75fb      	strb	r3, [r7, #23]
	dev->config = regData;
 8000b36:	8aba      	ldrh	r2, [r7, #20]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	829a      	strh	r2, [r3, #20]


	//calibration register value (page 15)
	CAL = (0.00512)/(dev->current_LSB * shuntResistance);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000b42:	6838      	ldr	r0, [r7, #0]
 8000b44:	f7ff fcb8 	bl	80004b8 <__aeabi_f2d>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	4620      	mov	r0, r4
 8000b4e:	4629      	mov	r1, r5
 8000b50:	f7ff fd0a 	bl	8000568 <__aeabi_dmul>
 8000b54:	4602      	mov	r2, r0
 8000b56:	460b      	mov	r3, r1
 8000b58:	a119      	add	r1, pc, #100	@ (adr r1, 8000bc0 <INA226_Initialize+0x150>)
 8000b5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b5e:	f7ff fe2d 	bl	80007bc <__aeabi_ddiv>
 8000b62:	4602      	mov	r2, r0
 8000b64:	460b      	mov	r3, r1
 8000b66:	4610      	mov	r0, r2
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f7ff ff0f 	bl	800098c <__aeabi_d2uiz>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	827b      	strh	r3, [r7, #18]
	status = INA226_WriteRegister(dev, INA226_CALIB_REG, &CAL);
 8000b74:	f107 0312 	add.w	r3, r7, #18
 8000b78:	461a      	mov	r2, r3
 8000b7a:	2105      	movs	r1, #5
 8000b7c:	68f8      	ldr	r0, [r7, #12]
 8000b7e:	f000 f850 	bl	8000c22 <INA226_WriteRegister>
 8000b82:	4603      	mov	r3, r0
 8000b84:	75bb      	strb	r3, [r7, #22]
	status = INA226_ReadRegister(dev,INA226_CALIB_REG , &regData);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f000 f81c 	bl	8000bcc <INA226_ReadRegister>
 8000b94:	4603      	mov	r3, r0
 8000b96:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 8000b98:	7dbb      	ldrb	r3, [r7, #22]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bf14      	ite	ne
 8000b9e:	2301      	movne	r3, #1
 8000ba0:	2300      	moveq	r3, #0
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	7dfb      	ldrb	r3, [r7, #23]
 8000ba8:	4413      	add	r3, r2
 8000baa:	75fb      	strb	r3, [r7, #23]
	dev->calibration = regData;
 8000bac:	8aba      	ldrh	r2, [r7, #20]
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	83da      	strh	r2, [r3, #30]

	return HAL_OK;
 8000bb2:	2300      	movs	r3, #0
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bdb0      	pop	{r4, r5, r7, pc}
 8000bbc:	f3af 8000 	nop.w
 8000bc0:	88e368f1 	.word	0x88e368f1
 8000bc4:	3f74f8b5 	.word	0x3f74f8b5
 8000bc8:	40e00000 	.word	0x40e00000

08000bcc <INA226_ReadRegister>:



//Low Level Functions

HAL_StatusTypeDef INA226_ReadRegister(INA226_t *dev, uint8_t reg, uint16_t *data){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	@ 0x28
 8000bd0:	af04      	add	r7, sp, #16
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	72fb      	strb	r3, [r7, #11]
    // Read 2 bytes (16 bits) from the register
	uint8_t temp[2];
	HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read(dev->i2cHandle, INA226_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT,temp, 2, HAL_MAX_DELAY);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	6818      	ldr	r0, [r3, #0]
 8000bde:	7afb      	ldrb	r3, [r7, #11]
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	9302      	str	r3, [sp, #8]
 8000be8:	2302      	movs	r3, #2
 8000bea:	9301      	str	r3, [sp, #4]
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	9300      	str	r3, [sp, #0]
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	2188      	movs	r1, #136	@ 0x88
 8000bf6:	f002 fe87 	bl	8003908 <HAL_I2C_Mem_Read>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	75fb      	strb	r3, [r7, #23]
    //temp is full rn
    uint16_t alldata;

    //Index first, beacause it reads LSB first
    alldata = (uint16_t)temp[0];
 8000bfe:	7c3b      	ldrb	r3, [r7, #16]
 8000c00:	82bb      	strh	r3, [r7, #20]

    //shift regdata left 8 so # is xxxxxxxx00000000
    alldata = (alldata << 8);
 8000c02:	8abb      	ldrh	r3, [r7, #20]
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	82bb      	strh	r3, [r7, #20]
    alldata = alldata | (uint16_t)temp[1];
 8000c08:	7c7b      	ldrb	r3, [r7, #17]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	8abb      	ldrh	r3, [r7, #20]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	82bb      	strh	r3, [r7, #20]
    *data = alldata;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	8aba      	ldrh	r2, [r7, #20]
 8000c16:	801a      	strh	r2, [r3, #0]
    return status;
 8000c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <INA226_WriteRegister>:

HAL_StatusTypeDef INA226_WriteRegister(INA226_t *dev, uint8_t reg, uint16_t *data){
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b08a      	sub	sp, #40	@ 0x28
 8000c26:	af04      	add	r7, sp, #16
 8000c28:	60f8      	str	r0, [r7, #12]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	607a      	str	r2, [r7, #4]
 8000c2e:	72fb      	strb	r3, [r7, #11]
    // Write 2 bytes (16 bits) to the specified register
	uint16_t passData = ((*data >> 8) | (*data << 8));
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	0a1b      	lsrs	r3, r3, #8
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	b21a      	sxth	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	021b      	lsls	r3, r3, #8
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	4313      	orrs	r3, r2
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef status;



	//Pass in a pointer to the 16 bit # as an 8 bit pointer, but use length 2 to write 2 bits.
    status = HAL_I2C_Mem_Write(dev->i2cHandle, INA226_I2C_ADDR, (uint16_t)reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&passData, 2, HAL_MAX_DELAY);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	6818      	ldr	r0, [r3, #0]
 8000c4e:	7afb      	ldrb	r3, [r7, #11]
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	9302      	str	r3, [sp, #8]
 8000c58:	2302      	movs	r3, #2
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2301      	movs	r3, #1
 8000c64:	2188      	movs	r1, #136	@ 0x88
 8000c66:	f002 fd3b 	bl	80036e0 <HAL_I2C_Mem_Write>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	75fb      	strb	r3, [r7, #23]
    return status;
 8000c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <getCurrentAmp>:

// return current value after multiplication
uint16_t getCurrentAmp(INA226_t *dev){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	uint16_t regData;
	uint16_t currentData;
	float rawVoltage;
	INA226_ReadRegister(dev, INA226_SHUNT_VOLT_REG, &regData);
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	461a      	mov	r2, r3
 8000c86:	2101      	movs	r1, #1
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff9f 	bl	8000bcc <INA226_ReadRegister>
	rawVoltage = (float)regData * 81.82 / 32768;
 8000c8e:	893b      	ldrh	r3, [r7, #8]
 8000c90:	ee07 3a90 	vmov	s15, r3
 8000c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c98:	ee17 0a90 	vmov	r0, s15
 8000c9c:	f7ff fc0c 	bl	80004b8 <__aeabi_f2d>
 8000ca0:	a318      	add	r3, pc, #96	@ (adr r3, 8000d04 <getCurrentAmp+0x8c>)
 8000ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca6:	f7ff fc5f 	bl	8000568 <__aeabi_dmul>
 8000caa:	4602      	mov	r2, r0
 8000cac:	460b      	mov	r3, r1
 8000cae:	4610      	mov	r0, r2
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f04f 0200 	mov.w	r2, #0
 8000cb6:	4b12      	ldr	r3, [pc, #72]	@ (8000d00 <getCurrentAmp+0x88>)
 8000cb8:	f7ff fd80 	bl	80007bc <__aeabi_ddiv>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4610      	mov	r0, r2
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f7ff fe82 	bl	80009cc <__aeabi_d2f>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	60fb      	str	r3, [r7, #12]
	currentData = (uint16_t)(rawVoltage/0.02);
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f7ff fbf3 	bl	80004b8 <__aeabi_f2d>
 8000cd2:	a309      	add	r3, pc, #36	@ (adr r3, 8000cf8 <getCurrentAmp+0x80>)
 8000cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd8:	f7ff fd70 	bl	80007bc <__aeabi_ddiv>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f7ff fe52 	bl	800098c <__aeabi_d2uiz>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	817b      	strh	r3, [r7, #10]
	return currentData;
 8000cec:	897b      	ldrh	r3, [r7, #10]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	47ae147b 	.word	0x47ae147b
 8000cfc:	3f947ae1 	.word	0x3f947ae1
 8000d00:	40e00000 	.word	0x40e00000
 8000d04:	e147ae14 	.word	0xe147ae14
 8000d08:	4054747a 	.word	0x4054747a

08000d0c <getPowerWatt>:

// return power value after multiplication
uint16_t getPowerWatt(INA226_t *dev){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	uint16_t regData;
	uint16_t powerData;
	INA226_ReadRegister(dev, INA226_POWER_REG,&regData);
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	461a      	mov	r2, r3
 8000d1a:	2103      	movs	r1, #3
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff55 	bl	8000bcc <INA226_ReadRegister>
	powerData = regData * dev->current_LSB;
 8000d22:	89bb      	ldrh	r3, [r7, #12]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fbb5 	bl	8000494 <__aeabi_i2d>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d30:	f7ff fc1a 	bl	8000568 <__aeabi_dmul>
 8000d34:	4602      	mov	r2, r0
 8000d36:	460b      	mov	r3, r1
 8000d38:	4610      	mov	r0, r2
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	f7ff fe26 	bl	800098c <__aeabi_d2uiz>
 8000d40:	4603      	mov	r3, r0
 8000d42:	81fb      	strh	r3, [r7, #14]
	return powerData;
 8000d44:	89fb      	ldrh	r3, [r7, #14]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_GPIO_EXTI_Callback>:
uint32_t TxMailbox = { 0 };

//CAN transmission

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000d50:	b5b0      	push	{r4, r5, r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == GPIO_PIN_13) {
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d60:	d12f      	bne.n	8000dc2 <HAL_GPIO_EXTI_Callback+0x72>
		TxData[0] = 2;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	701a      	strb	r2, [r3, #0]
		TxData[1] = TxData[1] | 0x04;
 8000d68:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d6a:	785b      	ldrb	r3, [r3, #1]
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b16      	ldr	r3, [pc, #88]	@ (8000dcc <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d74:	705a      	strb	r2, [r3, #1]

		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8000d76:	bf00      	nop
 8000d78:	4815      	ldr	r0, [pc, #84]	@ (8000dd0 <HAL_GPIO_EXTI_Callback+0x80>)
 8000d7a:	f001 fb81 	bl	8002480 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0f9      	beq.n	8000d78 <HAL_GPIO_EXTI_Callback+0x28>
		HAL_StatusTypeDef status;
		status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000d84:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <HAL_GPIO_EXTI_Callback+0x84>)
 8000d86:	4a11      	ldr	r2, [pc, #68]	@ (8000dcc <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d88:	4913      	ldr	r1, [pc, #76]	@ (8000dd8 <HAL_GPIO_EXTI_Callback+0x88>)
 8000d8a:	4811      	ldr	r0, [pc, #68]	@ (8000dd0 <HAL_GPIO_EXTI_Callback+0x80>)
 8000d8c:	f001 faa8 	bl	80022e0 <HAL_CAN_AddTxMessage>
 8000d90:	4603      	mov	r3, r0
 8000d92:	73fb      	strb	r3, [r7, #15]
		messages_sent++;
 8000d94:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <HAL_GPIO_EXTI_Callback+0x8c>)
 8000d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9a:	1c54      	adds	r4, r2, #1
 8000d9c:	f143 0500 	adc.w	r5, r3, #0
 8000da0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <HAL_GPIO_EXTI_Callback+0x8c>)
 8000da2:	e9c3 4500 	strd	r4, r5, [r3]
		if (status == HAL_ERROR){
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d102      	bne.n	8000db2 <HAL_GPIO_EXTI_Callback+0x62>
			Error_Handler();
 8000dac:	f000 fd88 	bl	80018c0 <Error_Handler>
		}
		else if(status == HAL_BUSY){
			HAL_CAN_BUSY++;
		}
	}
}
 8000db0:	e007      	b.n	8000dc2 <HAL_GPIO_EXTI_Callback+0x72>
		else if(status == HAL_BUSY){
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d104      	bne.n	8000dc2 <HAL_GPIO_EXTI_Callback+0x72>
			HAL_CAN_BUSY++;
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <HAL_GPIO_EXTI_Callback+0x90>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	4a08      	ldr	r2, [pc, #32]	@ (8000de0 <HAL_GPIO_EXTI_Callback+0x90>)
 8000dc0:	6013      	str	r3, [r2, #0]
}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000174 	.word	0x20000174
 8000dd0:	2000007c 	.word	0x2000007c
 8000dd4:	2000017c 	.word	0x2000017c
 8000dd8:	2000015c 	.word	0x2000015c
 8000ddc:	200001a8 	.word	0x200001a8
 8000de0:	200001a4 	.word	0x200001a4

08000de4 <HAL_CAN_RxFifo0MsgPendingCallback>:

// Can reception
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000dec:	4b65      	ldr	r3, [pc, #404]	@ (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000dee:	4a66      	ldr	r2, [pc, #408]	@ (8000f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8000df0:	2100      	movs	r1, #0
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f001 fb79 	bl	80024ea <HAL_CAN_GetRxMessage>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8000dfe:	f000 fd5f 	bl	80018c0 <Error_Handler>
  }
  if (RxHeader.StdId == 0x000)
 8000e02:	4b61      	ldr	r3, [pc, #388]	@ (8000f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10f      	bne.n	8000e2a <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
  {
	  if (RxData[0] == 0) {
 8000e0a:	4b5e      	ldr	r3, [pc, #376]	@ (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10b      	bne.n	8000e2a <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
		throttle = (uint16_t)RxData[2]<<8 | RxData[1];
 8000e12:	4b5c      	ldr	r3, [pc, #368]	@ (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000e14:	789b      	ldrb	r3, [r3, #2]
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	4b5a      	ldr	r3, [pc, #360]	@ (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000e1c:	785b      	ldrb	r3, [r3, #1]
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	4313      	orrs	r3, r2
 8000e22:	b21b      	sxth	r3, r3
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	4b59      	ldr	r3, [pc, #356]	@ (8000f8c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8000e28:	801a      	strh	r2, [r3, #0]
	  }
  }
  if (RxHeader.StdId == 0x7FF){
 8000e2a:	4b57      	ldr	r3, [pc, #348]	@ (8000f88 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000e32:	4293      	cmp	r3, r2
 8000e34:	f040 80a2 	bne.w	8000f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x198>
	  if(RxData[0] == 1){
 8000e38:	4b52      	ldr	r3, [pc, #328]	@ (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	f040 809d 	bne.w	8000f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x198>
		  //byte 1
		  //ignition switch
		  if((RxData[1] & 0x80) != 0x00){
 8000e42:	4b50      	ldr	r3, [pc, #320]	@ (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000e44:	785b      	ldrb	r3, [r3, #1]
 8000e46:	b25b      	sxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	da05      	bge.n	8000e58 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
			  mppt_pre_contactor_en = false;
 8000e4c:	4b50      	ldr	r3, [pc, #320]	@ (8000f90 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
			  mppt_contactor_en = false;
 8000e52:	4b50      	ldr	r3, [pc, #320]	@ (8000f94 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
			  //preform shut down sequence
		  }

		  if((RxData[1] & 0x02) != 0x00){
 8000e58:	4b4a      	ldr	r3, [pc, #296]	@ (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000e5a:	785b      	ldrb	r3, [r3, #1]
 8000e5c:	f003 0302 	and.w	r3, r3, #2
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
			  brakes_active = true; // turn brakes on
 8000e64:	4b4c      	ldr	r3, [pc, #304]	@ (8000f98 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	e002      	b.n	8000e72 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
		  }else{
			  brakes_active = false; // turn breaks off
 8000e6c:	4b4a      	ldr	r3, [pc, #296]	@ (8000f98 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x20) != 0x00){
 8000e72:	4b44      	ldr	r3, [pc, #272]	@ (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000e74:	785b      	ldrb	r3, [r3, #1]
 8000e76:	f003 0320 	and.w	r3, r3, #32
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
			  dirrection = true; //Forward
 8000e7e:	4b47      	ldr	r3, [pc, #284]	@ (8000f9c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	e002      	b.n	8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
		  }else{
			  dirrection = false;
 8000e86:	4b45      	ldr	r3, [pc, #276]	@ (8000f9c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x10) != 0x00){
 8000e8c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000e8e:	785b      	ldrb	r3, [r3, #1]
 8000e90:	f003 0310 	and.w	r3, r3, #16
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
			  mc_main_ctrl = true;
 8000e98:	4b41      	ldr	r3, [pc, #260]	@ (8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	e002      	b.n	8000ea6 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
		  }else{
			  mc_main_ctrl = false;
 8000ea0:	4b3f      	ldr	r3, [pc, #252]	@ (8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x08) != 0x00){
 8000ea6:	4b37      	ldr	r3, [pc, #220]	@ (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000ea8:	785b      	ldrb	r3, [r3, #1]
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_CAN_RxFifo0MsgPendingCallback+0xd6>
			  array = true;
 8000eb2:	4b3c      	ldr	r3, [pc, #240]	@ (8000fa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	e002      	b.n	8000ec0 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>
		  }else{
			  array = false;
 8000eba:	4b3a      	ldr	r3, [pc, #232]	@ (8000fa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x04) != 0x00){
 8000ec0:	4b30      	ldr	r3, [pc, #192]	@ (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000ec2:	785b      	ldrb	r3, [r3, #1]
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
			  array_precharge = true;
 8000ecc:	4b36      	ldr	r3, [pc, #216]	@ (8000fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
 8000ed2:	e002      	b.n	8000eda <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
		  }else{
			  array_precharge = false;
 8000ed4:	4b34      	ldr	r3, [pc, #208]	@ (8000fa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
		  }


		  //byte #2
		  if((RxData[2] & 0x01) != 0x00){
 8000eda:	4b2a      	ldr	r3, [pc, #168]	@ (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000edc:	789b      	ldrb	r3, [r3, #2]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d010      	beq.n	8000f08 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
			  if (blinkers_active != true) {
 8000ee6:	4b31      	ldr	r3, [pc, #196]	@ (8000fac <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	f083 0301 	eor.w	r3, r3, #1
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d005      	beq.n	8000f00 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
				  blinkers_active = true;
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8000fac <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 8000efa:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
			  }
			  blinkers_active = true; // turn brakes on
 8000f00:	4b2a      	ldr	r3, [pc, #168]	@ (8000fac <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	e002      	b.n	8000f0e <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>

		  }else{
			  blinkers_active = false;
 8000f08:	4b28      	ldr	r3, [pc, #160]	@ (8000fac <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[2] & 0x02) != 0x00){
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000f10:	789b      	ldrb	r3, [r3, #2]
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d010      	beq.n	8000f3c <HAL_CAN_RxFifo0MsgPendingCallback+0x158>
			  if (left_turn_active != true) {
 8000f1a:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	f083 0301 	eor.w	r3, r3, #1
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d005      	beq.n	8000f34 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>
				  left_turn_active = true;
 8000f28:	4b22      	ldr	r3, [pc, #136]	@ (8000fb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 8000f2e:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
			  }
			  left_turn_active = true; // turn brakes on
 8000f34:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
 8000f3a:	e002      	b.n	8000f42 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>


		  }else{
			  left_turn_active = false; // turn brakes off
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[2] & 0x04) != 0x00){
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000f44:	789b      	ldrb	r3, [r3, #2]
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d013      	beq.n	8000f76 <HAL_CAN_RxFifo0MsgPendingCallback+0x192>
			  if(right_turn_active != true){
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	f083 0301 	eor.w	r3, r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d008      	beq.n	8000f6e <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
				  right_turn_active = true; // Turn on right
 8000f5c:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
				  left_turn_active = false; //Turn off left
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 8000f68:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
			  }
			  right_turn_active = true;
 8000f6e:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
		  }


	  }
  }
}
 8000f74:	e002      	b.n	8000f7c <HAL_CAN_RxFifo0MsgPendingCallback+0x198>
			  right_turn_active = false;
 8000f76:	4b10      	ldr	r3, [pc, #64]	@ (8000fb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2000019c 	.word	0x2000019c
 8000f88:	20000180 	.word	0x20000180
 8000f8c:	20000144 	.word	0x20000144
 8000f90:	20000159 	.word	0x20000159
 8000f94:	20000158 	.word	0x20000158
 8000f98:	20000148 	.word	0x20000148
 8000f9c:	2000014c 	.word	0x2000014c
 8000fa0:	2000014d 	.word	0x2000014d
 8000fa4:	2000014e 	.word	0x2000014e
 8000fa8:	2000014f 	.word	0x2000014f
 8000fac:	20000149 	.word	0x20000149
 8000fb0:	20000154 	.word	0x20000154
 8000fb4:	2000014a 	.word	0x2000014a
 8000fb8:	2000014b 	.word	0x2000014b

08000fbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

  brakes_active = false;
 8000fc0:	4b41      	ldr	r3, [pc, #260]	@ (80010c8 <main+0x10c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
  blinkers_active = false;
 8000fc6:	4b41      	ldr	r3, [pc, #260]	@ (80010cc <main+0x110>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
  left_turn_active = false;
 8000fcc:	4b40      	ldr	r3, [pc, #256]	@ (80010d0 <main+0x114>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
  right_turn_active = true;
 8000fd2:	4b40      	ldr	r3, [pc, #256]	@ (80010d4 <main+0x118>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]


  dirrection = false;
 8000fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80010d8 <main+0x11c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
  mc_pwreco_ctrl = false;
 8000fde:	4b3f      	ldr	r3, [pc, #252]	@ (80010dc <main+0x120>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
  mc_main_ctrl = false;
 8000fe4:	4b3e      	ldr	r3, [pc, #248]	@ (80010e0 <main+0x124>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
  array = false;
 8000fea:	4b3e      	ldr	r3, [pc, #248]	@ (80010e4 <main+0x128>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
  array_precharge = false;
 8000ff0:	4b3d      	ldr	r3, [pc, #244]	@ (80010e8 <main+0x12c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f000 fef6 	bl	8001de6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 f899 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f000 f9e1 	bl	80013c4 <MX_GPIO_Init>
  MX_DAC1_Init();
 8001002:	f000 f963 	bl	80012cc <MX_DAC1_Init>
  MX_CAN1_Init();
 8001006:	f000 f8d9 	bl	80011bc <MX_CAN1_Init>
  MX_CAN2_Init();
 800100a:	f000 f929 	bl	8001260 <MX_CAN2_Init>
  MX_I2C2_Init();
 800100e:	f000 f999 	bl	8001344 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8001012:	4836      	ldr	r0, [pc, #216]	@ (80010ec <main+0x130>)
 8001014:	f001 f920 	bl	8002258 <HAL_CAN_Start>

  //intalize can RX interupt
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001018:	2102      	movs	r1, #2
 800101a:	4834      	ldr	r0, [pc, #208]	@ (80010ec <main+0x130>)
 800101c:	f001 fb87 	bl	800272e <HAL_CAN_ActivateNotification>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <main+0x6e>
  {
	  Error_Handler();
 8001026:	f000 fc4b 	bl	80018c0 <Error_Handler>

  //hdac1.State = HAL_DAC_STATE_RESET;



  TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 800102a:	4b31      	ldr	r3, [pc, #196]	@ (80010f0 <main+0x134>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x02; // 11 bit Identifier
 8001030:	4b2f      	ldr	r3, [pc, #188]	@ (80010f0 <main+0x134>)
 8001032:	2202      	movs	r2, #2
 8001034:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8001036:	4b2e      	ldr	r3, [pc, #184]	@ (80010f0 <main+0x134>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 8; // 8 bytes being transmitted
 800103c:	4b2c      	ldr	r3, [pc, #176]	@ (80010f0 <main+0x134>)
 800103e:	2208      	movs	r2, #8
 8001040:	611a      	str	r2, [r3, #16]

  if(INA226_Initialize(&INA226_IVP, &hi2c2, 10, 20) != HAL_OK){ Error_Handler();}
 8001042:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8001046:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800104a:	492a      	ldr	r1, [pc, #168]	@ (80010f4 <main+0x138>)
 800104c:	482a      	ldr	r0, [pc, #168]	@ (80010f8 <main+0x13c>)
 800104e:	f7ff fd0f 	bl	8000a70 <INA226_Initialize>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <main+0xa0>
 8001058:	f000 fc32 	bl	80018c0 <Error_Handler>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	2104      	movs	r1, #4
 8001060:	4826      	ldr	r0, [pc, #152]	@ (80010fc <main+0x140>)
 8001062:	f002 fa57 	bl	8003514 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 8001066:	2201      	movs	r2, #1
 8001068:	2104      	movs	r1, #4
 800106a:	4824      	ldr	r0, [pc, #144]	@ (80010fc <main+0x140>)
 800106c:	f002 fa52 	bl	8003514 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2104      	movs	r1, #4
 8001074:	4821      	ldr	r0, [pc, #132]	@ (80010fc <main+0x140>)
 8001076:	f002 fa4d 	bl	8003514 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800107a:	f004 ff4b 	bl	8005f14 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(Heart_Beat, NULL, &HeartBeat_attributes);
 800107e:	4a20      	ldr	r2, [pc, #128]	@ (8001100 <main+0x144>)
 8001080:	2100      	movs	r1, #0
 8001082:	4820      	ldr	r0, [pc, #128]	@ (8001104 <main+0x148>)
 8001084:	f004 ff90 	bl	8005fa8 <osThreadNew>
 8001088:	4603      	mov	r3, r0
 800108a:	4a1f      	ldr	r2, [pc, #124]	@ (8001108 <main+0x14c>)
 800108c:	6013      	str	r3, [r2, #0]

  /* creation of UpdateThrottle */
  UpdateThrottleHandle = osThreadNew(Update_Throttle, NULL, &UpdateThrottle_attributes);
 800108e:	4a1f      	ldr	r2, [pc, #124]	@ (800110c <main+0x150>)
 8001090:	2100      	movs	r1, #0
 8001092:	481f      	ldr	r0, [pc, #124]	@ (8001110 <main+0x154>)
 8001094:	f004 ff88 	bl	8005fa8 <osThreadNew>
 8001098:	4603      	mov	r3, r0
 800109a:	4a1e      	ldr	r2, [pc, #120]	@ (8001114 <main+0x158>)
 800109c:	6013      	str	r3, [r2, #0]

  /* creation of LightsControl */
  LightsControlHandle = osThreadNew(Lights_Control, NULL, &LightsControl_attributes);
 800109e:	4a1e      	ldr	r2, [pc, #120]	@ (8001118 <main+0x15c>)
 80010a0:	2100      	movs	r1, #0
 80010a2:	481e      	ldr	r0, [pc, #120]	@ (800111c <main+0x160>)
 80010a4:	f004 ff80 	bl	8005fa8 <osThreadNew>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001120 <main+0x164>)
 80010ac:	6013      	str	r3, [r2, #0]

  /* creation of ReadSensors */
  ReadSensorsHandle = osThreadNew(Read_Sensors, NULL, &ReadSensors_attributes);
 80010ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001124 <main+0x168>)
 80010b0:	2100      	movs	r1, #0
 80010b2:	481d      	ldr	r0, [pc, #116]	@ (8001128 <main+0x16c>)
 80010b4:	f004 ff78 	bl	8005fa8 <osThreadNew>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a1c      	ldr	r2, [pc, #112]	@ (800112c <main+0x170>)
 80010bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010be:	f004 ff4d 	bl	8005f5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010c2:	bf00      	nop
 80010c4:	e7fd      	b.n	80010c2 <main+0x106>
 80010c6:	bf00      	nop
 80010c8:	20000148 	.word	0x20000148
 80010cc:	20000149 	.word	0x20000149
 80010d0:	2000014a 	.word	0x2000014a
 80010d4:	2000014b 	.word	0x2000014b
 80010d8:	2000014c 	.word	0x2000014c
 80010dc:	20000150 	.word	0x20000150
 80010e0:	2000014d 	.word	0x2000014d
 80010e4:	2000014e 	.word	0x2000014e
 80010e8:	2000014f 	.word	0x2000014f
 80010ec:	2000007c 	.word	0x2000007c
 80010f0:	2000015c 	.word	0x2000015c
 80010f4:	200000e0 	.word	0x200000e0
 80010f8:	200001b0 	.word	0x200001b0
 80010fc:	48000800 	.word	0x48000800
 8001100:	08008cb0 	.word	0x08008cb0
 8001104:	080014ed 	.word	0x080014ed
 8001108:	20000134 	.word	0x20000134
 800110c:	08008cd4 	.word	0x08008cd4
 8001110:	08001511 	.word	0x08001511
 8001114:	20000138 	.word	0x20000138
 8001118:	08008cf8 	.word	0x08008cf8
 800111c:	08001635 	.word	0x08001635
 8001120:	2000013c 	.word	0x2000013c
 8001124:	08008d1c 	.word	0x08008d1c
 8001128:	080017b5 	.word	0x080017b5
 800112c:	20000140 	.word	0x20000140

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b096      	sub	sp, #88	@ 0x58
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	2244      	movs	r2, #68	@ 0x44
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f007 fc9a 	bl	8008a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	463b      	mov	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001152:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001156:	f003 f859 	bl	800420c <HAL_PWREx_ControlVoltageScaling>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001160:	f000 fbae 	bl	80018c0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001164:	2310      	movs	r3, #16
 8001166:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001168:	2301      	movs	r3, #1
 800116a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001170:	2360      	movs	r3, #96	@ 0x60
 8001172:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001174:	2300      	movs	r3, #0
 8001176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4618      	mov	r0, r3
 800117e:	f003 f89b 	bl	80042b8 <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001188:	f000 fb9a 	bl	80018c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	230f      	movs	r3, #15
 800118e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011a0:	463b      	mov	r3, r7
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 fca1 	bl	8004aec <HAL_RCC_ClockConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80011b0:	f000 fb86 	bl	80018c0 <Error_Handler>
  }
}
 80011b4:	bf00      	nop
 80011b6:	3758      	adds	r7, #88	@ 0x58
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	@ 0x28
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80011c2:	4b25      	ldr	r3, [pc, #148]	@ (8001258 <MX_CAN1_Init+0x9c>)
 80011c4:	4a25      	ldr	r2, [pc, #148]	@ (800125c <MX_CAN1_Init+0xa0>)
 80011c6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80011c8:	4b23      	ldr	r3, [pc, #140]	@ (8001258 <MX_CAN1_Init+0x9c>)
 80011ca:	2202      	movs	r2, #2
 80011cc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80011ce:	4b22      	ldr	r3, [pc, #136]	@ (8001258 <MX_CAN1_Init+0x9c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011d4:	4b20      	ldr	r3, [pc, #128]	@ (8001258 <MX_CAN1_Init+0x9c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80011da:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <MX_CAN1_Init+0x9c>)
 80011dc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011e0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001258 <MX_CAN1_Init+0x9c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <MX_CAN1_Init+0x9c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80011ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <MX_CAN1_Init+0x9c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011f4:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <MX_CAN1_Init+0x9c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011fa:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <MX_CAN1_Init+0x9c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001200:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <MX_CAN1_Init+0x9c>)
 8001202:	2200      	movs	r2, #0
 8001204:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001206:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <MX_CAN1_Init+0x9c>)
 8001208:	2200      	movs	r2, #0
 800120a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800120c:	4812      	ldr	r0, [pc, #72]	@ (8001258 <MX_CAN1_Init+0x9c>)
 800120e:	f000 fe47 	bl	8001ea0 <HAL_CAN_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001218:	f000 fb52 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800121c:	2301      	movs	r3, #1
 800121e:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8001220:	2312      	movs	r3, #18
 8001222:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x000<<5;
 8001228:	2300      	movs	r3, #0
 800122a:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x000<<5;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001238:	2300      	movs	r3, #0
 800123a:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800123c:	2301      	movs	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8001240:	2314      	movs	r3, #20
 8001242:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001244:	463b      	mov	r3, r7
 8001246:	4619      	mov	r1, r3
 8001248:	4803      	ldr	r0, [pc, #12]	@ (8001258 <MX_CAN1_Init+0x9c>)
 800124a:	f000 ff25 	bl	8002098 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	@ 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2000007c 	.word	0x2000007c
 800125c:	40006400 	.word	0x40006400

08001260 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001264:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <MX_CAN2_Init+0x64>)
 8001266:	4a18      	ldr	r2, [pc, #96]	@ (80012c8 <MX_CAN2_Init+0x68>)
 8001268:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 800126a:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <MX_CAN2_Init+0x64>)
 800126c:	2202      	movs	r2, #2
 800126e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001270:	4b14      	ldr	r3, [pc, #80]	@ (80012c4 <MX_CAN2_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001276:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <MX_CAN2_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <MX_CAN2_Init+0x64>)
 800127e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001282:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001284:	4b0f      	ldr	r3, [pc, #60]	@ (80012c4 <MX_CAN2_Init+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800128a:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <MX_CAN2_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001290:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <MX_CAN2_Init+0x64>)
 8001292:	2200      	movs	r2, #0
 8001294:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <MX_CAN2_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800129c:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <MX_CAN2_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <MX_CAN2_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <MX_CAN2_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80012ae:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_CAN2_Init+0x64>)
 80012b0:	f000 fdf6 	bl	8001ea0 <HAL_CAN_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 80012ba:	f000 fb01 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200000a4 	.word	0x200000a4
 80012c8:	40006800 	.word	0x40006800

080012cc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b08a      	sub	sp, #40	@ 0x28
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2224      	movs	r2, #36	@ 0x24
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f007 fbcd 	bl	8008a78 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012de:	4b17      	ldr	r3, [pc, #92]	@ (800133c <MX_DAC1_Init+0x70>)
 80012e0:	4a17      	ldr	r2, [pc, #92]	@ (8001340 <MX_DAC1_Init+0x74>)
 80012e2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012e4:	4815      	ldr	r0, [pc, #84]	@ (800133c <MX_DAC1_Init+0x70>)
 80012e6:	f001 fd59 	bl	8002d9c <HAL_DAC_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80012f0:	f000 fae6 	bl	80018c0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	4619      	mov	r1, r3
 800130e:	480b      	ldr	r0, [pc, #44]	@ (800133c <MX_DAC1_Init+0x70>)
 8001310:	f001 fe3c 	bl	8002f8c <HAL_DAC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800131a:	f000 fad1 	bl	80018c0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2210      	movs	r2, #16
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	@ (800133c <MX_DAC1_Init+0x70>)
 8001326:	f001 fe31 	bl	8002f8c <HAL_DAC_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001330:	f000 fac6 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	@ 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200000cc 	.word	0x200000cc
 8001340:	40007400 	.word	0x40007400

08001344 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001348:	4b1b      	ldr	r3, [pc, #108]	@ (80013b8 <MX_I2C2_Init+0x74>)
 800134a:	4a1c      	ldr	r2, [pc, #112]	@ (80013bc <MX_I2C2_Init+0x78>)
 800134c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 800134e:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <MX_I2C2_Init+0x74>)
 8001350:	4a1b      	ldr	r2, [pc, #108]	@ (80013c0 <MX_I2C2_Init+0x7c>)
 8001352:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001354:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <MX_I2C2_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800135a:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <MX_I2C2_Init+0x74>)
 800135c:	2201      	movs	r2, #1
 800135e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001360:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <MX_I2C2_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001366:	4b14      	ldr	r3, [pc, #80]	@ (80013b8 <MX_I2C2_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <MX_I2C2_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001372:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <MX_I2C2_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001378:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <MX_I2C2_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800137e:	480e      	ldr	r0, [pc, #56]	@ (80013b8 <MX_I2C2_Init+0x74>)
 8001380:	f002 f912 	bl	80035a8 <HAL_I2C_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800138a:	f000 fa99 	bl	80018c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800138e:	2100      	movs	r1, #0
 8001390:	4809      	ldr	r0, [pc, #36]	@ (80013b8 <MX_I2C2_Init+0x74>)
 8001392:	f002 fe95 	bl	80040c0 <HAL_I2CEx_ConfigAnalogFilter>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800139c:	f000 fa90 	bl	80018c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013a0:	2100      	movs	r1, #0
 80013a2:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <MX_I2C2_Init+0x74>)
 80013a4:	f002 fed7 	bl	8004156 <HAL_I2CEx_ConfigDigitalFilter>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013ae:	f000 fa87 	bl	80018c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200000e0 	.word	0x200000e0
 80013bc:	40005800 	.word	0x40005800
 80013c0:	00100d14 	.word	0x00100d14

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	4b41      	ldr	r3, [pc, #260]	@ (80014e0 <MX_GPIO_Init+0x11c>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	4a40      	ldr	r2, [pc, #256]	@ (80014e0 <MX_GPIO_Init+0x11c>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e6:	4b3e      	ldr	r3, [pc, #248]	@ (80014e0 <MX_GPIO_Init+0x11c>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	4b3b      	ldr	r3, [pc, #236]	@ (80014e0 <MX_GPIO_Init+0x11c>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	4a3a      	ldr	r2, [pc, #232]	@ (80014e0 <MX_GPIO_Init+0x11c>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fe:	4b38      	ldr	r3, [pc, #224]	@ (80014e0 <MX_GPIO_Init+0x11c>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	4b35      	ldr	r3, [pc, #212]	@ (80014e0 <MX_GPIO_Init+0x11c>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	4a34      	ldr	r2, [pc, #208]	@ (80014e0 <MX_GPIO_Init+0x11c>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001416:	4b32      	ldr	r3, [pc, #200]	@ (80014e0 <MX_GPIO_Init+0x11c>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001422:	2200      	movs	r2, #0
 8001424:	f24c 010f 	movw	r1, #49167	@ 0xc00f
 8001428:	482e      	ldr	r0, [pc, #184]	@ (80014e4 <MX_GPIO_Init+0x120>)
 800142a:	f002 f873 	bl	8003514 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2107      	movs	r1, #7
 8001432:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001436:	f002 f86d 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	f242 0102 	movw	r1, #8194	@ 0x2002
 8001440:	4829      	ldr	r0, [pc, #164]	@ (80014e8 <MX_GPIO_Init+0x124>)
 8001442:	f002 f867 	bl	8003514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001446:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800144a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800144c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	4619      	mov	r1, r3
 800145c:	4821      	ldr	r0, [pc, #132]	@ (80014e4 <MX_GPIO_Init+0x120>)
 800145e:	f001 fec7 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001462:	f24c 030f 	movw	r3, #49167	@ 0xc00f
 8001466:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4619      	mov	r1, r3
 800147a:	481a      	ldr	r0, [pc, #104]	@ (80014e4 <MX_GPIO_Init+0x120>)
 800147c:	f001 feb8 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MC_Main_Pin PA1 PA2 */
  GPIO_InitStruct.Pin = MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2;
 8001480:	2307      	movs	r3, #7
 8001482:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001484:	2301      	movs	r3, #1
 8001486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	2300      	movs	r3, #0
 800148e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800149a:	f001 fea9 	bl	80031f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 800149e:	f242 0302 	movw	r3, #8194	@ 0x2002
 80014a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	4619      	mov	r1, r3
 80014b6:	480c      	ldr	r0, [pc, #48]	@ (80014e8 <MX_GPIO_Init+0x124>)
 80014b8:	f001 fe9a 	bl	80031f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2105      	movs	r1, #5
 80014c0:	2028      	movs	r0, #40	@ 0x28
 80014c2:	f001 fc41 	bl	8002d48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014c6:	2028      	movs	r0, #40	@ 0x28
 80014c8:	f001 fc5a 	bl	8002d80 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	2101      	movs	r1, #1
 80014d0:	4804      	ldr	r0, [pc, #16]	@ (80014e4 <MX_GPIO_Init+0x120>)
 80014d2:	f002 f81f 	bl	8003514 <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_2 */
}
 80014d6:	bf00      	nop
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	48000800 	.word	0x48000800
 80014e8:	48000400 	.word	0x48000400

080014ec <Heart_Beat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Heart_Beat */
void Heart_Beat(void *argument)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80014f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014f8:	4804      	ldr	r0, [pc, #16]	@ (800150c <Heart_Beat+0x20>)
 80014fa:	f002 f823 	bl	8003544 <HAL_GPIO_TogglePin>
    osDelay(500);
 80014fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001502:	f004 fde3 	bl	80060cc <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001506:	bf00      	nop
 8001508:	e7f4      	b.n	80014f4 <Heart_Beat+0x8>
 800150a:	bf00      	nop
 800150c:	48000400 	.word	0x48000400

08001510 <Update_Throttle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Update_Throttle */
void Update_Throttle(void *argument)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Update_Throttle */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 8001518:	2201      	movs	r2, #1
 800151a:	2104      	movs	r1, #4
 800151c:	483c      	ldr	r0, [pc, #240]	@ (8001610 <Update_Throttle+0x100>)
 800151e:	f001 fff9 	bl	8003514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 8001522:	2201      	movs	r2, #1
 8001524:	2104      	movs	r1, #4
 8001526:	483a      	ldr	r0, [pc, #232]	@ (8001610 <Update_Throttle+0x100>)
 8001528:	f001 fff4 	bl	8003514 <HAL_GPIO_WritePin>



  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1); //Start DAC 1 and 2
 800152c:	2100      	movs	r1, #0
 800152e:	4839      	ldr	r0, [pc, #228]	@ (8001614 <Update_Throttle+0x104>)
 8001530:	f001 fc56 	bl	8002de0 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 8001534:	2110      	movs	r1, #16
 8001536:	4837      	ldr	r0, [pc, #220]	@ (8001614 <Update_Throttle+0x104>)
 8001538:	f001 fc52 	bl	8002de0 <HAL_DAC_Start>
  array = 1;
 800153c:	4b36      	ldr	r3, [pc, #216]	@ (8001618 <Update_Throttle+0x108>)
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]
  array_precharge = 1;
 8001542:	4b36      	ldr	r3, [pc, #216]	@ (800161c <Update_Throttle+0x10c>)
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, throttle);
 8001548:	4b35      	ldr	r3, [pc, #212]	@ (8001620 <Update_Throttle+0x110>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	2200      	movs	r2, #0
 800154e:	2110      	movs	r1, #16
 8001550:	4830      	ldr	r0, [pc, #192]	@ (8001614 <Update_Throttle+0x104>)
 8001552:	f001 fcec 	bl	8002f2e <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, regen);
 8001556:	4b33      	ldr	r3, [pc, #204]	@ (8001624 <Update_Throttle+0x114>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	482d      	ldr	r0, [pc, #180]	@ (8001614 <Update_Throttle+0x104>)
 8001560:	f001 fce5 	bl	8002f2e <HAL_DAC_SetValue>
	  //updates gpio pins with states from global variables

	  //change for bistable relay
	  //gonna have to think about this section

	  if(mc_main_ctrl){
 8001564:	4b30      	ldr	r3, [pc, #192]	@ (8001628 <Update_Throttle+0x118>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <Update_Throttle+0x6a>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800156c:	2201      	movs	r2, #1
 800156e:	2101      	movs	r1, #1
 8001570:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001574:	f001 ffce 	bl	8003514 <HAL_GPIO_WritePin>
 8001578:	e005      	b.n	8001586 <Update_Throttle+0x76>
	  }else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	2101      	movs	r1, #1
 800157e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001582:	f001 ffc7 	bl	8003514 <HAL_GPIO_WritePin>
	  }

	  if(mc_pwreco_ctrl){
 8001586:	4b29      	ldr	r3, [pc, #164]	@ (800162c <Update_Throttle+0x11c>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d006      	beq.n	800159c <Update_Throttle+0x8c>
		  //closed power
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800158e:	2201      	movs	r2, #1
 8001590:	2102      	movs	r1, #2
 8001592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001596:	f001 ffbd 	bl	8003514 <HAL_GPIO_WritePin>
 800159a:	e005      	b.n	80015a8 <Update_Throttle+0x98>
	  }else{
		  //open eco
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	2102      	movs	r1, #2
 80015a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a4:	f001 ffb6 	bl	8003514 <HAL_GPIO_WritePin>
	  }


	  if(dirrection == true){
 80015a8:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <Update_Throttle+0x120>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <Update_Throttle+0xae>
		  //closed forward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2104      	movs	r1, #4
 80015b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015b8:	f001 ffac 	bl	8003514 <HAL_GPIO_WritePin>
 80015bc:	e005      	b.n	80015ca <Update_Throttle+0xba>
	  }else{
		  //open backward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2104      	movs	r1, #4
 80015c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c6:	f001 ffa5 	bl	8003514 <HAL_GPIO_WritePin>
	  }

	  if(array_precharge == true){
 80015ca:	4b14      	ldr	r3, [pc, #80]	@ (800161c <Update_Throttle+0x10c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d005      	beq.n	80015de <Update_Throttle+0xce>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2104      	movs	r1, #4
 80015d6:	480e      	ldr	r0, [pc, #56]	@ (8001610 <Update_Throttle+0x100>)
 80015d8:	f001 ff9c 	bl	8003514 <HAL_GPIO_WritePin>
 80015dc:	e004      	b.n	80015e8 <Update_Throttle+0xd8>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80015de:	2201      	movs	r2, #1
 80015e0:	2104      	movs	r1, #4
 80015e2:	480b      	ldr	r0, [pc, #44]	@ (8001610 <Update_Throttle+0x100>)
 80015e4:	f001 ff96 	bl	8003514 <HAL_GPIO_WritePin>
	  }

	  if(array == true){
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <Update_Throttle+0x108>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <Update_Throttle+0xec>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2108      	movs	r1, #8
 80015f4:	4806      	ldr	r0, [pc, #24]	@ (8001610 <Update_Throttle+0x100>)
 80015f6:	f001 ff8d 	bl	8003514 <HAL_GPIO_WritePin>
 80015fa:	e004      	b.n	8001606 <Update_Throttle+0xf6>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2108      	movs	r1, #8
 8001600:	4803      	ldr	r0, [pc, #12]	@ (8001610 <Update_Throttle+0x100>)
 8001602:	f001 ff87 	bl	8003514 <HAL_GPIO_WritePin>
	  }


	  osDelay(20);
 8001606:	2014      	movs	r0, #20
 8001608:	f004 fd60 	bl	80060cc <osDelay>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, throttle);
 800160c:	e79c      	b.n	8001548 <Update_Throttle+0x38>
 800160e:	bf00      	nop
 8001610:	48000800 	.word	0x48000800
 8001614:	200000cc 	.word	0x200000cc
 8001618:	2000014e 	.word	0x2000014e
 800161c:	2000014f 	.word	0x2000014f
 8001620:	20000144 	.word	0x20000144
 8001624:	20000146 	.word	0x20000146
 8001628:	2000014d 	.word	0x2000014d
 800162c:	20000150 	.word	0x20000150
 8001630:	2000014c 	.word	0x2000014c

08001634 <Lights_Control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Lights_Control */
void Lights_Control(void *argument)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  //left_turn_active = true;

  /* Infinite loop */
  for(;;)
  {
	  if (blinkers_active) {
 800163c:	4b56      	ldr	r3, [pc, #344]	@ (8001798 <Lights_Control+0x164>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d032      	beq.n	80016aa <Lights_Control+0x76>
		  if (signal_counter < 5) {
 8001644:	4b55      	ldr	r3, [pc, #340]	@ (800179c <Lights_Control+0x168>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b04      	cmp	r3, #4
 800164a:	dc0b      	bgt.n	8001664 <Lights_Control+0x30>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001652:	4853      	ldr	r0, [pc, #332]	@ (80017a0 <Lights_Control+0x16c>)
 8001654:	f001 ff5e 	bl	8003514 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	2102      	movs	r1, #2
 800165c:	4850      	ldr	r0, [pc, #320]	@ (80017a0 <Lights_Control+0x16c>)
 800165e:	f001 ff59 	bl	8003514 <HAL_GPIO_WritePin>
 8001662:	e00a      	b.n	800167a <Lights_Control+0x46>
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8001664:	2201      	movs	r2, #1
 8001666:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800166a:	484d      	ldr	r0, [pc, #308]	@ (80017a0 <Lights_Control+0x16c>)
 800166c:	f001 ff52 	bl	8003514 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8001670:	2201      	movs	r2, #1
 8001672:	2102      	movs	r1, #2
 8001674:	484a      	ldr	r0, [pc, #296]	@ (80017a0 <Lights_Control+0x16c>)
 8001676:	f001 ff4d 	bl	8003514 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 800167a:	4b48      	ldr	r3, [pc, #288]	@ (800179c <Lights_Control+0x168>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	4a46      	ldr	r2, [pc, #280]	@ (800179c <Lights_Control+0x168>)
 8001682:	6013      	str	r3, [r2, #0]
		  signal_counter = signal_counter%10;
 8001684:	4b45      	ldr	r3, [pc, #276]	@ (800179c <Lights_Control+0x168>)
 8001686:	6819      	ldr	r1, [r3, #0]
 8001688:	4b46      	ldr	r3, [pc, #280]	@ (80017a4 <Lights_Control+0x170>)
 800168a:	fb83 2301 	smull	r2, r3, r3, r1
 800168e:	109a      	asrs	r2, r3, #2
 8001690:	17cb      	asrs	r3, r1, #31
 8001692:	1ad2      	subs	r2, r2, r3
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	1aca      	subs	r2, r1, r3
 800169e:	4b3f      	ldr	r3, [pc, #252]	@ (800179c <Lights_Control+0x168>)
 80016a0:	601a      	str	r2, [r3, #0]
		  osDelay(100);
 80016a2:	2064      	movs	r0, #100	@ 0x64
 80016a4:	f004 fd12 	bl	80060cc <osDelay>
		  continue;
 80016a8:	e074      	b.n	8001794 <Lights_Control+0x160>
	  }

	  if(left_turn_active){
 80016aa:	4b3f      	ldr	r3, [pc, #252]	@ (80017a8 <Lights_Control+0x174>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d016      	beq.n	80016e0 <Lights_Control+0xac>
		  if(signal_counter < 5){
 80016b2:	4b3a      	ldr	r3, [pc, #232]	@ (800179c <Lights_Control+0x168>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	dc06      	bgt.n	80016c8 <Lights_Control+0x94>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016c0:	4837      	ldr	r0, [pc, #220]	@ (80017a0 <Lights_Control+0x16c>)
 80016c2:	f001 ff27 	bl	8003514 <HAL_GPIO_WritePin>
 80016c6:	e005      	b.n	80016d4 <Lights_Control+0xa0>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 80016c8:	2201      	movs	r2, #1
 80016ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016ce:	4834      	ldr	r0, [pc, #208]	@ (80017a0 <Lights_Control+0x16c>)
 80016d0:	f001 ff20 	bl	8003514 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 80016d4:	4b31      	ldr	r3, [pc, #196]	@ (800179c <Lights_Control+0x168>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	4a30      	ldr	r2, [pc, #192]	@ (800179c <Lights_Control+0x168>)
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e010      	b.n	8001702 <Lights_Control+0xce>

	  }else{
		  if(brakes_active){
 80016e0:	4b32      	ldr	r3, [pc, #200]	@ (80017ac <Lights_Control+0x178>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d006      	beq.n	80016f6 <Lights_Control+0xc2>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016ee:	482c      	ldr	r0, [pc, #176]	@ (80017a0 <Lights_Control+0x16c>)
 80016f0:	f001 ff10 	bl	8003514 <HAL_GPIO_WritePin>
 80016f4:	e005      	b.n	8001702 <Lights_Control+0xce>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016fc:	4828      	ldr	r0, [pc, #160]	@ (80017a0 <Lights_Control+0x16c>)
 80016fe:	f001 ff09 	bl	8003514 <HAL_GPIO_WritePin>
		  }
	  }

	  if(right_turn_active){
 8001702:	4b2b      	ldr	r3, [pc, #172]	@ (80017b0 <Lights_Control+0x17c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d014      	beq.n	8001734 <Lights_Control+0x100>
		  if(signal_counter < 5){
 800170a:	4b24      	ldr	r3, [pc, #144]	@ (800179c <Lights_Control+0x168>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b04      	cmp	r3, #4
 8001710:	dc05      	bgt.n	800171e <Lights_Control+0xea>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	2102      	movs	r1, #2
 8001716:	4822      	ldr	r0, [pc, #136]	@ (80017a0 <Lights_Control+0x16c>)
 8001718:	f001 fefc 	bl	8003514 <HAL_GPIO_WritePin>
 800171c:	e004      	b.n	8001728 <Lights_Control+0xf4>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 800171e:	2201      	movs	r2, #1
 8001720:	2102      	movs	r1, #2
 8001722:	481f      	ldr	r0, [pc, #124]	@ (80017a0 <Lights_Control+0x16c>)
 8001724:	f001 fef6 	bl	8003514 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 8001728:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <Lights_Control+0x168>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	4a1b      	ldr	r2, [pc, #108]	@ (800179c <Lights_Control+0x168>)
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e00e      	b.n	8001752 <Lights_Control+0x11e>
	  }
	  else{
		  if(brakes_active){
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <Lights_Control+0x178>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <Lights_Control+0x114>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 800173c:	2201      	movs	r2, #1
 800173e:	2102      	movs	r1, #2
 8001740:	4817      	ldr	r0, [pc, #92]	@ (80017a0 <Lights_Control+0x16c>)
 8001742:	f001 fee7 	bl	8003514 <HAL_GPIO_WritePin>
 8001746:	e004      	b.n	8001752 <Lights_Control+0x11e>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	2102      	movs	r1, #2
 800174c:	4814      	ldr	r0, [pc, #80]	@ (80017a0 <Lights_Control+0x16c>)
 800174e:	f001 fee1 	bl	8003514 <HAL_GPIO_WritePin>
		  }
	  }

	  if(brakes_active){
 8001752:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <Lights_Control+0x178>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <Lights_Control+0x132>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET); //sets center rear light (brake light)
 800175a:	2201      	movs	r2, #1
 800175c:	2101      	movs	r1, #1
 800175e:	4810      	ldr	r0, [pc, #64]	@ (80017a0 <Lights_Control+0x16c>)
 8001760:	f001 fed8 	bl	8003514 <HAL_GPIO_WritePin>
 8001764:	e004      	b.n	8001770 <Lights_Control+0x13c>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	2101      	movs	r1, #1
 800176a:	480d      	ldr	r0, [pc, #52]	@ (80017a0 <Lights_Control+0x16c>)
 800176c:	f001 fed2 	bl	8003514 <HAL_GPIO_WritePin>
	  }
	  signal_counter = signal_counter%10;
 8001770:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <Lights_Control+0x168>)
 8001772:	6819      	ldr	r1, [r3, #0]
 8001774:	4b0b      	ldr	r3, [pc, #44]	@ (80017a4 <Lights_Control+0x170>)
 8001776:	fb83 2301 	smull	r2, r3, r3, r1
 800177a:	109a      	asrs	r2, r3, #2
 800177c:	17cb      	asrs	r3, r1, #31
 800177e:	1ad2      	subs	r2, r2, r3
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	1aca      	subs	r2, r1, r3
 800178a:	4b04      	ldr	r3, [pc, #16]	@ (800179c <Lights_Control+0x168>)
 800178c:	601a      	str	r2, [r3, #0]
	  osDelay(100);
 800178e:	2064      	movs	r0, #100	@ 0x64
 8001790:	f004 fc9c 	bl	80060cc <osDelay>
	  if (blinkers_active) {
 8001794:	e752      	b.n	800163c <Lights_Control+0x8>
 8001796:	bf00      	nop
 8001798:	20000149 	.word	0x20000149
 800179c:	20000154 	.word	0x20000154
 80017a0:	48000800 	.word	0x48000800
 80017a4:	66666667 	.word	0x66666667
 80017a8:	2000014a 	.word	0x2000014a
 80017ac:	20000148 	.word	0x20000148
 80017b0:	2000014b 	.word	0x2000014b

080017b4 <Read_Sensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Read_Sensors */
void Read_Sensors(void *argument)
{
 80017b4:	b5b0      	push	{r4, r5, r7, lr}
 80017b6:	b092      	sub	sp, #72	@ 0x48
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Read_Sensors */

	//Write HERE

	int HAL_CAN_BUSY = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	647b      	str	r3, [r7, #68]	@ 0x44
	uint64_t messages_sent = 0;
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	2300      	movs	r3, #0
 80017d2:	61bb      	str	r3, [r7, #24]
	uint32_t TxMailbox = { 0 };
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]


	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.StdId = 0x07; // 11 bit Identifier
 80017dc:	2307      	movs	r3, #7
 80017de:	61fb      	str	r3, [r7, #28]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 80017e0:	2300      	movs	r3, #0
 80017e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.DLC = 8; // 8 bytes being transmitted
 80017e4:	2308      	movs	r3, #8
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	//Message ID 2 for VCU
	TxData[0] = 2;
 80017e8:	2302      	movs	r3, #2
 80017ea:	753b      	strb	r3, [r7, #20]

	uint8_t ina226_data[2];

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	f107 0214 	add.w	r2, r7, #20
 80017f4:	f107 011c 	add.w	r1, r7, #28
 80017f8:	4826      	ldr	r0, [pc, #152]	@ (8001894 <Read_Sensors+0xe0>)
 80017fa:	f000 fd71 	bl	80022e0 <HAL_CAN_AddTxMessage>

  /* Infinite loop */
  for(;;)
  {
	  //INA226_t *data = (INA226_t *)argument;
	  INA226_IVP.current = getCurrentAmp(&INA226_IVP);
 80017fe:	4826      	ldr	r0, [pc, #152]	@ (8001898 <Read_Sensors+0xe4>)
 8001800:	f7ff fa3a 	bl	8000c78 <getCurrentAmp>
 8001804:	4603      	mov	r3, r0
 8001806:	461a      	mov	r2, r3
 8001808:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <Read_Sensors+0xe4>)
 800180a:	839a      	strh	r2, [r3, #28]
	  INA226_IVP.power = getPowerWatt(&INA226_IVP);
 800180c:	4822      	ldr	r0, [pc, #136]	@ (8001898 <Read_Sensors+0xe4>)
 800180e:	f7ff fa7d 	bl	8000d0c <getPowerWatt>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	4b20      	ldr	r3, [pc, #128]	@ (8001898 <Read_Sensors+0xe4>)
 8001818:	835a      	strh	r2, [r3, #26]

	  //Store in CAN, power byte L and H
	  ina226_data[0] = INA226_IVP.power & 0xFF;
 800181a:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <Read_Sensors+0xe4>)
 800181c:	8b5b      	ldrh	r3, [r3, #26]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	733b      	strb	r3, [r7, #12]
	  ina226_data[1] = (INA226_IVP.power >> 8) & 0xFF;
 8001822:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <Read_Sensors+0xe4>)
 8001824:	8b5b      	ldrh	r3, [r3, #26]
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	b29b      	uxth	r3, r3
 800182a:	b2db      	uxtb	r3, r3
 800182c:	737b      	strb	r3, [r7, #13]

	  //Assign CAN message
	  TxData[0] = 2;
 800182e:	2302      	movs	r3, #2
 8001830:	753b      	strb	r3, [r7, #20]
	  TxData[1] = ina226_data[0];
 8001832:	7b3b      	ldrb	r3, [r7, #12]
 8001834:	757b      	strb	r3, [r7, #21]
	  TxData[2] = ina226_data[1];
 8001836:	7b7b      	ldrb	r3, [r7, #13]
 8001838:	75bb      	strb	r3, [r7, #22]

	  while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 800183a:	bf00      	nop
 800183c:	4815      	ldr	r0, [pc, #84]	@ (8001894 <Read_Sensors+0xe0>)
 800183e:	f000 fe1f 	bl	8002480 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f9      	beq.n	800183c <Read_Sensors+0x88>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	f107 0214 	add.w	r2, r7, #20
 8001850:	f107 011c 	add.w	r1, r7, #28
 8001854:	480f      	ldr	r0, [pc, #60]	@ (8001894 <Read_Sensors+0xe0>)
 8001856:	f000 fd43 	bl	80022e0 <HAL_CAN_AddTxMessage>
 800185a:	4603      	mov	r3, r0
 800185c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  messages_sent++;
 8001860:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001864:	1c54      	adds	r4, r2, #1
 8001866:	f143 0500 	adc.w	r5, r3, #0
 800186a:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
	  if (status == HAL_ERROR){
 800186e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001872:	2b01      	cmp	r3, #1
 8001874:	d102      	bne.n	800187c <Read_Sensors+0xc8>
		  Error_Handler();
 8001876:	f000 f823 	bl	80018c0 <Error_Handler>
 800187a:	e006      	b.n	800188a <Read_Sensors+0xd6>
	  }
	  else if(status == HAL_BUSY){
 800187c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001880:	2b02      	cmp	r3, #2
 8001882:	d102      	bne.n	800188a <Read_Sensors+0xd6>
		  HAL_CAN_BUSY++;
 8001884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001886:	3301      	adds	r3, #1
 8001888:	647b      	str	r3, [r7, #68]	@ 0x44
	  }

    osDelay(1);
 800188a:	2001      	movs	r0, #1
 800188c:	f004 fc1e 	bl	80060cc <osDelay>
  {
 8001890:	e7b5      	b.n	80017fe <Read_Sensors+0x4a>
 8001892:	bf00      	nop
 8001894:	2000007c 	.word	0x2000007c
 8001898:	200001b0 	.word	0x200001b0

0800189c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a04      	ldr	r2, [pc, #16]	@ (80018bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d101      	bne.n	80018b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018ae:	f000 fab3 	bl	8001e18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40001000 	.word	0x40001000

080018c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c4:	b672      	cpsid	i
}
 80018c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <Error_Handler+0x8>

080018cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	4b11      	ldr	r3, [pc, #68]	@ (8001918 <HAL_MspInit+0x4c>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d6:	4a10      	ldr	r2, [pc, #64]	@ (8001918 <HAL_MspInit+0x4c>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <HAL_MspInit+0x4c>)
 80018e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001918 <HAL_MspInit+0x4c>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001918 <HAL_MspInit+0x4c>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <HAL_MspInit+0x4c>)
 80018f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	210f      	movs	r1, #15
 8001906:	f06f 0001 	mvn.w	r0, #1
 800190a:	f001 fa1d 	bl	8002d48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000

0800191c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	@ 0x30
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a56      	ldr	r2, [pc, #344]	@ (8001a94 <HAL_CAN_MspInit+0x178>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d14b      	bne.n	80019d6 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800193e:	4b56      	ldr	r3, [pc, #344]	@ (8001a98 <HAL_CAN_MspInit+0x17c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	4a54      	ldr	r2, [pc, #336]	@ (8001a98 <HAL_CAN_MspInit+0x17c>)
 8001946:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001948:	4b53      	ldr	r3, [pc, #332]	@ (8001a98 <HAL_CAN_MspInit+0x17c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d10b      	bne.n	8001968 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001950:	4b52      	ldr	r3, [pc, #328]	@ (8001a9c <HAL_CAN_MspInit+0x180>)
 8001952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001954:	4a51      	ldr	r2, [pc, #324]	@ (8001a9c <HAL_CAN_MspInit+0x180>)
 8001956:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800195a:	6593      	str	r3, [r2, #88]	@ 0x58
 800195c:	4b4f      	ldr	r3, [pc, #316]	@ (8001a9c <HAL_CAN_MspInit+0x180>)
 800195e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001968:	4b4c      	ldr	r3, [pc, #304]	@ (8001a9c <HAL_CAN_MspInit+0x180>)
 800196a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196c:	4a4b      	ldr	r2, [pc, #300]	@ (8001a9c <HAL_CAN_MspInit+0x180>)
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001974:	4b49      	ldr	r3, [pc, #292]	@ (8001a9c <HAL_CAN_MspInit+0x180>)
 8001976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001980:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800198a:	2301      	movs	r3, #1
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001992:	2309      	movs	r3, #9
 8001994:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4619      	mov	r1, r3
 800199c:	4840      	ldr	r0, [pc, #256]	@ (8001aa0 <HAL_CAN_MspInit+0x184>)
 800199e:	f001 fc27 	bl	80031f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80019b4:	2309      	movs	r3, #9
 80019b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4619      	mov	r1, r3
 80019be:	4838      	ldr	r0, [pc, #224]	@ (8001aa0 <HAL_CAN_MspInit+0x184>)
 80019c0:	f001 fc16 	bl	80031f0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2105      	movs	r1, #5
 80019c8:	2014      	movs	r0, #20
 80019ca:	f001 f9bd 	bl	8002d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80019ce:	2014      	movs	r0, #20
 80019d0:	f001 f9d6 	bl	8002d80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80019d4:	e059      	b.n	8001a8a <HAL_CAN_MspInit+0x16e>
  else if(hcan->Instance==CAN2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a32      	ldr	r2, [pc, #200]	@ (8001aa4 <HAL_CAN_MspInit+0x188>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d154      	bne.n	8001a8a <HAL_CAN_MspInit+0x16e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80019e0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a9c <HAL_CAN_MspInit+0x180>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e4:	4a2d      	ldr	r2, [pc, #180]	@ (8001a9c <HAL_CAN_MspInit+0x180>)
 80019e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80019ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ec:	4b2b      	ldr	r3, [pc, #172]	@ (8001a9c <HAL_CAN_MspInit+0x180>)
 80019ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80019f8:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <HAL_CAN_MspInit+0x17c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	3301      	adds	r3, #1
 80019fe:	4a26      	ldr	r2, [pc, #152]	@ (8001a98 <HAL_CAN_MspInit+0x17c>)
 8001a00:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001a02:	4b25      	ldr	r3, [pc, #148]	@ (8001a98 <HAL_CAN_MspInit+0x17c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d10b      	bne.n	8001a22 <HAL_CAN_MspInit+0x106>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001a0a:	4b24      	ldr	r3, [pc, #144]	@ (8001a9c <HAL_CAN_MspInit+0x180>)
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0e:	4a23      	ldr	r2, [pc, #140]	@ (8001a9c <HAL_CAN_MspInit+0x180>)
 8001a10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a16:	4b21      	ldr	r3, [pc, #132]	@ (8001a9c <HAL_CAN_MspInit+0x180>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a22:	4b1e      	ldr	r3, [pc, #120]	@ (8001a9c <HAL_CAN_MspInit+0x180>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a26:	4a1d      	ldr	r2, [pc, #116]	@ (8001a9c <HAL_CAN_MspInit+0x180>)
 8001a28:	f043 0302 	orr.w	r3, r3, #2
 8001a2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a9c <HAL_CAN_MspInit+0x180>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a3a:	2320      	movs	r3, #32
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a42:	2301      	movs	r3, #1
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a46:	2303      	movs	r3, #3
 8001a48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4e:	f107 031c 	add.w	r3, r7, #28
 8001a52:	4619      	mov	r1, r3
 8001a54:	4812      	ldr	r0, [pc, #72]	@ (8001aa0 <HAL_CAN_MspInit+0x184>)
 8001a56:	f001 fbcb 	bl	80031f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a5a:	2340      	movs	r3, #64	@ 0x40
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	4619      	mov	r1, r3
 8001a74:	480a      	ldr	r0, [pc, #40]	@ (8001aa0 <HAL_CAN_MspInit+0x184>)
 8001a76:	f001 fbbb 	bl	80031f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2105      	movs	r1, #5
 8001a7e:	2057      	movs	r0, #87	@ 0x57
 8001a80:	f001 f962 	bl	8002d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001a84:	2057      	movs	r0, #87	@ 0x57
 8001a86:	f001 f97b 	bl	8002d80 <HAL_NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3730      	adds	r7, #48	@ 0x30
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40006400 	.word	0x40006400
 8001a98:	200001d0 	.word	0x200001d0
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	48000400 	.word	0x48000400
 8001aa4:	40006800 	.word	0x40006800

08001aa8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	@ 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a19      	ldr	r2, [pc, #100]	@ (8001b2c <HAL_DAC_MspInit+0x84>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d12c      	bne.n	8001b24 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001aca:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <HAL_DAC_MspInit+0x88>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ace:	4a18      	ldr	r2, [pc, #96]	@ (8001b30 <HAL_DAC_MspInit+0x88>)
 8001ad0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ad4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ad6:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <HAL_DAC_MspInit+0x88>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ada:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <HAL_DAC_MspInit+0x88>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae6:	4a12      	ldr	r2, [pc, #72]	@ (8001b30 <HAL_DAC_MspInit+0x88>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aee:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <HAL_DAC_MspInit+0x88>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001afa:	2330      	movs	r3, #48	@ 0x30
 8001afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afe:	2303      	movs	r3, #3
 8001b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b10:	f001 fb6e 	bl	80031f0 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	210f      	movs	r1, #15
 8001b18:	2036      	movs	r0, #54	@ 0x36
 8001b1a:	f001 f915 	bl	8002d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b1e:	2036      	movs	r0, #54	@ 0x36
 8001b20:	f001 f92e 	bl	8002d80 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001b24:	bf00      	nop
 8001b26:	3728      	adds	r7, #40	@ 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40007400 	.word	0x40007400
 8001b30:	40021000 	.word	0x40021000

08001b34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b0ac      	sub	sp, #176	@ 0xb0
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	228c      	movs	r2, #140	@ 0x8c
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f006 ff8f 	bl	8008a78 <memset>
  if(hi2c->Instance==I2C2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a21      	ldr	r2, [pc, #132]	@ (8001be4 <HAL_I2C_MspInit+0xb0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d13b      	bne.n	8001bdc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b6c:	f107 0310 	add.w	r3, r7, #16
 8001b70:	4618      	mov	r0, r3
 8001b72:	f003 f9fb 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b7c:	f7ff fea0 	bl	80018c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b80:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <HAL_I2C_MspInit+0xb4>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b84:	4a18      	ldr	r2, [pc, #96]	@ (8001be8 <HAL_I2C_MspInit+0xb4>)
 8001b86:	f043 0302 	orr.w	r3, r3, #2
 8001b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8c:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <HAL_I2C_MspInit+0xb4>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b98:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba0:	2312      	movs	r3, #18
 8001ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480b      	ldr	r0, [pc, #44]	@ (8001bec <HAL_I2C_MspInit+0xb8>)
 8001bc0:	f001 fb16 	bl	80031f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bc4:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <HAL_I2C_MspInit+0xb4>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc8:	4a07      	ldr	r2, [pc, #28]	@ (8001be8 <HAL_I2C_MspInit+0xb4>)
 8001bca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001bce:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bd0:	4b05      	ldr	r3, [pc, #20]	@ (8001be8 <HAL_I2C_MspInit+0xb4>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001bdc:	bf00      	nop
 8001bde:	37b0      	adds	r7, #176	@ 0xb0
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40005800 	.word	0x40005800
 8001be8:	40021000 	.word	0x40021000
 8001bec:	48000400 	.word	0x48000400

08001bf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08e      	sub	sp, #56	@ 0x38
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001bfe:	4b34      	ldr	r3, [pc, #208]	@ (8001cd0 <HAL_InitTick+0xe0>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c02:	4a33      	ldr	r2, [pc, #204]	@ (8001cd0 <HAL_InitTick+0xe0>)
 8001c04:	f043 0310 	orr.w	r3, r3, #16
 8001c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c0a:	4b31      	ldr	r3, [pc, #196]	@ (8001cd0 <HAL_InitTick+0xe0>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c16:	f107 0210 	add.w	r2, r7, #16
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4611      	mov	r1, r2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 f911 	bl	8004e48 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d103      	bne.n	8001c38 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c30:	f003 f8f4 	bl	8004e1c <HAL_RCC_GetPCLK1Freq>
 8001c34:	6378      	str	r0, [r7, #52]	@ 0x34
 8001c36:	e004      	b.n	8001c42 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c38:	f003 f8f0 	bl	8004e1c <HAL_RCC_GetPCLK1Freq>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c44:	4a23      	ldr	r2, [pc, #140]	@ (8001cd4 <HAL_InitTick+0xe4>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	0c9b      	lsrs	r3, r3, #18
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c50:	4b21      	ldr	r3, [pc, #132]	@ (8001cd8 <HAL_InitTick+0xe8>)
 8001c52:	4a22      	ldr	r2, [pc, #136]	@ (8001cdc <HAL_InitTick+0xec>)
 8001c54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c56:	4b20      	ldr	r3, [pc, #128]	@ (8001cd8 <HAL_InitTick+0xe8>)
 8001c58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c5c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd8 <HAL_InitTick+0xe8>)
 8001c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c62:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c64:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd8 <HAL_InitTick+0xe8>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd8 <HAL_InitTick+0xe8>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c70:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <HAL_InitTick+0xe8>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001c76:	4818      	ldr	r0, [pc, #96]	@ (8001cd8 <HAL_InitTick+0xe8>)
 8001c78:	f003 fe42 	bl	8005900 <HAL_TIM_Base_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001c82:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d11b      	bne.n	8001cc2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001c8a:	4813      	ldr	r0, [pc, #76]	@ (8001cd8 <HAL_InitTick+0xe8>)
 8001c8c:	f003 fe9a 	bl	80059c4 <HAL_TIM_Base_Start_IT>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001c96:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d111      	bne.n	8001cc2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c9e:	2036      	movs	r0, #54	@ 0x36
 8001ca0:	f001 f86e 	bl	8002d80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b0f      	cmp	r3, #15
 8001ca8:	d808      	bhi.n	8001cbc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001caa:	2200      	movs	r2, #0
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	2036      	movs	r0, #54	@ 0x36
 8001cb0:	f001 f84a 	bl	8002d48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <HAL_InitTick+0xf0>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e002      	b.n	8001cc2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001cc2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3738      	adds	r7, #56	@ 0x38
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	431bde83 	.word	0x431bde83
 8001cd8:	200001d4 	.word	0x200001d4
 8001cdc:	40001000 	.word	0x40001000
 8001ce0:	20000004 	.word	0x20000004

08001ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <NMI_Handler+0x4>

08001cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <HardFault_Handler+0x4>

08001cf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <MemManage_Handler+0x4>

08001cfc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <BusFault_Handler+0x4>

08001d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <UsageFault_Handler+0x4>

08001d0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d20:	4802      	ldr	r0, [pc, #8]	@ (8001d2c <CAN1_RX0_IRQHandler+0x10>)
 8001d22:	f000 fd2a 	bl	800277a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000007c 	.word	0x2000007c

08001d30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d34:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d38:	f001 fc1e 	bl	8003578 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d44:	4803      	ldr	r0, [pc, #12]	@ (8001d54 <TIM6_DAC_IRQHandler+0x14>)
 8001d46:	f003 fead 	bl	8005aa4 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001d4a:	4803      	ldr	r0, [pc, #12]	@ (8001d58 <TIM6_DAC_IRQHandler+0x18>)
 8001d4c:	f001 f895 	bl	8002e7a <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200001d4 	.word	0x200001d4
 8001d58:	200000cc 	.word	0x200000cc

08001d5c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001d60:	4802      	ldr	r0, [pc, #8]	@ (8001d6c <CAN2_RX0_IRQHandler+0x10>)
 8001d62:	f000 fd0a 	bl	800277a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	200000a4 	.word	0x200000a4

08001d70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <SystemInit+0x20>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d7a:	4a05      	ldr	r2, [pc, #20]	@ (8001d90 <SystemInit+0x20>)
 8001d7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d98:	f7ff ffea 	bl	8001d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d9c:	480c      	ldr	r0, [pc, #48]	@ (8001dd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d9e:	490d      	ldr	r1, [pc, #52]	@ (8001dd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001da0:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd8 <LoopForever+0xe>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da4:	e002      	b.n	8001dac <LoopCopyDataInit>

08001da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001daa:	3304      	adds	r3, #4

08001dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db0:	d3f9      	bcc.n	8001da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001db4:	4c0a      	ldr	r4, [pc, #40]	@ (8001de0 <LoopForever+0x16>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db8:	e001      	b.n	8001dbe <LoopFillZerobss>

08001dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dbc:	3204      	adds	r2, #4

08001dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc0:	d3fb      	bcc.n	8001dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f006 feb7 	bl	8008b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dc6:	f7ff f8f9 	bl	8000fbc <main>

08001dca <LoopForever>:

LoopForever:
    b LoopForever
 8001dca:	e7fe      	b.n	8001dca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dcc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001dd8:	08008d90 	.word	0x08008d90
  ldr r2, =_sbss
 8001ddc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001de0:	20001d04 	.word	0x20001d04

08001de4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <ADC1_2_IRQHandler>

08001de6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df0:	2003      	movs	r0, #3
 8001df2:	f000 ff9e 	bl	8002d32 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001df6:	200f      	movs	r0, #15
 8001df8:	f7ff fefa 	bl	8001bf0 <HAL_InitTick>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d002      	beq.n	8001e08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	71fb      	strb	r3, [r7, #7]
 8001e06:	e001      	b.n	8001e0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e08:	f7ff fd60 	bl	80018cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_IncTick+0x20>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <HAL_IncTick+0x24>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	20000220 	.word	0x20000220

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <HAL_GetTick+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000220 	.word	0x20000220

08001e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff ffee 	bl	8001e40 <HAL_GetTick>
 8001e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d005      	beq.n	8001e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e72:	4b0a      	ldr	r3, [pc, #40]	@ (8001e9c <HAL_Delay+0x44>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e7e:	bf00      	nop
 8001e80:	f7ff ffde 	bl	8001e40 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d8f7      	bhi.n	8001e80 <HAL_Delay+0x28>
  {
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000008 	.word	0x20000008

08001ea0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e0ed      	b.n	800208e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d102      	bne.n	8001ec4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fd2c 	bl	800191c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ed4:	f7ff ffb4 	bl	8001e40 <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001eda:	e012      	b.n	8001f02 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001edc:	f7ff ffb0 	bl	8001e40 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b0a      	cmp	r3, #10
 8001ee8:	d90b      	bls.n	8001f02 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2205      	movs	r2, #5
 8001efa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0c5      	b.n	800208e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0e5      	beq.n	8001edc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0202 	bic.w	r2, r2, #2
 8001f1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f20:	f7ff ff8e 	bl	8001e40 <HAL_GetTick>
 8001f24:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f26:	e012      	b.n	8001f4e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f28:	f7ff ff8a 	bl	8001e40 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b0a      	cmp	r3, #10
 8001f34:	d90b      	bls.n	8001f4e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2205      	movs	r2, #5
 8001f46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e09f      	b.n	800208e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1e5      	bne.n	8001f28 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7e1b      	ldrb	r3, [r3, #24]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d108      	bne.n	8001f76 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	e007      	b.n	8001f86 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	7e5b      	ldrb	r3, [r3, #25]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d108      	bne.n	8001fa0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e007      	b.n	8001fb0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	7e9b      	ldrb	r3, [r3, #26]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d108      	bne.n	8001fca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0220 	orr.w	r2, r2, #32
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e007      	b.n	8001fda <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0220 	bic.w	r2, r2, #32
 8001fd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7edb      	ldrb	r3, [r3, #27]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d108      	bne.n	8001ff4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0210 	bic.w	r2, r2, #16
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e007      	b.n	8002004 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0210 	orr.w	r2, r2, #16
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7f1b      	ldrb	r3, [r3, #28]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d108      	bne.n	800201e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0208 	orr.w	r2, r2, #8
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e007      	b.n	800202e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0208 	bic.w	r2, r2, #8
 800202c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7f5b      	ldrb	r3, [r3, #29]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d108      	bne.n	8002048 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0204 	orr.w	r2, r2, #4
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	e007      	b.n	8002058 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0204 	bic.w	r2, r2, #4
 8002056:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	ea42 0103 	orr.w	r1, r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	1e5a      	subs	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002098:	b480      	push	{r7}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d003      	beq.n	80020be <HAL_CAN_ConfigFilter+0x26>
 80020b6:	7cfb      	ldrb	r3, [r7, #19]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	f040 80be 	bne.w	800223a <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80020be:	4b65      	ldr	r3, [pc, #404]	@ (8002254 <HAL_CAN_ConfigFilter+0x1bc>)
 80020c0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020c8:	f043 0201 	orr.w	r2, r3, #1
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020d8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	431a      	orrs	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	2201      	movs	r2, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	43db      	mvns	r3, r3
 8002110:	401a      	ands	r2, r3
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d123      	bne.n	8002168 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	43db      	mvns	r3, r3
 800212a:	401a      	ands	r2, r3
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002142:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3248      	adds	r2, #72	@ 0x48
 8002148:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800215c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800215e:	6979      	ldr	r1, [r7, #20]
 8002160:	3348      	adds	r3, #72	@ 0x48
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	440b      	add	r3, r1
 8002166:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d122      	bne.n	80021b6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	431a      	orrs	r2, r3
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002190:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3248      	adds	r2, #72	@ 0x48
 8002196:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021ac:	6979      	ldr	r1, [r7, #20]
 80021ae:	3348      	adds	r3, #72	@ 0x48
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	440b      	add	r3, r1
 80021b4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	401a      	ands	r2, r3
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80021d0:	e007      	b.n	80021e2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	431a      	orrs	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	401a      	ands	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80021fc:	e007      	b.n	800220e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	431a      	orrs	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d107      	bne.n	8002226 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	431a      	orrs	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800222c:	f023 0201 	bic.w	r2, r3, #1
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	e006      	b.n	8002248 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
  }
}
 8002248:	4618      	mov	r0, r3
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	40006400 	.word	0x40006400

08002258 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b01      	cmp	r3, #1
 800226a:	d12e      	bne.n	80022ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002284:	f7ff fddc 	bl	8001e40 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800228a:	e012      	b.n	80022b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800228c:	f7ff fdd8 	bl	8001e40 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b0a      	cmp	r3, #10
 8002298:	d90b      	bls.n	80022b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2205      	movs	r2, #5
 80022aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e012      	b.n	80022d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1e5      	bne.n	800228c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e006      	b.n	80022d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ce:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
  }
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	@ 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80022fe:	7ffb      	ldrb	r3, [r7, #31]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d003      	beq.n	800230c <HAL_CAN_AddTxMessage+0x2c>
 8002304:	7ffb      	ldrb	r3, [r7, #31]
 8002306:	2b02      	cmp	r3, #2
 8002308:	f040 80ad 	bne.w	8002466 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10a      	bne.n	800232c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800231c:	2b00      	cmp	r3, #0
 800231e:	d105      	bne.n	800232c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 8095 	beq.w	8002456 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	0e1b      	lsrs	r3, r3, #24
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002336:	2201      	movs	r2, #1
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	409a      	lsls	r2, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10d      	bne.n	8002364 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002352:	68f9      	ldr	r1, [r7, #12]
 8002354:	6809      	ldr	r1, [r1, #0]
 8002356:	431a      	orrs	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	3318      	adds	r3, #24
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	440b      	add	r3, r1
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	e00f      	b.n	8002384 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800236e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002374:	68f9      	ldr	r1, [r7, #12]
 8002376:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002378:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3318      	adds	r3, #24
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	440b      	add	r3, r1
 8002382:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6819      	ldr	r1, [r3, #0]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3318      	adds	r3, #24
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	440b      	add	r3, r1
 8002394:	3304      	adds	r3, #4
 8002396:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	7d1b      	ldrb	r3, [r3, #20]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d111      	bne.n	80023c4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	3318      	adds	r3, #24
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	4413      	add	r3, r2
 80023ac:	3304      	adds	r3, #4
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	6811      	ldr	r1, [r2, #0]
 80023b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	3318      	adds	r3, #24
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	440b      	add	r3, r1
 80023c0:	3304      	adds	r3, #4
 80023c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3307      	adds	r3, #7
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	061a      	lsls	r2, r3, #24
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3306      	adds	r3, #6
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	041b      	lsls	r3, r3, #16
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3305      	adds	r3, #5
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	021b      	lsls	r3, r3, #8
 80023de:	4313      	orrs	r3, r2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	3204      	adds	r2, #4
 80023e4:	7812      	ldrb	r2, [r2, #0]
 80023e6:	4610      	mov	r0, r2
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	6811      	ldr	r1, [r2, #0]
 80023ec:	ea43 0200 	orr.w	r2, r3, r0
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	440b      	add	r3, r1
 80023f6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80023fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3303      	adds	r3, #3
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	061a      	lsls	r2, r3, #24
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3302      	adds	r3, #2
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	041b      	lsls	r3, r3, #16
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3301      	adds	r3, #1
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	021b      	lsls	r3, r3, #8
 8002416:	4313      	orrs	r3, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	7812      	ldrb	r2, [r2, #0]
 800241c:	4610      	mov	r0, r2
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	6811      	ldr	r1, [r2, #0]
 8002422:	ea43 0200 	orr.w	r2, r3, r0
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	440b      	add	r3, r1
 800242c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002430:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	3318      	adds	r3, #24
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	4413      	add	r3, r2
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	6811      	ldr	r1, [r2, #0]
 8002444:	f043 0201 	orr.w	r2, r3, #1
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3318      	adds	r3, #24
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	440b      	add	r3, r1
 8002450:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e00e      	b.n	8002474 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e006      	b.n	8002474 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
  }
}
 8002474:	4618      	mov	r0, r3
 8002476:	3724      	adds	r7, #36	@ 0x24
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002492:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002494:	7afb      	ldrb	r3, [r7, #11]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d002      	beq.n	80024a0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800249a:	7afb      	ldrb	r3, [r7, #11]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d11d      	bne.n	80024dc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3301      	adds	r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3301      	adds	r3, #1
 80024c6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3301      	adds	r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80024dc:	68fb      	ldr	r3, [r7, #12]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80024ea:	b480      	push	{r7}
 80024ec:	b087      	sub	sp, #28
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024fe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002500:	7dfb      	ldrb	r3, [r7, #23]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d003      	beq.n	800250e <HAL_CAN_GetRxMessage+0x24>
 8002506:	7dfb      	ldrb	r3, [r7, #23]
 8002508:	2b02      	cmp	r3, #2
 800250a:	f040 8103 	bne.w	8002714 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10e      	bne.n	8002532 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d116      	bne.n	8002550 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0f7      	b.n	8002722 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d107      	bne.n	8002550 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002544:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0e8      	b.n	8002722 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	331b      	adds	r3, #27
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	4413      	add	r3, r2
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0204 	and.w	r2, r3, #4
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10c      	bne.n	8002588 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	331b      	adds	r3, #27
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	4413      	add	r3, r2
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0d5b      	lsrs	r3, r3, #21
 800257e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e00b      	b.n	80025a0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	331b      	adds	r3, #27
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	4413      	add	r3, r2
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	08db      	lsrs	r3, r3, #3
 8002598:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	331b      	adds	r3, #27
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	4413      	add	r3, r2
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0202 	and.w	r2, r3, #2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	331b      	adds	r3, #27
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	4413      	add	r3, r2
 80025c2:	3304      	adds	r3, #4
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2208      	movs	r2, #8
 80025d2:	611a      	str	r2, [r3, #16]
 80025d4:	e00b      	b.n	80025ee <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	331b      	adds	r3, #27
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	4413      	add	r3, r2
 80025e2:	3304      	adds	r3, #4
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 020f 	and.w	r2, r3, #15
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	331b      	adds	r3, #27
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	4413      	add	r3, r2
 80025fa:	3304      	adds	r3, #4
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	b2da      	uxtb	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	331b      	adds	r3, #27
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	0c1b      	lsrs	r3, r3, #16
 8002618:	b29a      	uxth	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	4413      	add	r3, r2
 8002628:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	b2da      	uxtb	r2, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	4413      	add	r3, r2
 800263e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	0a1a      	lsrs	r2, r3, #8
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	3301      	adds	r3, #1
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	4413      	add	r3, r2
 8002658:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	0c1a      	lsrs	r2, r3, #16
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	3302      	adds	r3, #2
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	4413      	add	r3, r2
 8002672:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0e1a      	lsrs	r2, r3, #24
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	3303      	adds	r3, #3
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	4413      	add	r3, r2
 800268c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	3304      	adds	r3, #4
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	0a1a      	lsrs	r2, r3, #8
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	3305      	adds	r3, #5
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	4413      	add	r3, r2
 80026be:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0c1a      	lsrs	r2, r3, #16
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	3306      	adds	r3, #6
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	0e1a      	lsrs	r2, r3, #24
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	3307      	adds	r3, #7
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d108      	bne.n	8002700 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f042 0220 	orr.w	r2, r2, #32
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	e007      	b.n	8002710 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0220 	orr.w	r2, r2, #32
 800270e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	e006      	b.n	8002722 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
  }
}
 8002722:	4618      	mov	r0, r3
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800272e:	b480      	push	{r7}
 8002730:	b085      	sub	sp, #20
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800273e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d002      	beq.n	800274c <HAL_CAN_ActivateNotification+0x1e>
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d109      	bne.n	8002760 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6959      	ldr	r1, [r3, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800275c:	2300      	movs	r3, #0
 800275e:	e006      	b.n	800276e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
  }
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b08a      	sub	sp, #40	@ 0x28
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002782:	2300      	movs	r3, #0
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d07c      	beq.n	80028ba <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d023      	beq.n	8002812 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2201      	movs	r2, #1
 80027d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f983 	bl	8002ae8 <HAL_CAN_TxMailbox0CompleteCallback>
 80027e2:	e016      	b.n	8002812 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d004      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027f6:	e00c      	b.n	8002812 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d004      	beq.n	800280c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002804:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002808:	627b      	str	r3, [r7, #36]	@ 0x24
 800280a:	e002      	b.n	8002812 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f989 	bl	8002b24 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d024      	beq.n	8002866 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002824:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f963 	bl	8002afc <HAL_CAN_TxMailbox1CompleteCallback>
 8002836:	e016      	b.n	8002866 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283e:	2b00      	cmp	r3, #0
 8002840:	d004      	beq.n	800284c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002848:	627b      	str	r3, [r7, #36]	@ 0x24
 800284a:	e00c      	b.n	8002866 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002852:	2b00      	cmp	r3, #0
 8002854:	d004      	beq.n	8002860 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800285c:	627b      	str	r3, [r7, #36]	@ 0x24
 800285e:	e002      	b.n	8002866 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f969 	bl	8002b38 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d024      	beq.n	80028ba <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002878:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f943 	bl	8002b10 <HAL_CAN_TxMailbox2CompleteCallback>
 800288a:	e016      	b.n	80028ba <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d004      	beq.n	80028a0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800289c:	627b      	str	r3, [r7, #36]	@ 0x24
 800289e:	e00c      	b.n	80028ba <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d004      	beq.n	80028b4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b2:	e002      	b.n	80028ba <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f949 	bl	8002b4c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00c      	beq.n	80028de <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028d4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2210      	movs	r2, #16
 80028dc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00b      	beq.n	8002900 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d006      	beq.n	8002900 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2208      	movs	r2, #8
 80028f8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f930 	bl	8002b60 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7fe fa63 	bl	8000de4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00c      	beq.n	8002942 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f003 0310 	and.w	r3, r3, #16
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002938:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2210      	movs	r2, #16
 8002940:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00b      	beq.n	8002964 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d006      	beq.n	8002964 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2208      	movs	r2, #8
 800295c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f912 	bl	8002b88 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f8f9 	bl	8002b74 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00b      	beq.n	80029a4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	2b00      	cmp	r3, #0
 8002994:	d006      	beq.n	80029a4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2210      	movs	r2, #16
 800299c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f8fc 	bl	8002b9c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00b      	beq.n	80029c6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d006      	beq.n	80029c6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2208      	movs	r2, #8
 80029be:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f8f5 	bl	8002bb0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d07b      	beq.n	8002ac8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d072      	beq.n	8002ac0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	f043 0302 	orr.w	r3, r3, #2
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d043      	beq.n	8002ac0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d03e      	beq.n	8002ac0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a48:	2b60      	cmp	r3, #96	@ 0x60
 8002a4a:	d02b      	beq.n	8002aa4 <HAL_CAN_IRQHandler+0x32a>
 8002a4c:	2b60      	cmp	r3, #96	@ 0x60
 8002a4e:	d82e      	bhi.n	8002aae <HAL_CAN_IRQHandler+0x334>
 8002a50:	2b50      	cmp	r3, #80	@ 0x50
 8002a52:	d022      	beq.n	8002a9a <HAL_CAN_IRQHandler+0x320>
 8002a54:	2b50      	cmp	r3, #80	@ 0x50
 8002a56:	d82a      	bhi.n	8002aae <HAL_CAN_IRQHandler+0x334>
 8002a58:	2b40      	cmp	r3, #64	@ 0x40
 8002a5a:	d019      	beq.n	8002a90 <HAL_CAN_IRQHandler+0x316>
 8002a5c:	2b40      	cmp	r3, #64	@ 0x40
 8002a5e:	d826      	bhi.n	8002aae <HAL_CAN_IRQHandler+0x334>
 8002a60:	2b30      	cmp	r3, #48	@ 0x30
 8002a62:	d010      	beq.n	8002a86 <HAL_CAN_IRQHandler+0x30c>
 8002a64:	2b30      	cmp	r3, #48	@ 0x30
 8002a66:	d822      	bhi.n	8002aae <HAL_CAN_IRQHandler+0x334>
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d002      	beq.n	8002a72 <HAL_CAN_IRQHandler+0x2f8>
 8002a6c:	2b20      	cmp	r3, #32
 8002a6e:	d005      	beq.n	8002a7c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a70:	e01d      	b.n	8002aae <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	f043 0308 	orr.w	r3, r3, #8
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a7a:	e019      	b.n	8002ab0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	f043 0310 	orr.w	r3, r3, #16
 8002a82:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a84:	e014      	b.n	8002ab0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	f043 0320 	orr.w	r3, r3, #32
 8002a8c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a8e:	e00f      	b.n	8002ab0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a98:	e00a      	b.n	8002ab0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002aa2:	e005      	b.n	8002ab0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aaa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002aac:	e000      	b.n	8002ab0 <HAL_CAN_IRQHandler+0x336>
            break;
 8002aae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002abe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f872 	bl	8002bc4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	3728      	adds	r7, #40	@ 0x28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c1c <__NVIC_SetPriorityGrouping+0x44>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c0a:	4a04      	ldr	r2, [pc, #16]	@ (8002c1c <__NVIC_SetPriorityGrouping+0x44>)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	60d3      	str	r3, [r2, #12]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c24:	4b04      	ldr	r3, [pc, #16]	@ (8002c38 <__NVIC_GetPriorityGrouping+0x18>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	f003 0307 	and.w	r3, r3, #7
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	db0b      	blt.n	8002c66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	4907      	ldr	r1, [pc, #28]	@ (8002c74 <__NVIC_EnableIRQ+0x38>)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000e100 	.word	0xe000e100

08002c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	6039      	str	r1, [r7, #0]
 8002c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	db0a      	blt.n	8002ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	490c      	ldr	r1, [pc, #48]	@ (8002cc4 <__NVIC_SetPriority+0x4c>)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	0112      	lsls	r2, r2, #4
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca0:	e00a      	b.n	8002cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	4908      	ldr	r1, [pc, #32]	@ (8002cc8 <__NVIC_SetPriority+0x50>)
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	3b04      	subs	r3, #4
 8002cb0:	0112      	lsls	r2, r2, #4
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	761a      	strb	r2, [r3, #24]
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000e100 	.word	0xe000e100
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b089      	sub	sp, #36	@ 0x24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f1c3 0307 	rsb	r3, r3, #7
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	bf28      	it	cs
 8002cea:	2304      	movcs	r3, #4
 8002cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	2b06      	cmp	r3, #6
 8002cf4:	d902      	bls.n	8002cfc <NVIC_EncodePriority+0x30>
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3b03      	subs	r3, #3
 8002cfa:	e000      	b.n	8002cfe <NVIC_EncodePriority+0x32>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d00:	f04f 32ff 	mov.w	r2, #4294967295
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	401a      	ands	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d14:	f04f 31ff 	mov.w	r1, #4294967295
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	43d9      	mvns	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d24:	4313      	orrs	r3, r2
         );
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3724      	adds	r7, #36	@ 0x24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ff4c 	bl	8002bd8 <__NVIC_SetPriorityGrouping>
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d5a:	f7ff ff61 	bl	8002c20 <__NVIC_GetPriorityGrouping>
 8002d5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	6978      	ldr	r0, [r7, #20]
 8002d66:	f7ff ffb1 	bl	8002ccc <NVIC_EncodePriority>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ff80 	bl	8002c78 <__NVIC_SetPriority>
}
 8002d78:	bf00      	nop
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ff54 	bl	8002c3c <__NVIC_EnableIRQ>
}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e014      	b.n	8002dd8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	791b      	ldrb	r3, [r3, #4]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d105      	bne.n	8002dc4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fe fe72 	bl	8001aa8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	795b      	ldrb	r3, [r3, #5]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_DAC_Start+0x16>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e03b      	b.n	8002e6e <HAL_DAC_Start+0x8e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6819      	ldr	r1, [r3, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2201      	movs	r2, #1
 8002e10:	409a      	lsls	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10f      	bne.n	8002e40 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d118      	bne.n	8002e60 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	e00f      	b.n	8002e60 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002e4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002e4e:	d107      	bne.n	8002e60 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0202 	orr.w	r2, r2, #2
 8002e5e:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e90:	d120      	bne.n	8002ed4 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ea0:	d118      	bne.n	8002ed4 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	f043 0201 	orr.w	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ebc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ecc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f852 	bl	8002f78 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ede:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ee2:	d120      	bne.n	8002f26 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ef2:	d118      	bne.n	8002f26 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f043 0202 	orr.w	r2, r3, #2
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002f0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002f1e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f95a 	bl	80031da <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8002f26:	bf00      	nop
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b087      	sub	sp, #28
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	3308      	adds	r3, #8
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	e004      	b.n	8002f62 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3314      	adds	r3, #20
 8002f60:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	461a      	mov	r2, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	795b      	ldrb	r3, [r3, #5]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_DAC_ConfigChannel+0x1c>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e114      	b.n	80031d2 <HAL_DAC_ConfigChannel+0x246>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	f040 8081 	bne.w	80030c0 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002fbe:	f7fe ff3f 	bl	8001e40 <HAL_GetTick>
 8002fc2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d140      	bne.n	800304c <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002fca:	e018      	b.n	8002ffe <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002fcc:	f7fe ff38 	bl	8001e40 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d911      	bls.n	8002ffe <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00a      	beq.n	8002ffe <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f043 0208 	orr.w	r2, r3, #8
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e0e9      	b.n	80031d2 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003004:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1df      	bne.n	8002fcc <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800300c:	2001      	movs	r0, #1
 800300e:	f7fe ff23 	bl	8001e58 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	6992      	ldr	r2, [r2, #24]
 800301a:	641a      	str	r2, [r3, #64]	@ 0x40
 800301c:	e023      	b.n	8003066 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800301e:	f7fe ff0f 	bl	8001e40 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d90f      	bls.n	800304c <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003032:	2b00      	cmp	r3, #0
 8003034:	da0a      	bge.n	800304c <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f043 0208 	orr.w	r2, r3, #8
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2203      	movs	r2, #3
 8003046:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e0c2      	b.n	80031d2 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003052:	2b00      	cmp	r3, #0
 8003054:	dbe3      	blt.n	800301e <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003056:	2001      	movs	r0, #1
 8003058:	f7fe fefe 	bl	8001e58 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	6992      	ldr	r2, [r2, #24]
 8003064:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003076:	fa01 f303 	lsl.w	r3, r1, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	ea02 0103 	and.w	r1, r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	69da      	ldr	r2, [r3, #28]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	409a      	lsls	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	21ff      	movs	r1, #255	@ 0xff
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	ea02 0103 	and.w	r1, r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	6a1a      	ldr	r2, [r3, #32]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	409a      	lsls	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d11d      	bne.n	8003104 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ce:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	221f      	movs	r2, #31
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800310a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2207      	movs	r2, #7
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	431a      	orrs	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	4313      	orrs	r3, r2
 8003130:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f003 0310 	and.w	r3, r3, #16
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6819      	ldr	r1, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43da      	mvns	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	400a      	ands	r2, r1
 8003168:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f003 0310 	and.w	r3, r3, #16
 8003178:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6819      	ldr	r1, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f003 0310 	and.w	r3, r3, #16
 80031b4:	22c0      	movs	r2, #192	@ 0xc0
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43da      	mvns	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	400a      	ands	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031fe:	e166      	b.n	80034ce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	2101      	movs	r1, #1
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	4013      	ands	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 8158 	beq.w	80034c8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d005      	beq.n	8003230 <HAL_GPIO_Init+0x40>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d130      	bne.n	8003292 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	2203      	movs	r2, #3
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003266:	2201      	movs	r2, #1
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4013      	ands	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	f003 0201 	and.w	r2, r3, #1
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b03      	cmp	r3, #3
 800329c:	d017      	beq.n	80032ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	2203      	movs	r2, #3
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4013      	ands	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d123      	bne.n	8003322 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	08da      	lsrs	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3208      	adds	r2, #8
 80032e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	220f      	movs	r2, #15
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	08da      	lsrs	r2, r3, #3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3208      	adds	r2, #8
 800331c:	6939      	ldr	r1, [r7, #16]
 800331e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	2203      	movs	r2, #3
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0203 	and.w	r2, r3, #3
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 80b2 	beq.w	80034c8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003364:	4b61      	ldr	r3, [pc, #388]	@ (80034ec <HAL_GPIO_Init+0x2fc>)
 8003366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003368:	4a60      	ldr	r2, [pc, #384]	@ (80034ec <HAL_GPIO_Init+0x2fc>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003370:	4b5e      	ldr	r3, [pc, #376]	@ (80034ec <HAL_GPIO_Init+0x2fc>)
 8003372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800337c:	4a5c      	ldr	r2, [pc, #368]	@ (80034f0 <HAL_GPIO_Init+0x300>)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	089b      	lsrs	r3, r3, #2
 8003382:	3302      	adds	r3, #2
 8003384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003388:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	220f      	movs	r2, #15
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	43db      	mvns	r3, r3
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4013      	ands	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033a6:	d02b      	beq.n	8003400 <HAL_GPIO_Init+0x210>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a52      	ldr	r2, [pc, #328]	@ (80034f4 <HAL_GPIO_Init+0x304>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d025      	beq.n	80033fc <HAL_GPIO_Init+0x20c>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a51      	ldr	r2, [pc, #324]	@ (80034f8 <HAL_GPIO_Init+0x308>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d01f      	beq.n	80033f8 <HAL_GPIO_Init+0x208>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a50      	ldr	r2, [pc, #320]	@ (80034fc <HAL_GPIO_Init+0x30c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d019      	beq.n	80033f4 <HAL_GPIO_Init+0x204>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a4f      	ldr	r2, [pc, #316]	@ (8003500 <HAL_GPIO_Init+0x310>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d013      	beq.n	80033f0 <HAL_GPIO_Init+0x200>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a4e      	ldr	r2, [pc, #312]	@ (8003504 <HAL_GPIO_Init+0x314>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d00d      	beq.n	80033ec <HAL_GPIO_Init+0x1fc>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a4d      	ldr	r2, [pc, #308]	@ (8003508 <HAL_GPIO_Init+0x318>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d007      	beq.n	80033e8 <HAL_GPIO_Init+0x1f8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a4c      	ldr	r2, [pc, #304]	@ (800350c <HAL_GPIO_Init+0x31c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d101      	bne.n	80033e4 <HAL_GPIO_Init+0x1f4>
 80033e0:	2307      	movs	r3, #7
 80033e2:	e00e      	b.n	8003402 <HAL_GPIO_Init+0x212>
 80033e4:	2308      	movs	r3, #8
 80033e6:	e00c      	b.n	8003402 <HAL_GPIO_Init+0x212>
 80033e8:	2306      	movs	r3, #6
 80033ea:	e00a      	b.n	8003402 <HAL_GPIO_Init+0x212>
 80033ec:	2305      	movs	r3, #5
 80033ee:	e008      	b.n	8003402 <HAL_GPIO_Init+0x212>
 80033f0:	2304      	movs	r3, #4
 80033f2:	e006      	b.n	8003402 <HAL_GPIO_Init+0x212>
 80033f4:	2303      	movs	r3, #3
 80033f6:	e004      	b.n	8003402 <HAL_GPIO_Init+0x212>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e002      	b.n	8003402 <HAL_GPIO_Init+0x212>
 80033fc:	2301      	movs	r3, #1
 80033fe:	e000      	b.n	8003402 <HAL_GPIO_Init+0x212>
 8003400:	2300      	movs	r3, #0
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	f002 0203 	and.w	r2, r2, #3
 8003408:	0092      	lsls	r2, r2, #2
 800340a:	4093      	lsls	r3, r2
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003412:	4937      	ldr	r1, [pc, #220]	@ (80034f0 <HAL_GPIO_Init+0x300>)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	3302      	adds	r3, #2
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003420:	4b3b      	ldr	r3, [pc, #236]	@ (8003510 <HAL_GPIO_Init+0x320>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43db      	mvns	r3, r3
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4013      	ands	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d003      	beq.n	8003444 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003444:	4a32      	ldr	r2, [pc, #200]	@ (8003510 <HAL_GPIO_Init+0x320>)
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800344a:	4b31      	ldr	r3, [pc, #196]	@ (8003510 <HAL_GPIO_Init+0x320>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	43db      	mvns	r3, r3
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4013      	ands	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800346e:	4a28      	ldr	r2, [pc, #160]	@ (8003510 <HAL_GPIO_Init+0x320>)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003474:	4b26      	ldr	r3, [pc, #152]	@ (8003510 <HAL_GPIO_Init+0x320>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	43db      	mvns	r3, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4013      	ands	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d003      	beq.n	8003498 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003498:	4a1d      	ldr	r2, [pc, #116]	@ (8003510 <HAL_GPIO_Init+0x320>)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800349e:	4b1c      	ldr	r3, [pc, #112]	@ (8003510 <HAL_GPIO_Init+0x320>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	43db      	mvns	r3, r3
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034c2:	4a13      	ldr	r2, [pc, #76]	@ (8003510 <HAL_GPIO_Init+0x320>)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	3301      	adds	r3, #1
 80034cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	fa22 f303 	lsr.w	r3, r2, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f47f ae91 	bne.w	8003200 <HAL_GPIO_Init+0x10>
  }
}
 80034de:	bf00      	nop
 80034e0:	bf00      	nop
 80034e2:	371c      	adds	r7, #28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40010000 	.word	0x40010000
 80034f4:	48000400 	.word	0x48000400
 80034f8:	48000800 	.word	0x48000800
 80034fc:	48000c00 	.word	0x48000c00
 8003500:	48001000 	.word	0x48001000
 8003504:	48001400 	.word	0x48001400
 8003508:	48001800 	.word	0x48001800
 800350c:	48001c00 	.word	0x48001c00
 8003510:	40010400 	.word	0x40010400

08003514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	460b      	mov	r3, r1
 800351e:	807b      	strh	r3, [r7, #2]
 8003520:	4613      	mov	r3, r2
 8003522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003524:	787b      	ldrb	r3, [r7, #1]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800352a:	887a      	ldrh	r2, [r7, #2]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003530:	e002      	b.n	8003538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003532:	887a      	ldrh	r2, [r7, #2]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003556:	887a      	ldrh	r2, [r7, #2]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4013      	ands	r3, r2
 800355c:	041a      	lsls	r2, r3, #16
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	43d9      	mvns	r1, r3
 8003562:	887b      	ldrh	r3, [r7, #2]
 8003564:	400b      	ands	r3, r1
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	619a      	str	r2, [r3, #24]
}
 800356c:	bf00      	nop
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003582:	4b08      	ldr	r3, [pc, #32]	@ (80035a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003584:	695a      	ldr	r2, [r3, #20]
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	4013      	ands	r3, r2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d006      	beq.n	800359c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800358e:	4a05      	ldr	r2, [pc, #20]	@ (80035a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003590:	88fb      	ldrh	r3, [r7, #6]
 8003592:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd fbda 	bl	8000d50 <HAL_GPIO_EXTI_Callback>
  }
}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40010400 	.word	0x40010400

080035a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e08d      	b.n	80036d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fe fab0 	bl	8001b34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2224      	movs	r2, #36	@ 0x24
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0201 	bic.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003608:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d107      	bne.n	8003622 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	e006      	b.n	8003630 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800362e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d108      	bne.n	800364a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	e007      	b.n	800365a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003658:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003668:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800366c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800367c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	69d9      	ldr	r1, [r3, #28]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1a      	ldr	r2, [r3, #32]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	4608      	mov	r0, r1
 80036ea:	4611      	mov	r1, r2
 80036ec:	461a      	mov	r2, r3
 80036ee:	4603      	mov	r3, r0
 80036f0:	817b      	strh	r3, [r7, #10]
 80036f2:	460b      	mov	r3, r1
 80036f4:	813b      	strh	r3, [r7, #8]
 80036f6:	4613      	mov	r3, r2
 80036f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b20      	cmp	r3, #32
 8003704:	f040 80f9 	bne.w	80038fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <HAL_I2C_Mem_Write+0x34>
 800370e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003710:	2b00      	cmp	r3, #0
 8003712:	d105      	bne.n	8003720 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800371a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0ed      	b.n	80038fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_I2C_Mem_Write+0x4e>
 800372a:	2302      	movs	r3, #2
 800372c:	e0e6      	b.n	80038fc <HAL_I2C_Mem_Write+0x21c>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003736:	f7fe fb83 	bl	8001e40 <HAL_GetTick>
 800373a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2319      	movs	r3, #25
 8003742:	2201      	movs	r2, #1
 8003744:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fac3 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0d1      	b.n	80038fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2221      	movs	r2, #33	@ 0x21
 800375c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2240      	movs	r2, #64	@ 0x40
 8003764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a3a      	ldr	r2, [r7, #32]
 8003772:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003778:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003780:	88f8      	ldrh	r0, [r7, #6]
 8003782:	893a      	ldrh	r2, [r7, #8]
 8003784:	8979      	ldrh	r1, [r7, #10]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	9301      	str	r3, [sp, #4]
 800378a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	4603      	mov	r3, r0
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f9d3 	bl	8003b3c <I2C_RequestMemoryWrite>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0a9      	b.n	80038fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	2bff      	cmp	r3, #255	@ 0xff
 80037b0:	d90e      	bls.n	80037d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	22ff      	movs	r2, #255	@ 0xff
 80037b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	8979      	ldrh	r1, [r7, #10]
 80037c0:	2300      	movs	r3, #0
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 fc47 	bl	800405c <I2C_TransferConfig>
 80037ce:	e00f      	b.n	80037f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	8979      	ldrh	r1, [r7, #10]
 80037e2:	2300      	movs	r3, #0
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 fc36 	bl	800405c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 fac6 	bl	8003d86 <I2C_WaitOnTXISFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e07b      	b.n	80038fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d034      	beq.n	80038a8 <HAL_I2C_Mem_Write+0x1c8>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003842:	2b00      	cmp	r3, #0
 8003844:	d130      	bne.n	80038a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384c:	2200      	movs	r2, #0
 800384e:	2180      	movs	r1, #128	@ 0x80
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fa3f 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e04d      	b.n	80038fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	2bff      	cmp	r3, #255	@ 0xff
 8003868:	d90e      	bls.n	8003888 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	22ff      	movs	r2, #255	@ 0xff
 800386e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003874:	b2da      	uxtb	r2, r3
 8003876:	8979      	ldrh	r1, [r7, #10]
 8003878:	2300      	movs	r3, #0
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 fbeb 	bl	800405c <I2C_TransferConfig>
 8003886:	e00f      	b.n	80038a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003896:	b2da      	uxtb	r2, r3
 8003898:	8979      	ldrh	r1, [r7, #10]
 800389a:	2300      	movs	r3, #0
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fbda 	bl	800405c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d19e      	bne.n	80037f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 faac 	bl	8003e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e01a      	b.n	80038fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2220      	movs	r2, #32
 80038cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003904 <HAL_I2C_Mem_Write+0x224>)
 80038da:	400b      	ands	r3, r1
 80038dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	e000      	b.n	80038fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80038fa:	2302      	movs	r3, #2
  }
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	fe00e800 	.word	0xfe00e800

08003908 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	4608      	mov	r0, r1
 8003912:	4611      	mov	r1, r2
 8003914:	461a      	mov	r2, r3
 8003916:	4603      	mov	r3, r0
 8003918:	817b      	strh	r3, [r7, #10]
 800391a:	460b      	mov	r3, r1
 800391c:	813b      	strh	r3, [r7, #8]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b20      	cmp	r3, #32
 800392c:	f040 80fd 	bne.w	8003b2a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <HAL_I2C_Mem_Read+0x34>
 8003936:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003938:	2b00      	cmp	r3, #0
 800393a:	d105      	bne.n	8003948 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003942:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0f1      	b.n	8003b2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_I2C_Mem_Read+0x4e>
 8003952:	2302      	movs	r3, #2
 8003954:	e0ea      	b.n	8003b2c <HAL_I2C_Mem_Read+0x224>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800395e:	f7fe fa6f 	bl	8001e40 <HAL_GetTick>
 8003962:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	2319      	movs	r3, #25
 800396a:	2201      	movs	r2, #1
 800396c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f9af 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0d5      	b.n	8003b2c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2222      	movs	r2, #34	@ 0x22
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2240      	movs	r2, #64	@ 0x40
 800398c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a3a      	ldr	r2, [r7, #32]
 800399a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80039a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039a8:	88f8      	ldrh	r0, [r7, #6]
 80039aa:	893a      	ldrh	r2, [r7, #8]
 80039ac:	8979      	ldrh	r1, [r7, #10]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	4603      	mov	r3, r0
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f913 	bl	8003be4 <I2C_RequestMemoryRead>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e0ad      	b.n	8003b2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2bff      	cmp	r3, #255	@ 0xff
 80039d8:	d90e      	bls.n	80039f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	8979      	ldrh	r1, [r7, #10]
 80039e8:	4b52      	ldr	r3, [pc, #328]	@ (8003b34 <HAL_I2C_Mem_Read+0x22c>)
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 fb33 	bl	800405c <I2C_TransferConfig>
 80039f6:	e00f      	b.n	8003a18 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	8979      	ldrh	r1, [r7, #10]
 8003a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b34 <HAL_I2C_Mem_Read+0x22c>)
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 fb22 	bl	800405c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2104      	movs	r1, #4
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f956 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e07c      	b.n	8003b2c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d034      	beq.n	8003ad8 <HAL_I2C_Mem_Read+0x1d0>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d130      	bne.n	8003ad8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	9300      	str	r3, [sp, #0]
 8003a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	2180      	movs	r1, #128	@ 0x80
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f927 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e04d      	b.n	8003b2c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2bff      	cmp	r3, #255	@ 0xff
 8003a98:	d90e      	bls.n	8003ab8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	8979      	ldrh	r1, [r7, #10]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 fad3 	bl	800405c <I2C_TransferConfig>
 8003ab6:	e00f      	b.n	8003ad8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	8979      	ldrh	r1, [r7, #10]
 8003aca:	2300      	movs	r3, #0
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fac2 	bl	800405c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d19a      	bne.n	8003a18 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 f994 	bl	8003e14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e01a      	b.n	8003b2c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2220      	movs	r2, #32
 8003afc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <HAL_I2C_Mem_Read+0x230>)
 8003b0a:	400b      	ands	r3, r1
 8003b0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
  }
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	80002400 	.word	0x80002400
 8003b38:	fe00e800 	.word	0xfe00e800

08003b3c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	4608      	mov	r0, r1
 8003b46:	4611      	mov	r1, r2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	817b      	strh	r3, [r7, #10]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	813b      	strh	r3, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	8979      	ldrh	r1, [r7, #10]
 8003b5c:	4b20      	ldr	r3, [pc, #128]	@ (8003be0 <I2C_RequestMemoryWrite+0xa4>)
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fa79 	bl	800405c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	69b9      	ldr	r1, [r7, #24]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f909 	bl	8003d86 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e02c      	b.n	8003bd8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d105      	bne.n	8003b90 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b84:	893b      	ldrh	r3, [r7, #8]
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b8e:	e015      	b.n	8003bbc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b90:	893b      	ldrh	r3, [r7, #8]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b9e:	69fa      	ldr	r2, [r7, #28]
 8003ba0:	69b9      	ldr	r1, [r7, #24]
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f8ef 	bl	8003d86 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e012      	b.n	8003bd8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bb2:	893b      	ldrh	r3, [r7, #8]
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2180      	movs	r1, #128	@ 0x80
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f884 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	80002000 	.word	0x80002000

08003be4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	4608      	mov	r0, r1
 8003bee:	4611      	mov	r1, r2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	817b      	strh	r3, [r7, #10]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	813b      	strh	r3, [r7, #8]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003bfe:	88fb      	ldrh	r3, [r7, #6]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	8979      	ldrh	r1, [r7, #10]
 8003c04:	4b20      	ldr	r3, [pc, #128]	@ (8003c88 <I2C_RequestMemoryRead+0xa4>)
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fa26 	bl	800405c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	69b9      	ldr	r1, [r7, #24]
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 f8b6 	bl	8003d86 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e02c      	b.n	8003c7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c24:	88fb      	ldrh	r3, [r7, #6]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d105      	bne.n	8003c36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c2a:	893b      	ldrh	r3, [r7, #8]
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c34:	e015      	b.n	8003c62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c36:	893b      	ldrh	r3, [r7, #8]
 8003c38:	0a1b      	lsrs	r3, r3, #8
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c44:	69fa      	ldr	r2, [r7, #28]
 8003c46:	69b9      	ldr	r1, [r7, #24]
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f89c 	bl	8003d86 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e012      	b.n	8003c7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c58:	893b      	ldrh	r3, [r7, #8]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2140      	movs	r1, #64	@ 0x40
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f831 	bl	8003cd4 <I2C_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	80002000 	.word	0x80002000

08003c8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d103      	bne.n	8003caa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d007      	beq.n	8003cc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	619a      	str	r2, [r3, #24]
  }
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ce4:	e03b      	b.n	8003d5e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	6839      	ldr	r1, [r7, #0]
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f8d6 	bl	8003e9c <I2C_IsErrorOccurred>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e041      	b.n	8003d7e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d00:	d02d      	beq.n	8003d5e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d02:	f7fe f89d 	bl	8001e40 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d302      	bcc.n	8003d18 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d122      	bne.n	8003d5e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	4013      	ands	r3, r2
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	bf0c      	ite	eq
 8003d28:	2301      	moveq	r3, #1
 8003d2a:	2300      	movne	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	461a      	mov	r2, r3
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d113      	bne.n	8003d5e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3a:	f043 0220 	orr.w	r2, r3, #32
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e00f      	b.n	8003d7e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699a      	ldr	r2, [r3, #24]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4013      	ands	r3, r2
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	bf0c      	ite	eq
 8003d6e:	2301      	moveq	r3, #1
 8003d70:	2300      	movne	r3, #0
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	461a      	mov	r2, r3
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d0b4      	beq.n	8003ce6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b084      	sub	sp, #16
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d92:	e033      	b.n	8003dfc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	68b9      	ldr	r1, [r7, #8]
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 f87f 	bl	8003e9c <I2C_IsErrorOccurred>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e031      	b.n	8003e0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d025      	beq.n	8003dfc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db0:	f7fe f846 	bl	8001e40 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d302      	bcc.n	8003dc6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d11a      	bne.n	8003dfc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d013      	beq.n	8003dfc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd8:	f043 0220 	orr.w	r2, r3, #32
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e007      	b.n	8003e0c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d1c4      	bne.n	8003d94 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e20:	e02f      	b.n	8003e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f838 	bl	8003e9c <I2C_IsErrorOccurred>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e02d      	b.n	8003e92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e36:	f7fe f803 	bl	8001e40 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d302      	bcc.n	8003e4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d11a      	bne.n	8003e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	d013      	beq.n	8003e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5e:	f043 0220 	orr.w	r2, r3, #32
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e007      	b.n	8003e92 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d1c8      	bne.n	8003e22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08a      	sub	sp, #40	@ 0x28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d068      	beq.n	8003f9a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2210      	movs	r2, #16
 8003ece:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ed0:	e049      	b.n	8003f66 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d045      	beq.n	8003f66 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003eda:	f7fd ffb1 	bl	8001e40 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <I2C_IsErrorOccurred+0x54>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d13a      	bne.n	8003f66 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003efa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f12:	d121      	bne.n	8003f58 <I2C_IsErrorOccurred+0xbc>
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f1a:	d01d      	beq.n	8003f58 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f1c:	7cfb      	ldrb	r3, [r7, #19]
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d01a      	beq.n	8003f58 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f32:	f7fd ff85 	bl	8001e40 <HAL_GetTick>
 8003f36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f38:	e00e      	b.n	8003f58 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f3a:	f7fd ff81 	bl	8001e40 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b19      	cmp	r3, #25
 8003f46:	d907      	bls.n	8003f58 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	f043 0320 	orr.w	r3, r3, #32
 8003f4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003f56:	e006      	b.n	8003f66 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b20      	cmp	r3, #32
 8003f64:	d1e9      	bne.n	8003f3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b20      	cmp	r3, #32
 8003f72:	d003      	beq.n	8003f7c <I2C_IsErrorOccurred+0xe0>
 8003f74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0aa      	beq.n	8003ed2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d103      	bne.n	8003f8c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	f043 0304 	orr.w	r3, r3, #4
 8003f92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00b      	beq.n	8003fc4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00b      	beq.n	8003fe6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	f043 0308 	orr.w	r3, r3, #8
 8003fd4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00b      	beq.n	8004008 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	f043 0302 	orr.w	r3, r3, #2
 8003ff6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004000:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01c      	beq.n	800404a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f7ff fe3b 	bl	8003c8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6859      	ldr	r1, [r3, #4]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b0d      	ldr	r3, [pc, #52]	@ (8004058 <I2C_IsErrorOccurred+0x1bc>)
 8004022:	400b      	ands	r3, r1
 8004024:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	431a      	orrs	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800404a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800404e:	4618      	mov	r0, r3
 8004050:	3728      	adds	r7, #40	@ 0x28
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	fe00e800 	.word	0xfe00e800

0800405c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	460b      	mov	r3, r1
 8004068:	817b      	strh	r3, [r7, #10]
 800406a:	4613      	mov	r3, r2
 800406c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800406e:	897b      	ldrh	r3, [r7, #10]
 8004070:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004074:	7a7b      	ldrb	r3, [r7, #9]
 8004076:	041b      	lsls	r3, r3, #16
 8004078:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800407c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	4313      	orrs	r3, r2
 8004086:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800408a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	0d5b      	lsrs	r3, r3, #21
 8004096:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800409a:	4b08      	ldr	r3, [pc, #32]	@ (80040bc <I2C_TransferConfig+0x60>)
 800409c:	430b      	orrs	r3, r1
 800409e:	43db      	mvns	r3, r3
 80040a0:	ea02 0103 	and.w	r1, r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040ae:	bf00      	nop
 80040b0:	371c      	adds	r7, #28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	03ff63ff 	.word	0x03ff63ff

080040c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d138      	bne.n	8004148 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e032      	b.n	800414a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2224      	movs	r2, #36	@ 0x24
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0201 	bic.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004112:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6819      	ldr	r1, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	e000      	b.n	800414a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004148:	2302      	movs	r3, #2
  }
}
 800414a:	4618      	mov	r0, r3
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004156:	b480      	push	{r7}
 8004158:	b085      	sub	sp, #20
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b20      	cmp	r3, #32
 800416a:	d139      	bne.n	80041e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004176:	2302      	movs	r3, #2
 8004178:	e033      	b.n	80041e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2224      	movs	r2, #36	@ 0x24
 8004186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0201 	bic.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80041a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	021b      	lsls	r3, r3, #8
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	e000      	b.n	80041e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
  }
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
	...

080041f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041f4:	4b04      	ldr	r3, [pc, #16]	@ (8004208 <HAL_PWREx_GetVoltageRange+0x18>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40007000 	.word	0x40007000

0800420c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800421a:	d130      	bne.n	800427e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800421c:	4b23      	ldr	r3, [pc, #140]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004228:	d038      	beq.n	800429c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800422a:	4b20      	ldr	r3, [pc, #128]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004232:	4a1e      	ldr	r2, [pc, #120]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004234:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004238:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800423a:	4b1d      	ldr	r3, [pc, #116]	@ (80042b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2232      	movs	r2, #50	@ 0x32
 8004240:	fb02 f303 	mul.w	r3, r2, r3
 8004244:	4a1b      	ldr	r2, [pc, #108]	@ (80042b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	0c9b      	lsrs	r3, r3, #18
 800424c:	3301      	adds	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004250:	e002      	b.n	8004258 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3b01      	subs	r3, #1
 8004256:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004258:	4b14      	ldr	r3, [pc, #80]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004264:	d102      	bne.n	800426c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f2      	bne.n	8004252 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800426c:	4b0f      	ldr	r3, [pc, #60]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004278:	d110      	bne.n	800429c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e00f      	b.n	800429e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800427e:	4b0b      	ldr	r3, [pc, #44]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800428a:	d007      	beq.n	800429c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800428c:	4b07      	ldr	r3, [pc, #28]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004294:	4a05      	ldr	r2, [pc, #20]	@ (80042ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800429a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40007000 	.word	0x40007000
 80042b0:	20000000 	.word	0x20000000
 80042b4:	431bde83 	.word	0x431bde83

080042b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b088      	sub	sp, #32
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d102      	bne.n	80042cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	f000 bc08 	b.w	8004adc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042cc:	4b96      	ldr	r3, [pc, #600]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042d6:	4b94      	ldr	r3, [pc, #592]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80e4 	beq.w	80044b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d007      	beq.n	8004304 <HAL_RCC_OscConfig+0x4c>
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2b0c      	cmp	r3, #12
 80042f8:	f040 808b 	bne.w	8004412 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	f040 8087 	bne.w	8004412 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004304:	4b88      	ldr	r3, [pc, #544]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_RCC_OscConfig+0x64>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e3df      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1a      	ldr	r2, [r3, #32]
 8004320:	4b81      	ldr	r3, [pc, #516]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d004      	beq.n	8004336 <HAL_RCC_OscConfig+0x7e>
 800432c:	4b7e      	ldr	r3, [pc, #504]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004334:	e005      	b.n	8004342 <HAL_RCC_OscConfig+0x8a>
 8004336:	4b7c      	ldr	r3, [pc, #496]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004338:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004342:	4293      	cmp	r3, r2
 8004344:	d223      	bcs.n	800438e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fdae 	bl	8004eac <RCC_SetFlashLatencyFromMSIRange>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e3c0      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800435a:	4b73      	ldr	r3, [pc, #460]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a72      	ldr	r2, [pc, #456]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004360:	f043 0308 	orr.w	r3, r3, #8
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	4b70      	ldr	r3, [pc, #448]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	496d      	ldr	r1, [pc, #436]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004374:	4313      	orrs	r3, r2
 8004376:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004378:	4b6b      	ldr	r3, [pc, #428]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	021b      	lsls	r3, r3, #8
 8004386:	4968      	ldr	r1, [pc, #416]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004388:	4313      	orrs	r3, r2
 800438a:	604b      	str	r3, [r1, #4]
 800438c:	e025      	b.n	80043da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800438e:	4b66      	ldr	r3, [pc, #408]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a65      	ldr	r2, [pc, #404]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004394:	f043 0308 	orr.w	r3, r3, #8
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	4b63      	ldr	r3, [pc, #396]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	4960      	ldr	r1, [pc, #384]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	021b      	lsls	r3, r3, #8
 80043ba:	495b      	ldr	r1, [pc, #364]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fd6e 	bl	8004eac <RCC_SetFlashLatencyFromMSIRange>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e380      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043da:	f000 fc87 	bl	8004cec <HAL_RCC_GetSysClockFreq>
 80043de:	4602      	mov	r2, r0
 80043e0:	4b51      	ldr	r3, [pc, #324]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f003 030f 	and.w	r3, r3, #15
 80043ea:	4950      	ldr	r1, [pc, #320]	@ (800452c <HAL_RCC_OscConfig+0x274>)
 80043ec:	5ccb      	ldrb	r3, [r1, r3]
 80043ee:	f003 031f 	and.w	r3, r3, #31
 80043f2:	fa22 f303 	lsr.w	r3, r2, r3
 80043f6:	4a4e      	ldr	r2, [pc, #312]	@ (8004530 <HAL_RCC_OscConfig+0x278>)
 80043f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043fa:	4b4e      	ldr	r3, [pc, #312]	@ (8004534 <HAL_RCC_OscConfig+0x27c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fd fbf6 	bl	8001bf0 <HAL_InitTick>
 8004404:	4603      	mov	r3, r0
 8004406:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d052      	beq.n	80044b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	e364      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d032      	beq.n	8004480 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800441a:	4b43      	ldr	r3, [pc, #268]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a42      	ldr	r2, [pc, #264]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004420:	f043 0301 	orr.w	r3, r3, #1
 8004424:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004426:	f7fd fd0b 	bl	8001e40 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800442c:	e008      	b.n	8004440 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800442e:	f7fd fd07 	bl	8001e40 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e34d      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004440:	4b39      	ldr	r3, [pc, #228]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0f0      	beq.n	800442e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800444c:	4b36      	ldr	r3, [pc, #216]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a35      	ldr	r2, [pc, #212]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004452:	f043 0308 	orr.w	r3, r3, #8
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	4b33      	ldr	r3, [pc, #204]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	4930      	ldr	r1, [pc, #192]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004466:	4313      	orrs	r3, r2
 8004468:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800446a:	4b2f      	ldr	r3, [pc, #188]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	492b      	ldr	r1, [pc, #172]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 800447a:	4313      	orrs	r3, r2
 800447c:	604b      	str	r3, [r1, #4]
 800447e:	e01a      	b.n	80044b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004480:	4b29      	ldr	r3, [pc, #164]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a28      	ldr	r2, [pc, #160]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004486:	f023 0301 	bic.w	r3, r3, #1
 800448a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800448c:	f7fd fcd8 	bl	8001e40 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004494:	f7fd fcd4 	bl	8001e40 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e31a      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044a6:	4b20      	ldr	r3, [pc, #128]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0x1dc>
 80044b2:	e000      	b.n	80044b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d073      	beq.n	80045aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d005      	beq.n	80044d4 <HAL_RCC_OscConfig+0x21c>
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	2b0c      	cmp	r3, #12
 80044cc:	d10e      	bne.n	80044ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d10b      	bne.n	80044ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d4:	4b14      	ldr	r3, [pc, #80]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d063      	beq.n	80045a8 <HAL_RCC_OscConfig+0x2f0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d15f      	bne.n	80045a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e2f7      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044f4:	d106      	bne.n	8004504 <HAL_RCC_OscConfig+0x24c>
 80044f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a0b      	ldr	r2, [pc, #44]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 80044fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e025      	b.n	8004550 <HAL_RCC_OscConfig+0x298>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800450c:	d114      	bne.n	8004538 <HAL_RCC_OscConfig+0x280>
 800450e:	4b06      	ldr	r3, [pc, #24]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a05      	ldr	r2, [pc, #20]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	4b03      	ldr	r3, [pc, #12]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a02      	ldr	r2, [pc, #8]	@ (8004528 <HAL_RCC_OscConfig+0x270>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	e013      	b.n	8004550 <HAL_RCC_OscConfig+0x298>
 8004528:	40021000 	.word	0x40021000
 800452c:	08008d40 	.word	0x08008d40
 8004530:	20000000 	.word	0x20000000
 8004534:	20000004 	.word	0x20000004
 8004538:	4ba0      	ldr	r3, [pc, #640]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a9f      	ldr	r2, [pc, #636]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 800453e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	4b9d      	ldr	r3, [pc, #628]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a9c      	ldr	r2, [pc, #624]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 800454a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800454e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d013      	beq.n	8004580 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004558:	f7fd fc72 	bl	8001e40 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004560:	f7fd fc6e 	bl	8001e40 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b64      	cmp	r3, #100	@ 0x64
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e2b4      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004572:	4b92      	ldr	r3, [pc, #584]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0x2a8>
 800457e:	e014      	b.n	80045aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004580:	f7fd fc5e 	bl	8001e40 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004588:	f7fd fc5a 	bl	8001e40 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	@ 0x64
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e2a0      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800459a:	4b88      	ldr	r3, [pc, #544]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f0      	bne.n	8004588 <HAL_RCC_OscConfig+0x2d0>
 80045a6:	e000      	b.n	80045aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d060      	beq.n	8004678 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b04      	cmp	r3, #4
 80045ba:	d005      	beq.n	80045c8 <HAL_RCC_OscConfig+0x310>
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	2b0c      	cmp	r3, #12
 80045c0:	d119      	bne.n	80045f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d116      	bne.n	80045f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045c8:	4b7c      	ldr	r3, [pc, #496]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_RCC_OscConfig+0x328>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e27d      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e0:	4b76      	ldr	r3, [pc, #472]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	061b      	lsls	r3, r3, #24
 80045ee:	4973      	ldr	r1, [pc, #460]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f4:	e040      	b.n	8004678 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d023      	beq.n	8004646 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045fe:	4b6f      	ldr	r3, [pc, #444]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a6e      	ldr	r2, [pc, #440]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 8004604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460a:	f7fd fc19 	bl	8001e40 <HAL_GetTick>
 800460e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004610:	e008      	b.n	8004624 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004612:	f7fd fc15 	bl	8001e40 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b02      	cmp	r3, #2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e25b      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004624:	4b65      	ldr	r3, [pc, #404]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f0      	beq.n	8004612 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004630:	4b62      	ldr	r3, [pc, #392]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	061b      	lsls	r3, r3, #24
 800463e:	495f      	ldr	r1, [pc, #380]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 8004640:	4313      	orrs	r3, r2
 8004642:	604b      	str	r3, [r1, #4]
 8004644:	e018      	b.n	8004678 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004646:	4b5d      	ldr	r3, [pc, #372]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a5c      	ldr	r2, [pc, #368]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 800464c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004652:	f7fd fbf5 	bl	8001e40 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800465a:	f7fd fbf1 	bl	8001e40 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e237      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800466c:	4b53      	ldr	r3, [pc, #332]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1f0      	bne.n	800465a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d03c      	beq.n	80046fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01c      	beq.n	80046c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800468c:	4b4b      	ldr	r3, [pc, #300]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 800468e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004692:	4a4a      	ldr	r2, [pc, #296]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 8004694:	f043 0301 	orr.w	r3, r3, #1
 8004698:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800469c:	f7fd fbd0 	bl	8001e40 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a4:	f7fd fbcc 	bl	8001e40 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e212      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046b6:	4b41      	ldr	r3, [pc, #260]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 80046b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0ef      	beq.n	80046a4 <HAL_RCC_OscConfig+0x3ec>
 80046c4:	e01b      	b.n	80046fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c6:	4b3d      	ldr	r3, [pc, #244]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 80046c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046cc:	4a3b      	ldr	r2, [pc, #236]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 80046ce:	f023 0301 	bic.w	r3, r3, #1
 80046d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d6:	f7fd fbb3 	bl	8001e40 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046dc:	e008      	b.n	80046f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046de:	f7fd fbaf 	bl	8001e40 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e1f5      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046f0:	4b32      	ldr	r3, [pc, #200]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 80046f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1ef      	bne.n	80046de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 80a6 	beq.w	8004858 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800470c:	2300      	movs	r3, #0
 800470e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004710:	4b2a      	ldr	r3, [pc, #168]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 8004712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10d      	bne.n	8004738 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800471c:	4b27      	ldr	r3, [pc, #156]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 800471e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004720:	4a26      	ldr	r2, [pc, #152]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 8004722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004726:	6593      	str	r3, [r2, #88]	@ 0x58
 8004728:	4b24      	ldr	r3, [pc, #144]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 800472a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800472c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004734:	2301      	movs	r3, #1
 8004736:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004738:	4b21      	ldr	r3, [pc, #132]	@ (80047c0 <HAL_RCC_OscConfig+0x508>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d118      	bne.n	8004776 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004744:	4b1e      	ldr	r3, [pc, #120]	@ (80047c0 <HAL_RCC_OscConfig+0x508>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a1d      	ldr	r2, [pc, #116]	@ (80047c0 <HAL_RCC_OscConfig+0x508>)
 800474a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800474e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004750:	f7fd fb76 	bl	8001e40 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004758:	f7fd fb72 	bl	8001e40 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e1b8      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800476a:	4b15      	ldr	r3, [pc, #84]	@ (80047c0 <HAL_RCC_OscConfig+0x508>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004772:	2b00      	cmp	r3, #0
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d108      	bne.n	8004790 <HAL_RCC_OscConfig+0x4d8>
 800477e:	4b0f      	ldr	r3, [pc, #60]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004784:	4a0d      	ldr	r2, [pc, #52]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800478e:	e029      	b.n	80047e4 <HAL_RCC_OscConfig+0x52c>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b05      	cmp	r3, #5
 8004796:	d115      	bne.n	80047c4 <HAL_RCC_OscConfig+0x50c>
 8004798:	4b08      	ldr	r3, [pc, #32]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 800479a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800479e:	4a07      	ldr	r2, [pc, #28]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 80047a0:	f043 0304 	orr.w	r3, r3, #4
 80047a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047a8:	4b04      	ldr	r3, [pc, #16]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 80047aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ae:	4a03      	ldr	r2, [pc, #12]	@ (80047bc <HAL_RCC_OscConfig+0x504>)
 80047b0:	f043 0301 	orr.w	r3, r3, #1
 80047b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047b8:	e014      	b.n	80047e4 <HAL_RCC_OscConfig+0x52c>
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40007000 	.word	0x40007000
 80047c4:	4b9d      	ldr	r3, [pc, #628]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ca:	4a9c      	ldr	r2, [pc, #624]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 80047cc:	f023 0301 	bic.w	r3, r3, #1
 80047d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047d4:	4b99      	ldr	r3, [pc, #612]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047da:	4a98      	ldr	r2, [pc, #608]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 80047dc:	f023 0304 	bic.w	r3, r3, #4
 80047e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d016      	beq.n	800481a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ec:	f7fd fb28 	bl	8001e40 <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f2:	e00a      	b.n	800480a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f4:	f7fd fb24 	bl	8001e40 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e168      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800480a:	4b8c      	ldr	r3, [pc, #560]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 800480c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d0ed      	beq.n	80047f4 <HAL_RCC_OscConfig+0x53c>
 8004818:	e015      	b.n	8004846 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481a:	f7fd fb11 	bl	8001e40 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004820:	e00a      	b.n	8004838 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f7fd fb0d 	bl	8001e40 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004830:	4293      	cmp	r3, r2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e151      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004838:	4b80      	ldr	r3, [pc, #512]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1ed      	bne.n	8004822 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004846:	7ffb      	ldrb	r3, [r7, #31]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d105      	bne.n	8004858 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484c:	4b7b      	ldr	r3, [pc, #492]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 800484e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004850:	4a7a      	ldr	r2, [pc, #488]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 8004852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004856:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d03c      	beq.n	80048de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01c      	beq.n	80048a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800486c:	4b73      	ldr	r3, [pc, #460]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 800486e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004872:	4a72      	ldr	r2, [pc, #456]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 8004874:	f043 0301 	orr.w	r3, r3, #1
 8004878:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487c:	f7fd fae0 	bl	8001e40 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004884:	f7fd fadc 	bl	8001e40 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e122      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004896:	4b69      	ldr	r3, [pc, #420]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 8004898:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0ef      	beq.n	8004884 <HAL_RCC_OscConfig+0x5cc>
 80048a4:	e01b      	b.n	80048de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048a6:	4b65      	ldr	r3, [pc, #404]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 80048a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048ac:	4a63      	ldr	r2, [pc, #396]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 80048ae:	f023 0301 	bic.w	r3, r3, #1
 80048b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b6:	f7fd fac3 	bl	8001e40 <HAL_GetTick>
 80048ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048bc:	e008      	b.n	80048d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048be:	f7fd fabf 	bl	8001e40 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e105      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048d0:	4b5a      	ldr	r3, [pc, #360]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 80048d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1ef      	bne.n	80048be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f000 80f9 	beq.w	8004ada <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	f040 80cf 	bne.w	8004a90 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048f2:	4b52      	ldr	r3, [pc, #328]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f003 0203 	and.w	r2, r3, #3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004902:	429a      	cmp	r2, r3
 8004904:	d12c      	bne.n	8004960 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004910:	3b01      	subs	r3, #1
 8004912:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004914:	429a      	cmp	r2, r3
 8004916:	d123      	bne.n	8004960 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004922:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d11b      	bne.n	8004960 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004932:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d113      	bne.n	8004960 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	3b01      	subs	r3, #1
 8004946:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004948:	429a      	cmp	r2, r3
 800494a:	d109      	bne.n	8004960 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	3b01      	subs	r3, #1
 800495a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800495c:	429a      	cmp	r2, r3
 800495e:	d071      	beq.n	8004a44 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2b0c      	cmp	r3, #12
 8004964:	d068      	beq.n	8004a38 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004966:	4b35      	ldr	r3, [pc, #212]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d105      	bne.n	800497e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004972:	4b32      	ldr	r3, [pc, #200]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0ac      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004982:	4b2e      	ldr	r3, [pc, #184]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a2d      	ldr	r2, [pc, #180]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 8004988:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800498c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800498e:	f7fd fa57 	bl	8001e40 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004996:	f7fd fa53 	bl	8001e40 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e099      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a8:	4b24      	ldr	r3, [pc, #144]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f0      	bne.n	8004996 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049b4:	4b21      	ldr	r3, [pc, #132]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	4b21      	ldr	r3, [pc, #132]	@ (8004a40 <HAL_RCC_OscConfig+0x788>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80049c4:	3a01      	subs	r2, #1
 80049c6:	0112      	lsls	r2, r2, #4
 80049c8:	4311      	orrs	r1, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80049ce:	0212      	lsls	r2, r2, #8
 80049d0:	4311      	orrs	r1, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049d6:	0852      	lsrs	r2, r2, #1
 80049d8:	3a01      	subs	r2, #1
 80049da:	0552      	lsls	r2, r2, #21
 80049dc:	4311      	orrs	r1, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80049e2:	0852      	lsrs	r2, r2, #1
 80049e4:	3a01      	subs	r2, #1
 80049e6:	0652      	lsls	r2, r2, #25
 80049e8:	4311      	orrs	r1, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80049ee:	06d2      	lsls	r2, r2, #27
 80049f0:	430a      	orrs	r2, r1
 80049f2:	4912      	ldr	r1, [pc, #72]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049f8:	4b10      	ldr	r3, [pc, #64]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a0f      	ldr	r2, [pc, #60]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 80049fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a04:	4b0d      	ldr	r3, [pc, #52]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	4a0c      	ldr	r2, [pc, #48]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 8004a0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a10:	f7fd fa16 	bl	8001e40 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a18:	f7fd fa12 	bl	8001e40 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e058      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a2a:	4b04      	ldr	r3, [pc, #16]	@ (8004a3c <HAL_RCC_OscConfig+0x784>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0f0      	beq.n	8004a18 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a36:	e050      	b.n	8004ada <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e04f      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a44:	4b27      	ldr	r3, [pc, #156]	@ (8004ae4 <HAL_RCC_OscConfig+0x82c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d144      	bne.n	8004ada <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a50:	4b24      	ldr	r3, [pc, #144]	@ (8004ae4 <HAL_RCC_OscConfig+0x82c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a23      	ldr	r2, [pc, #140]	@ (8004ae4 <HAL_RCC_OscConfig+0x82c>)
 8004a56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a5c:	4b21      	ldr	r3, [pc, #132]	@ (8004ae4 <HAL_RCC_OscConfig+0x82c>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	4a20      	ldr	r2, [pc, #128]	@ (8004ae4 <HAL_RCC_OscConfig+0x82c>)
 8004a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a68:	f7fd f9ea 	bl	8001e40 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a70:	f7fd f9e6 	bl	8001e40 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e02c      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a82:	4b18      	ldr	r3, [pc, #96]	@ (8004ae4 <HAL_RCC_OscConfig+0x82c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0f0      	beq.n	8004a70 <HAL_RCC_OscConfig+0x7b8>
 8004a8e:	e024      	b.n	8004ada <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	2b0c      	cmp	r3, #12
 8004a94:	d01f      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a96:	4b13      	ldr	r3, [pc, #76]	@ (8004ae4 <HAL_RCC_OscConfig+0x82c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a12      	ldr	r2, [pc, #72]	@ (8004ae4 <HAL_RCC_OscConfig+0x82c>)
 8004a9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa2:	f7fd f9cd 	bl	8001e40 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aaa:	f7fd f9c9 	bl	8001e40 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e00f      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004abc:	4b09      	ldr	r3, [pc, #36]	@ (8004ae4 <HAL_RCC_OscConfig+0x82c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f0      	bne.n	8004aaa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ac8:	4b06      	ldr	r3, [pc, #24]	@ (8004ae4 <HAL_RCC_OscConfig+0x82c>)
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	4905      	ldr	r1, [pc, #20]	@ (8004ae4 <HAL_RCC_OscConfig+0x82c>)
 8004ace:	4b06      	ldr	r3, [pc, #24]	@ (8004ae8 <HAL_RCC_OscConfig+0x830>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	60cb      	str	r3, [r1, #12]
 8004ad4:	e001      	b.n	8004ada <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3720      	adds	r7, #32
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	feeefffc 	.word	0xfeeefffc

08004aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0e7      	b.n	8004cd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b00:	4b75      	ldr	r3, [pc, #468]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d910      	bls.n	8004b30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0e:	4b72      	ldr	r3, [pc, #456]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f023 0207 	bic.w	r2, r3, #7
 8004b16:	4970      	ldr	r1, [pc, #448]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1e:	4b6e      	ldr	r3, [pc, #440]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0cf      	b.n	8004cd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d010      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	4b66      	ldr	r3, [pc, #408]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d908      	bls.n	8004b5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b4c:	4b63      	ldr	r3, [pc, #396]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4960      	ldr	r1, [pc, #384]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d04c      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d107      	bne.n	8004b82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b72:	4b5a      	ldr	r3, [pc, #360]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d121      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e0a6      	b.n	8004cd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d107      	bne.n	8004b9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b8a:	4b54      	ldr	r3, [pc, #336]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d115      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e09a      	b.n	8004cd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d107      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ba2:	4b4e      	ldr	r3, [pc, #312]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e08e      	b.n	8004cd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bb2:	4b4a      	ldr	r3, [pc, #296]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e086      	b.n	8004cd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bc2:	4b46      	ldr	r3, [pc, #280]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f023 0203 	bic.w	r2, r3, #3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	4943      	ldr	r1, [pc, #268]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd4:	f7fd f934 	bl	8001e40 <HAL_GetTick>
 8004bd8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bda:	e00a      	b.n	8004bf2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bdc:	f7fd f930 	bl	8001e40 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e06e      	b.n	8004cd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf2:	4b3a      	ldr	r3, [pc, #232]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 020c 	and.w	r2, r3, #12
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d1eb      	bne.n	8004bdc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d010      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	4b31      	ldr	r3, [pc, #196]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d208      	bcs.n	8004c32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c20:	4b2e      	ldr	r3, [pc, #184]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	492b      	ldr	r1, [pc, #172]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c32:	4b29      	ldr	r3, [pc, #164]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d210      	bcs.n	8004c62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c40:	4b25      	ldr	r3, [pc, #148]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f023 0207 	bic.w	r2, r3, #7
 8004c48:	4923      	ldr	r1, [pc, #140]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c50:	4b21      	ldr	r3, [pc, #132]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1ec>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d001      	beq.n	8004c62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e036      	b.n	8004cd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d008      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	4918      	ldr	r1, [pc, #96]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d009      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c8c:	4b13      	ldr	r3, [pc, #76]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	4910      	ldr	r1, [pc, #64]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ca0:	f000 f824 	bl	8004cec <HAL_RCC_GetSysClockFreq>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cdc <HAL_RCC_ClockConfig+0x1f0>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	091b      	lsrs	r3, r3, #4
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	490b      	ldr	r1, [pc, #44]	@ (8004ce0 <HAL_RCC_ClockConfig+0x1f4>)
 8004cb2:	5ccb      	ldrb	r3, [r1, r3]
 8004cb4:	f003 031f 	and.w	r3, r3, #31
 8004cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cbc:	4a09      	ldr	r2, [pc, #36]	@ (8004ce4 <HAL_RCC_ClockConfig+0x1f8>)
 8004cbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cc0:	4b09      	ldr	r3, [pc, #36]	@ (8004ce8 <HAL_RCC_ClockConfig+0x1fc>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f7fc ff93 	bl	8001bf0 <HAL_InitTick>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cce:	7afb      	ldrb	r3, [r7, #11]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40022000 	.word	0x40022000
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	08008d40 	.word	0x08008d40
 8004ce4:	20000000 	.word	0x20000000
 8004ce8:	20000004 	.word	0x20000004

08004cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b089      	sub	sp, #36	@ 0x24
 8004cf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 030c 	and.w	r3, r3, #12
 8004d02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d04:	4b3b      	ldr	r3, [pc, #236]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d005      	beq.n	8004d20 <HAL_RCC_GetSysClockFreq+0x34>
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	2b0c      	cmp	r3, #12
 8004d18:	d121      	bne.n	8004d5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d11e      	bne.n	8004d5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d20:	4b34      	ldr	r3, [pc, #208]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d107      	bne.n	8004d3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d2c:	4b31      	ldr	r3, [pc, #196]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d32:	0a1b      	lsrs	r3, r3, #8
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	61fb      	str	r3, [r7, #28]
 8004d3a:	e005      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d48:	4a2b      	ldr	r2, [pc, #172]	@ (8004df8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10d      	bne.n	8004d74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d5c:	e00a      	b.n	8004d74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	d102      	bne.n	8004d6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d64:	4b25      	ldr	r3, [pc, #148]	@ (8004dfc <HAL_RCC_GetSysClockFreq+0x110>)
 8004d66:	61bb      	str	r3, [r7, #24]
 8004d68:	e004      	b.n	8004d74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d101      	bne.n	8004d74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d70:	4b23      	ldr	r3, [pc, #140]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b0c      	cmp	r3, #12
 8004d78:	d134      	bne.n	8004de4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d003      	beq.n	8004d92 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d003      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0xac>
 8004d90:	e005      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d92:	4b1a      	ldr	r3, [pc, #104]	@ (8004dfc <HAL_RCC_GetSysClockFreq+0x110>)
 8004d94:	617b      	str	r3, [r7, #20]
      break;
 8004d96:	e005      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d98:	4b19      	ldr	r3, [pc, #100]	@ (8004e00 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d9a:	617b      	str	r3, [r7, #20]
      break;
 8004d9c:	e002      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	617b      	str	r3, [r7, #20]
      break;
 8004da2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004da4:	4b13      	ldr	r3, [pc, #76]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	3301      	adds	r3, #1
 8004db0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004db2:	4b10      	ldr	r3, [pc, #64]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	0a1b      	lsrs	r3, r3, #8
 8004db8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	fb03 f202 	mul.w	r2, r3, r2
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dca:	4b0a      	ldr	r3, [pc, #40]	@ (8004df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	0e5b      	lsrs	r3, r3, #25
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004de4:	69bb      	ldr	r3, [r7, #24]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3724      	adds	r7, #36	@ 0x24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40021000 	.word	0x40021000
 8004df8:	08008d58 	.word	0x08008d58
 8004dfc:	00f42400 	.word	0x00f42400
 8004e00:	007a1200 	.word	0x007a1200

08004e04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e08:	4b03      	ldr	r3, [pc, #12]	@ (8004e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	20000000 	.word	0x20000000

08004e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e20:	f7ff fff0 	bl	8004e04 <HAL_RCC_GetHCLKFreq>
 8004e24:	4602      	mov	r2, r0
 8004e26:	4b06      	ldr	r3, [pc, #24]	@ (8004e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	0a1b      	lsrs	r3, r3, #8
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	4904      	ldr	r1, [pc, #16]	@ (8004e44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e32:	5ccb      	ldrb	r3, [r1, r3]
 8004e34:	f003 031f 	and.w	r3, r3, #31
 8004e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40021000 	.word	0x40021000
 8004e44:	08008d50 	.word	0x08008d50

08004e48 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	220f      	movs	r2, #15
 8004e56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004e58:	4b12      	ldr	r3, [pc, #72]	@ (8004ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 0203 	and.w	r2, r3, #3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004e64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004e70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004e7c:	4b09      	ldr	r3, [pc, #36]	@ (8004ea4 <HAL_RCC_GetClockConfig+0x5c>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	08db      	lsrs	r3, r3, #3
 8004e82:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004e8a:	4b07      	ldr	r3, [pc, #28]	@ (8004ea8 <HAL_RCC_GetClockConfig+0x60>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0207 	and.w	r2, r3, #7
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	601a      	str	r2, [r3, #0]
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	40022000 	.word	0x40022000

08004eac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ebc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ec4:	f7ff f994 	bl	80041f0 <HAL_PWREx_GetVoltageRange>
 8004ec8:	6178      	str	r0, [r7, #20]
 8004eca:	e014      	b.n	8004ef6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ecc:	4b25      	ldr	r3, [pc, #148]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed0:	4a24      	ldr	r2, [pc, #144]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ed6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ed8:	4b22      	ldr	r3, [pc, #136]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ee4:	f7ff f984 	bl	80041f0 <HAL_PWREx_GetVoltageRange>
 8004ee8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004eea:	4b1e      	ldr	r3, [pc, #120]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eee:	4a1d      	ldr	r2, [pc, #116]	@ (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ef4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004efc:	d10b      	bne.n	8004f16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b80      	cmp	r3, #128	@ 0x80
 8004f02:	d919      	bls.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f08:	d902      	bls.n	8004f10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	e013      	b.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f10:	2301      	movs	r3, #1
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	e010      	b.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b80      	cmp	r3, #128	@ 0x80
 8004f1a:	d902      	bls.n	8004f22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	e00a      	b.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b80      	cmp	r3, #128	@ 0x80
 8004f26:	d102      	bne.n	8004f2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f28:	2302      	movs	r3, #2
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	e004      	b.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b70      	cmp	r3, #112	@ 0x70
 8004f32:	d101      	bne.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f34:	2301      	movs	r3, #1
 8004f36:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f38:	4b0b      	ldr	r3, [pc, #44]	@ (8004f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f023 0207 	bic.w	r2, r3, #7
 8004f40:	4909      	ldr	r1, [pc, #36]	@ (8004f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f48:	4b07      	ldr	r3, [pc, #28]	@ (8004f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d001      	beq.n	8004f5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40022000 	.word	0x40022000

08004f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f74:	2300      	movs	r3, #0
 8004f76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f78:	2300      	movs	r3, #0
 8004f7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d041      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f8c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f90:	d02a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f92:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004f96:	d824      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f9c:	d008      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004fa2:	d81e      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004fa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fac:	d010      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fae:	e018      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fb0:	4b86      	ldr	r3, [pc, #536]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4a85      	ldr	r2, [pc, #532]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fbc:	e015      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 facd 	bl	8005564 <RCCEx_PLLSAI1_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fce:	e00c      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3320      	adds	r3, #32
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fbb6 	bl	8005748 <RCCEx_PLLSAI2_Config>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fe0:	e003      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	74fb      	strb	r3, [r7, #19]
      break;
 8004fe6:	e000      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fea:	7cfb      	ldrb	r3, [r7, #19]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10b      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ff0:	4b76      	ldr	r3, [pc, #472]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ffe:	4973      	ldr	r1, [pc, #460]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005006:	e001      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005008:	7cfb      	ldrb	r3, [r7, #19]
 800500a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d041      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800501c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005020:	d02a      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005022:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005026:	d824      	bhi.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005028:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800502c:	d008      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800502e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005032:	d81e      	bhi.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005038:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800503c:	d010      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800503e:	e018      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005040:	4b62      	ldr	r3, [pc, #392]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	4a61      	ldr	r2, [pc, #388]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005046:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800504a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800504c:	e015      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3304      	adds	r3, #4
 8005052:	2100      	movs	r1, #0
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fa85 	bl	8005564 <RCCEx_PLLSAI1_Config>
 800505a:	4603      	mov	r3, r0
 800505c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800505e:	e00c      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3320      	adds	r3, #32
 8005064:	2100      	movs	r1, #0
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fb6e 	bl	8005748 <RCCEx_PLLSAI2_Config>
 800506c:	4603      	mov	r3, r0
 800506e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005070:	e003      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	74fb      	strb	r3, [r7, #19]
      break;
 8005076:	e000      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800507a:	7cfb      	ldrb	r3, [r7, #19]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005080:	4b52      	ldr	r3, [pc, #328]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005086:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800508e:	494f      	ldr	r1, [pc, #316]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005096:	e001      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005098:	7cfb      	ldrb	r3, [r7, #19]
 800509a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 80a0 	beq.w	80051ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050aa:	2300      	movs	r3, #0
 80050ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050ae:	4b47      	ldr	r3, [pc, #284]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80050be:	2300      	movs	r3, #0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00d      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050c4:	4b41      	ldr	r3, [pc, #260]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c8:	4a40      	ldr	r2, [pc, #256]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80050d0:	4b3e      	ldr	r3, [pc, #248]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d8:	60bb      	str	r3, [r7, #8]
 80050da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050dc:	2301      	movs	r3, #1
 80050de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050e0:	4b3b      	ldr	r3, [pc, #236]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a3a      	ldr	r2, [pc, #232]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050ec:	f7fc fea8 	bl	8001e40 <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050f2:	e009      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f4:	f7fc fea4 	bl	8001e40 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d902      	bls.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	74fb      	strb	r3, [r7, #19]
        break;
 8005106:	e005      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005108:	4b31      	ldr	r3, [pc, #196]	@ (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0ef      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005114:	7cfb      	ldrb	r3, [r7, #19]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d15c      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800511a:	4b2c      	ldr	r3, [pc, #176]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005120:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005124:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01f      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	429a      	cmp	r2, r3
 8005136:	d019      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005138:	4b24      	ldr	r3, [pc, #144]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800513e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005142:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005144:	4b21      	ldr	r3, [pc, #132]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514a:	4a20      	ldr	r2, [pc, #128]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800514c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005154:	4b1d      	ldr	r3, [pc, #116]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800515a:	4a1c      	ldr	r2, [pc, #112]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005164:	4a19      	ldr	r2, [pc, #100]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d016      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005176:	f7fc fe63 	bl	8001e40 <HAL_GetTick>
 800517a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800517c:	e00b      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517e:	f7fc fe5f 	bl	8001e40 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800518c:	4293      	cmp	r3, r2
 800518e:	d902      	bls.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	74fb      	strb	r3, [r7, #19]
            break;
 8005194:	e006      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005196:	4b0d      	ldr	r3, [pc, #52]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0ec      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80051a4:	7cfb      	ldrb	r3, [r7, #19]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10c      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051aa:	4b08      	ldr	r3, [pc, #32]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ba:	4904      	ldr	r1, [pc, #16]	@ (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80051c2:	e009      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	74bb      	strb	r3, [r7, #18]
 80051c8:	e006      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80051ca:	bf00      	nop
 80051cc:	40021000 	.word	0x40021000
 80051d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d4:	7cfb      	ldrb	r3, [r7, #19]
 80051d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051d8:	7c7b      	ldrb	r3, [r7, #17]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d105      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051de:	4ba6      	ldr	r3, [pc, #664]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e2:	4aa5      	ldr	r2, [pc, #660]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051f6:	4ba0      	ldr	r3, [pc, #640]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fc:	f023 0203 	bic.w	r2, r3, #3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005204:	499c      	ldr	r1, [pc, #624]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005218:	4b97      	ldr	r3, [pc, #604]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521e:	f023 020c 	bic.w	r2, r3, #12
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005226:	4994      	ldr	r1, [pc, #592]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800523a:	4b8f      	ldr	r3, [pc, #572]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005240:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005248:	498b      	ldr	r1, [pc, #556]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800525c:	4b86      	ldr	r3, [pc, #536]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800525e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005262:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526a:	4983      	ldr	r1, [pc, #524]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800527e:	4b7e      	ldr	r3, [pc, #504]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005284:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800528c:	497a      	ldr	r1, [pc, #488]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052a0:	4b75      	ldr	r3, [pc, #468]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ae:	4972      	ldr	r1, [pc, #456]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052d0:	4969      	ldr	r1, [pc, #420]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052e4:	4b64      	ldr	r3, [pc, #400]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052f2:	4961      	ldr	r1, [pc, #388]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005306:	4b5c      	ldr	r3, [pc, #368]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800530c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005314:	4958      	ldr	r1, [pc, #352]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005328:	4b53      	ldr	r3, [pc, #332]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005336:	4950      	ldr	r1, [pc, #320]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800534a:	4b4b      	ldr	r3, [pc, #300]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005350:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005358:	4947      	ldr	r1, [pc, #284]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800536c:	4b42      	ldr	r3, [pc, #264]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800536e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005372:	f023 0203 	bic.w	r2, r3, #3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800537a:	493f      	ldr	r1, [pc, #252]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d028      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800538e:	4b3a      	ldr	r3, [pc, #232]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005394:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800539c:	4936      	ldr	r1, [pc, #216]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053ac:	d106      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ae:	4b32      	ldr	r3, [pc, #200]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	4a31      	ldr	r2, [pc, #196]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80053b8:	60d3      	str	r3, [r2, #12]
 80053ba:	e011      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80053c4:	d10c      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3304      	adds	r3, #4
 80053ca:	2101      	movs	r1, #1
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 f8c9 	bl	8005564 <RCCEx_PLLSAI1_Config>
 80053d2:	4603      	mov	r3, r0
 80053d4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053d6:	7cfb      	ldrb	r3, [r7, #19]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80053dc:	7cfb      	ldrb	r3, [r7, #19]
 80053de:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d028      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053ec:	4b22      	ldr	r3, [pc, #136]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053fa:	491f      	ldr	r1, [pc, #124]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005406:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800540a:	d106      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800540c:	4b1a      	ldr	r3, [pc, #104]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	4a19      	ldr	r2, [pc, #100]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005412:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005416:	60d3      	str	r3, [r2, #12]
 8005418:	e011      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800541e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005422:	d10c      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3304      	adds	r3, #4
 8005428:	2101      	movs	r1, #1
 800542a:	4618      	mov	r0, r3
 800542c:	f000 f89a 	bl	8005564 <RCCEx_PLLSAI1_Config>
 8005430:	4603      	mov	r3, r0
 8005432:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005434:	7cfb      	ldrb	r3, [r7, #19]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800543a:	7cfb      	ldrb	r3, [r7, #19]
 800543c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d02a      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800544a:	4b0b      	ldr	r3, [pc, #44]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005450:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005458:	4907      	ldr	r1, [pc, #28]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800545a:	4313      	orrs	r3, r2
 800545c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005464:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005468:	d108      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800546a:	4b03      	ldr	r3, [pc, #12]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	4a02      	ldr	r2, [pc, #8]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005470:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005474:	60d3      	str	r3, [r2, #12]
 8005476:	e013      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005478:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005480:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005484:	d10c      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3304      	adds	r3, #4
 800548a:	2101      	movs	r1, #1
 800548c:	4618      	mov	r0, r3
 800548e:	f000 f869 	bl	8005564 <RCCEx_PLLSAI1_Config>
 8005492:	4603      	mov	r3, r0
 8005494:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005496:	7cfb      	ldrb	r3, [r7, #19]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800549c:	7cfb      	ldrb	r3, [r7, #19]
 800549e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d02f      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054ac:	4b2c      	ldr	r3, [pc, #176]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80054ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054ba:	4929      	ldr	r1, [pc, #164]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054ca:	d10d      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3304      	adds	r3, #4
 80054d0:	2102      	movs	r1, #2
 80054d2:	4618      	mov	r0, r3
 80054d4:	f000 f846 	bl	8005564 <RCCEx_PLLSAI1_Config>
 80054d8:	4603      	mov	r3, r0
 80054da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054dc:	7cfb      	ldrb	r3, [r7, #19]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d014      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80054e2:	7cfb      	ldrb	r3, [r7, #19]
 80054e4:	74bb      	strb	r3, [r7, #18]
 80054e6:	e011      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054f0:	d10c      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3320      	adds	r3, #32
 80054f6:	2102      	movs	r1, #2
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 f925 	bl	8005748 <RCCEx_PLLSAI2_Config>
 80054fe:	4603      	mov	r3, r0
 8005500:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005502:	7cfb      	ldrb	r3, [r7, #19]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005508:	7cfb      	ldrb	r3, [r7, #19]
 800550a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00b      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005518:	4b11      	ldr	r3, [pc, #68]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800551a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800551e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005528:	490d      	ldr	r1, [pc, #52]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800552a:	4313      	orrs	r3, r2
 800552c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00b      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800553c:	4b08      	ldr	r3, [pc, #32]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800553e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005542:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800554c:	4904      	ldr	r1, [pc, #16]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005554:	7cbb      	ldrb	r3, [r7, #18]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	40021000 	.word	0x40021000

08005564 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005572:	4b74      	ldr	r3, [pc, #464]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d018      	beq.n	80055b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800557e:	4b71      	ldr	r3, [pc, #452]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	f003 0203 	and.w	r2, r3, #3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d10d      	bne.n	80055aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
       ||
 8005592:	2b00      	cmp	r3, #0
 8005594:	d009      	beq.n	80055aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005596:	4b6b      	ldr	r3, [pc, #428]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	091b      	lsrs	r3, r3, #4
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
       ||
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d047      	beq.n	800563a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	73fb      	strb	r3, [r7, #15]
 80055ae:	e044      	b.n	800563a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b03      	cmp	r3, #3
 80055b6:	d018      	beq.n	80055ea <RCCEx_PLLSAI1_Config+0x86>
 80055b8:	2b03      	cmp	r3, #3
 80055ba:	d825      	bhi.n	8005608 <RCCEx_PLLSAI1_Config+0xa4>
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d002      	beq.n	80055c6 <RCCEx_PLLSAI1_Config+0x62>
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	d009      	beq.n	80055d8 <RCCEx_PLLSAI1_Config+0x74>
 80055c4:	e020      	b.n	8005608 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055c6:	4b5f      	ldr	r3, [pc, #380]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d11d      	bne.n	800560e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055d6:	e01a      	b.n	800560e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d116      	bne.n	8005612 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055e8:	e013      	b.n	8005612 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055ea:	4b56      	ldr	r3, [pc, #344]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10f      	bne.n	8005616 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055f6:	4b53      	ldr	r3, [pc, #332]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d109      	bne.n	8005616 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005606:	e006      	b.n	8005616 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	73fb      	strb	r3, [r7, #15]
      break;
 800560c:	e004      	b.n	8005618 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800560e:	bf00      	nop
 8005610:	e002      	b.n	8005618 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005612:	bf00      	nop
 8005614:	e000      	b.n	8005618 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005616:	bf00      	nop
    }

    if(status == HAL_OK)
 8005618:	7bfb      	ldrb	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10d      	bne.n	800563a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800561e:	4b49      	ldr	r3, [pc, #292]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6819      	ldr	r1, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	3b01      	subs	r3, #1
 8005630:	011b      	lsls	r3, r3, #4
 8005632:	430b      	orrs	r3, r1
 8005634:	4943      	ldr	r1, [pc, #268]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005636:	4313      	orrs	r3, r2
 8005638:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d17c      	bne.n	800573a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005640:	4b40      	ldr	r3, [pc, #256]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a3f      	ldr	r2, [pc, #252]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005646:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800564a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800564c:	f7fc fbf8 	bl	8001e40 <HAL_GetTick>
 8005650:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005652:	e009      	b.n	8005668 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005654:	f7fc fbf4 	bl	8001e40 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d902      	bls.n	8005668 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	73fb      	strb	r3, [r7, #15]
        break;
 8005666:	e005      	b.n	8005674 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005668:	4b36      	ldr	r3, [pc, #216]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1ef      	bne.n	8005654 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d15f      	bne.n	800573a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d110      	bne.n	80056a2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005680:	4b30      	ldr	r3, [pc, #192]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005688:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6892      	ldr	r2, [r2, #8]
 8005690:	0211      	lsls	r1, r2, #8
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68d2      	ldr	r2, [r2, #12]
 8005696:	06d2      	lsls	r2, r2, #27
 8005698:	430a      	orrs	r2, r1
 800569a:	492a      	ldr	r1, [pc, #168]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 800569c:	4313      	orrs	r3, r2
 800569e:	610b      	str	r3, [r1, #16]
 80056a0:	e027      	b.n	80056f2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d112      	bne.n	80056ce <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056a8:	4b26      	ldr	r3, [pc, #152]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80056b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6892      	ldr	r2, [r2, #8]
 80056b8:	0211      	lsls	r1, r2, #8
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6912      	ldr	r2, [r2, #16]
 80056be:	0852      	lsrs	r2, r2, #1
 80056c0:	3a01      	subs	r2, #1
 80056c2:	0552      	lsls	r2, r2, #21
 80056c4:	430a      	orrs	r2, r1
 80056c6:	491f      	ldr	r1, [pc, #124]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	610b      	str	r3, [r1, #16]
 80056cc:	e011      	b.n	80056f2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056ce:	4b1d      	ldr	r3, [pc, #116]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80056d6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6892      	ldr	r2, [r2, #8]
 80056de:	0211      	lsls	r1, r2, #8
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6952      	ldr	r2, [r2, #20]
 80056e4:	0852      	lsrs	r2, r2, #1
 80056e6:	3a01      	subs	r2, #1
 80056e8:	0652      	lsls	r2, r2, #25
 80056ea:	430a      	orrs	r2, r1
 80056ec:	4915      	ldr	r1, [pc, #84]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056f2:	4b14      	ldr	r3, [pc, #80]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a13      	ldr	r2, [pc, #76]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80056fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fe:	f7fc fb9f 	bl	8001e40 <HAL_GetTick>
 8005702:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005704:	e009      	b.n	800571a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005706:	f7fc fb9b 	bl	8001e40 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d902      	bls.n	800571a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	73fb      	strb	r3, [r7, #15]
          break;
 8005718:	e005      	b.n	8005726 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800571a:	4b0a      	ldr	r3, [pc, #40]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0ef      	beq.n	8005706 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800572c:	4b05      	ldr	r3, [pc, #20]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	4903      	ldr	r1, [pc, #12]	@ (8005744 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005736:	4313      	orrs	r3, r2
 8005738:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800573a:	7bfb      	ldrb	r3, [r7, #15]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40021000 	.word	0x40021000

08005748 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005756:	4b69      	ldr	r3, [pc, #420]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d018      	beq.n	8005794 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005762:	4b66      	ldr	r3, [pc, #408]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0203 	and.w	r2, r3, #3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d10d      	bne.n	800578e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
       ||
 8005776:	2b00      	cmp	r3, #0
 8005778:	d009      	beq.n	800578e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800577a:	4b60      	ldr	r3, [pc, #384]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	091b      	lsrs	r3, r3, #4
 8005780:	f003 0307 	and.w	r3, r3, #7
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
       ||
 800578a:	429a      	cmp	r2, r3
 800578c:	d047      	beq.n	800581e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	73fb      	strb	r3, [r7, #15]
 8005792:	e044      	b.n	800581e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d018      	beq.n	80057ce <RCCEx_PLLSAI2_Config+0x86>
 800579c:	2b03      	cmp	r3, #3
 800579e:	d825      	bhi.n	80057ec <RCCEx_PLLSAI2_Config+0xa4>
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d002      	beq.n	80057aa <RCCEx_PLLSAI2_Config+0x62>
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d009      	beq.n	80057bc <RCCEx_PLLSAI2_Config+0x74>
 80057a8:	e020      	b.n	80057ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057aa:	4b54      	ldr	r3, [pc, #336]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d11d      	bne.n	80057f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ba:	e01a      	b.n	80057f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057bc:	4b4f      	ldr	r3, [pc, #316]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d116      	bne.n	80057f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057cc:	e013      	b.n	80057f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057ce:	4b4b      	ldr	r3, [pc, #300]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10f      	bne.n	80057fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057da:	4b48      	ldr	r3, [pc, #288]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057ea:	e006      	b.n	80057fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
      break;
 80057f0:	e004      	b.n	80057fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057f2:	bf00      	nop
 80057f4:	e002      	b.n	80057fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057f6:	bf00      	nop
 80057f8:	e000      	b.n	80057fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10d      	bne.n	800581e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005802:	4b3e      	ldr	r3, [pc, #248]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6819      	ldr	r1, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	3b01      	subs	r3, #1
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	430b      	orrs	r3, r1
 8005818:	4938      	ldr	r1, [pc, #224]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 800581a:	4313      	orrs	r3, r2
 800581c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d166      	bne.n	80058f2 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005824:	4b35      	ldr	r3, [pc, #212]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a34      	ldr	r2, [pc, #208]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 800582a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800582e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005830:	f7fc fb06 	bl	8001e40 <HAL_GetTick>
 8005834:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005836:	e009      	b.n	800584c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005838:	f7fc fb02 	bl	8001e40 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d902      	bls.n	800584c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	73fb      	strb	r3, [r7, #15]
        break;
 800584a:	e005      	b.n	8005858 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800584c:	4b2b      	ldr	r3, [pc, #172]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1ef      	bne.n	8005838 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d149      	bne.n	80058f2 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d110      	bne.n	8005886 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005864:	4b25      	ldr	r3, [pc, #148]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800586c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6892      	ldr	r2, [r2, #8]
 8005874:	0211      	lsls	r1, r2, #8
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	68d2      	ldr	r2, [r2, #12]
 800587a:	06d2      	lsls	r2, r2, #27
 800587c:	430a      	orrs	r2, r1
 800587e:	491f      	ldr	r1, [pc, #124]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005880:	4313      	orrs	r3, r2
 8005882:	614b      	str	r3, [r1, #20]
 8005884:	e011      	b.n	80058aa <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005886:	4b1d      	ldr	r3, [pc, #116]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800588e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6892      	ldr	r2, [r2, #8]
 8005896:	0211      	lsls	r1, r2, #8
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6912      	ldr	r2, [r2, #16]
 800589c:	0852      	lsrs	r2, r2, #1
 800589e:	3a01      	subs	r2, #1
 80058a0:	0652      	lsls	r2, r2, #25
 80058a2:	430a      	orrs	r2, r1
 80058a4:	4915      	ldr	r1, [pc, #84]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058aa:	4b14      	ldr	r3, [pc, #80]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a13      	ldr	r2, [pc, #76]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80058b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b6:	f7fc fac3 	bl	8001e40 <HAL_GetTick>
 80058ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058bc:	e009      	b.n	80058d2 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058be:	f7fc fabf 	bl	8001e40 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d902      	bls.n	80058d2 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	73fb      	strb	r3, [r7, #15]
          break;
 80058d0:	e005      	b.n	80058de <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058d2:	4b0a      	ldr	r3, [pc, #40]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0ef      	beq.n	80058be <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d106      	bne.n	80058f2 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80058e4:	4b05      	ldr	r3, [pc, #20]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80058e6:	695a      	ldr	r2, [r3, #20]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	4903      	ldr	r1, [pc, #12]	@ (80058fc <RCCEx_PLLSAI2_Config+0x1b4>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	40021000 	.word	0x40021000

08005900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e049      	b.n	80059a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f841 	bl	80059ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3304      	adds	r3, #4
 800593c:	4619      	mov	r1, r3
 800593e:	4610      	mov	r0, r2
 8005940:	f000 f9e0 	bl	8005d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
	...

080059c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d001      	beq.n	80059dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e04f      	b.n	8005a7c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a23      	ldr	r2, [pc, #140]	@ (8005a88 <HAL_TIM_Base_Start_IT+0xc4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d01d      	beq.n	8005a3a <HAL_TIM_Base_Start_IT+0x76>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a06:	d018      	beq.n	8005a3a <HAL_TIM_Base_Start_IT+0x76>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8005a8c <HAL_TIM_Base_Start_IT+0xc8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d013      	beq.n	8005a3a <HAL_TIM_Base_Start_IT+0x76>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1e      	ldr	r2, [pc, #120]	@ (8005a90 <HAL_TIM_Base_Start_IT+0xcc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00e      	beq.n	8005a3a <HAL_TIM_Base_Start_IT+0x76>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a1c      	ldr	r2, [pc, #112]	@ (8005a94 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d009      	beq.n	8005a3a <HAL_TIM_Base_Start_IT+0x76>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005a98 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d004      	beq.n	8005a3a <HAL_TIM_Base_Start_IT+0x76>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a19      	ldr	r2, [pc, #100]	@ (8005a9c <HAL_TIM_Base_Start_IT+0xd8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d115      	bne.n	8005a66 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	4b17      	ldr	r3, [pc, #92]	@ (8005aa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a42:	4013      	ands	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b06      	cmp	r3, #6
 8005a4a:	d015      	beq.n	8005a78 <HAL_TIM_Base_Start_IT+0xb4>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a52:	d011      	beq.n	8005a78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0201 	orr.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a64:	e008      	b.n	8005a78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	e000      	b.n	8005a7a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	40012c00 	.word	0x40012c00
 8005a8c:	40000400 	.word	0x40000400
 8005a90:	40000800 	.word	0x40000800
 8005a94:	40000c00 	.word	0x40000c00
 8005a98:	40013400 	.word	0x40013400
 8005a9c:	40014000 	.word	0x40014000
 8005aa0:	00010007 	.word	0x00010007

08005aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f003 0302 	and.w	r3, r3, #2
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d020      	beq.n	8005b08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d01b      	beq.n	8005b08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f06f 0202 	mvn.w	r2, #2
 8005ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	f003 0303 	and.w	r3, r3, #3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f8e9 	bl	8005cc6 <HAL_TIM_IC_CaptureCallback>
 8005af4:	e005      	b.n	8005b02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f8db 	bl	8005cb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f8ec 	bl	8005cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d020      	beq.n	8005b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01b      	beq.n	8005b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0204 	mvn.w	r2, #4
 8005b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f8c3 	bl	8005cc6 <HAL_TIM_IC_CaptureCallback>
 8005b40:	e005      	b.n	8005b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f8b5 	bl	8005cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f8c6 	bl	8005cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d020      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f003 0308 	and.w	r3, r3, #8
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d01b      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0208 	mvn.w	r2, #8
 8005b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2204      	movs	r2, #4
 8005b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f89d 	bl	8005cc6 <HAL_TIM_IC_CaptureCallback>
 8005b8c:	e005      	b.n	8005b9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f88f 	bl	8005cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f8a0 	bl	8005cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 0310 	and.w	r3, r3, #16
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d020      	beq.n	8005bec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f003 0310 	and.w	r3, r3, #16
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01b      	beq.n	8005bec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0210 	mvn.w	r2, #16
 8005bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2208      	movs	r2, #8
 8005bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f877 	bl	8005cc6 <HAL_TIM_IC_CaptureCallback>
 8005bd8:	e005      	b.n	8005be6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f869 	bl	8005cb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f87a 	bl	8005cda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00c      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d007      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0201 	mvn.w	r2, #1
 8005c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fb fe46 	bl	800189c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d104      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00c      	beq.n	8005c3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d007      	beq.n	8005c3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f913 	bl	8005e64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00c      	beq.n	8005c62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d007      	beq.n	8005c62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 f90b 	bl	8005e78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00c      	beq.n	8005c86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f834 	bl	8005cee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f003 0320 	and.w	r3, r3, #32
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00c      	beq.n	8005caa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f06f 0220 	mvn.w	r2, #32
 8005ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f8d3 	bl	8005e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005caa:	bf00      	nop
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cce:	bf00      	nop
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b083      	sub	sp, #12
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a46      	ldr	r2, [pc, #280]	@ (8005e30 <TIM_Base_SetConfig+0x12c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d013      	beq.n	8005d44 <TIM_Base_SetConfig+0x40>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d22:	d00f      	beq.n	8005d44 <TIM_Base_SetConfig+0x40>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a43      	ldr	r2, [pc, #268]	@ (8005e34 <TIM_Base_SetConfig+0x130>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00b      	beq.n	8005d44 <TIM_Base_SetConfig+0x40>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a42      	ldr	r2, [pc, #264]	@ (8005e38 <TIM_Base_SetConfig+0x134>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d007      	beq.n	8005d44 <TIM_Base_SetConfig+0x40>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a41      	ldr	r2, [pc, #260]	@ (8005e3c <TIM_Base_SetConfig+0x138>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d003      	beq.n	8005d44 <TIM_Base_SetConfig+0x40>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a40      	ldr	r2, [pc, #256]	@ (8005e40 <TIM_Base_SetConfig+0x13c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d108      	bne.n	8005d56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a35      	ldr	r2, [pc, #212]	@ (8005e30 <TIM_Base_SetConfig+0x12c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d01f      	beq.n	8005d9e <TIM_Base_SetConfig+0x9a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d64:	d01b      	beq.n	8005d9e <TIM_Base_SetConfig+0x9a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a32      	ldr	r2, [pc, #200]	@ (8005e34 <TIM_Base_SetConfig+0x130>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d017      	beq.n	8005d9e <TIM_Base_SetConfig+0x9a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a31      	ldr	r2, [pc, #196]	@ (8005e38 <TIM_Base_SetConfig+0x134>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d013      	beq.n	8005d9e <TIM_Base_SetConfig+0x9a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a30      	ldr	r2, [pc, #192]	@ (8005e3c <TIM_Base_SetConfig+0x138>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00f      	beq.n	8005d9e <TIM_Base_SetConfig+0x9a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a2f      	ldr	r2, [pc, #188]	@ (8005e40 <TIM_Base_SetConfig+0x13c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00b      	beq.n	8005d9e <TIM_Base_SetConfig+0x9a>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a2e      	ldr	r2, [pc, #184]	@ (8005e44 <TIM_Base_SetConfig+0x140>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d007      	beq.n	8005d9e <TIM_Base_SetConfig+0x9a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a2d      	ldr	r2, [pc, #180]	@ (8005e48 <TIM_Base_SetConfig+0x144>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d003      	beq.n	8005d9e <TIM_Base_SetConfig+0x9a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a2c      	ldr	r2, [pc, #176]	@ (8005e4c <TIM_Base_SetConfig+0x148>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d108      	bne.n	8005db0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a16      	ldr	r2, [pc, #88]	@ (8005e30 <TIM_Base_SetConfig+0x12c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00f      	beq.n	8005dfc <TIM_Base_SetConfig+0xf8>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a18      	ldr	r2, [pc, #96]	@ (8005e40 <TIM_Base_SetConfig+0x13c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d00b      	beq.n	8005dfc <TIM_Base_SetConfig+0xf8>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a17      	ldr	r2, [pc, #92]	@ (8005e44 <TIM_Base_SetConfig+0x140>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d007      	beq.n	8005dfc <TIM_Base_SetConfig+0xf8>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a16      	ldr	r2, [pc, #88]	@ (8005e48 <TIM_Base_SetConfig+0x144>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d003      	beq.n	8005dfc <TIM_Base_SetConfig+0xf8>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a15      	ldr	r2, [pc, #84]	@ (8005e4c <TIM_Base_SetConfig+0x148>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d103      	bne.n	8005e04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d105      	bne.n	8005e22 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f023 0201 	bic.w	r2, r3, #1
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	611a      	str	r2, [r3, #16]
  }
}
 8005e22:	bf00      	nop
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40012c00 	.word	0x40012c00
 8005e34:	40000400 	.word	0x40000400
 8005e38:	40000800 	.word	0x40000800
 8005e3c:	40000c00 	.word	0x40000c00
 8005e40:	40013400 	.word	0x40013400
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40014400 	.word	0x40014400
 8005e4c:	40014800 	.word	0x40014800

08005e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <__NVIC_SetPriority>:
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	6039      	str	r1, [r7, #0]
 8005e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	db0a      	blt.n	8005eb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	490c      	ldr	r1, [pc, #48]	@ (8005ed8 <__NVIC_SetPriority+0x4c>)
 8005ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eaa:	0112      	lsls	r2, r2, #4
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	440b      	add	r3, r1
 8005eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005eb4:	e00a      	b.n	8005ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	b2da      	uxtb	r2, r3
 8005eba:	4908      	ldr	r1, [pc, #32]	@ (8005edc <__NVIC_SetPriority+0x50>)
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	f003 030f 	and.w	r3, r3, #15
 8005ec2:	3b04      	subs	r3, #4
 8005ec4:	0112      	lsls	r2, r2, #4
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	440b      	add	r3, r1
 8005eca:	761a      	strb	r2, [r3, #24]
}
 8005ecc:	bf00      	nop
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	e000e100 	.word	0xe000e100
 8005edc:	e000ed00 	.word	0xe000ed00

08005ee0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005ee4:	4b05      	ldr	r3, [pc, #20]	@ (8005efc <SysTick_Handler+0x1c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005ee8:	f001 fd46 	bl	8007978 <xTaskGetSchedulerState>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d001      	beq.n	8005ef6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005ef2:	f002 fb41 	bl	8008578 <xPortSysTickHandler>
  }
}
 8005ef6:	bf00      	nop
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	e000e010 	.word	0xe000e010

08005f00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005f04:	2100      	movs	r1, #0
 8005f06:	f06f 0004 	mvn.w	r0, #4
 8005f0a:	f7ff ffbf 	bl	8005e8c <__NVIC_SetPriority>
#endif
}
 8005f0e:	bf00      	nop
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f1a:	f3ef 8305 	mrs	r3, IPSR
 8005f1e:	603b      	str	r3, [r7, #0]
  return(result);
 8005f20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005f26:	f06f 0305 	mvn.w	r3, #5
 8005f2a:	607b      	str	r3, [r7, #4]
 8005f2c:	e00c      	b.n	8005f48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f58 <osKernelInitialize+0x44>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d105      	bne.n	8005f42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005f36:	4b08      	ldr	r3, [pc, #32]	@ (8005f58 <osKernelInitialize+0x44>)
 8005f38:	2201      	movs	r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	607b      	str	r3, [r7, #4]
 8005f40:	e002      	b.n	8005f48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f42:	f04f 33ff 	mov.w	r3, #4294967295
 8005f46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f48:	687b      	ldr	r3, [r7, #4]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	20000224 	.word	0x20000224

08005f5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f62:	f3ef 8305 	mrs	r3, IPSR
 8005f66:	603b      	str	r3, [r7, #0]
  return(result);
 8005f68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005f6e:	f06f 0305 	mvn.w	r3, #5
 8005f72:	607b      	str	r3, [r7, #4]
 8005f74:	e010      	b.n	8005f98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f76:	4b0b      	ldr	r3, [pc, #44]	@ (8005fa4 <osKernelStart+0x48>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d109      	bne.n	8005f92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f7e:	f7ff ffbf 	bl	8005f00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f82:	4b08      	ldr	r3, [pc, #32]	@ (8005fa4 <osKernelStart+0x48>)
 8005f84:	2202      	movs	r2, #2
 8005f86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f88:	f001 f892 	bl	80070b0 <vTaskStartScheduler>
      stat = osOK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	607b      	str	r3, [r7, #4]
 8005f90:	e002      	b.n	8005f98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f92:	f04f 33ff 	mov.w	r3, #4294967295
 8005f96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f98:	687b      	ldr	r3, [r7, #4]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20000224 	.word	0x20000224

08005fa8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08e      	sub	sp, #56	@ 0x38
 8005fac:	af04      	add	r7, sp, #16
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fb8:	f3ef 8305 	mrs	r3, IPSR
 8005fbc:	617b      	str	r3, [r7, #20]
  return(result);
 8005fbe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d17e      	bne.n	80060c2 <osThreadNew+0x11a>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d07b      	beq.n	80060c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005fca:	2380      	movs	r3, #128	@ 0x80
 8005fcc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005fce:	2318      	movs	r3, #24
 8005fd0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d045      	beq.n	800606e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <osThreadNew+0x48>
        name = attr->name;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d002      	beq.n	8005ffe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d008      	beq.n	8006016 <osThreadNew+0x6e>
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	2b38      	cmp	r3, #56	@ 0x38
 8006008:	d805      	bhi.n	8006016 <osThreadNew+0x6e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <osThreadNew+0x72>
        return (NULL);
 8006016:	2300      	movs	r3, #0
 8006018:	e054      	b.n	80060c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	089b      	lsrs	r3, r3, #2
 8006028:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00e      	beq.n	8006050 <osThreadNew+0xa8>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	2ba7      	cmp	r3, #167	@ 0xa7
 8006038:	d90a      	bls.n	8006050 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800603e:	2b00      	cmp	r3, #0
 8006040:	d006      	beq.n	8006050 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <osThreadNew+0xa8>
        mem = 1;
 800604a:	2301      	movs	r3, #1
 800604c:	61bb      	str	r3, [r7, #24]
 800604e:	e010      	b.n	8006072 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10c      	bne.n	8006072 <osThreadNew+0xca>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d108      	bne.n	8006072 <osThreadNew+0xca>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d104      	bne.n	8006072 <osThreadNew+0xca>
          mem = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	e001      	b.n	8006072 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800606e:	2300      	movs	r3, #0
 8006070:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d110      	bne.n	800609a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006080:	9202      	str	r2, [sp, #8]
 8006082:	9301      	str	r3, [sp, #4]
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	6a3a      	ldr	r2, [r7, #32]
 800608c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 fe1a 	bl	8006cc8 <xTaskCreateStatic>
 8006094:	4603      	mov	r3, r0
 8006096:	613b      	str	r3, [r7, #16]
 8006098:	e013      	b.n	80060c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d110      	bne.n	80060c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	f107 0310 	add.w	r3, r7, #16
 80060a8:	9301      	str	r3, [sp, #4]
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 fe68 	bl	8006d88 <xTaskCreate>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d001      	beq.n	80060c2 <osThreadNew+0x11a>
            hTask = NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80060c2:	693b      	ldr	r3, [r7, #16]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3728      	adds	r7, #40	@ 0x28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060d4:	f3ef 8305 	mrs	r3, IPSR
 80060d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80060da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <osDelay+0x1c>
    stat = osErrorISR;
 80060e0:	f06f 0305 	mvn.w	r3, #5
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	e007      	b.n	80060f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 ffa6 	bl	8007044 <vTaskDelay>
    }
  }

  return (stat);
 80060f8:	68fb      	ldr	r3, [r7, #12]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4a07      	ldr	r2, [pc, #28]	@ (8006130 <vApplicationGetIdleTaskMemory+0x2c>)
 8006114:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	4a06      	ldr	r2, [pc, #24]	@ (8006134 <vApplicationGetIdleTaskMemory+0x30>)
 800611a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2280      	movs	r2, #128	@ 0x80
 8006120:	601a      	str	r2, [r3, #0]
}
 8006122:	bf00      	nop
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	20000228 	.word	0x20000228
 8006134:	200002d0 	.word	0x200002d0

08006138 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4a07      	ldr	r2, [pc, #28]	@ (8006164 <vApplicationGetTimerTaskMemory+0x2c>)
 8006148:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	4a06      	ldr	r2, [pc, #24]	@ (8006168 <vApplicationGetTimerTaskMemory+0x30>)
 800614e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006156:	601a      	str	r2, [r3, #0]
}
 8006158:	bf00      	nop
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	200004d0 	.word	0x200004d0
 8006168:	20000578 	.word	0x20000578

0800616c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f103 0208 	add.w	r2, r3, #8
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f04f 32ff 	mov.w	r2, #4294967295
 8006184:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f103 0208 	add.w	r2, r3, #8
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f103 0208 	add.w	r2, r3, #8
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061c6:	b480      	push	{r7}
 80061c8:	b085      	sub	sp, #20
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	601a      	str	r2, [r3, #0]
}
 8006202:	bf00      	nop
 8006204:	3714      	adds	r7, #20
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800620e:	b480      	push	{r7}
 8006210:	b085      	sub	sp, #20
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006224:	d103      	bne.n	800622e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	e00c      	b.n	8006248 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	3308      	adds	r3, #8
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	e002      	b.n	800623c <vListInsert+0x2e>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	429a      	cmp	r2, r3
 8006246:	d2f6      	bcs.n	8006236 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	601a      	str	r2, [r3, #0]
}
 8006274:	bf00      	nop
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	6892      	ldr	r2, [r2, #8]
 8006296:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6852      	ldr	r2, [r2, #4]
 80062a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d103      	bne.n	80062b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689a      	ldr	r2, [r3, #8]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	1e5a      	subs	r2, r3, #1
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10b      	bne.n	8006300 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ec:	f383 8811 	msr	BASEPRI, r3
 80062f0:	f3bf 8f6f 	isb	sy
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062fa:	bf00      	nop
 80062fc:	bf00      	nop
 80062fe:	e7fd      	b.n	80062fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006300:	f002 f8aa 	bl	8008458 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800630c:	68f9      	ldr	r1, [r7, #12]
 800630e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006310:	fb01 f303 	mul.w	r3, r1, r3
 8006314:	441a      	add	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006330:	3b01      	subs	r3, #1
 8006332:	68f9      	ldr	r1, [r7, #12]
 8006334:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006336:	fb01 f303 	mul.w	r3, r1, r3
 800633a:	441a      	add	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	22ff      	movs	r2, #255	@ 0xff
 8006344:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	22ff      	movs	r2, #255	@ 0xff
 800634c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d114      	bne.n	8006380 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d01a      	beq.n	8006394 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3310      	adds	r3, #16
 8006362:	4618      	mov	r0, r3
 8006364:	f001 f942 	bl	80075ec <xTaskRemoveFromEventList>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d012      	beq.n	8006394 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800636e:	4b0d      	ldr	r3, [pc, #52]	@ (80063a4 <xQueueGenericReset+0xd0>)
 8006370:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	e009      	b.n	8006394 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3310      	adds	r3, #16
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff fef1 	bl	800616c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3324      	adds	r3, #36	@ 0x24
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff feec 	bl	800616c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006394:	f002 f892 	bl	80084bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006398:	2301      	movs	r3, #1
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	e000ed04 	.word	0xe000ed04

080063a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08e      	sub	sp, #56	@ 0x38
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10b      	bne.n	80063d4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80063ce:	bf00      	nop
 80063d0:	bf00      	nop
 80063d2:	e7fd      	b.n	80063d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10b      	bne.n	80063f2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063ec:	bf00      	nop
 80063ee:	bf00      	nop
 80063f0:	e7fd      	b.n	80063ee <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <xQueueGenericCreateStatic+0x56>
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <xQueueGenericCreateStatic+0x5a>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <xQueueGenericCreateStatic+0x5c>
 8006402:	2300      	movs	r3, #0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10b      	bne.n	8006420 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	623b      	str	r3, [r7, #32]
}
 800641a:	bf00      	nop
 800641c:	bf00      	nop
 800641e:	e7fd      	b.n	800641c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d102      	bne.n	800642c <xQueueGenericCreateStatic+0x84>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d101      	bne.n	8006430 <xQueueGenericCreateStatic+0x88>
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <xQueueGenericCreateStatic+0x8a>
 8006430:	2300      	movs	r3, #0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10b      	bne.n	800644e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	61fb      	str	r3, [r7, #28]
}
 8006448:	bf00      	nop
 800644a:	bf00      	nop
 800644c:	e7fd      	b.n	800644a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800644e:	2350      	movs	r3, #80	@ 0x50
 8006450:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b50      	cmp	r3, #80	@ 0x50
 8006456:	d00b      	beq.n	8006470 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	61bb      	str	r3, [r7, #24]
}
 800646a:	bf00      	nop
 800646c:	bf00      	nop
 800646e:	e7fd      	b.n	800646c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006470:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00d      	beq.n	8006498 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800647c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006484:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	4613      	mov	r3, r2
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 f805 	bl	80064a2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800649a:	4618      	mov	r0, r3
 800649c:	3730      	adds	r7, #48	@ 0x30
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	607a      	str	r2, [r7, #4]
 80064ae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	e002      	b.n	80064c4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80064d0:	2101      	movs	r1, #1
 80064d2:	69b8      	ldr	r0, [r7, #24]
 80064d4:	f7ff fefe 	bl	80062d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	78fa      	ldrb	r2, [r7, #3]
 80064dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80064e0:	bf00      	nop
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08e      	sub	sp, #56	@ 0x38
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064f6:	2300      	movs	r3, #0
 80064f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80064fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10b      	bne.n	800651c <xQueueGenericSend+0x34>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006516:	bf00      	nop
 8006518:	bf00      	nop
 800651a:	e7fd      	b.n	8006518 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d103      	bne.n	800652a <xQueueGenericSend+0x42>
 8006522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <xQueueGenericSend+0x46>
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <xQueueGenericSend+0x48>
 800652e:	2300      	movs	r3, #0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10b      	bne.n	800654c <xQueueGenericSend+0x64>
	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006546:	bf00      	nop
 8006548:	bf00      	nop
 800654a:	e7fd      	b.n	8006548 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d103      	bne.n	800655a <xQueueGenericSend+0x72>
 8006552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <xQueueGenericSend+0x76>
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <xQueueGenericSend+0x78>
 800655e:	2300      	movs	r3, #0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10b      	bne.n	800657c <xQueueGenericSend+0x94>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	623b      	str	r3, [r7, #32]
}
 8006576:	bf00      	nop
 8006578:	bf00      	nop
 800657a:	e7fd      	b.n	8006578 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800657c:	f001 f9fc 	bl	8007978 <xTaskGetSchedulerState>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d102      	bne.n	800658c <xQueueGenericSend+0xa4>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <xQueueGenericSend+0xa8>
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <xQueueGenericSend+0xaa>
 8006590:	2300      	movs	r3, #0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10b      	bne.n	80065ae <xQueueGenericSend+0xc6>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	61fb      	str	r3, [r7, #28]
}
 80065a8:	bf00      	nop
 80065aa:	bf00      	nop
 80065ac:	e7fd      	b.n	80065aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065ae:	f001 ff53 	bl	8008458 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d302      	bcc.n	80065c4 <xQueueGenericSend+0xdc>
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d129      	bne.n	8006618 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	68b9      	ldr	r1, [r7, #8]
 80065c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065ca:	f000 fa0f 	bl	80069ec <prvCopyDataToQueue>
 80065ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d010      	beq.n	80065fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065da:	3324      	adds	r3, #36	@ 0x24
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 f805 	bl	80075ec <xTaskRemoveFromEventList>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d013      	beq.n	8006610 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065e8:	4b3f      	ldr	r3, [pc, #252]	@ (80066e8 <xQueueGenericSend+0x200>)
 80065ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	f3bf 8f4f 	dsb	sy
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	e00a      	b.n	8006610 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d007      	beq.n	8006610 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006600:	4b39      	ldr	r3, [pc, #228]	@ (80066e8 <xQueueGenericSend+0x200>)
 8006602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006610:	f001 ff54 	bl	80084bc <vPortExitCritical>
				return pdPASS;
 8006614:	2301      	movs	r3, #1
 8006616:	e063      	b.n	80066e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d103      	bne.n	8006626 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800661e:	f001 ff4d 	bl	80084bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006622:	2300      	movs	r3, #0
 8006624:	e05c      	b.n	80066e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006628:	2b00      	cmp	r3, #0
 800662a:	d106      	bne.n	800663a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800662c:	f107 0314 	add.w	r3, r7, #20
 8006630:	4618      	mov	r0, r3
 8006632:	f001 f83f 	bl	80076b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006636:	2301      	movs	r3, #1
 8006638:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800663a:	f001 ff3f 	bl	80084bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800663e:	f000 fda7 	bl	8007190 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006642:	f001 ff09 	bl	8008458 <vPortEnterCritical>
 8006646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006648:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800664c:	b25b      	sxtb	r3, r3
 800664e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006652:	d103      	bne.n	800665c <xQueueGenericSend+0x174>
 8006654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800665c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006662:	b25b      	sxtb	r3, r3
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006668:	d103      	bne.n	8006672 <xQueueGenericSend+0x18a>
 800666a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666c:	2200      	movs	r2, #0
 800666e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006672:	f001 ff23 	bl	80084bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006676:	1d3a      	adds	r2, r7, #4
 8006678:	f107 0314 	add.w	r3, r7, #20
 800667c:	4611      	mov	r1, r2
 800667e:	4618      	mov	r0, r3
 8006680:	f001 f82e 	bl	80076e0 <xTaskCheckForTimeOut>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d124      	bne.n	80066d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800668a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800668c:	f000 faa6 	bl	8006bdc <prvIsQueueFull>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d018      	beq.n	80066c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006698:	3310      	adds	r3, #16
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	4611      	mov	r1, r2
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 ff52 	bl	8007548 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066a6:	f000 fa31 	bl	8006b0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066aa:	f000 fd7f 	bl	80071ac <xTaskResumeAll>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f47f af7c 	bne.w	80065ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80066b6:	4b0c      	ldr	r3, [pc, #48]	@ (80066e8 <xQueueGenericSend+0x200>)
 80066b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066bc:	601a      	str	r2, [r3, #0]
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	e772      	b.n	80065ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066ca:	f000 fa1f 	bl	8006b0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066ce:	f000 fd6d 	bl	80071ac <xTaskResumeAll>
 80066d2:	e76c      	b.n	80065ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066d6:	f000 fa19 	bl	8006b0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066da:	f000 fd67 	bl	80071ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3738      	adds	r7, #56	@ 0x38
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	e000ed04 	.word	0xe000ed04

080066ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b090      	sub	sp, #64	@ 0x40
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80066fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10b      	bne.n	800671c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006716:	bf00      	nop
 8006718:	bf00      	nop
 800671a:	e7fd      	b.n	8006718 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d103      	bne.n	800672a <xQueueGenericSendFromISR+0x3e>
 8006722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <xQueueGenericSendFromISR+0x42>
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <xQueueGenericSendFromISR+0x44>
 800672e:	2300      	movs	r3, #0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10b      	bne.n	800674c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006746:	bf00      	nop
 8006748:	bf00      	nop
 800674a:	e7fd      	b.n	8006748 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d103      	bne.n	800675a <xQueueGenericSendFromISR+0x6e>
 8006752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006756:	2b01      	cmp	r3, #1
 8006758:	d101      	bne.n	800675e <xQueueGenericSendFromISR+0x72>
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <xQueueGenericSendFromISR+0x74>
 800675e:	2300      	movs	r3, #0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10b      	bne.n	800677c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	623b      	str	r3, [r7, #32]
}
 8006776:	bf00      	nop
 8006778:	bf00      	nop
 800677a:	e7fd      	b.n	8006778 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800677c:	f001 ff4c 	bl	8008618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006780:	f3ef 8211 	mrs	r2, BASEPRI
 8006784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	61fa      	str	r2, [r7, #28]
 8006796:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006798:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800679a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800679c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d302      	bcc.n	80067ae <xQueueGenericSendFromISR+0xc2>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d12f      	bne.n	800680e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80067c4:	f000 f912 	bl	80069ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80067cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d0:	d112      	bne.n	80067f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d016      	beq.n	8006808 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067dc:	3324      	adds	r3, #36	@ 0x24
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 ff04 	bl	80075ec <xTaskRemoveFromEventList>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00e      	beq.n	8006808 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00b      	beq.n	8006808 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	e007      	b.n	8006808 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80067fc:	3301      	adds	r3, #1
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	b25a      	sxtb	r2, r3
 8006802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006808:	2301      	movs	r3, #1
 800680a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800680c:	e001      	b.n	8006812 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800680e:	2300      	movs	r3, #0
 8006810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006814:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800681c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800681e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006820:	4618      	mov	r0, r3
 8006822:	3740      	adds	r7, #64	@ 0x40
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08c      	sub	sp, #48	@ 0x30
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006834:	2300      	movs	r3, #0
 8006836:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800683c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10b      	bne.n	800685a <xQueueReceive+0x32>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	623b      	str	r3, [r7, #32]
}
 8006854:	bf00      	nop
 8006856:	bf00      	nop
 8006858:	e7fd      	b.n	8006856 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d103      	bne.n	8006868 <xQueueReceive+0x40>
 8006860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <xQueueReceive+0x44>
 8006868:	2301      	movs	r3, #1
 800686a:	e000      	b.n	800686e <xQueueReceive+0x46>
 800686c:	2300      	movs	r3, #0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10b      	bne.n	800688a <xQueueReceive+0x62>
	__asm volatile
 8006872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006876:	f383 8811 	msr	BASEPRI, r3
 800687a:	f3bf 8f6f 	isb	sy
 800687e:	f3bf 8f4f 	dsb	sy
 8006882:	61fb      	str	r3, [r7, #28]
}
 8006884:	bf00      	nop
 8006886:	bf00      	nop
 8006888:	e7fd      	b.n	8006886 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800688a:	f001 f875 	bl	8007978 <xTaskGetSchedulerState>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d102      	bne.n	800689a <xQueueReceive+0x72>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <xQueueReceive+0x76>
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <xQueueReceive+0x78>
 800689e:	2300      	movs	r3, #0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10b      	bne.n	80068bc <xQueueReceive+0x94>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	61bb      	str	r3, [r7, #24]
}
 80068b6:	bf00      	nop
 80068b8:	bf00      	nop
 80068ba:	e7fd      	b.n	80068b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068bc:	f001 fdcc 	bl	8008458 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01f      	beq.n	800690c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068cc:	68b9      	ldr	r1, [r7, #8]
 80068ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068d0:	f000 f8f6 	bl	8006ac0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d6:	1e5a      	subs	r2, r3, #1
 80068d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00f      	beq.n	8006904 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e6:	3310      	adds	r3, #16
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 fe7f 	bl	80075ec <xTaskRemoveFromEventList>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068f4:	4b3c      	ldr	r3, [pc, #240]	@ (80069e8 <xQueueReceive+0x1c0>)
 80068f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068fa:	601a      	str	r2, [r3, #0]
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006904:	f001 fdda 	bl	80084bc <vPortExitCritical>
				return pdPASS;
 8006908:	2301      	movs	r3, #1
 800690a:	e069      	b.n	80069e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d103      	bne.n	800691a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006912:	f001 fdd3 	bl	80084bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006916:	2300      	movs	r3, #0
 8006918:	e062      	b.n	80069e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800691a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d106      	bne.n	800692e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006920:	f107 0310 	add.w	r3, r7, #16
 8006924:	4618      	mov	r0, r3
 8006926:	f000 fec5 	bl	80076b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800692a:	2301      	movs	r3, #1
 800692c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800692e:	f001 fdc5 	bl	80084bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006932:	f000 fc2d 	bl	8007190 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006936:	f001 fd8f 	bl	8008458 <vPortEnterCritical>
 800693a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800693c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006940:	b25b      	sxtb	r3, r3
 8006942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006946:	d103      	bne.n	8006950 <xQueueReceive+0x128>
 8006948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800694a:	2200      	movs	r2, #0
 800694c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006952:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006956:	b25b      	sxtb	r3, r3
 8006958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695c:	d103      	bne.n	8006966 <xQueueReceive+0x13e>
 800695e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006966:	f001 fda9 	bl	80084bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800696a:	1d3a      	adds	r2, r7, #4
 800696c:	f107 0310 	add.w	r3, r7, #16
 8006970:	4611      	mov	r1, r2
 8006972:	4618      	mov	r0, r3
 8006974:	f000 feb4 	bl	80076e0 <xTaskCheckForTimeOut>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d123      	bne.n	80069c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800697e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006980:	f000 f916 	bl	8006bb0 <prvIsQueueEmpty>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d017      	beq.n	80069ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800698a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698c:	3324      	adds	r3, #36	@ 0x24
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	4611      	mov	r1, r2
 8006992:	4618      	mov	r0, r3
 8006994:	f000 fdd8 	bl	8007548 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006998:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800699a:	f000 f8b7 	bl	8006b0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800699e:	f000 fc05 	bl	80071ac <xTaskResumeAll>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d189      	bne.n	80068bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80069a8:	4b0f      	ldr	r3, [pc, #60]	@ (80069e8 <xQueueReceive+0x1c0>)
 80069aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	e780      	b.n	80068bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80069ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069bc:	f000 f8a6 	bl	8006b0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069c0:	f000 fbf4 	bl	80071ac <xTaskResumeAll>
 80069c4:	e77a      	b.n	80068bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80069c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069c8:	f000 f8a0 	bl	8006b0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069cc:	f000 fbee 	bl	80071ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80069d2:	f000 f8ed 	bl	8006bb0 <prvIsQueueEmpty>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f43f af6f 	beq.w	80068bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3730      	adds	r7, #48	@ 0x30
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	e000ed04 	.word	0xe000ed04

080069ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80069f8:	2300      	movs	r3, #0
 80069fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10d      	bne.n	8006a26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d14d      	bne.n	8006aae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 ffcc 	bl	80079b4 <xTaskPriorityDisinherit>
 8006a1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	609a      	str	r2, [r3, #8]
 8006a24:	e043      	b.n	8006aae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d119      	bne.n	8006a60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6858      	ldr	r0, [r3, #4]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a34:	461a      	mov	r2, r3
 8006a36:	68b9      	ldr	r1, [r7, #8]
 8006a38:	f002 f8a2 	bl	8008b80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	685a      	ldr	r2, [r3, #4]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a44:	441a      	add	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d32b      	bcc.n	8006aae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	605a      	str	r2, [r3, #4]
 8006a5e:	e026      	b.n	8006aae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	68d8      	ldr	r0, [r3, #12]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a68:	461a      	mov	r2, r3
 8006a6a:	68b9      	ldr	r1, [r7, #8]
 8006a6c:	f002 f888 	bl	8008b80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a78:	425b      	negs	r3, r3
 8006a7a:	441a      	add	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d207      	bcs.n	8006a9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	689a      	ldr	r2, [r3, #8]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a94:	425b      	negs	r3, r3
 8006a96:	441a      	add	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	d105      	bne.n	8006aae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	1c5a      	adds	r2, r3, #1
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006ab6:	697b      	ldr	r3, [r7, #20]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3718      	adds	r7, #24
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d018      	beq.n	8006b04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ada:	441a      	add	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	68da      	ldr	r2, [r3, #12]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d303      	bcc.n	8006af4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68d9      	ldr	r1, [r3, #12]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afc:	461a      	mov	r2, r3
 8006afe:	6838      	ldr	r0, [r7, #0]
 8006b00:	f002 f83e 	bl	8008b80 <memcpy>
	}
}
 8006b04:	bf00      	nop
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006b14:	f001 fca0 	bl	8008458 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b20:	e011      	b.n	8006b46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d012      	beq.n	8006b50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	3324      	adds	r3, #36	@ 0x24
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f000 fd5c 	bl	80075ec <xTaskRemoveFromEventList>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b3a:	f000 fe35 	bl	80077a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	dce9      	bgt.n	8006b22 <prvUnlockQueue+0x16>
 8006b4e:	e000      	b.n	8006b52 <prvUnlockQueue+0x46>
					break;
 8006b50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	22ff      	movs	r2, #255	@ 0xff
 8006b56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006b5a:	f001 fcaf 	bl	80084bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b5e:	f001 fc7b 	bl	8008458 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b6a:	e011      	b.n	8006b90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d012      	beq.n	8006b9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	3310      	adds	r3, #16
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 fd37 	bl	80075ec <xTaskRemoveFromEventList>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d001      	beq.n	8006b88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006b84:	f000 fe10 	bl	80077a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	dce9      	bgt.n	8006b6c <prvUnlockQueue+0x60>
 8006b98:	e000      	b.n	8006b9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006b9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	22ff      	movs	r2, #255	@ 0xff
 8006ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006ba4:	f001 fc8a 	bl	80084bc <vPortExitCritical>
}
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bb8:	f001 fc4e 	bl	8008458 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d102      	bne.n	8006bca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	e001      	b.n	8006bce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bce:	f001 fc75 	bl	80084bc <vPortExitCritical>

	return xReturn;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006be4:	f001 fc38 	bl	8008458 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d102      	bne.n	8006bfa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	e001      	b.n	8006bfe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bfe:	f001 fc5d 	bl	80084bc <vPortExitCritical>

	return xReturn;
 8006c02:	68fb      	ldr	r3, [r7, #12]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
 8006c1a:	e014      	b.n	8006c46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006c1c:	4a0f      	ldr	r2, [pc, #60]	@ (8006c5c <vQueueAddToRegistry+0x50>)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10b      	bne.n	8006c40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006c28:	490c      	ldr	r1, [pc, #48]	@ (8006c5c <vQueueAddToRegistry+0x50>)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006c32:	4a0a      	ldr	r2, [pc, #40]	@ (8006c5c <vQueueAddToRegistry+0x50>)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	4413      	add	r3, r2
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006c3e:	e006      	b.n	8006c4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	3301      	adds	r3, #1
 8006c44:	60fb      	str	r3, [r7, #12]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b07      	cmp	r3, #7
 8006c4a:	d9e7      	bls.n	8006c1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c4c:	bf00      	nop
 8006c4e:	bf00      	nop
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	20000978 	.word	0x20000978

08006c60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006c70:	f001 fbf2 	bl	8008458 <vPortEnterCritical>
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c7a:	b25b      	sxtb	r3, r3
 8006c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c80:	d103      	bne.n	8006c8a <vQueueWaitForMessageRestricted+0x2a>
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c90:	b25b      	sxtb	r3, r3
 8006c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c96:	d103      	bne.n	8006ca0 <vQueueWaitForMessageRestricted+0x40>
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ca0:	f001 fc0c 	bl	80084bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d106      	bne.n	8006cba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	3324      	adds	r3, #36	@ 0x24
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	68b9      	ldr	r1, [r7, #8]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f000 fc6d 	bl	8007594 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006cba:	6978      	ldr	r0, [r7, #20]
 8006cbc:	f7ff ff26 	bl	8006b0c <prvUnlockQueue>
	}
 8006cc0:	bf00      	nop
 8006cc2:	3718      	adds	r7, #24
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08e      	sub	sp, #56	@ 0x38
 8006ccc:	af04      	add	r7, sp, #16
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10b      	bne.n	8006cf4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	623b      	str	r3, [r7, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	bf00      	nop
 8006cf2:	e7fd      	b.n	8006cf0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10b      	bne.n	8006d12 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	61fb      	str	r3, [r7, #28]
}
 8006d0c:	bf00      	nop
 8006d0e:	bf00      	nop
 8006d10:	e7fd      	b.n	8006d0e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d12:	23a8      	movs	r3, #168	@ 0xa8
 8006d14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	2ba8      	cmp	r3, #168	@ 0xa8
 8006d1a:	d00b      	beq.n	8006d34 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	61bb      	str	r3, [r7, #24]
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	e7fd      	b.n	8006d30 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d34:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01e      	beq.n	8006d7a <xTaskCreateStatic+0xb2>
 8006d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d01b      	beq.n	8006d7a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d44:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006d4a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006d54:	2300      	movs	r3, #0
 8006d56:	9303      	str	r3, [sp, #12]
 8006d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5a:	9302      	str	r3, [sp, #8]
 8006d5c:	f107 0314 	add.w	r3, r7, #20
 8006d60:	9301      	str	r3, [sp, #4]
 8006d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 f851 	bl	8006e14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006d74:	f000 f8f6 	bl	8006f64 <prvAddNewTaskToReadyList>
 8006d78:	e001      	b.n	8006d7e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006d7e:	697b      	ldr	r3, [r7, #20]
	}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3728      	adds	r7, #40	@ 0x28
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b08c      	sub	sp, #48	@ 0x30
 8006d8c:	af04      	add	r7, sp, #16
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	603b      	str	r3, [r7, #0]
 8006d94:	4613      	mov	r3, r2
 8006d96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d98:	88fb      	ldrh	r3, [r7, #6]
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f001 fc7d 	bl	800869c <pvPortMalloc>
 8006da2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00e      	beq.n	8006dc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006daa:	20a8      	movs	r0, #168	@ 0xa8
 8006dac:	f001 fc76 	bl	800869c <pvPortMalloc>
 8006db0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d003      	beq.n	8006dc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8006dbe:	e005      	b.n	8006dcc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006dc0:	6978      	ldr	r0, [r7, #20]
 8006dc2:	f001 fd39 	bl	8008838 <vPortFree>
 8006dc6:	e001      	b.n	8006dcc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d017      	beq.n	8006e02 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006dda:	88fa      	ldrh	r2, [r7, #6]
 8006ddc:	2300      	movs	r3, #0
 8006dde:	9303      	str	r3, [sp, #12]
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	9302      	str	r3, [sp, #8]
 8006de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de6:	9301      	str	r3, [sp, #4]
 8006de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68b9      	ldr	r1, [r7, #8]
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 f80f 	bl	8006e14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006df6:	69f8      	ldr	r0, [r7, #28]
 8006df8:	f000 f8b4 	bl	8006f64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	61bb      	str	r3, [r7, #24]
 8006e00:	e002      	b.n	8006e08 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e02:	f04f 33ff 	mov.w	r3, #4294967295
 8006e06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e08:	69bb      	ldr	r3, [r7, #24]
	}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3720      	adds	r7, #32
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e24:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	21a5      	movs	r1, #165	@ 0xa5
 8006e2e:	f001 fe23 	bl	8008a78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	f023 0307 	bic.w	r3, r3, #7
 8006e4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00b      	beq.n	8006e6e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	617b      	str	r3, [r7, #20]
}
 8006e68:	bf00      	nop
 8006e6a:	bf00      	nop
 8006e6c:	e7fd      	b.n	8006e6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01f      	beq.n	8006eb4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e74:	2300      	movs	r3, #0
 8006e76:	61fb      	str	r3, [r7, #28]
 8006e78:	e012      	b.n	8006ea0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	4413      	add	r3, r2
 8006e80:	7819      	ldrb	r1, [r3, #0]
 8006e82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	4413      	add	r3, r2
 8006e88:	3334      	adds	r3, #52	@ 0x34
 8006e8a:	460a      	mov	r2, r1
 8006e8c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	4413      	add	r3, r2
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d006      	beq.n	8006ea8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	61fb      	str	r3, [r7, #28]
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	2b0f      	cmp	r3, #15
 8006ea4:	d9e9      	bls.n	8006e7a <prvInitialiseNewTask+0x66>
 8006ea6:	e000      	b.n	8006eaa <prvInitialiseNewTask+0x96>
			{
				break;
 8006ea8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006eb2:	e003      	b.n	8006ebc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebe:	2b37      	cmp	r3, #55	@ 0x37
 8006ec0:	d901      	bls.n	8006ec6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ec2:	2337      	movs	r3, #55	@ 0x37
 8006ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006eca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ece:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ed0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eda:	3304      	adds	r3, #4
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7ff f965 	bl	80061ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee4:	3318      	adds	r3, #24
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7ff f960 	bl	80061ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ef0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f00:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f14:	3354      	adds	r3, #84	@ 0x54
 8006f16:	224c      	movs	r2, #76	@ 0x4c
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f001 fdac 	bl	8008a78 <memset>
 8006f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f22:	4a0d      	ldr	r2, [pc, #52]	@ (8006f58 <prvInitialiseNewTask+0x144>)
 8006f24:	659a      	str	r2, [r3, #88]	@ 0x58
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	4a0c      	ldr	r2, [pc, #48]	@ (8006f5c <prvInitialiseNewTask+0x148>)
 8006f2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8006f60 <prvInitialiseNewTask+0x14c>)
 8006f30:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	68f9      	ldr	r1, [r7, #12]
 8006f36:	69b8      	ldr	r0, [r7, #24]
 8006f38:	f001 f95a 	bl	80081f0 <pxPortInitialiseStack>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f4e:	bf00      	nop
 8006f50:	3720      	adds	r7, #32
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	20001bc4 	.word	0x20001bc4
 8006f5c:	20001c2c 	.word	0x20001c2c
 8006f60:	20001c94 	.word	0x20001c94

08006f64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f6c:	f001 fa74 	bl	8008458 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f70:	4b2d      	ldr	r3, [pc, #180]	@ (8007028 <prvAddNewTaskToReadyList+0xc4>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3301      	adds	r3, #1
 8006f76:	4a2c      	ldr	r2, [pc, #176]	@ (8007028 <prvAddNewTaskToReadyList+0xc4>)
 8006f78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006f7a:	4b2c      	ldr	r3, [pc, #176]	@ (800702c <prvAddNewTaskToReadyList+0xc8>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d109      	bne.n	8006f96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f82:	4a2a      	ldr	r2, [pc, #168]	@ (800702c <prvAddNewTaskToReadyList+0xc8>)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f88:	4b27      	ldr	r3, [pc, #156]	@ (8007028 <prvAddNewTaskToReadyList+0xc4>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d110      	bne.n	8006fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f90:	f000 fc2e 	bl	80077f0 <prvInitialiseTaskLists>
 8006f94:	e00d      	b.n	8006fb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f96:	4b26      	ldr	r3, [pc, #152]	@ (8007030 <prvAddNewTaskToReadyList+0xcc>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d109      	bne.n	8006fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f9e:	4b23      	ldr	r3, [pc, #140]	@ (800702c <prvAddNewTaskToReadyList+0xc8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d802      	bhi.n	8006fb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006fac:	4a1f      	ldr	r2, [pc, #124]	@ (800702c <prvAddNewTaskToReadyList+0xc8>)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006fb2:	4b20      	ldr	r3, [pc, #128]	@ (8007034 <prvAddNewTaskToReadyList+0xd0>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	4a1e      	ldr	r2, [pc, #120]	@ (8007034 <prvAddNewTaskToReadyList+0xd0>)
 8006fba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8007034 <prvAddNewTaskToReadyList+0xd0>)
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8007038 <prvAddNewTaskToReadyList+0xd4>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d903      	bls.n	8006fd8 <prvAddNewTaskToReadyList+0x74>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd4:	4a18      	ldr	r2, [pc, #96]	@ (8007038 <prvAddNewTaskToReadyList+0xd4>)
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4a15      	ldr	r2, [pc, #84]	@ (800703c <prvAddNewTaskToReadyList+0xd8>)
 8006fe6:	441a      	add	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	3304      	adds	r3, #4
 8006fec:	4619      	mov	r1, r3
 8006fee:	4610      	mov	r0, r2
 8006ff0:	f7ff f8e9 	bl	80061c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ff4:	f001 fa62 	bl	80084bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8007030 <prvAddNewTaskToReadyList+0xcc>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00e      	beq.n	800701e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007000:	4b0a      	ldr	r3, [pc, #40]	@ (800702c <prvAddNewTaskToReadyList+0xc8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700a:	429a      	cmp	r2, r3
 800700c:	d207      	bcs.n	800701e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800700e:	4b0c      	ldr	r3, [pc, #48]	@ (8007040 <prvAddNewTaskToReadyList+0xdc>)
 8007010:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007014:	601a      	str	r2, [r3, #0]
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800701e:	bf00      	nop
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	20000e8c 	.word	0x20000e8c
 800702c:	200009b8 	.word	0x200009b8
 8007030:	20000e98 	.word	0x20000e98
 8007034:	20000ea8 	.word	0x20000ea8
 8007038:	20000e94 	.word	0x20000e94
 800703c:	200009bc 	.word	0x200009bc
 8007040:	e000ed04 	.word	0xe000ed04

08007044 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800704c:	2300      	movs	r3, #0
 800704e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d018      	beq.n	8007088 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007056:	4b14      	ldr	r3, [pc, #80]	@ (80070a8 <vTaskDelay+0x64>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00b      	beq.n	8007076 <vTaskDelay+0x32>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	60bb      	str	r3, [r7, #8]
}
 8007070:	bf00      	nop
 8007072:	bf00      	nop
 8007074:	e7fd      	b.n	8007072 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007076:	f000 f88b 	bl	8007190 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800707a:	2100      	movs	r1, #0
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fd09 	bl	8007a94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007082:	f000 f893 	bl	80071ac <xTaskResumeAll>
 8007086:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d107      	bne.n	800709e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800708e:	4b07      	ldr	r3, [pc, #28]	@ (80070ac <vTaskDelay+0x68>)
 8007090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800709e:	bf00      	nop
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20000eb4 	.word	0x20000eb4
 80070ac:	e000ed04 	.word	0xe000ed04

080070b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08a      	sub	sp, #40	@ 0x28
 80070b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070be:	463a      	mov	r2, r7
 80070c0:	1d39      	adds	r1, r7, #4
 80070c2:	f107 0308 	add.w	r3, r7, #8
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7ff f81c 	bl	8006104 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	9202      	str	r2, [sp, #8]
 80070d4:	9301      	str	r3, [sp, #4]
 80070d6:	2300      	movs	r3, #0
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	2300      	movs	r3, #0
 80070dc:	460a      	mov	r2, r1
 80070de:	4924      	ldr	r1, [pc, #144]	@ (8007170 <vTaskStartScheduler+0xc0>)
 80070e0:	4824      	ldr	r0, [pc, #144]	@ (8007174 <vTaskStartScheduler+0xc4>)
 80070e2:	f7ff fdf1 	bl	8006cc8 <xTaskCreateStatic>
 80070e6:	4603      	mov	r3, r0
 80070e8:	4a23      	ldr	r2, [pc, #140]	@ (8007178 <vTaskStartScheduler+0xc8>)
 80070ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80070ec:	4b22      	ldr	r3, [pc, #136]	@ (8007178 <vTaskStartScheduler+0xc8>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80070f4:	2301      	movs	r3, #1
 80070f6:	617b      	str	r3, [r7, #20]
 80070f8:	e001      	b.n	80070fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d102      	bne.n	800710a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007104:	f000 fd1a 	bl	8007b3c <xTimerCreateTimerTask>
 8007108:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d11b      	bne.n	8007148 <vTaskStartScheduler+0x98>
	__asm volatile
 8007110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007114:	f383 8811 	msr	BASEPRI, r3
 8007118:	f3bf 8f6f 	isb	sy
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	613b      	str	r3, [r7, #16]
}
 8007122:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007124:	4b15      	ldr	r3, [pc, #84]	@ (800717c <vTaskStartScheduler+0xcc>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	3354      	adds	r3, #84	@ 0x54
 800712a:	4a15      	ldr	r2, [pc, #84]	@ (8007180 <vTaskStartScheduler+0xd0>)
 800712c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800712e:	4b15      	ldr	r3, [pc, #84]	@ (8007184 <vTaskStartScheduler+0xd4>)
 8007130:	f04f 32ff 	mov.w	r2, #4294967295
 8007134:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007136:	4b14      	ldr	r3, [pc, #80]	@ (8007188 <vTaskStartScheduler+0xd8>)
 8007138:	2201      	movs	r2, #1
 800713a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800713c:	4b13      	ldr	r3, [pc, #76]	@ (800718c <vTaskStartScheduler+0xdc>)
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007142:	f001 f8e5 	bl	8008310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007146:	e00f      	b.n	8007168 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800714e:	d10b      	bne.n	8007168 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	60fb      	str	r3, [r7, #12]
}
 8007162:	bf00      	nop
 8007164:	bf00      	nop
 8007166:	e7fd      	b.n	8007164 <vTaskStartScheduler+0xb4>
}
 8007168:	bf00      	nop
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	08008c98 	.word	0x08008c98
 8007174:	080077c1 	.word	0x080077c1
 8007178:	20000eb0 	.word	0x20000eb0
 800717c:	200009b8 	.word	0x200009b8
 8007180:	20000010 	.word	0x20000010
 8007184:	20000eac 	.word	0x20000eac
 8007188:	20000e98 	.word	0x20000e98
 800718c:	20000e90 	.word	0x20000e90

08007190 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007190:	b480      	push	{r7}
 8007192:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007194:	4b04      	ldr	r3, [pc, #16]	@ (80071a8 <vTaskSuspendAll+0x18>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3301      	adds	r3, #1
 800719a:	4a03      	ldr	r2, [pc, #12]	@ (80071a8 <vTaskSuspendAll+0x18>)
 800719c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800719e:	bf00      	nop
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	20000eb4 	.word	0x20000eb4

080071ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071ba:	4b42      	ldr	r3, [pc, #264]	@ (80072c4 <xTaskResumeAll+0x118>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10b      	bne.n	80071da <xTaskResumeAll+0x2e>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	603b      	str	r3, [r7, #0]
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop
 80071d8:	e7fd      	b.n	80071d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071da:	f001 f93d 	bl	8008458 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071de:	4b39      	ldr	r3, [pc, #228]	@ (80072c4 <xTaskResumeAll+0x118>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	4a37      	ldr	r2, [pc, #220]	@ (80072c4 <xTaskResumeAll+0x118>)
 80071e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071e8:	4b36      	ldr	r3, [pc, #216]	@ (80072c4 <xTaskResumeAll+0x118>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d162      	bne.n	80072b6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80071f0:	4b35      	ldr	r3, [pc, #212]	@ (80072c8 <xTaskResumeAll+0x11c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d05e      	beq.n	80072b6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071f8:	e02f      	b.n	800725a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071fa:	4b34      	ldr	r3, [pc, #208]	@ (80072cc <xTaskResumeAll+0x120>)
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	3318      	adds	r3, #24
 8007206:	4618      	mov	r0, r3
 8007208:	f7ff f83a 	bl	8006280 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3304      	adds	r3, #4
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff f835 	bl	8006280 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800721a:	4b2d      	ldr	r3, [pc, #180]	@ (80072d0 <xTaskResumeAll+0x124>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	429a      	cmp	r2, r3
 8007220:	d903      	bls.n	800722a <xTaskResumeAll+0x7e>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007226:	4a2a      	ldr	r2, [pc, #168]	@ (80072d0 <xTaskResumeAll+0x124>)
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800722e:	4613      	mov	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4413      	add	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4a27      	ldr	r2, [pc, #156]	@ (80072d4 <xTaskResumeAll+0x128>)
 8007238:	441a      	add	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	3304      	adds	r3, #4
 800723e:	4619      	mov	r1, r3
 8007240:	4610      	mov	r0, r2
 8007242:	f7fe ffc0 	bl	80061c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800724a:	4b23      	ldr	r3, [pc, #140]	@ (80072d8 <xTaskResumeAll+0x12c>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007250:	429a      	cmp	r2, r3
 8007252:	d302      	bcc.n	800725a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007254:	4b21      	ldr	r3, [pc, #132]	@ (80072dc <xTaskResumeAll+0x130>)
 8007256:	2201      	movs	r2, #1
 8007258:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800725a:	4b1c      	ldr	r3, [pc, #112]	@ (80072cc <xTaskResumeAll+0x120>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1cb      	bne.n	80071fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007268:	f000 fb66 	bl	8007938 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800726c:	4b1c      	ldr	r3, [pc, #112]	@ (80072e0 <xTaskResumeAll+0x134>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d010      	beq.n	800729a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007278:	f000 f846 	bl	8007308 <xTaskIncrementTick>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007282:	4b16      	ldr	r3, [pc, #88]	@ (80072dc <xTaskResumeAll+0x130>)
 8007284:	2201      	movs	r2, #1
 8007286:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	3b01      	subs	r3, #1
 800728c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1f1      	bne.n	8007278 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007294:	4b12      	ldr	r3, [pc, #72]	@ (80072e0 <xTaskResumeAll+0x134>)
 8007296:	2200      	movs	r2, #0
 8007298:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800729a:	4b10      	ldr	r3, [pc, #64]	@ (80072dc <xTaskResumeAll+0x130>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d009      	beq.n	80072b6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072a2:	2301      	movs	r3, #1
 80072a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072a6:	4b0f      	ldr	r3, [pc, #60]	@ (80072e4 <xTaskResumeAll+0x138>)
 80072a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072b6:	f001 f901 	bl	80084bc <vPortExitCritical>

	return xAlreadyYielded;
 80072ba:	68bb      	ldr	r3, [r7, #8]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	20000eb4 	.word	0x20000eb4
 80072c8:	20000e8c 	.word	0x20000e8c
 80072cc:	20000e4c 	.word	0x20000e4c
 80072d0:	20000e94 	.word	0x20000e94
 80072d4:	200009bc 	.word	0x200009bc
 80072d8:	200009b8 	.word	0x200009b8
 80072dc:	20000ea0 	.word	0x20000ea0
 80072e0:	20000e9c 	.word	0x20000e9c
 80072e4:	e000ed04 	.word	0xe000ed04

080072e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80072ee:	4b05      	ldr	r3, [pc, #20]	@ (8007304 <xTaskGetTickCount+0x1c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80072f4:	687b      	ldr	r3, [r7, #4]
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	370c      	adds	r7, #12
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	20000e90 	.word	0x20000e90

08007308 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800730e:	2300      	movs	r3, #0
 8007310:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007312:	4b4f      	ldr	r3, [pc, #316]	@ (8007450 <xTaskIncrementTick+0x148>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	f040 8090 	bne.w	800743c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800731c:	4b4d      	ldr	r3, [pc, #308]	@ (8007454 <xTaskIncrementTick+0x14c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3301      	adds	r3, #1
 8007322:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007324:	4a4b      	ldr	r2, [pc, #300]	@ (8007454 <xTaskIncrementTick+0x14c>)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d121      	bne.n	8007374 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007330:	4b49      	ldr	r3, [pc, #292]	@ (8007458 <xTaskIncrementTick+0x150>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00b      	beq.n	8007352 <xTaskIncrementTick+0x4a>
	__asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	603b      	str	r3, [r7, #0]
}
 800734c:	bf00      	nop
 800734e:	bf00      	nop
 8007350:	e7fd      	b.n	800734e <xTaskIncrementTick+0x46>
 8007352:	4b41      	ldr	r3, [pc, #260]	@ (8007458 <xTaskIncrementTick+0x150>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	4b40      	ldr	r3, [pc, #256]	@ (800745c <xTaskIncrementTick+0x154>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a3e      	ldr	r2, [pc, #248]	@ (8007458 <xTaskIncrementTick+0x150>)
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	4a3e      	ldr	r2, [pc, #248]	@ (800745c <xTaskIncrementTick+0x154>)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	4b3e      	ldr	r3, [pc, #248]	@ (8007460 <xTaskIncrementTick+0x158>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3301      	adds	r3, #1
 800736c:	4a3c      	ldr	r2, [pc, #240]	@ (8007460 <xTaskIncrementTick+0x158>)
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	f000 fae2 	bl	8007938 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007374:	4b3b      	ldr	r3, [pc, #236]	@ (8007464 <xTaskIncrementTick+0x15c>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	429a      	cmp	r2, r3
 800737c:	d349      	bcc.n	8007412 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800737e:	4b36      	ldr	r3, [pc, #216]	@ (8007458 <xTaskIncrementTick+0x150>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d104      	bne.n	8007392 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007388:	4b36      	ldr	r3, [pc, #216]	@ (8007464 <xTaskIncrementTick+0x15c>)
 800738a:	f04f 32ff 	mov.w	r2, #4294967295
 800738e:	601a      	str	r2, [r3, #0]
					break;
 8007390:	e03f      	b.n	8007412 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007392:	4b31      	ldr	r3, [pc, #196]	@ (8007458 <xTaskIncrementTick+0x150>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d203      	bcs.n	80073b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073aa:	4a2e      	ldr	r2, [pc, #184]	@ (8007464 <xTaskIncrementTick+0x15c>)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073b0:	e02f      	b.n	8007412 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	3304      	adds	r3, #4
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe ff62 	bl	8006280 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d004      	beq.n	80073ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	3318      	adds	r3, #24
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe ff59 	bl	8006280 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073d2:	4b25      	ldr	r3, [pc, #148]	@ (8007468 <xTaskIncrementTick+0x160>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d903      	bls.n	80073e2 <xTaskIncrementTick+0xda>
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073de:	4a22      	ldr	r2, [pc, #136]	@ (8007468 <xTaskIncrementTick+0x160>)
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4a1f      	ldr	r2, [pc, #124]	@ (800746c <xTaskIncrementTick+0x164>)
 80073f0:	441a      	add	r2, r3
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f7fe fee4 	bl	80061c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007402:	4b1b      	ldr	r3, [pc, #108]	@ (8007470 <xTaskIncrementTick+0x168>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007408:	429a      	cmp	r2, r3
 800740a:	d3b8      	bcc.n	800737e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800740c:	2301      	movs	r3, #1
 800740e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007410:	e7b5      	b.n	800737e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007412:	4b17      	ldr	r3, [pc, #92]	@ (8007470 <xTaskIncrementTick+0x168>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007418:	4914      	ldr	r1, [pc, #80]	@ (800746c <xTaskIncrementTick+0x164>)
 800741a:	4613      	mov	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	440b      	add	r3, r1
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d901      	bls.n	800742e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800742a:	2301      	movs	r3, #1
 800742c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800742e:	4b11      	ldr	r3, [pc, #68]	@ (8007474 <xTaskIncrementTick+0x16c>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d007      	beq.n	8007446 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007436:	2301      	movs	r3, #1
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	e004      	b.n	8007446 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800743c:	4b0e      	ldr	r3, [pc, #56]	@ (8007478 <xTaskIncrementTick+0x170>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3301      	adds	r3, #1
 8007442:	4a0d      	ldr	r2, [pc, #52]	@ (8007478 <xTaskIncrementTick+0x170>)
 8007444:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007446:	697b      	ldr	r3, [r7, #20]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	20000eb4 	.word	0x20000eb4
 8007454:	20000e90 	.word	0x20000e90
 8007458:	20000e44 	.word	0x20000e44
 800745c:	20000e48 	.word	0x20000e48
 8007460:	20000ea4 	.word	0x20000ea4
 8007464:	20000eac 	.word	0x20000eac
 8007468:	20000e94 	.word	0x20000e94
 800746c:	200009bc 	.word	0x200009bc
 8007470:	200009b8 	.word	0x200009b8
 8007474:	20000ea0 	.word	0x20000ea0
 8007478:	20000e9c 	.word	0x20000e9c

0800747c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007482:	4b2b      	ldr	r3, [pc, #172]	@ (8007530 <vTaskSwitchContext+0xb4>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800748a:	4b2a      	ldr	r3, [pc, #168]	@ (8007534 <vTaskSwitchContext+0xb8>)
 800748c:	2201      	movs	r2, #1
 800748e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007490:	e047      	b.n	8007522 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007492:	4b28      	ldr	r3, [pc, #160]	@ (8007534 <vTaskSwitchContext+0xb8>)
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007498:	4b27      	ldr	r3, [pc, #156]	@ (8007538 <vTaskSwitchContext+0xbc>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	e011      	b.n	80074c4 <vTaskSwitchContext+0x48>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10b      	bne.n	80074be <vTaskSwitchContext+0x42>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	607b      	str	r3, [r7, #4]
}
 80074b8:	bf00      	nop
 80074ba:	bf00      	nop
 80074bc:	e7fd      	b.n	80074ba <vTaskSwitchContext+0x3e>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	491d      	ldr	r1, [pc, #116]	@ (800753c <vTaskSwitchContext+0xc0>)
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	4613      	mov	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	440b      	add	r3, r1
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d0e3      	beq.n	80074a0 <vTaskSwitchContext+0x24>
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4a16      	ldr	r2, [pc, #88]	@ (800753c <vTaskSwitchContext+0xc0>)
 80074e4:	4413      	add	r3, r2
 80074e6:	60bb      	str	r3, [r7, #8]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	605a      	str	r2, [r3, #4]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	3308      	adds	r3, #8
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d104      	bne.n	8007508 <vTaskSwitchContext+0x8c>
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	605a      	str	r2, [r3, #4]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	4a0c      	ldr	r2, [pc, #48]	@ (8007540 <vTaskSwitchContext+0xc4>)
 8007510:	6013      	str	r3, [r2, #0]
 8007512:	4a09      	ldr	r2, [pc, #36]	@ (8007538 <vTaskSwitchContext+0xbc>)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007518:	4b09      	ldr	r3, [pc, #36]	@ (8007540 <vTaskSwitchContext+0xc4>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3354      	adds	r3, #84	@ 0x54
 800751e:	4a09      	ldr	r2, [pc, #36]	@ (8007544 <vTaskSwitchContext+0xc8>)
 8007520:	6013      	str	r3, [r2, #0]
}
 8007522:	bf00      	nop
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	20000eb4 	.word	0x20000eb4
 8007534:	20000ea0 	.word	0x20000ea0
 8007538:	20000e94 	.word	0x20000e94
 800753c:	200009bc 	.word	0x200009bc
 8007540:	200009b8 	.word	0x200009b8
 8007544:	20000010 	.word	0x20000010

08007548 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10b      	bne.n	8007570 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755c:	f383 8811 	msr	BASEPRI, r3
 8007560:	f3bf 8f6f 	isb	sy
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	60fb      	str	r3, [r7, #12]
}
 800756a:	bf00      	nop
 800756c:	bf00      	nop
 800756e:	e7fd      	b.n	800756c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007570:	4b07      	ldr	r3, [pc, #28]	@ (8007590 <vTaskPlaceOnEventList+0x48>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3318      	adds	r3, #24
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7fe fe48 	bl	800620e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800757e:	2101      	movs	r1, #1
 8007580:	6838      	ldr	r0, [r7, #0]
 8007582:	f000 fa87 	bl	8007a94 <prvAddCurrentTaskToDelayedList>
}
 8007586:	bf00      	nop
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	200009b8 	.word	0x200009b8

08007594 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10b      	bne.n	80075be <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	617b      	str	r3, [r7, #20]
}
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
 80075bc:	e7fd      	b.n	80075ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075be:	4b0a      	ldr	r3, [pc, #40]	@ (80075e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3318      	adds	r3, #24
 80075c4:	4619      	mov	r1, r3
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f7fe fdfd 	bl	80061c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d002      	beq.n	80075d8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80075d2:	f04f 33ff 	mov.w	r3, #4294967295
 80075d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	68b8      	ldr	r0, [r7, #8]
 80075dc:	f000 fa5a 	bl	8007a94 <prvAddCurrentTaskToDelayedList>
	}
 80075e0:	bf00      	nop
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	200009b8 	.word	0x200009b8

080075ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10b      	bne.n	800761a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	60fb      	str	r3, [r7, #12]
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop
 8007618:	e7fd      	b.n	8007616 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	3318      	adds	r3, #24
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe fe2e 	bl	8006280 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007624:	4b1d      	ldr	r3, [pc, #116]	@ (800769c <xTaskRemoveFromEventList+0xb0>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d11d      	bne.n	8007668 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	3304      	adds	r3, #4
 8007630:	4618      	mov	r0, r3
 8007632:	f7fe fe25 	bl	8006280 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800763a:	4b19      	ldr	r3, [pc, #100]	@ (80076a0 <xTaskRemoveFromEventList+0xb4>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	429a      	cmp	r2, r3
 8007640:	d903      	bls.n	800764a <xTaskRemoveFromEventList+0x5e>
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007646:	4a16      	ldr	r2, [pc, #88]	@ (80076a0 <xTaskRemoveFromEventList+0xb4>)
 8007648:	6013      	str	r3, [r2, #0]
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4a13      	ldr	r2, [pc, #76]	@ (80076a4 <xTaskRemoveFromEventList+0xb8>)
 8007658:	441a      	add	r2, r3
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	3304      	adds	r3, #4
 800765e:	4619      	mov	r1, r3
 8007660:	4610      	mov	r0, r2
 8007662:	f7fe fdb0 	bl	80061c6 <vListInsertEnd>
 8007666:	e005      	b.n	8007674 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	3318      	adds	r3, #24
 800766c:	4619      	mov	r1, r3
 800766e:	480e      	ldr	r0, [pc, #56]	@ (80076a8 <xTaskRemoveFromEventList+0xbc>)
 8007670:	f7fe fda9 	bl	80061c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007678:	4b0c      	ldr	r3, [pc, #48]	@ (80076ac <xTaskRemoveFromEventList+0xc0>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767e:	429a      	cmp	r2, r3
 8007680:	d905      	bls.n	800768e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007682:	2301      	movs	r3, #1
 8007684:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007686:	4b0a      	ldr	r3, [pc, #40]	@ (80076b0 <xTaskRemoveFromEventList+0xc4>)
 8007688:	2201      	movs	r2, #1
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	e001      	b.n	8007692 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800768e:	2300      	movs	r3, #0
 8007690:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007692:	697b      	ldr	r3, [r7, #20]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3718      	adds	r7, #24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20000eb4 	.word	0x20000eb4
 80076a0:	20000e94 	.word	0x20000e94
 80076a4:	200009bc 	.word	0x200009bc
 80076a8:	20000e4c 	.word	0x20000e4c
 80076ac:	200009b8 	.word	0x200009b8
 80076b0:	20000ea0 	.word	0x20000ea0

080076b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076bc:	4b06      	ldr	r3, [pc, #24]	@ (80076d8 <vTaskInternalSetTimeOutState+0x24>)
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076c4:	4b05      	ldr	r3, [pc, #20]	@ (80076dc <vTaskInternalSetTimeOutState+0x28>)
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	605a      	str	r2, [r3, #4]
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	20000ea4 	.word	0x20000ea4
 80076dc:	20000e90 	.word	0x20000e90

080076e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10b      	bne.n	8007708 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	613b      	str	r3, [r7, #16]
}
 8007702:	bf00      	nop
 8007704:	bf00      	nop
 8007706:	e7fd      	b.n	8007704 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10b      	bne.n	8007726 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	60fb      	str	r3, [r7, #12]
}
 8007720:	bf00      	nop
 8007722:	bf00      	nop
 8007724:	e7fd      	b.n	8007722 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007726:	f000 fe97 	bl	8008458 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800772a:	4b1d      	ldr	r3, [pc, #116]	@ (80077a0 <xTaskCheckForTimeOut+0xc0>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007742:	d102      	bne.n	800774a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007744:	2300      	movs	r3, #0
 8007746:	61fb      	str	r3, [r7, #28]
 8007748:	e023      	b.n	8007792 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	4b15      	ldr	r3, [pc, #84]	@ (80077a4 <xTaskCheckForTimeOut+0xc4>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	429a      	cmp	r2, r3
 8007754:	d007      	beq.n	8007766 <xTaskCheckForTimeOut+0x86>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	429a      	cmp	r2, r3
 800775e:	d302      	bcc.n	8007766 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007760:	2301      	movs	r3, #1
 8007762:	61fb      	str	r3, [r7, #28]
 8007764:	e015      	b.n	8007792 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	429a      	cmp	r2, r3
 800776e:	d20b      	bcs.n	8007788 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	1ad2      	subs	r2, r2, r3
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff ff99 	bl	80076b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007782:	2300      	movs	r3, #0
 8007784:	61fb      	str	r3, [r7, #28]
 8007786:	e004      	b.n	8007792 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2200      	movs	r2, #0
 800778c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800778e:	2301      	movs	r3, #1
 8007790:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007792:	f000 fe93 	bl	80084bc <vPortExitCritical>

	return xReturn;
 8007796:	69fb      	ldr	r3, [r7, #28]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3720      	adds	r7, #32
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	20000e90 	.word	0x20000e90
 80077a4:	20000ea4 	.word	0x20000ea4

080077a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077a8:	b480      	push	{r7}
 80077aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077ac:	4b03      	ldr	r3, [pc, #12]	@ (80077bc <vTaskMissedYield+0x14>)
 80077ae:	2201      	movs	r2, #1
 80077b0:	601a      	str	r2, [r3, #0]
}
 80077b2:	bf00      	nop
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	20000ea0 	.word	0x20000ea0

080077c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80077c8:	f000 f852 	bl	8007870 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077cc:	4b06      	ldr	r3, [pc, #24]	@ (80077e8 <prvIdleTask+0x28>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d9f9      	bls.n	80077c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80077d4:	4b05      	ldr	r3, [pc, #20]	@ (80077ec <prvIdleTask+0x2c>)
 80077d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077e4:	e7f0      	b.n	80077c8 <prvIdleTask+0x8>
 80077e6:	bf00      	nop
 80077e8:	200009bc 	.word	0x200009bc
 80077ec:	e000ed04 	.word	0xe000ed04

080077f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077f6:	2300      	movs	r3, #0
 80077f8:	607b      	str	r3, [r7, #4]
 80077fa:	e00c      	b.n	8007816 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	4613      	mov	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4a12      	ldr	r2, [pc, #72]	@ (8007850 <prvInitialiseTaskLists+0x60>)
 8007808:	4413      	add	r3, r2
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe fcae 	bl	800616c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	3301      	adds	r3, #1
 8007814:	607b      	str	r3, [r7, #4]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b37      	cmp	r3, #55	@ 0x37
 800781a:	d9ef      	bls.n	80077fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800781c:	480d      	ldr	r0, [pc, #52]	@ (8007854 <prvInitialiseTaskLists+0x64>)
 800781e:	f7fe fca5 	bl	800616c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007822:	480d      	ldr	r0, [pc, #52]	@ (8007858 <prvInitialiseTaskLists+0x68>)
 8007824:	f7fe fca2 	bl	800616c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007828:	480c      	ldr	r0, [pc, #48]	@ (800785c <prvInitialiseTaskLists+0x6c>)
 800782a:	f7fe fc9f 	bl	800616c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800782e:	480c      	ldr	r0, [pc, #48]	@ (8007860 <prvInitialiseTaskLists+0x70>)
 8007830:	f7fe fc9c 	bl	800616c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007834:	480b      	ldr	r0, [pc, #44]	@ (8007864 <prvInitialiseTaskLists+0x74>)
 8007836:	f7fe fc99 	bl	800616c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800783a:	4b0b      	ldr	r3, [pc, #44]	@ (8007868 <prvInitialiseTaskLists+0x78>)
 800783c:	4a05      	ldr	r2, [pc, #20]	@ (8007854 <prvInitialiseTaskLists+0x64>)
 800783e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007840:	4b0a      	ldr	r3, [pc, #40]	@ (800786c <prvInitialiseTaskLists+0x7c>)
 8007842:	4a05      	ldr	r2, [pc, #20]	@ (8007858 <prvInitialiseTaskLists+0x68>)
 8007844:	601a      	str	r2, [r3, #0]
}
 8007846:	bf00      	nop
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	200009bc 	.word	0x200009bc
 8007854:	20000e1c 	.word	0x20000e1c
 8007858:	20000e30 	.word	0x20000e30
 800785c:	20000e4c 	.word	0x20000e4c
 8007860:	20000e60 	.word	0x20000e60
 8007864:	20000e78 	.word	0x20000e78
 8007868:	20000e44 	.word	0x20000e44
 800786c:	20000e48 	.word	0x20000e48

08007870 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007876:	e019      	b.n	80078ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007878:	f000 fdee 	bl	8008458 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800787c:	4b10      	ldr	r3, [pc, #64]	@ (80078c0 <prvCheckTasksWaitingTermination+0x50>)
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	3304      	adds	r3, #4
 8007888:	4618      	mov	r0, r3
 800788a:	f7fe fcf9 	bl	8006280 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800788e:	4b0d      	ldr	r3, [pc, #52]	@ (80078c4 <prvCheckTasksWaitingTermination+0x54>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3b01      	subs	r3, #1
 8007894:	4a0b      	ldr	r2, [pc, #44]	@ (80078c4 <prvCheckTasksWaitingTermination+0x54>)
 8007896:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007898:	4b0b      	ldr	r3, [pc, #44]	@ (80078c8 <prvCheckTasksWaitingTermination+0x58>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	3b01      	subs	r3, #1
 800789e:	4a0a      	ldr	r2, [pc, #40]	@ (80078c8 <prvCheckTasksWaitingTermination+0x58>)
 80078a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078a2:	f000 fe0b 	bl	80084bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f810 	bl	80078cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078ac:	4b06      	ldr	r3, [pc, #24]	@ (80078c8 <prvCheckTasksWaitingTermination+0x58>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1e1      	bne.n	8007878 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20000e60 	.word	0x20000e60
 80078c4:	20000e8c 	.word	0x20000e8c
 80078c8:	20000e74 	.word	0x20000e74

080078cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	3354      	adds	r3, #84	@ 0x54
 80078d8:	4618      	mov	r0, r3
 80078da:	f001 f8d5 	bl	8008a88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d108      	bne.n	80078fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ec:	4618      	mov	r0, r3
 80078ee:	f000 ffa3 	bl	8008838 <vPortFree>
				vPortFree( pxTCB );
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 ffa0 	bl	8008838 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078f8:	e019      	b.n	800792e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007900:	2b01      	cmp	r3, #1
 8007902:	d103      	bne.n	800790c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 ff97 	bl	8008838 <vPortFree>
	}
 800790a:	e010      	b.n	800792e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007912:	2b02      	cmp	r3, #2
 8007914:	d00b      	beq.n	800792e <prvDeleteTCB+0x62>
	__asm volatile
 8007916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	60fb      	str	r3, [r7, #12]
}
 8007928:	bf00      	nop
 800792a:	bf00      	nop
 800792c:	e7fd      	b.n	800792a <prvDeleteTCB+0x5e>
	}
 800792e:	bf00      	nop
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800793e:	4b0c      	ldr	r3, [pc, #48]	@ (8007970 <prvResetNextTaskUnblockTime+0x38>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d104      	bne.n	8007952 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007948:	4b0a      	ldr	r3, [pc, #40]	@ (8007974 <prvResetNextTaskUnblockTime+0x3c>)
 800794a:	f04f 32ff 	mov.w	r2, #4294967295
 800794e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007950:	e008      	b.n	8007964 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007952:	4b07      	ldr	r3, [pc, #28]	@ (8007970 <prvResetNextTaskUnblockTime+0x38>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	4a04      	ldr	r2, [pc, #16]	@ (8007974 <prvResetNextTaskUnblockTime+0x3c>)
 8007962:	6013      	str	r3, [r2, #0]
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	20000e44 	.word	0x20000e44
 8007974:	20000eac 	.word	0x20000eac

08007978 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800797e:	4b0b      	ldr	r3, [pc, #44]	@ (80079ac <xTaskGetSchedulerState+0x34>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d102      	bne.n	800798c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007986:	2301      	movs	r3, #1
 8007988:	607b      	str	r3, [r7, #4]
 800798a:	e008      	b.n	800799e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800798c:	4b08      	ldr	r3, [pc, #32]	@ (80079b0 <xTaskGetSchedulerState+0x38>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d102      	bne.n	800799a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007994:	2302      	movs	r3, #2
 8007996:	607b      	str	r3, [r7, #4]
 8007998:	e001      	b.n	800799e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800799a:	2300      	movs	r3, #0
 800799c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800799e:	687b      	ldr	r3, [r7, #4]
	}
 80079a0:	4618      	mov	r0, r3
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	20000e98 	.word	0x20000e98
 80079b0:	20000eb4 	.word	0x20000eb4

080079b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80079c0:	2300      	movs	r3, #0
 80079c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d058      	beq.n	8007a7c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80079ca:	4b2f      	ldr	r3, [pc, #188]	@ (8007a88 <xTaskPriorityDisinherit+0xd4>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d00b      	beq.n	80079ec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80079d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	60fb      	str	r3, [r7, #12]
}
 80079e6:	bf00      	nop
 80079e8:	bf00      	nop
 80079ea:	e7fd      	b.n	80079e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10b      	bne.n	8007a0c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	60bb      	str	r3, [r7, #8]
}
 8007a06:	bf00      	nop
 8007a08:	bf00      	nop
 8007a0a:	e7fd      	b.n	8007a08 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a10:	1e5a      	subs	r2, r3, #1
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d02c      	beq.n	8007a7c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d128      	bne.n	8007a7c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe fc26 	bl	8006280 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a40:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8007a8c <xTaskPriorityDisinherit+0xd8>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d903      	bls.n	8007a5c <xTaskPriorityDisinherit+0xa8>
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a58:	4a0c      	ldr	r2, [pc, #48]	@ (8007a8c <xTaskPriorityDisinherit+0xd8>)
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	4a09      	ldr	r2, [pc, #36]	@ (8007a90 <xTaskPriorityDisinherit+0xdc>)
 8007a6a:	441a      	add	r2, r3
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	4619      	mov	r1, r3
 8007a72:	4610      	mov	r0, r2
 8007a74:	f7fe fba7 	bl	80061c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a7c:	697b      	ldr	r3, [r7, #20]
	}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	200009b8 	.word	0x200009b8
 8007a8c:	20000e94 	.word	0x20000e94
 8007a90:	200009bc 	.word	0x200009bc

08007a94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a9e:	4b21      	ldr	r3, [pc, #132]	@ (8007b24 <prvAddCurrentTaskToDelayedList+0x90>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007aa4:	4b20      	ldr	r3, [pc, #128]	@ (8007b28 <prvAddCurrentTaskToDelayedList+0x94>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f7fe fbe8 	bl	8006280 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab6:	d10a      	bne.n	8007ace <prvAddCurrentTaskToDelayedList+0x3a>
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d007      	beq.n	8007ace <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007abe:	4b1a      	ldr	r3, [pc, #104]	@ (8007b28 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4819      	ldr	r0, [pc, #100]	@ (8007b2c <prvAddCurrentTaskToDelayedList+0x98>)
 8007ac8:	f7fe fb7d 	bl	80061c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007acc:	e026      	b.n	8007b1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ad6:	4b14      	ldr	r3, [pc, #80]	@ (8007b28 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d209      	bcs.n	8007afa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ae6:	4b12      	ldr	r3, [pc, #72]	@ (8007b30 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	4b0f      	ldr	r3, [pc, #60]	@ (8007b28 <prvAddCurrentTaskToDelayedList+0x94>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3304      	adds	r3, #4
 8007af0:	4619      	mov	r1, r3
 8007af2:	4610      	mov	r0, r2
 8007af4:	f7fe fb8b 	bl	800620e <vListInsert>
}
 8007af8:	e010      	b.n	8007b1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007afa:	4b0e      	ldr	r3, [pc, #56]	@ (8007b34 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	4b0a      	ldr	r3, [pc, #40]	@ (8007b28 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3304      	adds	r3, #4
 8007b04:	4619      	mov	r1, r3
 8007b06:	4610      	mov	r0, r2
 8007b08:	f7fe fb81 	bl	800620e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d202      	bcs.n	8007b1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007b16:	4a08      	ldr	r2, [pc, #32]	@ (8007b38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	6013      	str	r3, [r2, #0]
}
 8007b1c:	bf00      	nop
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	20000e90 	.word	0x20000e90
 8007b28:	200009b8 	.word	0x200009b8
 8007b2c:	20000e78 	.word	0x20000e78
 8007b30:	20000e48 	.word	0x20000e48
 8007b34:	20000e44 	.word	0x20000e44
 8007b38:	20000eac 	.word	0x20000eac

08007b3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08a      	sub	sp, #40	@ 0x28
 8007b40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b42:	2300      	movs	r3, #0
 8007b44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b46:	f000 fb13 	bl	8008170 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc0 <xTimerCreateTimerTask+0x84>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d021      	beq.n	8007b96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b5a:	1d3a      	adds	r2, r7, #4
 8007b5c:	f107 0108 	add.w	r1, r7, #8
 8007b60:	f107 030c 	add.w	r3, r7, #12
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fe fae7 	bl	8006138 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007b6a:	6879      	ldr	r1, [r7, #4]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	9202      	str	r2, [sp, #8]
 8007b72:	9301      	str	r3, [sp, #4]
 8007b74:	2302      	movs	r3, #2
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	460a      	mov	r2, r1
 8007b7c:	4911      	ldr	r1, [pc, #68]	@ (8007bc4 <xTimerCreateTimerTask+0x88>)
 8007b7e:	4812      	ldr	r0, [pc, #72]	@ (8007bc8 <xTimerCreateTimerTask+0x8c>)
 8007b80:	f7ff f8a2 	bl	8006cc8 <xTaskCreateStatic>
 8007b84:	4603      	mov	r3, r0
 8007b86:	4a11      	ldr	r2, [pc, #68]	@ (8007bcc <xTimerCreateTimerTask+0x90>)
 8007b88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b8a:	4b10      	ldr	r3, [pc, #64]	@ (8007bcc <xTimerCreateTimerTask+0x90>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b92:	2301      	movs	r3, #1
 8007b94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10b      	bne.n	8007bb4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	613b      	str	r3, [r7, #16]
}
 8007bae:	bf00      	nop
 8007bb0:	bf00      	nop
 8007bb2:	e7fd      	b.n	8007bb0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007bb4:	697b      	ldr	r3, [r7, #20]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3718      	adds	r7, #24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	20000ee8 	.word	0x20000ee8
 8007bc4:	08008ca0 	.word	0x08008ca0
 8007bc8:	08007d09 	.word	0x08007d09
 8007bcc:	20000eec 	.word	0x20000eec

08007bd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b08a      	sub	sp, #40	@ 0x28
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]
 8007bdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10b      	bne.n	8007c00 <xTimerGenericCommand+0x30>
	__asm volatile
 8007be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	623b      	str	r3, [r7, #32]
}
 8007bfa:	bf00      	nop
 8007bfc:	bf00      	nop
 8007bfe:	e7fd      	b.n	8007bfc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c00:	4b19      	ldr	r3, [pc, #100]	@ (8007c68 <xTimerGenericCommand+0x98>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d02a      	beq.n	8007c5e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2b05      	cmp	r3, #5
 8007c18:	dc18      	bgt.n	8007c4c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c1a:	f7ff fead 	bl	8007978 <xTaskGetSchedulerState>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d109      	bne.n	8007c38 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c24:	4b10      	ldr	r3, [pc, #64]	@ (8007c68 <xTimerGenericCommand+0x98>)
 8007c26:	6818      	ldr	r0, [r3, #0]
 8007c28:	f107 0110 	add.w	r1, r7, #16
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c30:	f7fe fc5a 	bl	80064e8 <xQueueGenericSend>
 8007c34:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c36:	e012      	b.n	8007c5e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c38:	4b0b      	ldr	r3, [pc, #44]	@ (8007c68 <xTimerGenericCommand+0x98>)
 8007c3a:	6818      	ldr	r0, [r3, #0]
 8007c3c:	f107 0110 	add.w	r1, r7, #16
 8007c40:	2300      	movs	r3, #0
 8007c42:	2200      	movs	r2, #0
 8007c44:	f7fe fc50 	bl	80064e8 <xQueueGenericSend>
 8007c48:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c4a:	e008      	b.n	8007c5e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c4c:	4b06      	ldr	r3, [pc, #24]	@ (8007c68 <xTimerGenericCommand+0x98>)
 8007c4e:	6818      	ldr	r0, [r3, #0]
 8007c50:	f107 0110 	add.w	r1, r7, #16
 8007c54:	2300      	movs	r3, #0
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	f7fe fd48 	bl	80066ec <xQueueGenericSendFromISR>
 8007c5c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3728      	adds	r7, #40	@ 0x28
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	20000ee8 	.word	0x20000ee8

08007c6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b088      	sub	sp, #32
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c76:	4b23      	ldr	r3, [pc, #140]	@ (8007d04 <prvProcessExpiredTimer+0x98>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	68db      	ldr	r3, [r3, #12]
 8007c7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	3304      	adds	r3, #4
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fe fafb 	bl	8006280 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d023      	beq.n	8007ce0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	699a      	ldr	r2, [r3, #24]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	18d1      	adds	r1, r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	6978      	ldr	r0, [r7, #20]
 8007ca6:	f000 f8d5 	bl	8007e54 <prvInsertTimerInActiveList>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d020      	beq.n	8007cf2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	2100      	movs	r1, #0
 8007cba:	6978      	ldr	r0, [r7, #20]
 8007cbc:	f7ff ff88 	bl	8007bd0 <xTimerGenericCommand>
 8007cc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d114      	bne.n	8007cf2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	60fb      	str	r3, [r7, #12]
}
 8007cda:	bf00      	nop
 8007cdc:	bf00      	nop
 8007cde:	e7fd      	b.n	8007cdc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ce6:	f023 0301 	bic.w	r3, r3, #1
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	6978      	ldr	r0, [r7, #20]
 8007cf8:	4798      	blx	r3
}
 8007cfa:	bf00      	nop
 8007cfc:	3718      	adds	r7, #24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	20000ee0 	.word	0x20000ee0

08007d08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d10:	f107 0308 	add.w	r3, r7, #8
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 f859 	bl	8007dcc <prvGetNextExpireTime>
 8007d1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	4619      	mov	r1, r3
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f000 f805 	bl	8007d30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d26:	f000 f8d7 	bl	8007ed8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d2a:	bf00      	nop
 8007d2c:	e7f0      	b.n	8007d10 <prvTimerTask+0x8>
	...

08007d30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d3a:	f7ff fa29 	bl	8007190 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d3e:	f107 0308 	add.w	r3, r7, #8
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 f866 	bl	8007e14 <prvSampleTimeNow>
 8007d48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d130      	bne.n	8007db2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10a      	bne.n	8007d6c <prvProcessTimerOrBlockTask+0x3c>
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d806      	bhi.n	8007d6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d5e:	f7ff fa25 	bl	80071ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d62:	68f9      	ldr	r1, [r7, #12]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff ff81 	bl	8007c6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007d6a:	e024      	b.n	8007db6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d008      	beq.n	8007d84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d72:	4b13      	ldr	r3, [pc, #76]	@ (8007dc0 <prvProcessTimerOrBlockTask+0x90>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <prvProcessTimerOrBlockTask+0x50>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e000      	b.n	8007d82 <prvProcessTimerOrBlockTask+0x52>
 8007d80:	2300      	movs	r3, #0
 8007d82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d84:	4b0f      	ldr	r3, [pc, #60]	@ (8007dc4 <prvProcessTimerOrBlockTask+0x94>)
 8007d86:	6818      	ldr	r0, [r3, #0]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	4619      	mov	r1, r3
 8007d92:	f7fe ff65 	bl	8006c60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d96:	f7ff fa09 	bl	80071ac <xTaskResumeAll>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007da0:	4b09      	ldr	r3, [pc, #36]	@ (8007dc8 <prvProcessTimerOrBlockTask+0x98>)
 8007da2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007da6:	601a      	str	r2, [r3, #0]
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	f3bf 8f6f 	isb	sy
}
 8007db0:	e001      	b.n	8007db6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007db2:	f7ff f9fb 	bl	80071ac <xTaskResumeAll>
}
 8007db6:	bf00      	nop
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20000ee4 	.word	0x20000ee4
 8007dc4:	20000ee8 	.word	0x20000ee8
 8007dc8:	e000ed04 	.word	0xe000ed04

08007dcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b085      	sub	sp, #20
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8007e10 <prvGetNextExpireTime+0x44>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d101      	bne.n	8007de2 <prvGetNextExpireTime+0x16>
 8007dde:	2201      	movs	r2, #1
 8007de0:	e000      	b.n	8007de4 <prvGetNextExpireTime+0x18>
 8007de2:	2200      	movs	r2, #0
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d105      	bne.n	8007dfc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007df0:	4b07      	ldr	r3, [pc, #28]	@ (8007e10 <prvGetNextExpireTime+0x44>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	60fb      	str	r3, [r7, #12]
 8007dfa:	e001      	b.n	8007e00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e00:	68fb      	ldr	r3, [r7, #12]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	20000ee0 	.word	0x20000ee0

08007e14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e1c:	f7ff fa64 	bl	80072e8 <xTaskGetTickCount>
 8007e20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e22:	4b0b      	ldr	r3, [pc, #44]	@ (8007e50 <prvSampleTimeNow+0x3c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d205      	bcs.n	8007e38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e2c:	f000 f93a 	bl	80080a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	e002      	b.n	8007e3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e3e:	4a04      	ldr	r2, [pc, #16]	@ (8007e50 <prvSampleTimeNow+0x3c>)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e44:	68fb      	ldr	r3, [r7, #12]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20000ef0 	.word	0x20000ef0

08007e54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	607a      	str	r2, [r7, #4]
 8007e60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e62:	2300      	movs	r3, #0
 8007e64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d812      	bhi.n	8007ea0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	1ad2      	subs	r2, r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d302      	bcc.n	8007e8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	617b      	str	r3, [r7, #20]
 8007e8c:	e01b      	b.n	8007ec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e8e:	4b10      	ldr	r3, [pc, #64]	@ (8007ed0 <prvInsertTimerInActiveList+0x7c>)
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3304      	adds	r3, #4
 8007e96:	4619      	mov	r1, r3
 8007e98:	4610      	mov	r0, r2
 8007e9a:	f7fe f9b8 	bl	800620e <vListInsert>
 8007e9e:	e012      	b.n	8007ec6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d206      	bcs.n	8007eb6 <prvInsertTimerInActiveList+0x62>
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d302      	bcc.n	8007eb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	617b      	str	r3, [r7, #20]
 8007eb4:	e007      	b.n	8007ec6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007eb6:	4b07      	ldr	r3, [pc, #28]	@ (8007ed4 <prvInsertTimerInActiveList+0x80>)
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3304      	adds	r3, #4
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	f7fe f9a4 	bl	800620e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ec6:	697b      	ldr	r3, [r7, #20]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20000ee4 	.word	0x20000ee4
 8007ed4:	20000ee0 	.word	0x20000ee0

08007ed8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b08e      	sub	sp, #56	@ 0x38
 8007edc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ede:	e0ce      	b.n	800807e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	da19      	bge.n	8007f1a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007ee6:	1d3b      	adds	r3, r7, #4
 8007ee8:	3304      	adds	r3, #4
 8007eea:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10b      	bne.n	8007f0a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	61fb      	str	r3, [r7, #28]
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop
 8007f08:	e7fd      	b.n	8007f06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f10:	6850      	ldr	r0, [r2, #4]
 8007f12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f14:	6892      	ldr	r2, [r2, #8]
 8007f16:	4611      	mov	r1, r2
 8007f18:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f2c0 80ae 	blt.w	800807e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f28:	695b      	ldr	r3, [r3, #20]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d004      	beq.n	8007f38 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f30:	3304      	adds	r3, #4
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fe f9a4 	bl	8006280 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f38:	463b      	mov	r3, r7
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7ff ff6a 	bl	8007e14 <prvSampleTimeNow>
 8007f40:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2b09      	cmp	r3, #9
 8007f46:	f200 8097 	bhi.w	8008078 <prvProcessReceivedCommands+0x1a0>
 8007f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f50 <prvProcessReceivedCommands+0x78>)
 8007f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f50:	08007f79 	.word	0x08007f79
 8007f54:	08007f79 	.word	0x08007f79
 8007f58:	08007f79 	.word	0x08007f79
 8007f5c:	08007fef 	.word	0x08007fef
 8007f60:	08008003 	.word	0x08008003
 8007f64:	0800804f 	.word	0x0800804f
 8007f68:	08007f79 	.word	0x08007f79
 8007f6c:	08007f79 	.word	0x08007f79
 8007f70:	08007fef 	.word	0x08007fef
 8007f74:	08008003 	.word	0x08008003
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f7e:	f043 0301 	orr.w	r3, r3, #1
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	18d1      	adds	r1, r2, r3
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f98:	f7ff ff5c 	bl	8007e54 <prvInsertTimerInActiveList>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d06c      	beq.n	800807c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fa8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d061      	beq.n	800807c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007fb8:	68ba      	ldr	r2, [r7, #8]
 8007fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	441a      	add	r2, r3
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fca:	f7ff fe01 	bl	8007bd0 <xTimerGenericCommand>
 8007fce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d152      	bne.n	800807c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fda:	f383 8811 	msr	BASEPRI, r3
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f3bf 8f4f 	dsb	sy
 8007fe6:	61bb      	str	r3, [r7, #24]
}
 8007fe8:	bf00      	nop
 8007fea:	bf00      	nop
 8007fec:	e7fd      	b.n	8007fea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ff4:	f023 0301 	bic.w	r3, r3, #1
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008000:	e03d      	b.n	800807e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008008:	f043 0301 	orr.w	r3, r3, #1
 800800c:	b2da      	uxtb	r2, r3
 800800e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008010:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008018:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800801a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10b      	bne.n	800803a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	617b      	str	r3, [r7, #20]
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop
 8008038:	e7fd      	b.n	8008036 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800803a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803c:	699a      	ldr	r2, [r3, #24]
 800803e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008040:	18d1      	adds	r1, r2, r3
 8008042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008048:	f7ff ff04 	bl	8007e54 <prvInsertTimerInActiveList>
					break;
 800804c:	e017      	b.n	800807e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800804e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008050:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	2b00      	cmp	r3, #0
 800805a:	d103      	bne.n	8008064 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800805c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800805e:	f000 fbeb 	bl	8008838 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008062:	e00c      	b.n	800807e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008066:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800806a:	f023 0301 	bic.w	r3, r3, #1
 800806e:	b2da      	uxtb	r2, r3
 8008070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008072:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008076:	e002      	b.n	800807e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008078:	bf00      	nop
 800807a:	e000      	b.n	800807e <prvProcessReceivedCommands+0x1a6>
					break;
 800807c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800807e:	4b08      	ldr	r3, [pc, #32]	@ (80080a0 <prvProcessReceivedCommands+0x1c8>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	1d39      	adds	r1, r7, #4
 8008084:	2200      	movs	r2, #0
 8008086:	4618      	mov	r0, r3
 8008088:	f7fe fbce 	bl	8006828 <xQueueReceive>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	f47f af26 	bne.w	8007ee0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop
 8008098:	3730      	adds	r7, #48	@ 0x30
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	20000ee8 	.word	0x20000ee8

080080a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080aa:	e049      	b.n	8008140 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080ac:	4b2e      	ldr	r3, [pc, #184]	@ (8008168 <prvSwitchTimerLists+0xc4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080b6:	4b2c      	ldr	r3, [pc, #176]	@ (8008168 <prvSwitchTimerLists+0xc4>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	3304      	adds	r3, #4
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fe f8db 	bl	8006280 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d02f      	beq.n	8008140 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	4413      	add	r3, r2
 80080e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d90e      	bls.n	8008110 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008168 <prvSwitchTimerLists+0xc4>)
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	3304      	adds	r3, #4
 8008106:	4619      	mov	r1, r3
 8008108:	4610      	mov	r0, r2
 800810a:	f7fe f880 	bl	800620e <vListInsert>
 800810e:	e017      	b.n	8008140 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008110:	2300      	movs	r3, #0
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	2300      	movs	r3, #0
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	2100      	movs	r1, #0
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f7ff fd58 	bl	8007bd0 <xTimerGenericCommand>
 8008120:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10b      	bne.n	8008140 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812c:	f383 8811 	msr	BASEPRI, r3
 8008130:	f3bf 8f6f 	isb	sy
 8008134:	f3bf 8f4f 	dsb	sy
 8008138:	603b      	str	r3, [r7, #0]
}
 800813a:	bf00      	nop
 800813c:	bf00      	nop
 800813e:	e7fd      	b.n	800813c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008140:	4b09      	ldr	r3, [pc, #36]	@ (8008168 <prvSwitchTimerLists+0xc4>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1b0      	bne.n	80080ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800814a:	4b07      	ldr	r3, [pc, #28]	@ (8008168 <prvSwitchTimerLists+0xc4>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008150:	4b06      	ldr	r3, [pc, #24]	@ (800816c <prvSwitchTimerLists+0xc8>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a04      	ldr	r2, [pc, #16]	@ (8008168 <prvSwitchTimerLists+0xc4>)
 8008156:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008158:	4a04      	ldr	r2, [pc, #16]	@ (800816c <prvSwitchTimerLists+0xc8>)
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	6013      	str	r3, [r2, #0]
}
 800815e:	bf00      	nop
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20000ee0 	.word	0x20000ee0
 800816c:	20000ee4 	.word	0x20000ee4

08008170 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008176:	f000 f96f 	bl	8008458 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800817a:	4b15      	ldr	r3, [pc, #84]	@ (80081d0 <prvCheckForValidListAndQueue+0x60>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d120      	bne.n	80081c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008182:	4814      	ldr	r0, [pc, #80]	@ (80081d4 <prvCheckForValidListAndQueue+0x64>)
 8008184:	f7fd fff2 	bl	800616c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008188:	4813      	ldr	r0, [pc, #76]	@ (80081d8 <prvCheckForValidListAndQueue+0x68>)
 800818a:	f7fd ffef 	bl	800616c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800818e:	4b13      	ldr	r3, [pc, #76]	@ (80081dc <prvCheckForValidListAndQueue+0x6c>)
 8008190:	4a10      	ldr	r2, [pc, #64]	@ (80081d4 <prvCheckForValidListAndQueue+0x64>)
 8008192:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008194:	4b12      	ldr	r3, [pc, #72]	@ (80081e0 <prvCheckForValidListAndQueue+0x70>)
 8008196:	4a10      	ldr	r2, [pc, #64]	@ (80081d8 <prvCheckForValidListAndQueue+0x68>)
 8008198:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800819a:	2300      	movs	r3, #0
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	4b11      	ldr	r3, [pc, #68]	@ (80081e4 <prvCheckForValidListAndQueue+0x74>)
 80081a0:	4a11      	ldr	r2, [pc, #68]	@ (80081e8 <prvCheckForValidListAndQueue+0x78>)
 80081a2:	2110      	movs	r1, #16
 80081a4:	200a      	movs	r0, #10
 80081a6:	f7fe f8ff 	bl	80063a8 <xQueueGenericCreateStatic>
 80081aa:	4603      	mov	r3, r0
 80081ac:	4a08      	ldr	r2, [pc, #32]	@ (80081d0 <prvCheckForValidListAndQueue+0x60>)
 80081ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80081b0:	4b07      	ldr	r3, [pc, #28]	@ (80081d0 <prvCheckForValidListAndQueue+0x60>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d005      	beq.n	80081c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80081b8:	4b05      	ldr	r3, [pc, #20]	@ (80081d0 <prvCheckForValidListAndQueue+0x60>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	490b      	ldr	r1, [pc, #44]	@ (80081ec <prvCheckForValidListAndQueue+0x7c>)
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fe fd24 	bl	8006c0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081c4:	f000 f97a 	bl	80084bc <vPortExitCritical>
}
 80081c8:	bf00      	nop
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20000ee8 	.word	0x20000ee8
 80081d4:	20000eb8 	.word	0x20000eb8
 80081d8:	20000ecc 	.word	0x20000ecc
 80081dc:	20000ee0 	.word	0x20000ee0
 80081e0:	20000ee4 	.word	0x20000ee4
 80081e4:	20000f94 	.word	0x20000f94
 80081e8:	20000ef4 	.word	0x20000ef4
 80081ec:	08008ca8 	.word	0x08008ca8

080081f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	3b04      	subs	r3, #4
 8008200:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	3b04      	subs	r3, #4
 800820e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f023 0201 	bic.w	r2, r3, #1
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3b04      	subs	r3, #4
 800821e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008220:	4a0c      	ldr	r2, [pc, #48]	@ (8008254 <pxPortInitialiseStack+0x64>)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3b14      	subs	r3, #20
 800822a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3b04      	subs	r3, #4
 8008236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f06f 0202 	mvn.w	r2, #2
 800823e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3b20      	subs	r3, #32
 8008244:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008246:	68fb      	ldr	r3, [r7, #12]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3714      	adds	r7, #20
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	08008259 	.word	0x08008259

08008258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800825e:	2300      	movs	r3, #0
 8008260:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008262:	4b13      	ldr	r3, [pc, #76]	@ (80082b0 <prvTaskExitError+0x58>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826a:	d00b      	beq.n	8008284 <prvTaskExitError+0x2c>
	__asm volatile
 800826c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008270:	f383 8811 	msr	BASEPRI, r3
 8008274:	f3bf 8f6f 	isb	sy
 8008278:	f3bf 8f4f 	dsb	sy
 800827c:	60fb      	str	r3, [r7, #12]
}
 800827e:	bf00      	nop
 8008280:	bf00      	nop
 8008282:	e7fd      	b.n	8008280 <prvTaskExitError+0x28>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	60bb      	str	r3, [r7, #8]
}
 8008296:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008298:	bf00      	nop
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d0fc      	beq.n	800829a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	2000000c 	.word	0x2000000c
	...

080082c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082c0:	4b07      	ldr	r3, [pc, #28]	@ (80082e0 <pxCurrentTCBConst2>)
 80082c2:	6819      	ldr	r1, [r3, #0]
 80082c4:	6808      	ldr	r0, [r1, #0]
 80082c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ca:	f380 8809 	msr	PSP, r0
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f04f 0000 	mov.w	r0, #0
 80082d6:	f380 8811 	msr	BASEPRI, r0
 80082da:	4770      	bx	lr
 80082dc:	f3af 8000 	nop.w

080082e0 <pxCurrentTCBConst2>:
 80082e0:	200009b8 	.word	0x200009b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80082e4:	bf00      	nop
 80082e6:	bf00      	nop

080082e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80082e8:	4808      	ldr	r0, [pc, #32]	@ (800830c <prvPortStartFirstTask+0x24>)
 80082ea:	6800      	ldr	r0, [r0, #0]
 80082ec:	6800      	ldr	r0, [r0, #0]
 80082ee:	f380 8808 	msr	MSP, r0
 80082f2:	f04f 0000 	mov.w	r0, #0
 80082f6:	f380 8814 	msr	CONTROL, r0
 80082fa:	b662      	cpsie	i
 80082fc:	b661      	cpsie	f
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	f3bf 8f6f 	isb	sy
 8008306:	df00      	svc	0
 8008308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800830a:	bf00      	nop
 800830c:	e000ed08 	.word	0xe000ed08

08008310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008316:	4b47      	ldr	r3, [pc, #284]	@ (8008434 <xPortStartScheduler+0x124>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a47      	ldr	r2, [pc, #284]	@ (8008438 <xPortStartScheduler+0x128>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d10b      	bne.n	8008338 <xPortStartScheduler+0x28>
	__asm volatile
 8008320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	613b      	str	r3, [r7, #16]
}
 8008332:	bf00      	nop
 8008334:	bf00      	nop
 8008336:	e7fd      	b.n	8008334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008338:	4b3e      	ldr	r3, [pc, #248]	@ (8008434 <xPortStartScheduler+0x124>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a3f      	ldr	r2, [pc, #252]	@ (800843c <xPortStartScheduler+0x12c>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d10b      	bne.n	800835a <xPortStartScheduler+0x4a>
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	60fb      	str	r3, [r7, #12]
}
 8008354:	bf00      	nop
 8008356:	bf00      	nop
 8008358:	e7fd      	b.n	8008356 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800835a:	4b39      	ldr	r3, [pc, #228]	@ (8008440 <xPortStartScheduler+0x130>)
 800835c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	b2db      	uxtb	r3, r3
 8008364:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	22ff      	movs	r2, #255	@ 0xff
 800836a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	b2db      	uxtb	r3, r3
 8008372:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008374:	78fb      	ldrb	r3, [r7, #3]
 8008376:	b2db      	uxtb	r3, r3
 8008378:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800837c:	b2da      	uxtb	r2, r3
 800837e:	4b31      	ldr	r3, [pc, #196]	@ (8008444 <xPortStartScheduler+0x134>)
 8008380:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008382:	4b31      	ldr	r3, [pc, #196]	@ (8008448 <xPortStartScheduler+0x138>)
 8008384:	2207      	movs	r2, #7
 8008386:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008388:	e009      	b.n	800839e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800838a:	4b2f      	ldr	r3, [pc, #188]	@ (8008448 <xPortStartScheduler+0x138>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3b01      	subs	r3, #1
 8008390:	4a2d      	ldr	r2, [pc, #180]	@ (8008448 <xPortStartScheduler+0x138>)
 8008392:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008394:	78fb      	ldrb	r3, [r7, #3]
 8008396:	b2db      	uxtb	r3, r3
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	b2db      	uxtb	r3, r3
 800839c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083a6:	2b80      	cmp	r3, #128	@ 0x80
 80083a8:	d0ef      	beq.n	800838a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80083aa:	4b27      	ldr	r3, [pc, #156]	@ (8008448 <xPortStartScheduler+0x138>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f1c3 0307 	rsb	r3, r3, #7
 80083b2:	2b04      	cmp	r3, #4
 80083b4:	d00b      	beq.n	80083ce <xPortStartScheduler+0xbe>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	60bb      	str	r3, [r7, #8]
}
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
 80083cc:	e7fd      	b.n	80083ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008448 <xPortStartScheduler+0x138>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	021b      	lsls	r3, r3, #8
 80083d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008448 <xPortStartScheduler+0x138>)
 80083d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80083d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008448 <xPortStartScheduler+0x138>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80083e0:	4a19      	ldr	r2, [pc, #100]	@ (8008448 <xPortStartScheduler+0x138>)
 80083e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80083ec:	4b17      	ldr	r3, [pc, #92]	@ (800844c <xPortStartScheduler+0x13c>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a16      	ldr	r2, [pc, #88]	@ (800844c <xPortStartScheduler+0x13c>)
 80083f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80083f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80083f8:	4b14      	ldr	r3, [pc, #80]	@ (800844c <xPortStartScheduler+0x13c>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a13      	ldr	r2, [pc, #76]	@ (800844c <xPortStartScheduler+0x13c>)
 80083fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008402:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008404:	f000 f8da 	bl	80085bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008408:	4b11      	ldr	r3, [pc, #68]	@ (8008450 <xPortStartScheduler+0x140>)
 800840a:	2200      	movs	r2, #0
 800840c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800840e:	f000 f8f9 	bl	8008604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008412:	4b10      	ldr	r3, [pc, #64]	@ (8008454 <xPortStartScheduler+0x144>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a0f      	ldr	r2, [pc, #60]	@ (8008454 <xPortStartScheduler+0x144>)
 8008418:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800841c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800841e:	f7ff ff63 	bl	80082e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008422:	f7ff f82b 	bl	800747c <vTaskSwitchContext>
	prvTaskExitError();
 8008426:	f7ff ff17 	bl	8008258 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	e000ed00 	.word	0xe000ed00
 8008438:	410fc271 	.word	0x410fc271
 800843c:	410fc270 	.word	0x410fc270
 8008440:	e000e400 	.word	0xe000e400
 8008444:	20000fe4 	.word	0x20000fe4
 8008448:	20000fe8 	.word	0x20000fe8
 800844c:	e000ed20 	.word	0xe000ed20
 8008450:	2000000c 	.word	0x2000000c
 8008454:	e000ef34 	.word	0xe000ef34

08008458 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	607b      	str	r3, [r7, #4]
}
 8008470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008472:	4b10      	ldr	r3, [pc, #64]	@ (80084b4 <vPortEnterCritical+0x5c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	3301      	adds	r3, #1
 8008478:	4a0e      	ldr	r2, [pc, #56]	@ (80084b4 <vPortEnterCritical+0x5c>)
 800847a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800847c:	4b0d      	ldr	r3, [pc, #52]	@ (80084b4 <vPortEnterCritical+0x5c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d110      	bne.n	80084a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008484:	4b0c      	ldr	r3, [pc, #48]	@ (80084b8 <vPortEnterCritical+0x60>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	b2db      	uxtb	r3, r3
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00b      	beq.n	80084a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800848e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	603b      	str	r3, [r7, #0]
}
 80084a0:	bf00      	nop
 80084a2:	bf00      	nop
 80084a4:	e7fd      	b.n	80084a2 <vPortEnterCritical+0x4a>
	}
}
 80084a6:	bf00      	nop
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	2000000c 	.word	0x2000000c
 80084b8:	e000ed04 	.word	0xe000ed04

080084bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80084c2:	4b12      	ldr	r3, [pc, #72]	@ (800850c <vPortExitCritical+0x50>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10b      	bne.n	80084e2 <vPortExitCritical+0x26>
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ce:	f383 8811 	msr	BASEPRI, r3
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	607b      	str	r3, [r7, #4]
}
 80084dc:	bf00      	nop
 80084de:	bf00      	nop
 80084e0:	e7fd      	b.n	80084de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80084e2:	4b0a      	ldr	r3, [pc, #40]	@ (800850c <vPortExitCritical+0x50>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	4a08      	ldr	r2, [pc, #32]	@ (800850c <vPortExitCritical+0x50>)
 80084ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80084ec:	4b07      	ldr	r3, [pc, #28]	@ (800850c <vPortExitCritical+0x50>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d105      	bne.n	8008500 <vPortExitCritical+0x44>
 80084f4:	2300      	movs	r3, #0
 80084f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	f383 8811 	msr	BASEPRI, r3
}
 80084fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	2000000c 	.word	0x2000000c

08008510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008510:	f3ef 8009 	mrs	r0, PSP
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	4b15      	ldr	r3, [pc, #84]	@ (8008570 <pxCurrentTCBConst>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	f01e 0f10 	tst.w	lr, #16
 8008520:	bf08      	it	eq
 8008522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852a:	6010      	str	r0, [r2, #0]
 800852c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008530:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008534:	f380 8811 	msr	BASEPRI, r0
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f7fe ff9c 	bl	800747c <vTaskSwitchContext>
 8008544:	f04f 0000 	mov.w	r0, #0
 8008548:	f380 8811 	msr	BASEPRI, r0
 800854c:	bc09      	pop	{r0, r3}
 800854e:	6819      	ldr	r1, [r3, #0]
 8008550:	6808      	ldr	r0, [r1, #0]
 8008552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008556:	f01e 0f10 	tst.w	lr, #16
 800855a:	bf08      	it	eq
 800855c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008560:	f380 8809 	msr	PSP, r0
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	f3af 8000 	nop.w

08008570 <pxCurrentTCBConst>:
 8008570:	200009b8 	.word	0x200009b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop

08008578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	607b      	str	r3, [r7, #4]
}
 8008590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008592:	f7fe feb9 	bl	8007308 <xTaskIncrementTick>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d003      	beq.n	80085a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800859c:	4b06      	ldr	r3, [pc, #24]	@ (80085b8 <xPortSysTickHandler+0x40>)
 800859e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	2300      	movs	r3, #0
 80085a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	f383 8811 	msr	BASEPRI, r3
}
 80085ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80085b0:	bf00      	nop
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	e000ed04 	.word	0xe000ed04

080085bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80085bc:	b480      	push	{r7}
 80085be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80085c0:	4b0b      	ldr	r3, [pc, #44]	@ (80085f0 <vPortSetupTimerInterrupt+0x34>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80085c6:	4b0b      	ldr	r3, [pc, #44]	@ (80085f4 <vPortSetupTimerInterrupt+0x38>)
 80085c8:	2200      	movs	r2, #0
 80085ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80085cc:	4b0a      	ldr	r3, [pc, #40]	@ (80085f8 <vPortSetupTimerInterrupt+0x3c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a0a      	ldr	r2, [pc, #40]	@ (80085fc <vPortSetupTimerInterrupt+0x40>)
 80085d2:	fba2 2303 	umull	r2, r3, r2, r3
 80085d6:	099b      	lsrs	r3, r3, #6
 80085d8:	4a09      	ldr	r2, [pc, #36]	@ (8008600 <vPortSetupTimerInterrupt+0x44>)
 80085da:	3b01      	subs	r3, #1
 80085dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80085de:	4b04      	ldr	r3, [pc, #16]	@ (80085f0 <vPortSetupTimerInterrupt+0x34>)
 80085e0:	2207      	movs	r2, #7
 80085e2:	601a      	str	r2, [r3, #0]
}
 80085e4:	bf00      	nop
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	e000e010 	.word	0xe000e010
 80085f4:	e000e018 	.word	0xe000e018
 80085f8:	20000000 	.word	0x20000000
 80085fc:	10624dd3 	.word	0x10624dd3
 8008600:	e000e014 	.word	0xe000e014

08008604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008604:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008614 <vPortEnableVFP+0x10>
 8008608:	6801      	ldr	r1, [r0, #0]
 800860a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800860e:	6001      	str	r1, [r0, #0]
 8008610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008612:	bf00      	nop
 8008614:	e000ed88 	.word	0xe000ed88

08008618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800861e:	f3ef 8305 	mrs	r3, IPSR
 8008622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b0f      	cmp	r3, #15
 8008628:	d915      	bls.n	8008656 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800862a:	4a18      	ldr	r2, [pc, #96]	@ (800868c <vPortValidateInterruptPriority+0x74>)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	4413      	add	r3, r2
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008634:	4b16      	ldr	r3, [pc, #88]	@ (8008690 <vPortValidateInterruptPriority+0x78>)
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	7afa      	ldrb	r2, [r7, #11]
 800863a:	429a      	cmp	r2, r3
 800863c:	d20b      	bcs.n	8008656 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800863e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008642:	f383 8811 	msr	BASEPRI, r3
 8008646:	f3bf 8f6f 	isb	sy
 800864a:	f3bf 8f4f 	dsb	sy
 800864e:	607b      	str	r3, [r7, #4]
}
 8008650:	bf00      	nop
 8008652:	bf00      	nop
 8008654:	e7fd      	b.n	8008652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008656:	4b0f      	ldr	r3, [pc, #60]	@ (8008694 <vPortValidateInterruptPriority+0x7c>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800865e:	4b0e      	ldr	r3, [pc, #56]	@ (8008698 <vPortValidateInterruptPriority+0x80>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	429a      	cmp	r2, r3
 8008664:	d90b      	bls.n	800867e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	603b      	str	r3, [r7, #0]
}
 8008678:	bf00      	nop
 800867a:	bf00      	nop
 800867c:	e7fd      	b.n	800867a <vPortValidateInterruptPriority+0x62>
	}
 800867e:	bf00      	nop
 8008680:	3714      	adds	r7, #20
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	e000e3f0 	.word	0xe000e3f0
 8008690:	20000fe4 	.word	0x20000fe4
 8008694:	e000ed0c 	.word	0xe000ed0c
 8008698:	20000fe8 	.word	0x20000fe8

0800869c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08a      	sub	sp, #40	@ 0x28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80086a4:	2300      	movs	r3, #0
 80086a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80086a8:	f7fe fd72 	bl	8007190 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80086ac:	4b5c      	ldr	r3, [pc, #368]	@ (8008820 <pvPortMalloc+0x184>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d101      	bne.n	80086b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80086b4:	f000 f924 	bl	8008900 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80086b8:	4b5a      	ldr	r3, [pc, #360]	@ (8008824 <pvPortMalloc+0x188>)
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4013      	ands	r3, r2
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f040 8095 	bne.w	80087f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d01e      	beq.n	800870a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80086cc:	2208      	movs	r2, #8
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4413      	add	r3, r2
 80086d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f003 0307 	and.w	r3, r3, #7
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d015      	beq.n	800870a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f023 0307 	bic.w	r3, r3, #7
 80086e4:	3308      	adds	r3, #8
 80086e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f003 0307 	and.w	r3, r3, #7
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00b      	beq.n	800870a <pvPortMalloc+0x6e>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	617b      	str	r3, [r7, #20]
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop
 8008708:	e7fd      	b.n	8008706 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d06f      	beq.n	80087f0 <pvPortMalloc+0x154>
 8008710:	4b45      	ldr	r3, [pc, #276]	@ (8008828 <pvPortMalloc+0x18c>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	429a      	cmp	r2, r3
 8008718:	d86a      	bhi.n	80087f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800871a:	4b44      	ldr	r3, [pc, #272]	@ (800882c <pvPortMalloc+0x190>)
 800871c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800871e:	4b43      	ldr	r3, [pc, #268]	@ (800882c <pvPortMalloc+0x190>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008724:	e004      	b.n	8008730 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008728:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800872a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	429a      	cmp	r2, r3
 8008738:	d903      	bls.n	8008742 <pvPortMalloc+0xa6>
 800873a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1f1      	bne.n	8008726 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008742:	4b37      	ldr	r3, [pc, #220]	@ (8008820 <pvPortMalloc+0x184>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008748:	429a      	cmp	r2, r3
 800874a:	d051      	beq.n	80087f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2208      	movs	r2, #8
 8008752:	4413      	add	r3, r2
 8008754:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800875e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008760:	685a      	ldr	r2, [r3, #4]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	1ad2      	subs	r2, r2, r3
 8008766:	2308      	movs	r3, #8
 8008768:	005b      	lsls	r3, r3, #1
 800876a:	429a      	cmp	r2, r3
 800876c:	d920      	bls.n	80087b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800876e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4413      	add	r3, r2
 8008774:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	f003 0307 	and.w	r3, r3, #7
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00b      	beq.n	8008798 <pvPortMalloc+0xfc>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	613b      	str	r3, [r7, #16]
}
 8008792:	bf00      	nop
 8008794:	bf00      	nop
 8008796:	e7fd      	b.n	8008794 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	1ad2      	subs	r2, r2, r3
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80087a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80087aa:	69b8      	ldr	r0, [r7, #24]
 80087ac:	f000 f90a 	bl	80089c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80087b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008828 <pvPortMalloc+0x18c>)
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	4a1b      	ldr	r2, [pc, #108]	@ (8008828 <pvPortMalloc+0x18c>)
 80087bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80087be:	4b1a      	ldr	r3, [pc, #104]	@ (8008828 <pvPortMalloc+0x18c>)
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008830 <pvPortMalloc+0x194>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d203      	bcs.n	80087d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087ca:	4b17      	ldr	r3, [pc, #92]	@ (8008828 <pvPortMalloc+0x18c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a18      	ldr	r2, [pc, #96]	@ (8008830 <pvPortMalloc+0x194>)
 80087d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	4b13      	ldr	r3, [pc, #76]	@ (8008824 <pvPortMalloc+0x188>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	431a      	orrs	r2, r3
 80087dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80087e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e2:	2200      	movs	r2, #0
 80087e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80087e6:	4b13      	ldr	r3, [pc, #76]	@ (8008834 <pvPortMalloc+0x198>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3301      	adds	r3, #1
 80087ec:	4a11      	ldr	r2, [pc, #68]	@ (8008834 <pvPortMalloc+0x198>)
 80087ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80087f0:	f7fe fcdc 	bl	80071ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00b      	beq.n	8008816 <pvPortMalloc+0x17a>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	60fb      	str	r3, [r7, #12]
}
 8008810:	bf00      	nop
 8008812:	bf00      	nop
 8008814:	e7fd      	b.n	8008812 <pvPortMalloc+0x176>
	return pvReturn;
 8008816:	69fb      	ldr	r3, [r7, #28]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3728      	adds	r7, #40	@ 0x28
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	20001bac 	.word	0x20001bac
 8008824:	20001bc0 	.word	0x20001bc0
 8008828:	20001bb0 	.word	0x20001bb0
 800882c:	20001ba4 	.word	0x20001ba4
 8008830:	20001bb4 	.word	0x20001bb4
 8008834:	20001bb8 	.word	0x20001bb8

08008838 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d04f      	beq.n	80088ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800884a:	2308      	movs	r3, #8
 800884c:	425b      	negs	r3, r3
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	4413      	add	r3, r2
 8008852:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	4b25      	ldr	r3, [pc, #148]	@ (80088f4 <vPortFree+0xbc>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4013      	ands	r3, r2
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10b      	bne.n	800887e <vPortFree+0x46>
	__asm volatile
 8008866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800886a:	f383 8811 	msr	BASEPRI, r3
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	f3bf 8f4f 	dsb	sy
 8008876:	60fb      	str	r3, [r7, #12]
}
 8008878:	bf00      	nop
 800887a:	bf00      	nop
 800887c:	e7fd      	b.n	800887a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00b      	beq.n	800889e <vPortFree+0x66>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	60bb      	str	r3, [r7, #8]
}
 8008898:	bf00      	nop
 800889a:	bf00      	nop
 800889c:	e7fd      	b.n	800889a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	4b14      	ldr	r3, [pc, #80]	@ (80088f4 <vPortFree+0xbc>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4013      	ands	r3, r2
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d01e      	beq.n	80088ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d11a      	bne.n	80088ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	685a      	ldr	r2, [r3, #4]
 80088b8:	4b0e      	ldr	r3, [pc, #56]	@ (80088f4 <vPortFree+0xbc>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	43db      	mvns	r3, r3
 80088be:	401a      	ands	r2, r3
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80088c4:	f7fe fc64 	bl	8007190 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	4b0a      	ldr	r3, [pc, #40]	@ (80088f8 <vPortFree+0xc0>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4413      	add	r3, r2
 80088d2:	4a09      	ldr	r2, [pc, #36]	@ (80088f8 <vPortFree+0xc0>)
 80088d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80088d6:	6938      	ldr	r0, [r7, #16]
 80088d8:	f000 f874 	bl	80089c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80088dc:	4b07      	ldr	r3, [pc, #28]	@ (80088fc <vPortFree+0xc4>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3301      	adds	r3, #1
 80088e2:	4a06      	ldr	r2, [pc, #24]	@ (80088fc <vPortFree+0xc4>)
 80088e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80088e6:	f7fe fc61 	bl	80071ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80088ea:	bf00      	nop
 80088ec:	3718      	adds	r7, #24
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20001bc0 	.word	0x20001bc0
 80088f8:	20001bb0 	.word	0x20001bb0
 80088fc:	20001bbc 	.word	0x20001bbc

08008900 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008906:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800890a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800890c:	4b27      	ldr	r3, [pc, #156]	@ (80089ac <prvHeapInit+0xac>)
 800890e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f003 0307 	and.w	r3, r3, #7
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00c      	beq.n	8008934 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	3307      	adds	r3, #7
 800891e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 0307 	bic.w	r3, r3, #7
 8008926:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	4a1f      	ldr	r2, [pc, #124]	@ (80089ac <prvHeapInit+0xac>)
 8008930:	4413      	add	r3, r2
 8008932:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008938:	4a1d      	ldr	r2, [pc, #116]	@ (80089b0 <prvHeapInit+0xb0>)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800893e:	4b1c      	ldr	r3, [pc, #112]	@ (80089b0 <prvHeapInit+0xb0>)
 8008940:	2200      	movs	r2, #0
 8008942:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	4413      	add	r3, r2
 800894a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800894c:	2208      	movs	r2, #8
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	1a9b      	subs	r3, r3, r2
 8008952:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f023 0307 	bic.w	r3, r3, #7
 800895a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	4a15      	ldr	r2, [pc, #84]	@ (80089b4 <prvHeapInit+0xb4>)
 8008960:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008962:	4b14      	ldr	r3, [pc, #80]	@ (80089b4 <prvHeapInit+0xb4>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2200      	movs	r2, #0
 8008968:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800896a:	4b12      	ldr	r3, [pc, #72]	@ (80089b4 <prvHeapInit+0xb4>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2200      	movs	r2, #0
 8008970:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	1ad2      	subs	r2, r2, r3
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008980:	4b0c      	ldr	r3, [pc, #48]	@ (80089b4 <prvHeapInit+0xb4>)
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	4a0a      	ldr	r2, [pc, #40]	@ (80089b8 <prvHeapInit+0xb8>)
 800898e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	4a09      	ldr	r2, [pc, #36]	@ (80089bc <prvHeapInit+0xbc>)
 8008996:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008998:	4b09      	ldr	r3, [pc, #36]	@ (80089c0 <prvHeapInit+0xc0>)
 800899a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800899e:	601a      	str	r2, [r3, #0]
}
 80089a0:	bf00      	nop
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	20000fec 	.word	0x20000fec
 80089b0:	20001ba4 	.word	0x20001ba4
 80089b4:	20001bac 	.word	0x20001bac
 80089b8:	20001bb4 	.word	0x20001bb4
 80089bc:	20001bb0 	.word	0x20001bb0
 80089c0:	20001bc0 	.word	0x20001bc0

080089c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80089cc:	4b28      	ldr	r3, [pc, #160]	@ (8008a70 <prvInsertBlockIntoFreeList+0xac>)
 80089ce:	60fb      	str	r3, [r7, #12]
 80089d0:	e002      	b.n	80089d8 <prvInsertBlockIntoFreeList+0x14>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	60fb      	str	r3, [r7, #12]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d8f7      	bhi.n	80089d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	4413      	add	r3, r2
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d108      	bne.n	8008a06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	685a      	ldr	r2, [r3, #4]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	441a      	add	r2, r3
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	441a      	add	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d118      	bne.n	8008a4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	4b15      	ldr	r3, [pc, #84]	@ (8008a74 <prvInsertBlockIntoFreeList+0xb0>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d00d      	beq.n	8008a42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	685a      	ldr	r2, [r3, #4]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	441a      	add	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	601a      	str	r2, [r3, #0]
 8008a40:	e008      	b.n	8008a54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a42:	4b0c      	ldr	r3, [pc, #48]	@ (8008a74 <prvInsertBlockIntoFreeList+0xb0>)
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	601a      	str	r2, [r3, #0]
 8008a4a:	e003      	b.n	8008a54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d002      	beq.n	8008a62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a62:	bf00      	nop
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	20001ba4 	.word	0x20001ba4
 8008a74:	20001bac 	.word	0x20001bac

08008a78 <memset>:
 8008a78:	4402      	add	r2, r0
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d100      	bne.n	8008a82 <memset+0xa>
 8008a80:	4770      	bx	lr
 8008a82:	f803 1b01 	strb.w	r1, [r3], #1
 8008a86:	e7f9      	b.n	8008a7c <memset+0x4>

08008a88 <_reclaim_reent>:
 8008a88:	4b29      	ldr	r3, [pc, #164]	@ (8008b30 <_reclaim_reent+0xa8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4283      	cmp	r3, r0
 8008a8e:	b570      	push	{r4, r5, r6, lr}
 8008a90:	4604      	mov	r4, r0
 8008a92:	d04b      	beq.n	8008b2c <_reclaim_reent+0xa4>
 8008a94:	69c3      	ldr	r3, [r0, #28]
 8008a96:	b1ab      	cbz	r3, 8008ac4 <_reclaim_reent+0x3c>
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	b16b      	cbz	r3, 8008ab8 <_reclaim_reent+0x30>
 8008a9c:	2500      	movs	r5, #0
 8008a9e:	69e3      	ldr	r3, [r4, #28]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	5959      	ldr	r1, [r3, r5]
 8008aa4:	2900      	cmp	r1, #0
 8008aa6:	d13b      	bne.n	8008b20 <_reclaim_reent+0x98>
 8008aa8:	3504      	adds	r5, #4
 8008aaa:	2d80      	cmp	r5, #128	@ 0x80
 8008aac:	d1f7      	bne.n	8008a9e <_reclaim_reent+0x16>
 8008aae:	69e3      	ldr	r3, [r4, #28]
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	68d9      	ldr	r1, [r3, #12]
 8008ab4:	f000 f872 	bl	8008b9c <_free_r>
 8008ab8:	69e3      	ldr	r3, [r4, #28]
 8008aba:	6819      	ldr	r1, [r3, #0]
 8008abc:	b111      	cbz	r1, 8008ac4 <_reclaim_reent+0x3c>
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 f86c 	bl	8008b9c <_free_r>
 8008ac4:	6961      	ldr	r1, [r4, #20]
 8008ac6:	b111      	cbz	r1, 8008ace <_reclaim_reent+0x46>
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f000 f867 	bl	8008b9c <_free_r>
 8008ace:	69e1      	ldr	r1, [r4, #28]
 8008ad0:	b111      	cbz	r1, 8008ad8 <_reclaim_reent+0x50>
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f000 f862 	bl	8008b9c <_free_r>
 8008ad8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008ada:	b111      	cbz	r1, 8008ae2 <_reclaim_reent+0x5a>
 8008adc:	4620      	mov	r0, r4
 8008ade:	f000 f85d 	bl	8008b9c <_free_r>
 8008ae2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008ae4:	b111      	cbz	r1, 8008aec <_reclaim_reent+0x64>
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	f000 f858 	bl	8008b9c <_free_r>
 8008aec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008aee:	b111      	cbz	r1, 8008af6 <_reclaim_reent+0x6e>
 8008af0:	4620      	mov	r0, r4
 8008af2:	f000 f853 	bl	8008b9c <_free_r>
 8008af6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008af8:	b111      	cbz	r1, 8008b00 <_reclaim_reent+0x78>
 8008afa:	4620      	mov	r0, r4
 8008afc:	f000 f84e 	bl	8008b9c <_free_r>
 8008b00:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008b02:	b111      	cbz	r1, 8008b0a <_reclaim_reent+0x82>
 8008b04:	4620      	mov	r0, r4
 8008b06:	f000 f849 	bl	8008b9c <_free_r>
 8008b0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008b0c:	b111      	cbz	r1, 8008b14 <_reclaim_reent+0x8c>
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 f844 	bl	8008b9c <_free_r>
 8008b14:	6a23      	ldr	r3, [r4, #32]
 8008b16:	b14b      	cbz	r3, 8008b2c <_reclaim_reent+0xa4>
 8008b18:	4620      	mov	r0, r4
 8008b1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b1e:	4718      	bx	r3
 8008b20:	680e      	ldr	r6, [r1, #0]
 8008b22:	4620      	mov	r0, r4
 8008b24:	f000 f83a 	bl	8008b9c <_free_r>
 8008b28:	4631      	mov	r1, r6
 8008b2a:	e7bb      	b.n	8008aa4 <_reclaim_reent+0x1c>
 8008b2c:	bd70      	pop	{r4, r5, r6, pc}
 8008b2e:	bf00      	nop
 8008b30:	20000010 	.word	0x20000010

08008b34 <__libc_init_array>:
 8008b34:	b570      	push	{r4, r5, r6, lr}
 8008b36:	4d0d      	ldr	r5, [pc, #52]	@ (8008b6c <__libc_init_array+0x38>)
 8008b38:	4c0d      	ldr	r4, [pc, #52]	@ (8008b70 <__libc_init_array+0x3c>)
 8008b3a:	1b64      	subs	r4, r4, r5
 8008b3c:	10a4      	asrs	r4, r4, #2
 8008b3e:	2600      	movs	r6, #0
 8008b40:	42a6      	cmp	r6, r4
 8008b42:	d109      	bne.n	8008b58 <__libc_init_array+0x24>
 8008b44:	4d0b      	ldr	r5, [pc, #44]	@ (8008b74 <__libc_init_array+0x40>)
 8008b46:	4c0c      	ldr	r4, [pc, #48]	@ (8008b78 <__libc_init_array+0x44>)
 8008b48:	f000 f87e 	bl	8008c48 <_init>
 8008b4c:	1b64      	subs	r4, r4, r5
 8008b4e:	10a4      	asrs	r4, r4, #2
 8008b50:	2600      	movs	r6, #0
 8008b52:	42a6      	cmp	r6, r4
 8008b54:	d105      	bne.n	8008b62 <__libc_init_array+0x2e>
 8008b56:	bd70      	pop	{r4, r5, r6, pc}
 8008b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b5c:	4798      	blx	r3
 8008b5e:	3601      	adds	r6, #1
 8008b60:	e7ee      	b.n	8008b40 <__libc_init_array+0xc>
 8008b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b66:	4798      	blx	r3
 8008b68:	3601      	adds	r6, #1
 8008b6a:	e7f2      	b.n	8008b52 <__libc_init_array+0x1e>
 8008b6c:	08008d88 	.word	0x08008d88
 8008b70:	08008d88 	.word	0x08008d88
 8008b74:	08008d88 	.word	0x08008d88
 8008b78:	08008d8c 	.word	0x08008d8c

08008b7c <__retarget_lock_acquire_recursive>:
 8008b7c:	4770      	bx	lr

08008b7e <__retarget_lock_release_recursive>:
 8008b7e:	4770      	bx	lr

08008b80 <memcpy>:
 8008b80:	440a      	add	r2, r1
 8008b82:	4291      	cmp	r1, r2
 8008b84:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b88:	d100      	bne.n	8008b8c <memcpy+0xc>
 8008b8a:	4770      	bx	lr
 8008b8c:	b510      	push	{r4, lr}
 8008b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b96:	4291      	cmp	r1, r2
 8008b98:	d1f9      	bne.n	8008b8e <memcpy+0xe>
 8008b9a:	bd10      	pop	{r4, pc}

08008b9c <_free_r>:
 8008b9c:	b538      	push	{r3, r4, r5, lr}
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	2900      	cmp	r1, #0
 8008ba2:	d041      	beq.n	8008c28 <_free_r+0x8c>
 8008ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ba8:	1f0c      	subs	r4, r1, #4
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	bfb8      	it	lt
 8008bae:	18e4      	addlt	r4, r4, r3
 8008bb0:	f000 f83e 	bl	8008c30 <__malloc_lock>
 8008bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8008c2c <_free_r+0x90>)
 8008bb6:	6813      	ldr	r3, [r2, #0]
 8008bb8:	b933      	cbnz	r3, 8008bc8 <_free_r+0x2c>
 8008bba:	6063      	str	r3, [r4, #4]
 8008bbc:	6014      	str	r4, [r2, #0]
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bc4:	f000 b83a 	b.w	8008c3c <__malloc_unlock>
 8008bc8:	42a3      	cmp	r3, r4
 8008bca:	d908      	bls.n	8008bde <_free_r+0x42>
 8008bcc:	6820      	ldr	r0, [r4, #0]
 8008bce:	1821      	adds	r1, r4, r0
 8008bd0:	428b      	cmp	r3, r1
 8008bd2:	bf01      	itttt	eq
 8008bd4:	6819      	ldreq	r1, [r3, #0]
 8008bd6:	685b      	ldreq	r3, [r3, #4]
 8008bd8:	1809      	addeq	r1, r1, r0
 8008bda:	6021      	streq	r1, [r4, #0]
 8008bdc:	e7ed      	b.n	8008bba <_free_r+0x1e>
 8008bde:	461a      	mov	r2, r3
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	b10b      	cbz	r3, 8008be8 <_free_r+0x4c>
 8008be4:	42a3      	cmp	r3, r4
 8008be6:	d9fa      	bls.n	8008bde <_free_r+0x42>
 8008be8:	6811      	ldr	r1, [r2, #0]
 8008bea:	1850      	adds	r0, r2, r1
 8008bec:	42a0      	cmp	r0, r4
 8008bee:	d10b      	bne.n	8008c08 <_free_r+0x6c>
 8008bf0:	6820      	ldr	r0, [r4, #0]
 8008bf2:	4401      	add	r1, r0
 8008bf4:	1850      	adds	r0, r2, r1
 8008bf6:	4283      	cmp	r3, r0
 8008bf8:	6011      	str	r1, [r2, #0]
 8008bfa:	d1e0      	bne.n	8008bbe <_free_r+0x22>
 8008bfc:	6818      	ldr	r0, [r3, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	6053      	str	r3, [r2, #4]
 8008c02:	4408      	add	r0, r1
 8008c04:	6010      	str	r0, [r2, #0]
 8008c06:	e7da      	b.n	8008bbe <_free_r+0x22>
 8008c08:	d902      	bls.n	8008c10 <_free_r+0x74>
 8008c0a:	230c      	movs	r3, #12
 8008c0c:	602b      	str	r3, [r5, #0]
 8008c0e:	e7d6      	b.n	8008bbe <_free_r+0x22>
 8008c10:	6820      	ldr	r0, [r4, #0]
 8008c12:	1821      	adds	r1, r4, r0
 8008c14:	428b      	cmp	r3, r1
 8008c16:	bf04      	itt	eq
 8008c18:	6819      	ldreq	r1, [r3, #0]
 8008c1a:	685b      	ldreq	r3, [r3, #4]
 8008c1c:	6063      	str	r3, [r4, #4]
 8008c1e:	bf04      	itt	eq
 8008c20:	1809      	addeq	r1, r1, r0
 8008c22:	6021      	streq	r1, [r4, #0]
 8008c24:	6054      	str	r4, [r2, #4]
 8008c26:	e7ca      	b.n	8008bbe <_free_r+0x22>
 8008c28:	bd38      	pop	{r3, r4, r5, pc}
 8008c2a:	bf00      	nop
 8008c2c:	20001d00 	.word	0x20001d00

08008c30 <__malloc_lock>:
 8008c30:	4801      	ldr	r0, [pc, #4]	@ (8008c38 <__malloc_lock+0x8>)
 8008c32:	f7ff bfa3 	b.w	8008b7c <__retarget_lock_acquire_recursive>
 8008c36:	bf00      	nop
 8008c38:	20001cfc 	.word	0x20001cfc

08008c3c <__malloc_unlock>:
 8008c3c:	4801      	ldr	r0, [pc, #4]	@ (8008c44 <__malloc_unlock+0x8>)
 8008c3e:	f7ff bf9e 	b.w	8008b7e <__retarget_lock_release_recursive>
 8008c42:	bf00      	nop
 8008c44:	20001cfc 	.word	0x20001cfc

08008c48 <_init>:
 8008c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4a:	bf00      	nop
 8008c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c4e:	bc08      	pop	{r3}
 8008c50:	469e      	mov	lr, r3
 8008c52:	4770      	bx	lr

08008c54 <_fini>:
 8008c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c56:	bf00      	nop
 8008c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5a:	bc08      	pop	{r3}
 8008c5c:	469e      	mov	lr, r3
 8008c5e:	4770      	bx	lr
