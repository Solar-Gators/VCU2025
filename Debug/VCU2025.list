
VCU2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009710  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080098c0  080098c0  0000a8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099e8  080099e8  0000b060  2**0
                  CONTENTS
  4 .ARM          00000000  080099e8  080099e8  0000b060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099e8  080099e8  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099e8  080099e8  0000a9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099ec  080099ec  0000a9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080099f0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cfc  20000060  08009a50  0000b060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d5c  08009a50  0000bd5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee64  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040fc  00000000  00000000  00029ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  0002dff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014a6  00000000  00000000  0002fa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bb2a  00000000  00000000  00030f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e2d0  00000000  00000000  0005ca60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e375  00000000  00000000  0007ad30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001890a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074d8  00000000  00000000  001890e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001905c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080098a8 	.word	0x080098a8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	080098a8 	.word	0x080098a8

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2uiz>:
 800098c:	004a      	lsls	r2, r1, #1
 800098e:	d211      	bcs.n	80009b4 <__aeabi_d2uiz+0x28>
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000994:	d211      	bcs.n	80009ba <__aeabi_d2uiz+0x2e>
 8000996:	d50d      	bpl.n	80009b4 <__aeabi_d2uiz+0x28>
 8000998:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d40e      	bmi.n	80009c0 <__aeabi_d2uiz+0x34>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009be:	d102      	bne.n	80009c6 <__aeabi_d2uiz+0x3a>
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	0000      	movs	r0, r0
	...

08000a70 <INA226_Initialize>:
#include <INA226.h>
#include <stdio.h>
#include <math.h>

//Initialize INA226 Component using max current expected and resistance of shunt resistor.
HAL_StatusTypeDef  INA226_Initialize(INA226_t *dev, I2C_HandleTypeDef *i2cHandle, float maxCurrent, float shuntResistance ){
 8000a70:	b5b0      	push	{r4, r5, r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a7e:	edc7 0a00 	vstr	s1, [r7]
	dev->i2cHandle = i2cHandle;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	601a      	str	r2, [r3, #0]
	dev->config = 0;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	829a      	strh	r2, [r3, #20]
	dev->shuntVoltage = 0; //max is 81.92mV
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2200      	movs	r2, #0
 8000a92:	82da      	strh	r2, [r3, #22]
	dev->busVoltage = 0;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2200      	movs	r2, #0
 8000a98:	831a      	strh	r2, [r3, #24]
	dev->power = 0;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
	dev->current = 0;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f04f 0200 	mov.w	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
	dev->calibration = 0;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f04f 0200 	mov.w	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	@ 0x24

	//Current LSB = (Maximum Expected Current)/2^15
	dev->current_LSB = (maxCurrent) / pow(2, 15); // 10A
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff fd00 	bl	80004b8 <__aeabi_f2d>
 8000ab8:	f04f 0200 	mov.w	r2, #0
 8000abc:	4b46      	ldr	r3, [pc, #280]	@ (8000bd8 <INA226_Initialize+0x168>)
 8000abe:	f7ff fe7d 	bl	80007bc <__aeabi_ddiv>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	68f9      	ldr	r1, [r7, #12]
 8000ac8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dev->rShunt = shuntResistance; //20 mOHM
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	611a      	str	r2, [r3, #16]

	//store # of errors to check for issues
	uint8_t errNum = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	75fb      	strb	r3, [r7, #23]


	//Check device manufacturing and DIE ID


	status = INA226_ReadRegister(dev,INA226_MANUF_ID_REG , &regData);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	461a      	mov	r2, r3
 8000adc:	21fe      	movs	r1, #254	@ 0xfe
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f000 f87c 	bl	8000bdc <INA226_ReadRegister>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	75bb      	strb	r3, [r7, #22]

	if(regData != INA226_MANUF_ID){
 8000ae8:	8abb      	ldrh	r3, [r7, #20]
 8000aea:	f245 4249 	movw	r2, #21577	@ 0x5449
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d001      	beq.n	8000af6 <INA226_Initialize+0x86>
		//leave since ID doesn't match
		return 255;
 8000af2:	23ff      	movs	r3, #255	@ 0xff
 8000af4:	e066      	b.n	8000bc4 <INA226_Initialize+0x154>
	}

	status = INA226_ReadRegister(dev,INA226_DIE_ID_REG, &regData);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	461a      	mov	r2, r3
 8000afc:	21ff      	movs	r1, #255	@ 0xff
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f000 f86c 	bl	8000bdc <INA226_ReadRegister>
 8000b04:	4603      	mov	r3, r0
 8000b06:	75bb      	strb	r3, [r7, #22]

	if(regData != INA226_DIE_ID){
 8000b08:	8abb      	ldrh	r3, [r7, #20]
 8000b0a:	f242 2260 	movw	r2, #8800	@ 0x2260
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d001      	beq.n	8000b16 <INA226_Initialize+0xa6>
		//leave since ID doesn't match
		return 255;
 8000b12:	23ff      	movs	r3, #255	@ 0xff
 8000b14:	e056      	b.n	8000bc4 <INA226_Initialize+0x154>

	//Configutation Register: Sets different measuring parameters (Page 22-23)
	  // Bit(B)15 -> reset, B11-B9 -> determines average # of samples taken, B8-6 -> Bus Voltage Conversion Time(CT)
	  // B5-B3 -> Shunt Voltage CT, B2-B0 -> Operating Mode (probing timeframe)

	status = INA226_ReadRegister(dev,INA226_CONFIG_REG , &regData);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f000 f85c 	bl	8000bdc <INA226_ReadRegister>
 8000b24:	4603      	mov	r3, r0
 8000b26:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 8000b28:	7dbb      	ldrb	r3, [r7, #22]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	bf14      	ite	ne
 8000b2e:	2301      	movne	r3, #1
 8000b30:	2300      	moveq	r3, #0
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	461a      	mov	r2, r3
 8000b36:	7dfb      	ldrb	r3, [r7, #23]
 8000b38:	4413      	add	r3, r2
 8000b3a:	75fb      	strb	r3, [r7, #23]
	dev->config = regData;
 8000b3c:	8aba      	ldrh	r2, [r7, #20]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	829a      	strh	r2, [r3, #20]


	//calibration register value (page 15)
	CAL = (0.00512)/(dev->current_LSB * shuntResistance);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000b48:	6838      	ldr	r0, [r7, #0]
 8000b4a:	f7ff fcb5 	bl	80004b8 <__aeabi_f2d>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	460b      	mov	r3, r1
 8000b52:	4620      	mov	r0, r4
 8000b54:	4629      	mov	r1, r5
 8000b56:	f7ff fd07 	bl	8000568 <__aeabi_dmul>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	a11c      	add	r1, pc, #112	@ (adr r1, 8000bd0 <INA226_Initialize+0x160>)
 8000b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b64:	f7ff fe2a 	bl	80007bc <__aeabi_ddiv>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f7ff ff0c 	bl	800098c <__aeabi_d2uiz>
 8000b74:	4603      	mov	r3, r0
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	827b      	strh	r3, [r7, #18]
	status = INA226_WriteRegister(dev, INA226_CALIB_REG, &CAL);
 8000b7a:	f107 0312 	add.w	r3, r7, #18
 8000b7e:	461a      	mov	r2, r3
 8000b80:	2105      	movs	r1, #5
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f000 f855 	bl	8000c32 <INA226_WriteRegister>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	75bb      	strb	r3, [r7, #22]
	status = INA226_ReadRegister(dev,INA226_CALIB_REG , &regData);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	461a      	mov	r2, r3
 8000b92:	2105      	movs	r1, #5
 8000b94:	68f8      	ldr	r0, [r7, #12]
 8000b96:	f000 f821 	bl	8000bdc <INA226_ReadRegister>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 8000b9e:	7dbb      	ldrb	r3, [r7, #22]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	bf14      	ite	ne
 8000ba4:	2301      	movne	r3, #1
 8000ba6:	2300      	moveq	r3, #0
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	461a      	mov	r2, r3
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
 8000bae:	4413      	add	r3, r2
 8000bb0:	75fb      	strb	r3, [r7, #23]
	dev->calibration = regData;
 8000bb2:	8abb      	ldrh	r3, [r7, #20]
 8000bb4:	ee07 3a90 	vmov	s15, r3
 8000bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bdb0      	pop	{r4, r5, r7, pc}
 8000bcc:	f3af 8000 	nop.w
 8000bd0:	88e368f1 	.word	0x88e368f1
 8000bd4:	3f74f8b5 	.word	0x3f74f8b5
 8000bd8:	40e00000 	.word	0x40e00000

08000bdc <INA226_ReadRegister>:



//Low Level Functions

HAL_StatusTypeDef INA226_ReadRegister(INA226_t *dev, uint8_t reg, uint16_t *data){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	460b      	mov	r3, r1
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	72fb      	strb	r3, [r7, #11]
    // Read 2 bytes (16 bits) from the register
	uint8_t temp[2];
	HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read(dev->i2cHandle, INA226_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT,temp, 2, HAL_MAX_DELAY);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	7afb      	ldrb	r3, [r7, #11]
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	9302      	str	r3, [sp, #8]
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2301      	movs	r3, #1
 8000c04:	2188      	movs	r1, #136	@ 0x88
 8000c06:	f003 f803 	bl	8003c10 <HAL_I2C_Mem_Read>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	75fb      	strb	r3, [r7, #23]
    //temp is full rn
    uint16_t alldata;

    //Index first, beacause it reads LSB first
    alldata = (uint16_t)temp[0];
 8000c0e:	7c3b      	ldrb	r3, [r7, #16]
 8000c10:	82bb      	strh	r3, [r7, #20]

    //shift regdata left 8 so # is xxxxxxxx00000000
    alldata = (alldata << 8);
 8000c12:	8abb      	ldrh	r3, [r7, #20]
 8000c14:	021b      	lsls	r3, r3, #8
 8000c16:	82bb      	strh	r3, [r7, #20]
    alldata = alldata | (uint16_t)temp[1];
 8000c18:	7c7b      	ldrb	r3, [r7, #17]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	8abb      	ldrh	r3, [r7, #20]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	82bb      	strh	r3, [r7, #20]
    *data = alldata;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	8aba      	ldrh	r2, [r7, #20]
 8000c26:	801a      	strh	r2, [r3, #0]
    return status;
 8000c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <INA226_WriteRegister>:

HAL_StatusTypeDef INA226_WriteRegister(INA226_t *dev, uint8_t reg, uint16_t *data){
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b08a      	sub	sp, #40	@ 0x28
 8000c36:	af04      	add	r7, sp, #16
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	72fb      	strb	r3, [r7, #11]
    // Write 2 bytes (16 bits) to the specified register
	uint16_t passData = ((*data >> 8) | (*data << 8));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef status;



	//Pass in a pointer to the 16 bit # as an 8 bit pointer, but use length 2 to write 2 bits.
    status = HAL_I2C_Mem_Write(dev->i2cHandle, INA226_I2C_ADDR, (uint16_t)reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&passData, 2, HAL_MAX_DELAY);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	7afb      	ldrb	r3, [r7, #11]
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	9302      	str	r3, [sp, #8]
 8000c68:	2302      	movs	r3, #2
 8000c6a:	9301      	str	r3, [sp, #4]
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2301      	movs	r3, #1
 8000c74:	2188      	movs	r1, #136	@ 0x88
 8000c76:	f002 feb7 	bl	80039e8 <HAL_I2C_Mem_Write>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	75fb      	strb	r3, [r7, #23]
    return status;
 8000c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <getCurrentAmp>:

// return current value after multiplication
float getCurrentAmp(INA226_t *dev){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	uint16_t regData;
	float currentData;
	float rawVoltage;
	INA226_ReadRegister(dev, INA226_SHUNT_VOLT_REG, &regData);
 8000c90:	f107 030e 	add.w	r3, r7, #14
 8000c94:	461a      	mov	r2, r3
 8000c96:	2101      	movs	r1, #1
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ff9f 	bl	8000bdc <INA226_ReadRegister>
	rawVoltage = (float)regData * 81.82 / 32768;
 8000c9e:	89fb      	ldrh	r3, [r7, #14]
 8000ca0:	ee07 3a90 	vmov	s15, r3
 8000ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca8:	ee17 0a90 	vmov	r0, s15
 8000cac:	f7ff fc04 	bl	80004b8 <__aeabi_f2d>
 8000cb0:	a321      	add	r3, pc, #132	@ (adr r3, 8000d38 <getCurrentAmp+0xb0>)
 8000cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb6:	f7ff fc57 	bl	8000568 <__aeabi_dmul>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <getCurrentAmp+0xa8>)
 8000cc8:	f7ff fd78 	bl	80007bc <__aeabi_ddiv>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f7ff fe7a 	bl	80009cc <__aeabi_d2f>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	617b      	str	r3, [r7, #20]
	currentData = ((rawVoltage/0.02)/1000); //mA to A
 8000cdc:	6978      	ldr	r0, [r7, #20]
 8000cde:	f7ff fbeb 	bl	80004b8 <__aeabi_f2d>
 8000ce2:	a311      	add	r3, pc, #68	@ (adr r3, 8000d28 <getCurrentAmp+0xa0>)
 8000ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce8:	f7ff fd68 	bl	80007bc <__aeabi_ddiv>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f04f 0200 	mov.w	r2, #0
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <getCurrentAmp+0xac>)
 8000cfa:	f7ff fd5f 	bl	80007bc <__aeabi_ddiv>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	4610      	mov	r0, r2
 8000d04:	4619      	mov	r1, r3
 8000d06:	f7ff fe61 	bl	80009cc <__aeabi_d2f>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	613b      	str	r3, [r7, #16]
	dev->current = currentData;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	621a      	str	r2, [r3, #32]
	return currentData;
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	ee07 3a90 	vmov	s15, r3
}
 8000d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	f3af 8000 	nop.w
 8000d28:	47ae147b 	.word	0x47ae147b
 8000d2c:	3f947ae1 	.word	0x3f947ae1
 8000d30:	40e00000 	.word	0x40e00000
 8000d34:	408f4000 	.word	0x408f4000
 8000d38:	e147ae14 	.word	0xe147ae14
 8000d3c:	4054747a 	.word	0x4054747a

08000d40 <getPowerWatt>:

// return power value after multiplication
float getPowerWatt(INA226_t *dev){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	uint16_t regData;
	float rawBusVoltage;
	float powerData;
	INA226_ReadRegister(dev, INA226_BUS_VOLT_REG,&regData);
 8000d48:	f107 030e 	add.w	r3, r7, #14
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	2102      	movs	r1, #2
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff43 	bl	8000bdc <INA226_ReadRegister>
	rawBusVoltage = (float)regData * 40.96 / 32768;
 8000d56:	89fb      	ldrh	r3, [r7, #14]
 8000d58:	ee07 3a90 	vmov	s15, r3
 8000d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d60:	ee17 0a90 	vmov	r0, s15
 8000d64:	f7ff fba8 	bl	80004b8 <__aeabi_f2d>
 8000d68:	a314      	add	r3, pc, #80	@ (adr r3, 8000dbc <getPowerWatt+0x7c>)
 8000d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6e:	f7ff fbfb 	bl	8000568 <__aeabi_dmul>
 8000d72:	4602      	mov	r2, r0
 8000d74:	460b      	mov	r3, r1
 8000d76:	4610      	mov	r0, r2
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f04f 0200 	mov.w	r2, #0
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <getPowerWatt+0x78>)
 8000d80:	f7ff fd1c 	bl	80007bc <__aeabi_ddiv>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	4610      	mov	r0, r2
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f7ff fe1e 	bl	80009cc <__aeabi_d2f>
 8000d90:	4603      	mov	r3, r0
 8000d92:	617b      	str	r3, [r7, #20]
	powerData = (rawBusVoltage*dev->current);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	edd3 7a08 	vldr	s15, [r3, #32]
 8000d9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da2:	edc7 7a04 	vstr	s15, [r7, #16]
	return powerData;
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	ee07 3a90 	vmov	s15, r3
}
 8000dac:	eeb0 0a67 	vmov.f32	s0, s15
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40e00000 	.word	0x40e00000
 8000dbc:	47ae147b 	.word	0x47ae147b
 8000dc0:	40447ae1 	.word	0x40447ae1

08000dc4 <HAL_GPIO_EXTI_Callback>:
uint8_t TxData_status[8] = { 0 };
uint32_t TxMailbox_status = { 0 };

//CAN transmission
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == GPIO_PIN_13) {
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dd4:	d13e      	bne.n	8000e54 <HAL_GPIO_EXTI_Callback+0x90>
    TxData_status[1] = 0; // Reset status byte
 8000dd6:	4b21      	ldr	r3, [pc, #132]	@ (8000e5c <HAL_GPIO_EXTI_Callback+0x98>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	705a      	strb	r2, [r3, #1]
    // for byte 1, bit 0 = mc, bit 1 = array, bit 2 = kill switch
    if (mc_main_ctrl)
 8000ddc:	4b20      	ldr	r3, [pc, #128]	@ (8000e60 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d006      	beq.n	8000df2 <HAL_GPIO_EXTI_Callback+0x2e>
        TxData_status[1] |= (1 << 0); // Bit 0 = MC status
 8000de4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <HAL_GPIO_EXTI_Callback+0x98>)
 8000de6:	785b      	ldrb	r3, [r3, #1]
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4b1b      	ldr	r3, [pc, #108]	@ (8000e5c <HAL_GPIO_EXTI_Callback+0x98>)
 8000df0:	705a      	strb	r2, [r3, #1]
    if (array)
 8000df2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d006      	beq.n	8000e08 <HAL_GPIO_EXTI_Callback+0x44>
        TxData_status[1] |= (1 << 1); // Bit 1 = Array status
 8000dfa:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <HAL_GPIO_EXTI_Callback+0x98>)
 8000dfc:	785b      	ldrb	r3, [r3, #1]
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <HAL_GPIO_EXTI_Callback+0x98>)
 8000e06:	705a      	strb	r2, [r3, #1]
    // kill switch?

		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8000e08:	bf00      	nop
 8000e0a:	4817      	ldr	r0, [pc, #92]	@ (8000e68 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000e0c:	f001 fcbc 	bl	8002788 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f9      	beq.n	8000e0a <HAL_GPIO_EXTI_Callback+0x46>
		HAL_StatusTypeDef status;
		status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader_status, TxData_status, &TxMailbox_status);
 8000e16:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <HAL_GPIO_EXTI_Callback+0xa8>)
 8000e18:	4a10      	ldr	r2, [pc, #64]	@ (8000e5c <HAL_GPIO_EXTI_Callback+0x98>)
 8000e1a:	4915      	ldr	r1, [pc, #84]	@ (8000e70 <HAL_GPIO_EXTI_Callback+0xac>)
 8000e1c:	4812      	ldr	r0, [pc, #72]	@ (8000e68 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000e1e:	f001 fbe3 	bl	80025e8 <HAL_CAN_AddTxMessage>
 8000e22:	4603      	mov	r3, r0
 8000e24:	73fb      	strb	r3, [r7, #15]
		messages_sent++;
 8000e26:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2c:	1c54      	adds	r4, r2, #1
 8000e2e:	f143 0500 	adc.w	r5, r3, #0
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <HAL_GPIO_EXTI_Callback+0xb0>)
 8000e34:	e9c3 4500 	strd	r4, r5, [r3]
		if (status == HAL_ERROR){
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d102      	bne.n	8000e44 <HAL_GPIO_EXTI_Callback+0x80>
			Error_Handler();
 8000e3e:	f000 fe6b 	bl	8001b18 <Error_Handler>
		}
		else if(status == HAL_BUSY){
			HAL_CAN_BUSY++;
		}
	}
}
 8000e42:	e007      	b.n	8000e54 <HAL_GPIO_EXTI_Callback+0x90>
		else if(status == HAL_BUSY){
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d104      	bne.n	8000e54 <HAL_GPIO_EXTI_Callback+0x90>
			HAL_CAN_BUSY++;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	4a09      	ldr	r2, [pc, #36]	@ (8000e78 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	3710      	adds	r7, #16
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e5c:	200001f0 	.word	0x200001f0
 8000e60:	20000199 	.word	0x20000199
 8000e64:	2000019a 	.word	0x2000019a
 8000e68:	2000007c 	.word	0x2000007c
 8000e6c:	200001f8 	.word	0x200001f8
 8000e70:	200001d8 	.word	0x200001d8
 8000e74:	200001d0 	.word	0x200001d0
 8000e78:	200001cc 	.word	0x200001cc

08000e7c <HAL_CAN_RxFifo0MsgPendingCallback>:

// Can reception
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000e84:	4b65      	ldr	r3, [pc, #404]	@ (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000e86:	4a66      	ldr	r2, [pc, #408]	@ (8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8000e88:	2100      	movs	r1, #0
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f001 fcb1 	bl	80027f2 <HAL_CAN_GetRxMessage>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8000e96:	f000 fe3f 	bl	8001b18 <Error_Handler>
  }
  if (RxHeader.StdId == 0x000)
 8000e9a:	4b61      	ldr	r3, [pc, #388]	@ (8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10f      	bne.n	8000ec2 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
  {
	  if (RxData[0] == 0) {
 8000ea2:	4b5e      	ldr	r3, [pc, #376]	@ (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10b      	bne.n	8000ec2 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
		throttle = (uint16_t)RxData[2]<<8 | RxData[1];
 8000eaa:	4b5c      	ldr	r3, [pc, #368]	@ (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000eac:	789b      	ldrb	r3, [r3, #2]
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b21a      	sxth	r2, r3
 8000eb2:	4b5a      	ldr	r3, [pc, #360]	@ (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000eb4:	785b      	ldrb	r3, [r3, #1]
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b21b      	sxth	r3, r3
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b59      	ldr	r3, [pc, #356]	@ (8001024 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8000ec0:	801a      	strh	r2, [r3, #0]
	  }
  }
  if (RxHeader.StdId == 0x7FF){
 8000ec2:	4b57      	ldr	r3, [pc, #348]	@ (8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	f040 80a2 	bne.w	8001014 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>
	  if(RxData[0] == 1){
 8000ed0:	4b52      	ldr	r3, [pc, #328]	@ (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	f040 809d 	bne.w	8001014 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>
		  //byte 1
		  //ignition switch
		  if((RxData[1] & 0x80) != 0x00){
 8000eda:	4b50      	ldr	r3, [pc, #320]	@ (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000edc:	785b      	ldrb	r3, [r3, #1]
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	da05      	bge.n	8000ef0 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
			  mppt_pre_contactor_en = false;
 8000ee4:	4b50      	ldr	r3, [pc, #320]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
			  mppt_contactor_en = false;
 8000eea:	4b50      	ldr	r3, [pc, #320]	@ (800102c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
			  //preform shut down sequence
		  }

		  if((RxData[1] & 0x02) != 0x00){
 8000ef0:	4b4a      	ldr	r3, [pc, #296]	@ (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000ef2:	785b      	ldrb	r3, [r3, #1]
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
			  brakes_active = true; // turn brakes on
 8000efc:	4b4c      	ldr	r3, [pc, #304]	@ (8001030 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]
 8000f02:	e002      	b.n	8000f0a <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
		  }else{
			  brakes_active = false; // turn breaks off
 8000f04:	4b4a      	ldr	r3, [pc, #296]	@ (8001030 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x20) != 0x00){
 8000f0a:	4b44      	ldr	r3, [pc, #272]	@ (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000f0c:	785b      	ldrb	r3, [r3, #1]
 8000f0e:	f003 0320 	and.w	r3, r3, #32
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
			  direction = true; //Forward
 8000f16:	4b47      	ldr	r3, [pc, #284]	@ (8001034 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	e002      	b.n	8000f24 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
		  }else{
			  direction = false; // Reverse
 8000f1e:	4b45      	ldr	r3, [pc, #276]	@ (8001034 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x10) != 0x00){
 8000f24:	4b3d      	ldr	r3, [pc, #244]	@ (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000f26:	785b      	ldrb	r3, [r3, #1]
 8000f28:	f003 0310 	and.w	r3, r3, #16
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
			  mc_main_ctrl = true;
 8000f30:	4b41      	ldr	r3, [pc, #260]	@ (8001038 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	e002      	b.n	8000f3e <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
		  }else{
			  mc_main_ctrl = false;
 8000f38:	4b3f      	ldr	r3, [pc, #252]	@ (8001038 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x08) != 0x00){
 8000f3e:	4b37      	ldr	r3, [pc, #220]	@ (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000f40:	785b      	ldrb	r3, [r3, #1]
 8000f42:	f003 0308 	and.w	r3, r3, #8
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_CAN_RxFifo0MsgPendingCallback+0xd6>
			  array = true;
 8000f4a:	4b3c      	ldr	r3, [pc, #240]	@ (800103c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	e002      	b.n	8000f58 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>
		  }else{
			  array = false;
 8000f52:	4b3a      	ldr	r3, [pc, #232]	@ (800103c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x04) != 0x00){
 8000f58:	4b30      	ldr	r3, [pc, #192]	@ (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000f5a:	785b      	ldrb	r3, [r3, #1]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
			  array_precharge = true;
 8000f64:	4b36      	ldr	r3, [pc, #216]	@ (8001040 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
 8000f6a:	e002      	b.n	8000f72 <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
		  }else{
			  array_precharge = false;
 8000f6c:	4b34      	ldr	r3, [pc, #208]	@ (8001040 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
		  }


		  //byte #2
		  if((RxData[2] & 0x01) != 0x00){
 8000f72:	4b2a      	ldr	r3, [pc, #168]	@ (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000f74:	789b      	ldrb	r3, [r3, #2]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d010      	beq.n	8000fa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
			  if (blinkers_active != true) {
 8000f7e:	4b31      	ldr	r3, [pc, #196]	@ (8001044 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	f083 0301 	eor.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d005      	beq.n	8000f98 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
				  blinkers_active = true;
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8001044 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 8000f92:	4b2d      	ldr	r3, [pc, #180]	@ (8001048 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
			  }
			  blinkers_active = true; // turn brakes on
 8000f98:	4b2a      	ldr	r3, [pc, #168]	@ (8001044 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	e002      	b.n	8000fa6 <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>

		  }else{
			  blinkers_active = false;
 8000fa0:	4b28      	ldr	r3, [pc, #160]	@ (8001044 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[2] & 0x02) != 0x00){
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000fa8:	789b      	ldrb	r3, [r3, #2]
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d010      	beq.n	8000fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>
			  if (left_turn_active != true) {
 8000fb2:	4b26      	ldr	r3, [pc, #152]	@ (800104c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	f083 0301 	eor.w	r3, r3, #1
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d005      	beq.n	8000fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x150>
				  left_turn_active = true;
 8000fc0:	4b22      	ldr	r3, [pc, #136]	@ (800104c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 8000fc6:	4b20      	ldr	r3, [pc, #128]	@ (8001048 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
			  }
			  left_turn_active = true; // turn brakes on
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	e002      	b.n	8000fda <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>


		  }else{
			  left_turn_active = false; // turn brakes off
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800104c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[2] & 0x04) != 0x00){
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000fdc:	789b      	ldrb	r3, [r3, #2]
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d013      	beq.n	800100e <HAL_CAN_RxFifo0MsgPendingCallback+0x192>
			  if(right_turn_active != true){
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	f083 0301 	eor.w	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d008      	beq.n	8001006 <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
				  right_turn_active = true; // Turn on right
 8000ff4:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
				  left_turn_active = false; //Turn off left
 8000ffa:	4b14      	ldr	r3, [pc, #80]	@ (800104c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
			  }
			  right_turn_active = true;
 8001006:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
		  }


	  }
  }
}
 800100c:	e002      	b.n	8001014 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>
			  right_turn_active = false;
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200001c4 	.word	0x200001c4
 8001020:	200001a8 	.word	0x200001a8
 8001024:	20000190 	.word	0x20000190
 8001028:	200001a5 	.word	0x200001a5
 800102c:	200001a4 	.word	0x200001a4
 8001030:	20000194 	.word	0x20000194
 8001034:	20000198 	.word	0x20000198
 8001038:	20000199 	.word	0x20000199
 800103c:	2000019a 	.word	0x2000019a
 8001040:	2000019b 	.word	0x2000019b
 8001044:	20000195 	.word	0x20000195
 8001048:	200001a0 	.word	0x200001a0
 800104c:	20000196 	.word	0x20000196
 8001050:	20000197 	.word	0x20000197

08001054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

  brakes_active = false;
 8001058:	4b43      	ldr	r3, [pc, #268]	@ (8001168 <main+0x114>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
  blinkers_active = false;
 800105e:	4b43      	ldr	r3, [pc, #268]	@ (800116c <main+0x118>)
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]
  left_turn_active = false;
 8001064:	4b42      	ldr	r3, [pc, #264]	@ (8001170 <main+0x11c>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]
  right_turn_active = true;
 800106a:	4b42      	ldr	r3, [pc, #264]	@ (8001174 <main+0x120>)
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]


  direction = false;
 8001070:	4b41      	ldr	r3, [pc, #260]	@ (8001178 <main+0x124>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
  mc_pwreco_ctrl = false;
 8001076:	4b41      	ldr	r3, [pc, #260]	@ (800117c <main+0x128>)
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
  mc_main_ctrl = false;
 800107c:	4b40      	ldr	r3, [pc, #256]	@ (8001180 <main+0x12c>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
  array = false;
 8001082:	4b40      	ldr	r3, [pc, #256]	@ (8001184 <main+0x130>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
  array_precharge = false;
 8001088:	4b3f      	ldr	r3, [pc, #252]	@ (8001188 <main+0x134>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108e:	f001 f82e 	bl	80020ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001092:	f000 f89f 	bl	80011d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001096:	f000 fa77 	bl	8001588 <MX_GPIO_Init>
  MX_DAC1_Init();
 800109a:	f000 f969 	bl	8001370 <MX_DAC1_Init>
  MX_CAN1_Init();
 800109e:	f000 f8df 	bl	8001260 <MX_CAN1_Init>
  MX_CAN2_Init();
 80010a2:	f000 f92f 	bl	8001304 <MX_CAN2_Init>
  MX_TIM1_Init();
 80010a6:	f000 f9df 	bl	8001468 <MX_TIM1_Init>
  MX_I2C2_Init();
 80010aa:	f000 f99d 	bl	80013e8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80010ae:	4837      	ldr	r0, [pc, #220]	@ (800118c <main+0x138>)
 80010b0:	f001 fa56 	bl	8002560 <HAL_CAN_Start>

  //intalize can RX interupt
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80010b4:	2102      	movs	r1, #2
 80010b6:	4835      	ldr	r0, [pc, #212]	@ (800118c <main+0x138>)
 80010b8:	f001 fcbd 	bl	8002a36 <HAL_CAN_ActivateNotification>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <main+0x72>
  {
	  Error_Handler();
 80010c2:	f000 fd29 	bl	8001b18 <Error_Handler>
  }

  TxHeader_status.IDE = CAN_ID_STD; // Standard ID (not extended)
 80010c6:	4b32      	ldr	r3, [pc, #200]	@ (8001190 <main+0x13c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  TxHeader_status.StdId = 0x02; // 11 bit Identifier
 80010cc:	4b30      	ldr	r3, [pc, #192]	@ (8001190 <main+0x13c>)
 80010ce:	2202      	movs	r2, #2
 80010d0:	601a      	str	r2, [r3, #0]
  TxData_status[0] = 0x02; // 0x02 is the ID for the status message
 80010d2:	4b30      	ldr	r3, [pc, #192]	@ (8001194 <main+0x140>)
 80010d4:	2202      	movs	r2, #2
 80010d6:	701a      	strb	r2, [r3, #0]
  TxHeader_status.RTR = CAN_RTR_DATA; // Std RTR Data frame
 80010d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001190 <main+0x13c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  TxHeader_status.DLC = 8; // 8 bytes being transmitted
 80010de:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <main+0x13c>)
 80010e0:	2208      	movs	r2, #8
 80010e2:	611a      	str	r2, [r3, #16]

  if(INA226_Initialize(&INA226_IVP, &hi2c2, 10, 20) != HAL_OK){ Error_Handler();}
 80010e4:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 80010e8:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80010ec:	492a      	ldr	r1, [pc, #168]	@ (8001198 <main+0x144>)
 80010ee:	482b      	ldr	r0, [pc, #172]	@ (800119c <main+0x148>)
 80010f0:	f7ff fcbe 	bl	8000a70 <INA226_Initialize>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <main+0xaa>
 80010fa:	f000 fd0d 	bl	8001b18 <Error_Handler>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2104      	movs	r1, #4
 8001102:	4827      	ldr	r0, [pc, #156]	@ (80011a0 <main+0x14c>)
 8001104:	f002 fb8a 	bl	800381c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 8001108:	2201      	movs	r2, #1
 800110a:	2104      	movs	r1, #4
 800110c:	4824      	ldr	r0, [pc, #144]	@ (80011a0 <main+0x14c>)
 800110e:	f002 fb85 	bl	800381c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2104      	movs	r1, #4
 8001116:	4822      	ldr	r0, [pc, #136]	@ (80011a0 <main+0x14c>)
 8001118:	f002 fb80 	bl	800381c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800111c:	f005 fd2a 	bl	8006b74 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(Heart_Beat, NULL, &HeartBeat_attributes);
 8001120:	4a20      	ldr	r2, [pc, #128]	@ (80011a4 <main+0x150>)
 8001122:	2100      	movs	r1, #0
 8001124:	4820      	ldr	r0, [pc, #128]	@ (80011a8 <main+0x154>)
 8001126:	f005 fd6f 	bl	8006c08 <osThreadNew>
 800112a:	4603      	mov	r3, r0
 800112c:	4a1f      	ldr	r2, [pc, #124]	@ (80011ac <main+0x158>)
 800112e:	6013      	str	r3, [r2, #0]

  /* creation of UpdateThrottle */
  UpdateThrottleHandle = osThreadNew(Update_Throttle, NULL, &UpdateThrottle_attributes);
 8001130:	4a1f      	ldr	r2, [pc, #124]	@ (80011b0 <main+0x15c>)
 8001132:	2100      	movs	r1, #0
 8001134:	481f      	ldr	r0, [pc, #124]	@ (80011b4 <main+0x160>)
 8001136:	f005 fd67 	bl	8006c08 <osThreadNew>
 800113a:	4603      	mov	r3, r0
 800113c:	4a1e      	ldr	r2, [pc, #120]	@ (80011b8 <main+0x164>)
 800113e:	6013      	str	r3, [r2, #0]

  /* creation of LightsControl */
  LightsControlHandle = osThreadNew(Lights_Control, NULL, &LightsControl_attributes);
 8001140:	4a1e      	ldr	r2, [pc, #120]	@ (80011bc <main+0x168>)
 8001142:	2100      	movs	r1, #0
 8001144:	481e      	ldr	r0, [pc, #120]	@ (80011c0 <main+0x16c>)
 8001146:	f005 fd5f 	bl	8006c08 <osThreadNew>
 800114a:	4603      	mov	r3, r0
 800114c:	4a1d      	ldr	r2, [pc, #116]	@ (80011c4 <main+0x170>)
 800114e:	6013      	str	r3, [r2, #0]

  /* creation of ReadSensors */
  ReadSensorsHandle = osThreadNew(Read_Sensors, NULL, &ReadSensors_attributes);
 8001150:	4a1d      	ldr	r2, [pc, #116]	@ (80011c8 <main+0x174>)
 8001152:	2100      	movs	r1, #0
 8001154:	481d      	ldr	r0, [pc, #116]	@ (80011cc <main+0x178>)
 8001156:	f005 fd57 	bl	8006c08 <osThreadNew>
 800115a:	4603      	mov	r3, r0
 800115c:	4a1c      	ldr	r2, [pc, #112]	@ (80011d0 <main+0x17c>)
 800115e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001160:	f005 fd2c 	bl	8006bbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <main+0x110>
 8001168:	20000194 	.word	0x20000194
 800116c:	20000195 	.word	0x20000195
 8001170:	20000196 	.word	0x20000196
 8001174:	20000197 	.word	0x20000197
 8001178:	20000198 	.word	0x20000198
 800117c:	2000019c 	.word	0x2000019c
 8001180:	20000199 	.word	0x20000199
 8001184:	2000019a 	.word	0x2000019a
 8001188:	2000019b 	.word	0x2000019b
 800118c:	2000007c 	.word	0x2000007c
 8001190:	200001d8 	.word	0x200001d8
 8001194:	200001f0 	.word	0x200001f0
 8001198:	200000e0 	.word	0x200000e0
 800119c:	20000200 	.word	0x20000200
 80011a0:	48000800 	.word	0x48000800
 80011a4:	08009910 	.word	0x08009910
 80011a8:	080016b1 	.word	0x080016b1
 80011ac:	20000180 	.word	0x20000180
 80011b0:	08009934 	.word	0x08009934
 80011b4:	080016d5 	.word	0x080016d5
 80011b8:	20000184 	.word	0x20000184
 80011bc:	08009958 	.word	0x08009958
 80011c0:	080017f9 	.word	0x080017f9
 80011c4:	20000188 	.word	0x20000188
 80011c8:	0800997c 	.word	0x0800997c
 80011cc:	08001979 	.word	0x08001979
 80011d0:	2000018c 	.word	0x2000018c

080011d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b096      	sub	sp, #88	@ 0x58
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	2244      	movs	r2, #68	@ 0x44
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f008 fa78 	bl	80096d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	463b      	mov	r3, r7
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011fa:	f003 f98b 	bl	8004514 <HAL_PWREx_ControlVoltageScaling>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001204:	f000 fc88 	bl	8001b18 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001208:	2310      	movs	r3, #16
 800120a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800120c:	2301      	movs	r3, #1
 800120e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001214:	2360      	movs	r3, #96	@ 0x60
 8001216:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001218:	2300      	movs	r3, #0
 800121a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4618      	mov	r0, r3
 8001222:	f003 f9cd 	bl	80045c0 <HAL_RCC_OscConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800122c:	f000 fc74 	bl	8001b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001230:	230f      	movs	r3, #15
 8001232:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001244:	463b      	mov	r3, r7
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f003 fdd3 	bl	8004df4 <HAL_RCC_ClockConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001254:	f000 fc60 	bl	8001b18 <Error_Handler>
  }
}
 8001258:	bf00      	nop
 800125a:	3758      	adds	r7, #88	@ 0x58
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	@ 0x28
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001266:	4b25      	ldr	r3, [pc, #148]	@ (80012fc <MX_CAN1_Init+0x9c>)
 8001268:	4a25      	ldr	r2, [pc, #148]	@ (8001300 <MX_CAN1_Init+0xa0>)
 800126a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800126c:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <MX_CAN1_Init+0x9c>)
 800126e:	2202      	movs	r2, #2
 8001270:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001272:	4b22      	ldr	r3, [pc, #136]	@ (80012fc <MX_CAN1_Init+0x9c>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001278:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <MX_CAN1_Init+0x9c>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800127e:	4b1f      	ldr	r3, [pc, #124]	@ (80012fc <MX_CAN1_Init+0x9c>)
 8001280:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001284:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001286:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <MX_CAN1_Init+0x9c>)
 8001288:	2200      	movs	r2, #0
 800128a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <MX_CAN1_Init+0x9c>)
 800128e:	2200      	movs	r2, #0
 8001290:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001292:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <MX_CAN1_Init+0x9c>)
 8001294:	2200      	movs	r2, #0
 8001296:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001298:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <MX_CAN1_Init+0x9c>)
 800129a:	2200      	movs	r2, #0
 800129c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800129e:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <MX_CAN1_Init+0x9c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80012a4:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <MX_CAN1_Init+0x9c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80012aa:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <MX_CAN1_Init+0x9c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80012b0:	4812      	ldr	r0, [pc, #72]	@ (80012fc <MX_CAN1_Init+0x9c>)
 80012b2:	f000 ff79 	bl	80021a8 <HAL_CAN_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80012bc:	f000 fc2c 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80012c0:	2301      	movs	r3, #1
 80012c2:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80012c4:	2312      	movs	r3, #18
 80012c6:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x000<<5;
 80012cc:	2300      	movs	r3, #0
 80012ce:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x000<<5;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80012e4:	2314      	movs	r3, #20
 80012e6:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	4803      	ldr	r0, [pc, #12]	@ (80012fc <MX_CAN1_Init+0x9c>)
 80012ee:	f001 f857 	bl	80023a0 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	@ 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000007c 	.word	0x2000007c
 8001300:	40006400 	.word	0x40006400

08001304 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001308:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <MX_CAN2_Init+0x64>)
 800130a:	4a18      	ldr	r2, [pc, #96]	@ (800136c <MX_CAN2_Init+0x68>)
 800130c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 800130e:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <MX_CAN2_Init+0x64>)
 8001310:	2202      	movs	r2, #2
 8001312:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001314:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <MX_CAN2_Init+0x64>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800131a:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <MX_CAN2_Init+0x64>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <MX_CAN2_Init+0x64>)
 8001322:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001326:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <MX_CAN2_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <MX_CAN2_Init+0x64>)
 8001330:	2200      	movs	r2, #0
 8001332:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <MX_CAN2_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <MX_CAN2_Init+0x64>)
 800133c:	2200      	movs	r2, #0
 800133e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001340:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <MX_CAN2_Init+0x64>)
 8001342:	2200      	movs	r2, #0
 8001344:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001346:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <MX_CAN2_Init+0x64>)
 8001348:	2200      	movs	r2, #0
 800134a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <MX_CAN2_Init+0x64>)
 800134e:	2200      	movs	r2, #0
 8001350:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	@ (8001368 <MX_CAN2_Init+0x64>)
 8001354:	f000 ff28 	bl	80021a8 <HAL_CAN_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 800135e:	f000 fbdb 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200000a4 	.word	0x200000a4
 800136c:	40006800 	.word	0x40006800

08001370 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2224      	movs	r2, #36	@ 0x24
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f008 f9ab 	bl	80096d8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001382:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <MX_DAC1_Init+0x70>)
 8001384:	4a17      	ldr	r2, [pc, #92]	@ (80013e4 <MX_DAC1_Init+0x74>)
 8001386:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001388:	4815      	ldr	r0, [pc, #84]	@ (80013e0 <MX_DAC1_Init+0x70>)
 800138a:	f001 fe8b 	bl	80030a4 <HAL_DAC_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001394:	f000 fbc0 	bl	8001b18 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	4619      	mov	r1, r3
 80013b2:	480b      	ldr	r0, [pc, #44]	@ (80013e0 <MX_DAC1_Init+0x70>)
 80013b4:	f001 ff6e 	bl	8003294 <HAL_DAC_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80013be:	f000 fbab 	bl	8001b18 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2210      	movs	r2, #16
 80013c6:	4619      	mov	r1, r3
 80013c8:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <MX_DAC1_Init+0x70>)
 80013ca:	f001 ff63 	bl	8003294 <HAL_DAC_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80013d4:	f000 fba0 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	@ 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200000cc 	.word	0x200000cc
 80013e4:	40007400 	.word	0x40007400

080013e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <MX_I2C2_Init+0x74>)
 80013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <MX_I2C2_Init+0x78>)
 80013f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <MX_I2C2_Init+0x74>)
 80013f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001464 <MX_I2C2_Init+0x7c>)
 80013f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013f8:	4b18      	ldr	r3, [pc, #96]	@ (800145c <MX_I2C2_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fe:	4b17      	ldr	r3, [pc, #92]	@ (800145c <MX_I2C2_Init+0x74>)
 8001400:	2201      	movs	r2, #1
 8001402:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b15      	ldr	r3, [pc, #84]	@ (800145c <MX_I2C2_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800140a:	4b14      	ldr	r3, [pc, #80]	@ (800145c <MX_I2C2_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001410:	4b12      	ldr	r3, [pc, #72]	@ (800145c <MX_I2C2_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <MX_I2C2_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141c:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <MX_I2C2_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001422:	480e      	ldr	r0, [pc, #56]	@ (800145c <MX_I2C2_Init+0x74>)
 8001424:	f002 fa44 	bl	80038b0 <HAL_I2C_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800142e:	f000 fb73 	bl	8001b18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001432:	2100      	movs	r1, #0
 8001434:	4809      	ldr	r0, [pc, #36]	@ (800145c <MX_I2C2_Init+0x74>)
 8001436:	f002 ffc7 	bl	80043c8 <HAL_I2CEx_ConfigAnalogFilter>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001440:	f000 fb6a 	bl	8001b18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001444:	2100      	movs	r1, #0
 8001446:	4805      	ldr	r0, [pc, #20]	@ (800145c <MX_I2C2_Init+0x74>)
 8001448:	f003 f809 	bl	800445e <HAL_I2CEx_ConfigDigitalFilter>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001452:	f000 fb61 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200000e0 	.word	0x200000e0
 8001460:	40005800 	.word	0x40005800
 8001464:	00100d14 	.word	0x00100d14

08001468 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b096      	sub	sp, #88	@ 0x58
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800147a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	615a      	str	r2, [r3, #20]
 800148c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	222c      	movs	r2, #44	@ 0x2c
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f008 f91f 	bl	80096d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800149a:	4b39      	ldr	r3, [pc, #228]	@ (8001580 <MX_TIM1_Init+0x118>)
 800149c:	4a39      	ldr	r2, [pc, #228]	@ (8001584 <MX_TIM1_Init+0x11c>)
 800149e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014a0:	4b37      	ldr	r3, [pc, #220]	@ (8001580 <MX_TIM1_Init+0x118>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a6:	4b36      	ldr	r3, [pc, #216]	@ (8001580 <MX_TIM1_Init+0x118>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014ac:	4b34      	ldr	r3, [pc, #208]	@ (8001580 <MX_TIM1_Init+0x118>)
 80014ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b4:	4b32      	ldr	r3, [pc, #200]	@ (8001580 <MX_TIM1_Init+0x118>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ba:	4b31      	ldr	r3, [pc, #196]	@ (8001580 <MX_TIM1_Init+0x118>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001580 <MX_TIM1_Init+0x118>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80014c6:	482e      	ldr	r0, [pc, #184]	@ (8001580 <MX_TIM1_Init+0x118>)
 80014c8:	f004 fc70 	bl	8005dac <HAL_TIM_OC_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80014d2:	f000 fb21 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014e2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014e6:	4619      	mov	r1, r3
 80014e8:	4825      	ldr	r0, [pc, #148]	@ (8001580 <MX_TIM1_Init+0x118>)
 80014ea:	f005 f9db 	bl	80068a4 <HAL_TIMEx_MasterConfigSynchronization>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014f4:	f000 fb10 	bl	8001b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 100;
 80014fc:	2364      	movs	r3, #100	@ 0x64
 80014fe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001500:	2300      	movs	r3, #0
 8001502:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001504:	2300      	movs	r3, #0
 8001506:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001514:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001518:	2200      	movs	r2, #0
 800151a:	4619      	mov	r1, r3
 800151c:	4818      	ldr	r0, [pc, #96]	@ (8001580 <MX_TIM1_Init+0x118>)
 800151e:	f004 fda3 	bl	8006068 <HAL_TIM_OC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001528:	f000 faf6 	bl	8001b18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001540:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001544:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800154e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	4807      	ldr	r0, [pc, #28]	@ (8001580 <MX_TIM1_Init+0x118>)
 8001562:	f005 fa27 	bl	80069b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800156c:	f000 fad4 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001570:	4803      	ldr	r0, [pc, #12]	@ (8001580 <MX_TIM1_Init+0x118>)
 8001572:	f000 fc89 	bl	8001e88 <HAL_TIM_MspPostInit>

}
 8001576:	bf00      	nop
 8001578:	3758      	adds	r7, #88	@ 0x58
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000134 	.word	0x20000134
 8001584:	40012c00 	.word	0x40012c00

08001588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159e:	4b41      	ldr	r3, [pc, #260]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	4a40      	ldr	r2, [pc, #256]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015aa:	4b3e      	ldr	r3, [pc, #248]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b3b      	ldr	r3, [pc, #236]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ba:	4a3a      	ldr	r2, [pc, #232]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c2:	4b38      	ldr	r3, [pc, #224]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b35      	ldr	r3, [pc, #212]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	4a34      	ldr	r2, [pc, #208]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015da:	4b32      	ldr	r3, [pc, #200]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80015e6:	2200      	movs	r2, #0
 80015e8:	f24c 010f 	movw	r1, #49167	@ 0xc00f
 80015ec:	482e      	ldr	r0, [pc, #184]	@ (80016a8 <MX_GPIO_Init+0x120>)
 80015ee:	f002 f915 	bl	800381c <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2107      	movs	r1, #7
 80015f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015fa:	f002 f90f 	bl	800381c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	f242 0102 	movw	r1, #8194	@ 0x2002
 8001604:	4829      	ldr	r0, [pc, #164]	@ (80016ac <MX_GPIO_Init+0x124>)
 8001606:	f002 f909 	bl	800381c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800160a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800160e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001610:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4619      	mov	r1, r3
 8001620:	4821      	ldr	r0, [pc, #132]	@ (80016a8 <MX_GPIO_Init+0x120>)
 8001622:	f001 ff69 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001626:	f24c 030f 	movw	r3, #49167	@ 0xc00f
 800162a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	481a      	ldr	r0, [pc, #104]	@ (80016a8 <MX_GPIO_Init+0x120>)
 8001640:	f001 ff5a 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MC_Main_Pin PA1 PA2 */
  GPIO_InitStruct.Pin = MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2;
 8001644:	2307      	movs	r3, #7
 8001646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	2301      	movs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	4619      	mov	r1, r3
 800165a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165e:	f001 ff4b 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 8001662:	f242 0302 	movw	r3, #8194	@ 0x2002
 8001666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	4619      	mov	r1, r3
 800167a:	480c      	ldr	r0, [pc, #48]	@ (80016ac <MX_GPIO_Init+0x124>)
 800167c:	f001 ff3c 	bl	80034f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2105      	movs	r1, #5
 8001684:	2028      	movs	r0, #40	@ 0x28
 8001686:	f001 fce3 	bl	8003050 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800168a:	2028      	movs	r0, #40	@ 0x28
 800168c:	f001 fcfc 	bl	8003088 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8001690:	2201      	movs	r2, #1
 8001692:	2101      	movs	r1, #1
 8001694:	4804      	ldr	r0, [pc, #16]	@ (80016a8 <MX_GPIO_Init+0x120>)
 8001696:	f002 f8c1 	bl	800381c <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_2 */
}
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	48000800 	.word	0x48000800
 80016ac:	48000400 	.word	0x48000400

080016b0 <Heart_Beat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Heart_Beat */
void Heart_Beat(void *argument)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80016b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016bc:	4804      	ldr	r0, [pc, #16]	@ (80016d0 <Heart_Beat+0x20>)
 80016be:	f002 f8c5 	bl	800384c <HAL_GPIO_TogglePin>
    osDelay(500);
 80016c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80016c6:	f005 fb31 	bl	8006d2c <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80016ca:	bf00      	nop
 80016cc:	e7f4      	b.n	80016b8 <Heart_Beat+0x8>
 80016ce:	bf00      	nop
 80016d0:	48000400 	.word	0x48000400

080016d4 <Update_Throttle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Update_Throttle */
void Update_Throttle(void *argument)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Update_Throttle */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	2104      	movs	r1, #4
 80016e0:	483c      	ldr	r0, [pc, #240]	@ (80017d4 <Update_Throttle+0x100>)
 80016e2:	f002 f89b 	bl	800381c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80016e6:	2201      	movs	r2, #1
 80016e8:	2104      	movs	r1, #4
 80016ea:	483a      	ldr	r0, [pc, #232]	@ (80017d4 <Update_Throttle+0x100>)
 80016ec:	f002 f896 	bl	800381c <HAL_GPIO_WritePin>



  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1); //Start DAC 1 and 2
 80016f0:	2100      	movs	r1, #0
 80016f2:	4839      	ldr	r0, [pc, #228]	@ (80017d8 <Update_Throttle+0x104>)
 80016f4:	f001 fcf8 	bl	80030e8 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 80016f8:	2110      	movs	r1, #16
 80016fa:	4837      	ldr	r0, [pc, #220]	@ (80017d8 <Update_Throttle+0x104>)
 80016fc:	f001 fcf4 	bl	80030e8 <HAL_DAC_Start>
  array = 1;
 8001700:	4b36      	ldr	r3, [pc, #216]	@ (80017dc <Update_Throttle+0x108>)
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
  array_precharge = 1;
 8001706:	4b36      	ldr	r3, [pc, #216]	@ (80017e0 <Update_Throttle+0x10c>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, throttle);
 800170c:	4b35      	ldr	r3, [pc, #212]	@ (80017e4 <Update_Throttle+0x110>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	2200      	movs	r2, #0
 8001712:	2110      	movs	r1, #16
 8001714:	4830      	ldr	r0, [pc, #192]	@ (80017d8 <Update_Throttle+0x104>)
 8001716:	f001 fd8e 	bl	8003236 <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, regen);
 800171a:	4b33      	ldr	r3, [pc, #204]	@ (80017e8 <Update_Throttle+0x114>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	482d      	ldr	r0, [pc, #180]	@ (80017d8 <Update_Throttle+0x104>)
 8001724:	f001 fd87 	bl	8003236 <HAL_DAC_SetValue>
	  //updates gpio pins with states from global variables

	  //change for bistable relay
	  //gonna have to think about this section

	  if(mc_main_ctrl){
 8001728:	4b30      	ldr	r3, [pc, #192]	@ (80017ec <Update_Throttle+0x118>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d006      	beq.n	800173e <Update_Throttle+0x6a>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001730:	2201      	movs	r2, #1
 8001732:	2101      	movs	r1, #1
 8001734:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001738:	f002 f870 	bl	800381c <HAL_GPIO_WritePin>
 800173c:	e005      	b.n	800174a <Update_Throttle+0x76>
	  }else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2101      	movs	r1, #1
 8001742:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001746:	f002 f869 	bl	800381c <HAL_GPIO_WritePin>
	  }

	  if(mc_pwreco_ctrl){
 800174a:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <Update_Throttle+0x11c>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d006      	beq.n	8001760 <Update_Throttle+0x8c>
		  //closed power
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001752:	2201      	movs	r2, #1
 8001754:	2102      	movs	r1, #2
 8001756:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800175a:	f002 f85f 	bl	800381c <HAL_GPIO_WritePin>
 800175e:	e005      	b.n	800176c <Update_Throttle+0x98>
	  }else{
		  //open eco
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	2102      	movs	r1, #2
 8001764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001768:	f002 f858 	bl	800381c <HAL_GPIO_WritePin>
	  }


	  if(direction == true){
 800176c:	4b21      	ldr	r3, [pc, #132]	@ (80017f4 <Update_Throttle+0x120>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <Update_Throttle+0xae>
		  //closed forward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8001774:	2201      	movs	r2, #1
 8001776:	2104      	movs	r1, #4
 8001778:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800177c:	f002 f84e 	bl	800381c <HAL_GPIO_WritePin>
 8001780:	e005      	b.n	800178e <Update_Throttle+0xba>
	  }else{
		  //open backward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	2104      	movs	r1, #4
 8001786:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800178a:	f002 f847 	bl	800381c <HAL_GPIO_WritePin>
	  }

	  if(array_precharge == true){
 800178e:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <Update_Throttle+0x10c>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d005      	beq.n	80017a2 <Update_Throttle+0xce>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	2104      	movs	r1, #4
 800179a:	480e      	ldr	r0, [pc, #56]	@ (80017d4 <Update_Throttle+0x100>)
 800179c:	f002 f83e 	bl	800381c <HAL_GPIO_WritePin>
 80017a0:	e004      	b.n	80017ac <Update_Throttle+0xd8>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	2104      	movs	r1, #4
 80017a6:	480b      	ldr	r0, [pc, #44]	@ (80017d4 <Update_Throttle+0x100>)
 80017a8:	f002 f838 	bl	800381c <HAL_GPIO_WritePin>
	  }

	  if(array == true){
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <Update_Throttle+0x108>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <Update_Throttle+0xec>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2108      	movs	r1, #8
 80017b8:	4806      	ldr	r0, [pc, #24]	@ (80017d4 <Update_Throttle+0x100>)
 80017ba:	f002 f82f 	bl	800381c <HAL_GPIO_WritePin>
 80017be:	e004      	b.n	80017ca <Update_Throttle+0xf6>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 80017c0:	2201      	movs	r2, #1
 80017c2:	2108      	movs	r1, #8
 80017c4:	4803      	ldr	r0, [pc, #12]	@ (80017d4 <Update_Throttle+0x100>)
 80017c6:	f002 f829 	bl	800381c <HAL_GPIO_WritePin>
	  }


	  osDelay(20);
 80017ca:	2014      	movs	r0, #20
 80017cc:	f005 faae 	bl	8006d2c <osDelay>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, throttle);
 80017d0:	e79c      	b.n	800170c <Update_Throttle+0x38>
 80017d2:	bf00      	nop
 80017d4:	48000800 	.word	0x48000800
 80017d8:	200000cc 	.word	0x200000cc
 80017dc:	2000019a 	.word	0x2000019a
 80017e0:	2000019b 	.word	0x2000019b
 80017e4:	20000190 	.word	0x20000190
 80017e8:	20000192 	.word	0x20000192
 80017ec:	20000199 	.word	0x20000199
 80017f0:	2000019c 	.word	0x2000019c
 80017f4:	20000198 	.word	0x20000198

080017f8 <Lights_Control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Lights_Control */
void Lights_Control(void *argument)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  //left_turn_active = true;

  /* Infinite loop */
  for(;;)
  {
	  if (blinkers_active) {
 8001800:	4b56      	ldr	r3, [pc, #344]	@ (800195c <Lights_Control+0x164>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d032      	beq.n	800186e <Lights_Control+0x76>
		  if (signal_counter < 5) {
 8001808:	4b55      	ldr	r3, [pc, #340]	@ (8001960 <Lights_Control+0x168>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b04      	cmp	r3, #4
 800180e:	dc0b      	bgt.n	8001828 <Lights_Control+0x30>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001816:	4853      	ldr	r0, [pc, #332]	@ (8001964 <Lights_Control+0x16c>)
 8001818:	f002 f800 	bl	800381c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	2102      	movs	r1, #2
 8001820:	4850      	ldr	r0, [pc, #320]	@ (8001964 <Lights_Control+0x16c>)
 8001822:	f001 fffb 	bl	800381c <HAL_GPIO_WritePin>
 8001826:	e00a      	b.n	800183e <Lights_Control+0x46>
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800182e:	484d      	ldr	r0, [pc, #308]	@ (8001964 <Lights_Control+0x16c>)
 8001830:	f001 fff4 	bl	800381c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8001834:	2201      	movs	r2, #1
 8001836:	2102      	movs	r1, #2
 8001838:	484a      	ldr	r0, [pc, #296]	@ (8001964 <Lights_Control+0x16c>)
 800183a:	f001 ffef 	bl	800381c <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 800183e:	4b48      	ldr	r3, [pc, #288]	@ (8001960 <Lights_Control+0x168>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	4a46      	ldr	r2, [pc, #280]	@ (8001960 <Lights_Control+0x168>)
 8001846:	6013      	str	r3, [r2, #0]
		  signal_counter = signal_counter%10;
 8001848:	4b45      	ldr	r3, [pc, #276]	@ (8001960 <Lights_Control+0x168>)
 800184a:	6819      	ldr	r1, [r3, #0]
 800184c:	4b46      	ldr	r3, [pc, #280]	@ (8001968 <Lights_Control+0x170>)
 800184e:	fb83 2301 	smull	r2, r3, r3, r1
 8001852:	109a      	asrs	r2, r3, #2
 8001854:	17cb      	asrs	r3, r1, #31
 8001856:	1ad2      	subs	r2, r2, r3
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	1aca      	subs	r2, r1, r3
 8001862:	4b3f      	ldr	r3, [pc, #252]	@ (8001960 <Lights_Control+0x168>)
 8001864:	601a      	str	r2, [r3, #0]
		  osDelay(100);
 8001866:	2064      	movs	r0, #100	@ 0x64
 8001868:	f005 fa60 	bl	8006d2c <osDelay>
		  continue;
 800186c:	e074      	b.n	8001958 <Lights_Control+0x160>
	  }

	  if(left_turn_active){
 800186e:	4b3f      	ldr	r3, [pc, #252]	@ (800196c <Lights_Control+0x174>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d016      	beq.n	80018a4 <Lights_Control+0xac>
		  if(signal_counter < 5){
 8001876:	4b3a      	ldr	r3, [pc, #232]	@ (8001960 <Lights_Control+0x168>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b04      	cmp	r3, #4
 800187c:	dc06      	bgt.n	800188c <Lights_Control+0x94>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001884:	4837      	ldr	r0, [pc, #220]	@ (8001964 <Lights_Control+0x16c>)
 8001886:	f001 ffc9 	bl	800381c <HAL_GPIO_WritePin>
 800188a:	e005      	b.n	8001898 <Lights_Control+0xa0>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 800188c:	2201      	movs	r2, #1
 800188e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001892:	4834      	ldr	r0, [pc, #208]	@ (8001964 <Lights_Control+0x16c>)
 8001894:	f001 ffc2 	bl	800381c <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 8001898:	4b31      	ldr	r3, [pc, #196]	@ (8001960 <Lights_Control+0x168>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	3301      	adds	r3, #1
 800189e:	4a30      	ldr	r2, [pc, #192]	@ (8001960 <Lights_Control+0x168>)
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e010      	b.n	80018c6 <Lights_Control+0xce>

	  }else{
		  if(brakes_active){
 80018a4:	4b32      	ldr	r3, [pc, #200]	@ (8001970 <Lights_Control+0x178>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d006      	beq.n	80018ba <Lights_Control+0xc2>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018b2:	482c      	ldr	r0, [pc, #176]	@ (8001964 <Lights_Control+0x16c>)
 80018b4:	f001 ffb2 	bl	800381c <HAL_GPIO_WritePin>
 80018b8:	e005      	b.n	80018c6 <Lights_Control+0xce>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018c0:	4828      	ldr	r0, [pc, #160]	@ (8001964 <Lights_Control+0x16c>)
 80018c2:	f001 ffab 	bl	800381c <HAL_GPIO_WritePin>
		  }
	  }

	  if(right_turn_active){
 80018c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001974 <Lights_Control+0x17c>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d014      	beq.n	80018f8 <Lights_Control+0x100>
		  if(signal_counter < 5){
 80018ce:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <Lights_Control+0x168>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	dc05      	bgt.n	80018e2 <Lights_Control+0xea>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2102      	movs	r1, #2
 80018da:	4822      	ldr	r0, [pc, #136]	@ (8001964 <Lights_Control+0x16c>)
 80018dc:	f001 ff9e 	bl	800381c <HAL_GPIO_WritePin>
 80018e0:	e004      	b.n	80018ec <Lights_Control+0xf4>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	2102      	movs	r1, #2
 80018e6:	481f      	ldr	r0, [pc, #124]	@ (8001964 <Lights_Control+0x16c>)
 80018e8:	f001 ff98 	bl	800381c <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 80018ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001960 <Lights_Control+0x168>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001960 <Lights_Control+0x168>)
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e00e      	b.n	8001916 <Lights_Control+0x11e>
	  }
	  else{
		  if(brakes_active){
 80018f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001970 <Lights_Control+0x178>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <Lights_Control+0x114>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8001900:	2201      	movs	r2, #1
 8001902:	2102      	movs	r1, #2
 8001904:	4817      	ldr	r0, [pc, #92]	@ (8001964 <Lights_Control+0x16c>)
 8001906:	f001 ff89 	bl	800381c <HAL_GPIO_WritePin>
 800190a:	e004      	b.n	8001916 <Lights_Control+0x11e>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	2102      	movs	r1, #2
 8001910:	4814      	ldr	r0, [pc, #80]	@ (8001964 <Lights_Control+0x16c>)
 8001912:	f001 ff83 	bl	800381c <HAL_GPIO_WritePin>
		  }
	  }

	  if(brakes_active){
 8001916:	4b16      	ldr	r3, [pc, #88]	@ (8001970 <Lights_Control+0x178>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <Lights_Control+0x132>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET); //sets center rear light (brake light)
 800191e:	2201      	movs	r2, #1
 8001920:	2101      	movs	r1, #1
 8001922:	4810      	ldr	r0, [pc, #64]	@ (8001964 <Lights_Control+0x16c>)
 8001924:	f001 ff7a 	bl	800381c <HAL_GPIO_WritePin>
 8001928:	e004      	b.n	8001934 <Lights_Control+0x13c>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	2101      	movs	r1, #1
 800192e:	480d      	ldr	r0, [pc, #52]	@ (8001964 <Lights_Control+0x16c>)
 8001930:	f001 ff74 	bl	800381c <HAL_GPIO_WritePin>
	  }
	  signal_counter = signal_counter%10;
 8001934:	4b0a      	ldr	r3, [pc, #40]	@ (8001960 <Lights_Control+0x168>)
 8001936:	6819      	ldr	r1, [r3, #0]
 8001938:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <Lights_Control+0x170>)
 800193a:	fb83 2301 	smull	r2, r3, r3, r1
 800193e:	109a      	asrs	r2, r3, #2
 8001940:	17cb      	asrs	r3, r1, #31
 8001942:	1ad2      	subs	r2, r2, r3
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	1aca      	subs	r2, r1, r3
 800194e:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <Lights_Control+0x168>)
 8001950:	601a      	str	r2, [r3, #0]
	  osDelay(100);
 8001952:	2064      	movs	r0, #100	@ 0x64
 8001954:	f005 f9ea 	bl	8006d2c <osDelay>
	  if (blinkers_active) {
 8001958:	e752      	b.n	8001800 <Lights_Control+0x8>
 800195a:	bf00      	nop
 800195c:	20000195 	.word	0x20000195
 8001960:	200001a0 	.word	0x200001a0
 8001964:	48000800 	.word	0x48000800
 8001968:	66666667 	.word	0x66666667
 800196c:	20000196 	.word	0x20000196
 8001970:	20000194 	.word	0x20000194
 8001974:	20000197 	.word	0x20000197

08001978 <Read_Sensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Read_Sensors */
void Read_Sensors(void *argument)
{
 8001978:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800197c:	b08e      	sub	sp, #56	@ 0x38
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Read_Sensors */

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	2300      	movs	r3, #0
 8001988:	61bb      	str	r3, [r7, #24]
	uint32_t TxMailbox = { 0 };
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.StdId = 0x07; // 11 bit Identifier
 8001992:	2307      	movs	r3, #7
 8001994:	61fb      	str	r3, [r7, #28]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8001996:	2300      	movs	r3, #0
 8001998:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.DLC = 8; // 8 bytes being transmitted
 800199a:	2308      	movs	r3, #8
 800199c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	//Message ID 2 for VCU
	TxData[0] = 7;
 800199e:	2307      	movs	r3, #7
 80019a0:	753b      	strb	r3, [r7, #20]

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	f107 0214 	add.w	r2, r7, #20
 80019aa:	f107 011c 	add.w	r1, r7, #28
 80019ae:	4848      	ldr	r0, [pc, #288]	@ (8001ad0 <Read_Sensors+0x158>)
 80019b0:	f000 fe1a 	bl	80025e8 <HAL_CAN_AddTxMessage>

  /* Infinite loop */
  for(;;)
  {
	  //INA226_t *data = (INA226_t *)argument;
	  INA226_IVP.current = getCurrentAmp(&INA226_IVP);
 80019b4:	4847      	ldr	r0, [pc, #284]	@ (8001ad4 <Read_Sensors+0x15c>)
 80019b6:	f7ff f967 	bl	8000c88 <getCurrentAmp>
 80019ba:	eef0 7a40 	vmov.f32	s15, s0
 80019be:	4b45      	ldr	r3, [pc, #276]	@ (8001ad4 <Read_Sensors+0x15c>)
 80019c0:	edc3 7a08 	vstr	s15, [r3, #32]
	  INA226_IVP.power = getPowerWatt(&INA226_IVP);
 80019c4:	4843      	ldr	r0, [pc, #268]	@ (8001ad4 <Read_Sensors+0x15c>)
 80019c6:	f7ff f9bb 	bl	8000d40 <getPowerWatt>
 80019ca:	eef0 7a40 	vmov.f32	s15, s0
 80019ce:	4b41      	ldr	r3, [pc, #260]	@ (8001ad4 <Read_Sensors+0x15c>)
 80019d0:	edc3 7a07 	vstr	s15, [r3, #28]

    union FloatBytes power;
    power.f = INA226_IVP.power;
 80019d4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad4 <Read_Sensors+0x15c>)
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	60fb      	str	r3, [r7, #12]

	  //Assign CAN message
	  TxData[1] = power.bytes[0]; //LSB
 80019da:	7b3b      	ldrb	r3, [r7, #12]
 80019dc:	757b      	strb	r3, [r7, #21]
	  TxData[2] = power.bytes[1];
 80019de:	7b7b      	ldrb	r3, [r7, #13]
 80019e0:	75bb      	strb	r3, [r7, #22]
    TxData[3] = power.bytes[2];
 80019e2:	7bbb      	ldrb	r3, [r7, #14]
 80019e4:	75fb      	strb	r3, [r7, #23]
    TxData[4] = power.bytes[3]; //MSB 
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	763b      	strb	r3, [r7, #24]

	  while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 80019ea:	bf00      	nop
 80019ec:	4838      	ldr	r0, [pc, #224]	@ (8001ad0 <Read_Sensors+0x158>)
 80019ee:	f000 fecb 	bl	8002788 <HAL_CAN_GetTxMailboxesFreeLevel>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f9      	beq.n	80019ec <Read_Sensors+0x74>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	f107 0214 	add.w	r2, r7, #20
 8001a00:	f107 011c 	add.w	r1, r7, #28
 8001a04:	4832      	ldr	r0, [pc, #200]	@ (8001ad0 <Read_Sensors+0x158>)
 8001a06:	f000 fdef 	bl	80025e8 <HAL_CAN_AddTxMessage>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  messages_sent++;
 8001a10:	4b31      	ldr	r3, [pc, #196]	@ (8001ad8 <Read_Sensors+0x160>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	1c54      	adds	r4, r2, #1
 8001a18:	f143 0500 	adc.w	r5, r3, #0
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad8 <Read_Sensors+0x160>)
 8001a1e:	e9c3 4500 	strd	r4, r5, [r3]
	  if (status == HAL_ERROR){
 8001a22:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d102      	bne.n	8001a30 <Read_Sensors+0xb8>
		  Error_Handler();
 8001a2a:	f000 f875 	bl	8001b18 <Error_Handler>
 8001a2e:	e008      	b.n	8001a42 <Read_Sensors+0xca>
	  }
	  else if(status == HAL_BUSY){
 8001a30:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d104      	bne.n	8001a42 <Read_Sensors+0xca>
		  HAL_CAN_BUSY++;
 8001a38:	4b28      	ldr	r3, [pc, #160]	@ (8001adc <Read_Sensors+0x164>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	4a27      	ldr	r2, [pc, #156]	@ (8001adc <Read_Sensors+0x164>)
 8001a40:	6013      	str	r3, [r2, #0]
	  }

    // also send status message
    TxData_status[1] = 0; // Reset status byte
 8001a42:	4b27      	ldr	r3, [pc, #156]	@ (8001ae0 <Read_Sensors+0x168>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	705a      	strb	r2, [r3, #1]
    // for byte 1, bit 0 = mc, bit 1 = array, bit 2 = kill switch
    if (mc_main_ctrl)
 8001a48:	4b26      	ldr	r3, [pc, #152]	@ (8001ae4 <Read_Sensors+0x16c>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d006      	beq.n	8001a5e <Read_Sensors+0xe6>
        TxData_status[1] |= (1 << 0); // Bit 0 = MC status
 8001a50:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <Read_Sensors+0x168>)
 8001a52:	785b      	ldrb	r3, [r3, #1]
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ae0 <Read_Sensors+0x168>)
 8001a5c:	705a      	strb	r2, [r3, #1]
    if (array)
 8001a5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ae8 <Read_Sensors+0x170>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <Read_Sensors+0xfc>
        TxData_status[1] |= (1 << 1); // Bit 1 = Array status
 8001a66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <Read_Sensors+0x168>)
 8001a68:	785b      	ldrb	r3, [r3, #1]
 8001a6a:	f043 0302 	orr.w	r3, r3, #2
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <Read_Sensors+0x168>)
 8001a72:	705a      	strb	r2, [r3, #1]
    // kill switch?
    while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8001a74:	bf00      	nop
 8001a76:	4816      	ldr	r0, [pc, #88]	@ (8001ad0 <Read_Sensors+0x158>)
 8001a78:	f000 fe86 	bl	8002788 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f9      	beq.n	8001a76 <Read_Sensors+0xfe>
    HAL_StatusTypeDef status2;
    status2 = HAL_CAN_AddTxMessage(&hcan1, &TxHeader_status, TxData_status, &TxMailbox_status);
 8001a82:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <Read_Sensors+0x174>)
 8001a84:	4a16      	ldr	r2, [pc, #88]	@ (8001ae0 <Read_Sensors+0x168>)
 8001a86:	491a      	ldr	r1, [pc, #104]	@ (8001af0 <Read_Sensors+0x178>)
 8001a88:	4811      	ldr	r0, [pc, #68]	@ (8001ad0 <Read_Sensors+0x158>)
 8001a8a:	f000 fdad 	bl	80025e8 <HAL_CAN_AddTxMessage>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    messages_sent++;
 8001a94:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <Read_Sensors+0x160>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f112 0801 	adds.w	r8, r2, #1
 8001a9e:	f143 0900 	adc.w	r9, r3, #0
 8001aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad8 <Read_Sensors+0x160>)
 8001aa4:	e9c3 8900 	strd	r8, r9, [r3]
    if (status2 == HAL_ERROR){
 8001aa8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d102      	bne.n	8001ab6 <Read_Sensors+0x13e>
        Error_Handler();
 8001ab0:	f000 f832 	bl	8001b18 <Error_Handler>
 8001ab4:	e008      	b.n	8001ac8 <Read_Sensors+0x150>
    }
    else if(status2 == HAL_BUSY){
 8001ab6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d104      	bne.n	8001ac8 <Read_Sensors+0x150>
        HAL_CAN_BUSY++;
 8001abe:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <Read_Sensors+0x164>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	4a05      	ldr	r2, [pc, #20]	@ (8001adc <Read_Sensors+0x164>)
 8001ac6:	6013      	str	r3, [r2, #0]
    }

    osDelay(10);
 8001ac8:	200a      	movs	r0, #10
 8001aca:	f005 f92f 	bl	8006d2c <osDelay>
  {
 8001ace:	e771      	b.n	80019b4 <Read_Sensors+0x3c>
 8001ad0:	2000007c 	.word	0x2000007c
 8001ad4:	20000200 	.word	0x20000200
 8001ad8:	200001d0 	.word	0x200001d0
 8001adc:	200001cc 	.word	0x200001cc
 8001ae0:	200001f0 	.word	0x200001f0
 8001ae4:	20000199 	.word	0x20000199
 8001ae8:	2000019a 	.word	0x2000019a
 8001aec:	200001f8 	.word	0x200001f8
 8001af0:	200001d8 	.word	0x200001d8

08001af4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a04      	ldr	r2, [pc, #16]	@ (8001b14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d101      	bne.n	8001b0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b06:	f000 fb0b 	bl	8002120 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40001000 	.word	0x40001000

08001b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b1c:	b672      	cpsid	i
}
 8001b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <Error_Handler+0x8>

08001b24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b2e:	4a10      	ldr	r2, [pc, #64]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b36:	4b0e      	ldr	r3, [pc, #56]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b46:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b4e:	4b08      	ldr	r3, [pc, #32]	@ (8001b70 <HAL_MspInit+0x4c>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	210f      	movs	r1, #15
 8001b5e:	f06f 0001 	mvn.w	r0, #1
 8001b62:	f001 fa75 	bl	8003050 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000

08001b74 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08c      	sub	sp, #48	@ 0x30
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 031c 	add.w	r3, r7, #28
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a56      	ldr	r2, [pc, #344]	@ (8001cec <HAL_CAN_MspInit+0x178>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d14b      	bne.n	8001c2e <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001b96:	4b56      	ldr	r3, [pc, #344]	@ (8001cf0 <HAL_CAN_MspInit+0x17c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	4a54      	ldr	r2, [pc, #336]	@ (8001cf0 <HAL_CAN_MspInit+0x17c>)
 8001b9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001ba0:	4b53      	ldr	r3, [pc, #332]	@ (8001cf0 <HAL_CAN_MspInit+0x17c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d10b      	bne.n	8001bc0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001ba8:	4b52      	ldr	r3, [pc, #328]	@ (8001cf4 <HAL_CAN_MspInit+0x180>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bac:	4a51      	ldr	r2, [pc, #324]	@ (8001cf4 <HAL_CAN_MspInit+0x180>)
 8001bae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bb4:	4b4f      	ldr	r3, [pc, #316]	@ (8001cf4 <HAL_CAN_MspInit+0x180>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bbc:	61bb      	str	r3, [r7, #24]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc0:	4b4c      	ldr	r3, [pc, #304]	@ (8001cf4 <HAL_CAN_MspInit+0x180>)
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc4:	4a4b      	ldr	r2, [pc, #300]	@ (8001cf4 <HAL_CAN_MspInit+0x180>)
 8001bc6:	f043 0302 	orr.w	r3, r3, #2
 8001bca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bcc:	4b49      	ldr	r3, [pc, #292]	@ (8001cf4 <HAL_CAN_MspInit+0x180>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be6:	2303      	movs	r3, #3
 8001be8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001bea:	2309      	movs	r3, #9
 8001bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bee:	f107 031c 	add.w	r3, r7, #28
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4840      	ldr	r0, [pc, #256]	@ (8001cf8 <HAL_CAN_MspInit+0x184>)
 8001bf6:	f001 fc7f 	bl	80034f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c0c:	2309      	movs	r3, #9
 8001c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	4619      	mov	r1, r3
 8001c16:	4838      	ldr	r0, [pc, #224]	@ (8001cf8 <HAL_CAN_MspInit+0x184>)
 8001c18:	f001 fc6e 	bl	80034f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2105      	movs	r1, #5
 8001c20:	2014      	movs	r0, #20
 8001c22:	f001 fa15 	bl	8003050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c26:	2014      	movs	r0, #20
 8001c28:	f001 fa2e 	bl	8003088 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001c2c:	e059      	b.n	8001ce2 <HAL_CAN_MspInit+0x16e>
  else if(hcan->Instance==CAN2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a32      	ldr	r2, [pc, #200]	@ (8001cfc <HAL_CAN_MspInit+0x188>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d154      	bne.n	8001ce2 <HAL_CAN_MspInit+0x16e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001c38:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf4 <HAL_CAN_MspInit+0x180>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8001cf4 <HAL_CAN_MspInit+0x180>)
 8001c3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c44:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf4 <HAL_CAN_MspInit+0x180>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001c50:	4b27      	ldr	r3, [pc, #156]	@ (8001cf0 <HAL_CAN_MspInit+0x17c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3301      	adds	r3, #1
 8001c56:	4a26      	ldr	r2, [pc, #152]	@ (8001cf0 <HAL_CAN_MspInit+0x17c>)
 8001c58:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001c5a:	4b25      	ldr	r3, [pc, #148]	@ (8001cf0 <HAL_CAN_MspInit+0x17c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10b      	bne.n	8001c7a <HAL_CAN_MspInit+0x106>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001c62:	4b24      	ldr	r3, [pc, #144]	@ (8001cf4 <HAL_CAN_MspInit+0x180>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c66:	4a23      	ldr	r2, [pc, #140]	@ (8001cf4 <HAL_CAN_MspInit+0x180>)
 8001c68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c6e:	4b21      	ldr	r3, [pc, #132]	@ (8001cf4 <HAL_CAN_MspInit+0x180>)
 8001c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf4 <HAL_CAN_MspInit+0x180>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf4 <HAL_CAN_MspInit+0x180>)
 8001c80:	f043 0302 	orr.w	r3, r3, #2
 8001c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c86:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <HAL_CAN_MspInit+0x180>)
 8001c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c92:	2320      	movs	r3, #32
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	4619      	mov	r1, r3
 8001cac:	4812      	ldr	r0, [pc, #72]	@ (8001cf8 <HAL_CAN_MspInit+0x184>)
 8001cae:	f001 fc23 	bl	80034f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cb2:	2340      	movs	r3, #64	@ 0x40
 8001cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc6:	f107 031c 	add.w	r3, r7, #28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480a      	ldr	r0, [pc, #40]	@ (8001cf8 <HAL_CAN_MspInit+0x184>)
 8001cce:	f001 fc13 	bl	80034f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2105      	movs	r1, #5
 8001cd6:	2057      	movs	r0, #87	@ 0x57
 8001cd8:	f001 f9ba 	bl	8003050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001cdc:	2057      	movs	r0, #87	@ 0x57
 8001cde:	f001 f9d3 	bl	8003088 <HAL_NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3730      	adds	r7, #48	@ 0x30
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40006400 	.word	0x40006400
 8001cf0:	20000228 	.word	0x20000228
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	48000400 	.word	0x48000400
 8001cfc:	40006800 	.word	0x40006800

08001d00 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	@ 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a19      	ldr	r2, [pc, #100]	@ (8001d84 <HAL_DAC_MspInit+0x84>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d12c      	bne.n	8001d7c <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001d22:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <HAL_DAC_MspInit+0x88>)
 8001d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d26:	4a18      	ldr	r2, [pc, #96]	@ (8001d88 <HAL_DAC_MspInit+0x88>)
 8001d28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001d2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d2e:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <HAL_DAC_MspInit+0x88>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <HAL_DAC_MspInit+0x88>)
 8001d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3e:	4a12      	ldr	r2, [pc, #72]	@ (8001d88 <HAL_DAC_MspInit+0x88>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d46:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <HAL_DAC_MspInit+0x88>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d52:	2330      	movs	r3, #48	@ 0x30
 8001d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d56:	2303      	movs	r3, #3
 8001d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d68:	f001 fbc6 	bl	80034f8 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	210f      	movs	r1, #15
 8001d70:	2036      	movs	r0, #54	@ 0x36
 8001d72:	f001 f96d 	bl	8003050 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d76:	2036      	movs	r0, #54	@ 0x36
 8001d78:	f001 f986 	bl	8003088 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001d7c:	bf00      	nop
 8001d7e:	3728      	adds	r7, #40	@ 0x28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40007400 	.word	0x40007400
 8001d88:	40021000 	.word	0x40021000

08001d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b0ac      	sub	sp, #176	@ 0xb0
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	228c      	movs	r2, #140	@ 0x8c
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f007 fc93 	bl	80096d8 <memset>
  if(hi2c->Instance==I2C2)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a21      	ldr	r2, [pc, #132]	@ (8001e3c <HAL_I2C_MspInit+0xb0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d13b      	bne.n	8001e34 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001dbc:	2380      	movs	r3, #128	@ 0x80
 8001dbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 fa53 	bl	8005274 <HAL_RCCEx_PeriphCLKConfig>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001dd4:	f7ff fea0 	bl	8001b18 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd8:	4b19      	ldr	r3, [pc, #100]	@ (8001e40 <HAL_I2C_MspInit+0xb4>)
 8001dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ddc:	4a18      	ldr	r2, [pc, #96]	@ (8001e40 <HAL_I2C_MspInit+0xb4>)
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de4:	4b16      	ldr	r3, [pc, #88]	@ (8001e40 <HAL_I2C_MspInit+0xb4>)
 8001de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001df0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001df4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001df8:	2312      	movs	r3, #18
 8001dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e14:	4619      	mov	r1, r3
 8001e16:	480b      	ldr	r0, [pc, #44]	@ (8001e44 <HAL_I2C_MspInit+0xb8>)
 8001e18:	f001 fb6e 	bl	80034f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <HAL_I2C_MspInit+0xb4>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	4a07      	ldr	r2, [pc, #28]	@ (8001e40 <HAL_I2C_MspInit+0xb4>)
 8001e22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e26:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <HAL_I2C_MspInit+0xb4>)
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001e34:	bf00      	nop
 8001e36:	37b0      	adds	r7, #176	@ 0xb0
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40005800 	.word	0x40005800
 8001e40:	40021000 	.word	0x40021000
 8001e44:	48000400 	.word	0x48000400

08001e48 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0a      	ldr	r2, [pc, #40]	@ (8001e80 <HAL_TIM_OC_MspInit+0x38>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d10b      	bne.n	8001e72 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <HAL_TIM_OC_MspInit+0x3c>)
 8001e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e5e:	4a09      	ldr	r2, [pc, #36]	@ (8001e84 <HAL_TIM_OC_MspInit+0x3c>)
 8001e60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e64:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e66:	4b07      	ldr	r3, [pc, #28]	@ (8001e84 <HAL_TIM_OC_MspInit+0x3c>)
 8001e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40012c00 	.word	0x40012c00
 8001e84:	40021000 	.word	0x40021000

08001e88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 030c 	add.w	r3, r7, #12
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a12      	ldr	r2, [pc, #72]	@ (8001ef0 <HAL_TIM_MspPostInit+0x68>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d11d      	bne.n	8001ee6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eaa:	4b12      	ldr	r3, [pc, #72]	@ (8001ef4 <HAL_TIM_MspPostInit+0x6c>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eae:	4a11      	ldr	r2, [pc, #68]	@ (8001ef4 <HAL_TIM_MspPostInit+0x6c>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef4 <HAL_TIM_MspPostInit+0x6c>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ec2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ec6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 030c 	add.w	r3, r7, #12
 8001edc:	4619      	mov	r1, r3
 8001ede:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee2:	f001 fb09 	bl	80034f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ee6:	bf00      	nop
 8001ee8:	3720      	adds	r7, #32
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40012c00 	.word	0x40012c00
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08e      	sub	sp, #56	@ 0x38
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f06:	4b34      	ldr	r3, [pc, #208]	@ (8001fd8 <HAL_InitTick+0xe0>)
 8001f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f0a:	4a33      	ldr	r2, [pc, #204]	@ (8001fd8 <HAL_InitTick+0xe0>)
 8001f0c:	f043 0310 	orr.w	r3, r3, #16
 8001f10:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f12:	4b31      	ldr	r3, [pc, #196]	@ (8001fd8 <HAL_InitTick+0xe0>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f1e:	f107 0210 	add.w	r2, r7, #16
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f003 f911 	bl	8005150 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d103      	bne.n	8001f40 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f38:	f003 f8f4 	bl	8005124 <HAL_RCC_GetPCLK1Freq>
 8001f3c:	6378      	str	r0, [r7, #52]	@ 0x34
 8001f3e:	e004      	b.n	8001f4a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f40:	f003 f8f0 	bl	8005124 <HAL_RCC_GetPCLK1Freq>
 8001f44:	4603      	mov	r3, r0
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f4c:	4a23      	ldr	r2, [pc, #140]	@ (8001fdc <HAL_InitTick+0xe4>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	0c9b      	lsrs	r3, r3, #18
 8001f54:	3b01      	subs	r3, #1
 8001f56:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f58:	4b21      	ldr	r3, [pc, #132]	@ (8001fe0 <HAL_InitTick+0xe8>)
 8001f5a:	4a22      	ldr	r2, [pc, #136]	@ (8001fe4 <HAL_InitTick+0xec>)
 8001f5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f5e:	4b20      	ldr	r3, [pc, #128]	@ (8001fe0 <HAL_InitTick+0xe8>)
 8001f60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f64:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f66:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe0 <HAL_InitTick+0xe8>)
 8001f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f6a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe0 <HAL_InitTick+0xe8>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f72:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <HAL_InitTick+0xe8>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f78:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <HAL_InitTick+0xe8>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001f7e:	4818      	ldr	r0, [pc, #96]	@ (8001fe0 <HAL_InitTick+0xe8>)
 8001f80:	f003 fe42 	bl	8005c08 <HAL_TIM_Base_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d11b      	bne.n	8001fca <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001f92:	4813      	ldr	r0, [pc, #76]	@ (8001fe0 <HAL_InitTick+0xe8>)
 8001f94:	f003 fe9a 	bl	8005ccc <HAL_TIM_Base_Start_IT>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f9e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d111      	bne.n	8001fca <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fa6:	2036      	movs	r0, #54	@ 0x36
 8001fa8:	f001 f86e 	bl	8003088 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2b0f      	cmp	r3, #15
 8001fb0:	d808      	bhi.n	8001fc4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	2036      	movs	r0, #54	@ 0x36
 8001fb8:	f001 f84a 	bl	8003050 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe8 <HAL_InitTick+0xf0>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	e002      	b.n	8001fca <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001fca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3738      	adds	r7, #56	@ 0x38
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	431bde83 	.word	0x431bde83
 8001fe0:	2000022c 	.word	0x2000022c
 8001fe4:	40001000 	.word	0x40001000
 8001fe8:	20000004 	.word	0x20000004

08001fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <NMI_Handler+0x4>

08001ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <HardFault_Handler+0x4>

08001ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <MemManage_Handler+0x4>

08002004 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <BusFault_Handler+0x4>

0800200c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <UsageFault_Handler+0x4>

08002014 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <CAN1_RX0_IRQHandler+0x10>)
 800202a:	f000 fd2a 	bl	8002a82 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	2000007c 	.word	0x2000007c

08002038 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800203c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002040:	f001 fc1e 	bl	8003880 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}

08002048 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800204c:	4803      	ldr	r0, [pc, #12]	@ (800205c <TIM6_DAC_IRQHandler+0x14>)
 800204e:	f003 ff04 	bl	8005e5a <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002052:	4803      	ldr	r0, [pc, #12]	@ (8002060 <TIM6_DAC_IRQHandler+0x18>)
 8002054:	f001 f895 	bl	8003182 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	2000022c 	.word	0x2000022c
 8002060:	200000cc 	.word	0x200000cc

08002064 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002068:	4802      	ldr	r0, [pc, #8]	@ (8002074 <CAN2_RX0_IRQHandler+0x10>)
 800206a:	f000 fd0a 	bl	8002a82 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200000a4 	.word	0x200000a4

08002078 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800207c:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <SystemInit+0x20>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002082:	4a05      	ldr	r2, [pc, #20]	@ (8002098 <SystemInit+0x20>)
 8002084:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002088:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800209c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020a0:	f7ff ffea 	bl	8002078 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a4:	480c      	ldr	r0, [pc, #48]	@ (80020d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80020a6:	490d      	ldr	r1, [pc, #52]	@ (80020dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80020a8:	4a0d      	ldr	r2, [pc, #52]	@ (80020e0 <LoopForever+0xe>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ac:	e002      	b.n	80020b4 <LoopCopyDataInit>

080020ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b2:	3304      	adds	r3, #4

080020b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b8:	d3f9      	bcc.n	80020ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ba:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020bc:	4c0a      	ldr	r4, [pc, #40]	@ (80020e8 <LoopForever+0x16>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c0:	e001      	b.n	80020c6 <LoopFillZerobss>

080020c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c4:	3204      	adds	r2, #4

080020c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c8:	d3fb      	bcc.n	80020c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ca:	f007 fb63 	bl	8009794 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020ce:	f7fe ffc1 	bl	8001054 <main>

080020d2 <LoopForever>:

LoopForever:
    b LoopForever
 80020d2:	e7fe      	b.n	80020d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020d4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80020d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020dc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80020e0:	080099f0 	.word	0x080099f0
  ldr r2, =_sbss
 80020e4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80020e8:	20001d5c 	.word	0x20001d5c

080020ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020ec:	e7fe      	b.n	80020ec <ADC1_2_IRQHandler>

080020ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f8:	2003      	movs	r0, #3
 80020fa:	f000 ff9e 	bl	800303a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020fe:	200f      	movs	r0, #15
 8002100:	f7ff fefa 	bl	8001ef8 <HAL_InitTick>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	e001      	b.n	8002114 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002110:	f7ff fd08 	bl	8001b24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002114:	79fb      	ldrb	r3, [r7, #7]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <HAL_IncTick+0x20>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <HAL_IncTick+0x24>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4413      	add	r3, r2
 8002130:	4a04      	ldr	r2, [pc, #16]	@ (8002144 <HAL_IncTick+0x24>)
 8002132:	6013      	str	r3, [r2, #0]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000008 	.word	0x20000008
 8002144:	20000278 	.word	0x20000278

08002148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return uwTick;
 800214c:	4b03      	ldr	r3, [pc, #12]	@ (800215c <HAL_GetTick+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000278 	.word	0x20000278

08002160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002168:	f7ff ffee 	bl	8002148 <HAL_GetTick>
 800216c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d005      	beq.n	8002186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800217a:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <HAL_Delay+0x44>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002186:	bf00      	nop
 8002188:	f7ff ffde 	bl	8002148 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	429a      	cmp	r2, r3
 8002196:	d8f7      	bhi.n	8002188 <HAL_Delay+0x28>
  {
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000008 	.word	0x20000008

080021a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0ed      	b.n	8002396 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d102      	bne.n	80021cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f7ff fcd4 	bl	8001b74 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021dc:	f7ff ffb4 	bl	8002148 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021e2:	e012      	b.n	800220a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021e4:	f7ff ffb0 	bl	8002148 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b0a      	cmp	r3, #10
 80021f0:	d90b      	bls.n	800220a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2205      	movs	r2, #5
 8002202:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0c5      	b.n	8002396 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0e5      	beq.n	80021e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0202 	bic.w	r2, r2, #2
 8002226:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002228:	f7ff ff8e 	bl	8002148 <HAL_GetTick>
 800222c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800222e:	e012      	b.n	8002256 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002230:	f7ff ff8a 	bl	8002148 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b0a      	cmp	r3, #10
 800223c:	d90b      	bls.n	8002256 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2205      	movs	r2, #5
 800224e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e09f      	b.n	8002396 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1e5      	bne.n	8002230 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7e1b      	ldrb	r3, [r3, #24]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d108      	bne.n	800227e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e007      	b.n	800228e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7e5b      	ldrb	r3, [r3, #25]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d108      	bne.n	80022a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	e007      	b.n	80022b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7e9b      	ldrb	r3, [r3, #26]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d108      	bne.n	80022d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0220 	orr.w	r2, r2, #32
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	e007      	b.n	80022e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0220 	bic.w	r2, r2, #32
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7edb      	ldrb	r3, [r3, #27]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d108      	bne.n	80022fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0210 	bic.w	r2, r2, #16
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	e007      	b.n	800230c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0210 	orr.w	r2, r2, #16
 800230a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	7f1b      	ldrb	r3, [r3, #28]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d108      	bne.n	8002326 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0208 	orr.w	r2, r2, #8
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e007      	b.n	8002336 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0208 	bic.w	r2, r2, #8
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7f5b      	ldrb	r3, [r3, #29]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d108      	bne.n	8002350 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0204 	orr.w	r2, r2, #4
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	e007      	b.n	8002360 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0204 	bic.w	r2, r2, #4
 800235e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	ea42 0103 	orr.w	r1, r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	1e5a      	subs	r2, r3, #1
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d003      	beq.n	80023c6 <HAL_CAN_ConfigFilter+0x26>
 80023be:	7cfb      	ldrb	r3, [r7, #19]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	f040 80be 	bne.w	8002542 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80023c6:	4b65      	ldr	r3, [pc, #404]	@ (800255c <HAL_CAN_ConfigFilter+0x1bc>)
 80023c8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023d0:	f043 0201 	orr.w	r2, r3, #1
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80023e0:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	021b      	lsls	r3, r3, #8
 80023f6:	431a      	orrs	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	f003 031f 	and.w	r3, r3, #31
 8002406:	2201      	movs	r2, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	43db      	mvns	r3, r3
 8002418:	401a      	ands	r2, r3
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d123      	bne.n	8002470 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	43db      	mvns	r3, r3
 8002432:	401a      	ands	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800244a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	3248      	adds	r2, #72	@ 0x48
 8002450:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002464:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002466:	6979      	ldr	r1, [r7, #20]
 8002468:	3348      	adds	r3, #72	@ 0x48
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	440b      	add	r3, r1
 800246e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d122      	bne.n	80024be <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	431a      	orrs	r2, r3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002498:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	3248      	adds	r2, #72	@ 0x48
 800249e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024b2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024b4:	6979      	ldr	r1, [r7, #20]
 80024b6:	3348      	adds	r3, #72	@ 0x48
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	440b      	add	r3, r1
 80024bc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	401a      	ands	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80024d8:	e007      	b.n	80024ea <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	401a      	ands	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002504:	e007      	b.n	8002516 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	431a      	orrs	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	431a      	orrs	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002534:	f023 0201 	bic.w	r2, r3, #1
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e006      	b.n	8002550 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
  }
}
 8002550:	4618      	mov	r0, r3
 8002552:	371c      	adds	r7, #28
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	40006400 	.word	0x40006400

08002560 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d12e      	bne.n	80025d2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0201 	bic.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800258c:	f7ff fddc 	bl	8002148 <HAL_GetTick>
 8002590:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002592:	e012      	b.n	80025ba <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002594:	f7ff fdd8 	bl	8002148 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b0a      	cmp	r3, #10
 80025a0:	d90b      	bls.n	80025ba <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2205      	movs	r2, #5
 80025b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e012      	b.n	80025e0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1e5      	bne.n	8002594 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e006      	b.n	80025e0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
  }
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	@ 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025fc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002606:	7ffb      	ldrb	r3, [r7, #31]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d003      	beq.n	8002614 <HAL_CAN_AddTxMessage+0x2c>
 800260c:	7ffb      	ldrb	r3, [r7, #31]
 800260e:	2b02      	cmp	r3, #2
 8002610:	f040 80ad 	bne.w	800276e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002624:	2b00      	cmp	r3, #0
 8002626:	d105      	bne.n	8002634 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8095 	beq.w	800275e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	0e1b      	lsrs	r3, r3, #24
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800263e:	2201      	movs	r2, #1
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10d      	bne.n	800266c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800265a:	68f9      	ldr	r1, [r7, #12]
 800265c:	6809      	ldr	r1, [r1, #0]
 800265e:	431a      	orrs	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	3318      	adds	r3, #24
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	440b      	add	r3, r1
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e00f      	b.n	800268c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002676:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800267c:	68f9      	ldr	r1, [r7, #12]
 800267e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002680:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3318      	adds	r3, #24
 8002686:	011b      	lsls	r3, r3, #4
 8002688:	440b      	add	r3, r1
 800268a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6819      	ldr	r1, [r3, #0]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	3318      	adds	r3, #24
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	440b      	add	r3, r1
 800269c:	3304      	adds	r3, #4
 800269e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	7d1b      	ldrb	r3, [r3, #20]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d111      	bne.n	80026cc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	3318      	adds	r3, #24
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	4413      	add	r3, r2
 80026b4:	3304      	adds	r3, #4
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	6811      	ldr	r1, [r2, #0]
 80026bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	3318      	adds	r3, #24
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	440b      	add	r3, r1
 80026c8:	3304      	adds	r3, #4
 80026ca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3307      	adds	r3, #7
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	061a      	lsls	r2, r3, #24
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3306      	adds	r3, #6
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	041b      	lsls	r3, r3, #16
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3305      	adds	r3, #5
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	021b      	lsls	r3, r3, #8
 80026e6:	4313      	orrs	r3, r2
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	3204      	adds	r2, #4
 80026ec:	7812      	ldrb	r2, [r2, #0]
 80026ee:	4610      	mov	r0, r2
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	6811      	ldr	r1, [r2, #0]
 80026f4:	ea43 0200 	orr.w	r2, r3, r0
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	440b      	add	r3, r1
 80026fe:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002702:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3303      	adds	r3, #3
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	061a      	lsls	r2, r3, #24
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3302      	adds	r3, #2
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	041b      	lsls	r3, r3, #16
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3301      	adds	r3, #1
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	4313      	orrs	r3, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	7812      	ldrb	r2, [r2, #0]
 8002724:	4610      	mov	r0, r2
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	6811      	ldr	r1, [r2, #0]
 800272a:	ea43 0200 	orr.w	r2, r3, r0
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	440b      	add	r3, r1
 8002734:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002738:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	3318      	adds	r3, #24
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	4413      	add	r3, r2
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	6811      	ldr	r1, [r2, #0]
 800274c:	f043 0201 	orr.w	r2, r3, #1
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	3318      	adds	r3, #24
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	440b      	add	r3, r1
 8002758:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	e00e      	b.n	800277c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002762:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e006      	b.n	800277c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002772:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
  }
}
 800277c:	4618      	mov	r0, r3
 800277e:	3724      	adds	r7, #36	@ 0x24
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002790:	2300      	movs	r3, #0
 8002792:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3020 	ldrb.w	r3, [r3, #32]
 800279a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800279c:	7afb      	ldrb	r3, [r7, #11]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d002      	beq.n	80027a8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80027a2:	7afb      	ldrb	r3, [r7, #11]
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d11d      	bne.n	80027e4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3301      	adds	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3301      	adds	r3, #1
 80027ce:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	3301      	adds	r3, #1
 80027e2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80027e4:	68fb      	ldr	r3, [r7, #12]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80027f2:	b480      	push	{r7}
 80027f4:	b087      	sub	sp, #28
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002806:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002808:	7dfb      	ldrb	r3, [r7, #23]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d003      	beq.n	8002816 <HAL_CAN_GetRxMessage+0x24>
 800280e:	7dfb      	ldrb	r3, [r7, #23]
 8002810:	2b02      	cmp	r3, #2
 8002812:	f040 8103 	bne.w	8002a1c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10e      	bne.n	800283a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d116      	bne.n	8002858 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e0f7      	b.n	8002a2a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d107      	bne.n	8002858 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0e8      	b.n	8002a2a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	331b      	adds	r3, #27
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	4413      	add	r3, r2
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0204 	and.w	r2, r3, #4
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10c      	bne.n	8002890 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	331b      	adds	r3, #27
 800287e:	011b      	lsls	r3, r3, #4
 8002880:	4413      	add	r3, r2
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	0d5b      	lsrs	r3, r3, #21
 8002886:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	e00b      	b.n	80028a8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	331b      	adds	r3, #27
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	4413      	add	r3, r2
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	08db      	lsrs	r3, r3, #3
 80028a0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	331b      	adds	r3, #27
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	4413      	add	r3, r2
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0202 	and.w	r2, r3, #2
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	331b      	adds	r3, #27
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	4413      	add	r3, r2
 80028ca:	3304      	adds	r3, #4
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2208      	movs	r2, #8
 80028da:	611a      	str	r2, [r3, #16]
 80028dc:	e00b      	b.n	80028f6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	331b      	adds	r3, #27
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	4413      	add	r3, r2
 80028ea:	3304      	adds	r3, #4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 020f 	and.w	r2, r3, #15
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	331b      	adds	r3, #27
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	4413      	add	r3, r2
 8002902:	3304      	adds	r3, #4
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	b2da      	uxtb	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	331b      	adds	r3, #27
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	4413      	add	r3, r2
 800291a:	3304      	adds	r3, #4
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	0c1b      	lsrs	r3, r3, #16
 8002920:	b29a      	uxth	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	4413      	add	r3, r2
 8002930:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	b2da      	uxtb	r2, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	4413      	add	r3, r2
 8002946:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0a1a      	lsrs	r2, r3, #8
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	3301      	adds	r3, #1
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	4413      	add	r3, r2
 8002960:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	0c1a      	lsrs	r2, r3, #16
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	3302      	adds	r3, #2
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	4413      	add	r3, r2
 800297a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0e1a      	lsrs	r2, r3, #24
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	3303      	adds	r3, #3
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	4413      	add	r3, r2
 8002994:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	3304      	adds	r3, #4
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	0a1a      	lsrs	r2, r3, #8
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	3305      	adds	r3, #5
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0c1a      	lsrs	r2, r3, #16
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	3306      	adds	r3, #6
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	4413      	add	r3, r2
 80029e0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	0e1a      	lsrs	r2, r3, #24
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	3307      	adds	r3, #7
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d108      	bne.n	8002a08 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0220 	orr.w	r2, r2, #32
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	e007      	b.n	8002a18 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0220 	orr.w	r2, r2, #32
 8002a16:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e006      	b.n	8002a2a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a46:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d002      	beq.n	8002a54 <HAL_CAN_ActivateNotification+0x1e>
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d109      	bne.n	8002a68 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6959      	ldr	r1, [r3, #20]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e006      	b.n	8002a76 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
  }
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b08a      	sub	sp, #40	@ 0x28
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d07c      	beq.n	8002bc2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d023      	beq.n	8002b1a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f983 	bl	8002df0 <HAL_CAN_TxMailbox0CompleteCallback>
 8002aea:	e016      	b.n	8002b1a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d004      	beq.n	8002b00 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002afe:	e00c      	b.n	8002b1a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d004      	beq.n	8002b14 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b12:	e002      	b.n	8002b1a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f989 	bl	8002e2c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d024      	beq.n	8002b6e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f963 	bl	8002e04 <HAL_CAN_TxMailbox1CompleteCallback>
 8002b3e:	e016      	b.n	8002b6e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d004      	beq.n	8002b54 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b52:	e00c      	b.n	8002b6e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d004      	beq.n	8002b68 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b66:	e002      	b.n	8002b6e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f969 	bl	8002e40 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d024      	beq.n	8002bc2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f943 	bl	8002e18 <HAL_CAN_TxMailbox2CompleteCallback>
 8002b92:	e016      	b.n	8002bc2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d004      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba6:	e00c      	b.n	8002bc2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d004      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bba:	e002      	b.n	8002bc2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f949 	bl	8002e54 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	f003 0308 	and.w	r3, r3, #8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00c      	beq.n	8002be6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2210      	movs	r2, #16
 8002be4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00b      	beq.n	8002c08 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d006      	beq.n	8002c08 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2208      	movs	r2, #8
 8002c00:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f930 	bl	8002e68 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d009      	beq.n	8002c26 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fe f92b 	bl	8000e7c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c26:	6a3b      	ldr	r3, [r7, #32]
 8002c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00c      	beq.n	8002c4a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d007      	beq.n	8002c4a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2210      	movs	r2, #16
 8002c48:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00b      	beq.n	8002c6c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d006      	beq.n	8002c6c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2208      	movs	r2, #8
 8002c64:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f912 	bl	8002e90 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d009      	beq.n	8002c8a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d002      	beq.n	8002c8a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f8f9 	bl	8002e7c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00b      	beq.n	8002cac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d006      	beq.n	8002cac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2210      	movs	r2, #16
 8002ca4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f8fc 	bl	8002ea4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d006      	beq.n	8002cce <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f8f5 	bl	8002eb8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d07b      	beq.n	8002dd0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d072      	beq.n	8002dc8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	f043 0302 	orr.w	r3, r3, #2
 8002d18:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	f043 0304 	orr.w	r3, r3, #4
 8002d34:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d043      	beq.n	8002dc8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d03e      	beq.n	8002dc8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d50:	2b60      	cmp	r3, #96	@ 0x60
 8002d52:	d02b      	beq.n	8002dac <HAL_CAN_IRQHandler+0x32a>
 8002d54:	2b60      	cmp	r3, #96	@ 0x60
 8002d56:	d82e      	bhi.n	8002db6 <HAL_CAN_IRQHandler+0x334>
 8002d58:	2b50      	cmp	r3, #80	@ 0x50
 8002d5a:	d022      	beq.n	8002da2 <HAL_CAN_IRQHandler+0x320>
 8002d5c:	2b50      	cmp	r3, #80	@ 0x50
 8002d5e:	d82a      	bhi.n	8002db6 <HAL_CAN_IRQHandler+0x334>
 8002d60:	2b40      	cmp	r3, #64	@ 0x40
 8002d62:	d019      	beq.n	8002d98 <HAL_CAN_IRQHandler+0x316>
 8002d64:	2b40      	cmp	r3, #64	@ 0x40
 8002d66:	d826      	bhi.n	8002db6 <HAL_CAN_IRQHandler+0x334>
 8002d68:	2b30      	cmp	r3, #48	@ 0x30
 8002d6a:	d010      	beq.n	8002d8e <HAL_CAN_IRQHandler+0x30c>
 8002d6c:	2b30      	cmp	r3, #48	@ 0x30
 8002d6e:	d822      	bhi.n	8002db6 <HAL_CAN_IRQHandler+0x334>
 8002d70:	2b10      	cmp	r3, #16
 8002d72:	d002      	beq.n	8002d7a <HAL_CAN_IRQHandler+0x2f8>
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d005      	beq.n	8002d84 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d78:	e01d      	b.n	8002db6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	f043 0308 	orr.w	r3, r3, #8
 8002d80:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d82:	e019      	b.n	8002db8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d86:	f043 0310 	orr.w	r3, r3, #16
 8002d8a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d8c:	e014      	b.n	8002db8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	f043 0320 	orr.w	r3, r3, #32
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002d96:	e00f      	b.n	8002db8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002da0:	e00a      	b.n	8002db8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002daa:	e005      	b.n	8002db8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002db4:	e000      	b.n	8002db8 <HAL_CAN_IRQHandler+0x336>
            break;
 8002db6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002dc6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2204      	movs	r2, #4
 8002dce:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f872 	bl	8002ecc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002de8:	bf00      	nop
 8002dea:	3728      	adds	r7, #40	@ 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002efc:	4013      	ands	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f12:	4a04      	ldr	r2, [pc, #16]	@ (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	60d3      	str	r3, [r2, #12]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f2c:	4b04      	ldr	r3, [pc, #16]	@ (8002f40 <__NVIC_GetPriorityGrouping+0x18>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	f003 0307 	and.w	r3, r3, #7
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	db0b      	blt.n	8002f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	4907      	ldr	r1, [pc, #28]	@ (8002f7c <__NVIC_EnableIRQ+0x38>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2001      	movs	r0, #1
 8002f66:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	e000e100 	.word	0xe000e100

08002f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	6039      	str	r1, [r7, #0]
 8002f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	db0a      	blt.n	8002faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	490c      	ldr	r1, [pc, #48]	@ (8002fcc <__NVIC_SetPriority+0x4c>)
 8002f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9e:	0112      	lsls	r2, r2, #4
 8002fa0:	b2d2      	uxtb	r2, r2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa8:	e00a      	b.n	8002fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4908      	ldr	r1, [pc, #32]	@ (8002fd0 <__NVIC_SetPriority+0x50>)
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	3b04      	subs	r3, #4
 8002fb8:	0112      	lsls	r2, r2, #4
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	761a      	strb	r2, [r3, #24]
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000e100 	.word	0xe000e100
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b089      	sub	sp, #36	@ 0x24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	f1c3 0307 	rsb	r3, r3, #7
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	bf28      	it	cs
 8002ff2:	2304      	movcs	r3, #4
 8002ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d902      	bls.n	8003004 <NVIC_EncodePriority+0x30>
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	3b03      	subs	r3, #3
 8003002:	e000      	b.n	8003006 <NVIC_EncodePriority+0x32>
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	f04f 32ff 	mov.w	r2, #4294967295
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43da      	mvns	r2, r3
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	401a      	ands	r2, r3
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800301c:	f04f 31ff 	mov.w	r1, #4294967295
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa01 f303 	lsl.w	r3, r1, r3
 8003026:	43d9      	mvns	r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800302c:	4313      	orrs	r3, r2
         );
}
 800302e:	4618      	mov	r0, r3
 8003030:	3724      	adds	r7, #36	@ 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff ff4c 	bl	8002ee0 <__NVIC_SetPriorityGrouping>
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003062:	f7ff ff61 	bl	8002f28 <__NVIC_GetPriorityGrouping>
 8003066:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	68b9      	ldr	r1, [r7, #8]
 800306c:	6978      	ldr	r0, [r7, #20]
 800306e:	f7ff ffb1 	bl	8002fd4 <NVIC_EncodePriority>
 8003072:	4602      	mov	r2, r0
 8003074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff ff80 	bl	8002f80 <__NVIC_SetPriority>
}
 8003080:	bf00      	nop
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff ff54 	bl	8002f44 <__NVIC_EnableIRQ>
}
 800309c:	bf00      	nop
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e014      	b.n	80030e0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	791b      	ldrb	r3, [r3, #4]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d105      	bne.n	80030cc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fe fe1a 	bl	8001d00 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3708      	adds	r7, #8
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	795b      	ldrb	r3, [r3, #5]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_DAC_Start+0x16>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e03b      	b.n	8003176 <HAL_DAC_Start+0x8e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6819      	ldr	r1, [r3, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2201      	movs	r2, #1
 8003118:	409a      	lsls	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10f      	bne.n	8003148 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8003132:	2b04      	cmp	r3, #4
 8003134:	d118      	bne.n	8003168 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	e00f      	b.n	8003168 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003152:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003156:	d107      	bne.n	8003168 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0202 	orr.w	r2, r2, #2
 8003166:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003198:	d120      	bne.n	80031dc <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031a8:	d118      	bne.n	80031dc <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2204      	movs	r2, #4
 80031ae:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	f043 0201 	orr.w	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031d4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f852 	bl	8003280 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031ea:	d120      	bne.n	800322e <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031fa:	d118      	bne.n	800322e <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2204      	movs	r2, #4
 8003200:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f043 0202 	orr.w	r2, r3, #2
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003216:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003226:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f95a 	bl	80034e2 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003236:	b480      	push	{r7}
 8003238:	b087      	sub	sp, #28
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	3308      	adds	r3, #8
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	e004      	b.n	800326a <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4413      	add	r3, r2
 8003266:	3314      	adds	r3, #20
 8003268:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	461a      	mov	r2, r3
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	371c      	adds	r7, #28
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	795b      	ldrb	r3, [r3, #5]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_DAC_ConfigChannel+0x1c>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e114      	b.n	80034da <HAL_DAC_ConfigChannel+0x246>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2202      	movs	r2, #2
 80032ba:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	f040 8081 	bne.w	80033c8 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80032c6:	f7fe ff3f 	bl	8002148 <HAL_GetTick>
 80032ca:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d140      	bne.n	8003354 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032d2:	e018      	b.n	8003306 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032d4:	f7fe ff38 	bl	8002148 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d911      	bls.n	8003306 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	f043 0208 	orr.w	r2, r3, #8
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2203      	movs	r2, #3
 8003300:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e0e9      	b.n	80034da <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1df      	bne.n	80032d4 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8003314:	2001      	movs	r0, #1
 8003316:	f7fe ff23 	bl	8002160 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	6992      	ldr	r2, [r2, #24]
 8003322:	641a      	str	r2, [r3, #64]	@ 0x40
 8003324:	e023      	b.n	800336e <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003326:	f7fe ff0f 	bl	8002148 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b01      	cmp	r3, #1
 8003332:	d90f      	bls.n	8003354 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333a:	2b00      	cmp	r3, #0
 800333c:	da0a      	bge.n	8003354 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f043 0208 	orr.w	r2, r3, #8
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2203      	movs	r2, #3
 800334e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e0c2      	b.n	80034da <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800335a:	2b00      	cmp	r3, #0
 800335c:	dbe3      	blt.n	8003326 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800335e:	2001      	movs	r0, #1
 8003360:	f7fe fefe 	bl	8002160 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	6992      	ldr	r2, [r2, #24]
 800336c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800337e:	fa01 f303 	lsl.w	r3, r1, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	ea02 0103 	and.w	r1, r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f003 0310 	and.w	r3, r3, #16
 8003392:	409a      	lsls	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	21ff      	movs	r1, #255	@ 0xff
 80033aa:	fa01 f303 	lsl.w	r3, r1, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	ea02 0103 	and.w	r1, r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	6a1a      	ldr	r2, [r3, #32]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	409a      	lsls	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d11d      	bne.n	800340c <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	221f      	movs	r2, #31
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	4013      	ands	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003412:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2207      	movs	r2, #7
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	431a      	orrs	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6819      	ldr	r1, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43da      	mvns	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	400a      	ands	r2, r1
 8003470:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f003 0310 	and.w	r3, r3, #16
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6819      	ldr	r1, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	22c0      	movs	r2, #192	@ 0xc0
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43da      	mvns	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	400a      	ands	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003506:	e166      	b.n	80037d6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	2101      	movs	r1, #1
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	4013      	ands	r3, r2
 8003516:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 8158 	beq.w	80037d0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b01      	cmp	r3, #1
 800352a:	d005      	beq.n	8003538 <HAL_GPIO_Init+0x40>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d130      	bne.n	800359a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	2203      	movs	r2, #3
 8003544:	fa02 f303 	lsl.w	r3, r2, r3
 8003548:	43db      	mvns	r3, r3
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800356e:	2201      	movs	r2, #1
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	43db      	mvns	r3, r3
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4013      	ands	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	f003 0201 	and.w	r2, r3, #1
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d017      	beq.n	80035d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	2203      	movs	r2, #3
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43db      	mvns	r3, r3
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4013      	ands	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d123      	bne.n	800362a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	08da      	lsrs	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	3208      	adds	r2, #8
 80035ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	220f      	movs	r2, #15
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4013      	ands	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4313      	orrs	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	08da      	lsrs	r2, r3, #3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3208      	adds	r2, #8
 8003624:	6939      	ldr	r1, [r7, #16]
 8003626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	2203      	movs	r2, #3
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43db      	mvns	r3, r3
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	4013      	ands	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f003 0203 	and.w	r2, r3, #3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80b2 	beq.w	80037d0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800366c:	4b61      	ldr	r3, [pc, #388]	@ (80037f4 <HAL_GPIO_Init+0x2fc>)
 800366e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003670:	4a60      	ldr	r2, [pc, #384]	@ (80037f4 <HAL_GPIO_Init+0x2fc>)
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	6613      	str	r3, [r2, #96]	@ 0x60
 8003678:	4b5e      	ldr	r3, [pc, #376]	@ (80037f4 <HAL_GPIO_Init+0x2fc>)
 800367a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003684:	4a5c      	ldr	r2, [pc, #368]	@ (80037f8 <HAL_GPIO_Init+0x300>)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	089b      	lsrs	r3, r3, #2
 800368a:	3302      	adds	r3, #2
 800368c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003690:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	220f      	movs	r2, #15
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4013      	ands	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036ae:	d02b      	beq.n	8003708 <HAL_GPIO_Init+0x210>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a52      	ldr	r2, [pc, #328]	@ (80037fc <HAL_GPIO_Init+0x304>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d025      	beq.n	8003704 <HAL_GPIO_Init+0x20c>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a51      	ldr	r2, [pc, #324]	@ (8003800 <HAL_GPIO_Init+0x308>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d01f      	beq.n	8003700 <HAL_GPIO_Init+0x208>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a50      	ldr	r2, [pc, #320]	@ (8003804 <HAL_GPIO_Init+0x30c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d019      	beq.n	80036fc <HAL_GPIO_Init+0x204>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a4f      	ldr	r2, [pc, #316]	@ (8003808 <HAL_GPIO_Init+0x310>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d013      	beq.n	80036f8 <HAL_GPIO_Init+0x200>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a4e      	ldr	r2, [pc, #312]	@ (800380c <HAL_GPIO_Init+0x314>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00d      	beq.n	80036f4 <HAL_GPIO_Init+0x1fc>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a4d      	ldr	r2, [pc, #308]	@ (8003810 <HAL_GPIO_Init+0x318>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d007      	beq.n	80036f0 <HAL_GPIO_Init+0x1f8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a4c      	ldr	r2, [pc, #304]	@ (8003814 <HAL_GPIO_Init+0x31c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d101      	bne.n	80036ec <HAL_GPIO_Init+0x1f4>
 80036e8:	2307      	movs	r3, #7
 80036ea:	e00e      	b.n	800370a <HAL_GPIO_Init+0x212>
 80036ec:	2308      	movs	r3, #8
 80036ee:	e00c      	b.n	800370a <HAL_GPIO_Init+0x212>
 80036f0:	2306      	movs	r3, #6
 80036f2:	e00a      	b.n	800370a <HAL_GPIO_Init+0x212>
 80036f4:	2305      	movs	r3, #5
 80036f6:	e008      	b.n	800370a <HAL_GPIO_Init+0x212>
 80036f8:	2304      	movs	r3, #4
 80036fa:	e006      	b.n	800370a <HAL_GPIO_Init+0x212>
 80036fc:	2303      	movs	r3, #3
 80036fe:	e004      	b.n	800370a <HAL_GPIO_Init+0x212>
 8003700:	2302      	movs	r3, #2
 8003702:	e002      	b.n	800370a <HAL_GPIO_Init+0x212>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <HAL_GPIO_Init+0x212>
 8003708:	2300      	movs	r3, #0
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	f002 0203 	and.w	r2, r2, #3
 8003710:	0092      	lsls	r2, r2, #2
 8003712:	4093      	lsls	r3, r2
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800371a:	4937      	ldr	r1, [pc, #220]	@ (80037f8 <HAL_GPIO_Init+0x300>)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	089b      	lsrs	r3, r3, #2
 8003720:	3302      	adds	r3, #2
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003728:	4b3b      	ldr	r3, [pc, #236]	@ (8003818 <HAL_GPIO_Init+0x320>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	43db      	mvns	r3, r3
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4013      	ands	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800374c:	4a32      	ldr	r2, [pc, #200]	@ (8003818 <HAL_GPIO_Init+0x320>)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003752:	4b31      	ldr	r3, [pc, #196]	@ (8003818 <HAL_GPIO_Init+0x320>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	43db      	mvns	r3, r3
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4013      	ands	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003776:	4a28      	ldr	r2, [pc, #160]	@ (8003818 <HAL_GPIO_Init+0x320>)
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800377c:	4b26      	ldr	r3, [pc, #152]	@ (8003818 <HAL_GPIO_Init+0x320>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	43db      	mvns	r3, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4013      	ands	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003818 <HAL_GPIO_Init+0x320>)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003818 <HAL_GPIO_Init+0x320>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037ca:	4a13      	ldr	r2, [pc, #76]	@ (8003818 <HAL_GPIO_Init+0x320>)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	3301      	adds	r3, #1
 80037d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	fa22 f303 	lsr.w	r3, r2, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f47f ae91 	bne.w	8003508 <HAL_GPIO_Init+0x10>
  }
}
 80037e6:	bf00      	nop
 80037e8:	bf00      	nop
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40010000 	.word	0x40010000
 80037fc:	48000400 	.word	0x48000400
 8003800:	48000800 	.word	0x48000800
 8003804:	48000c00 	.word	0x48000c00
 8003808:	48001000 	.word	0x48001000
 800380c:	48001400 	.word	0x48001400
 8003810:	48001800 	.word	0x48001800
 8003814:	48001c00 	.word	0x48001c00
 8003818:	40010400 	.word	0x40010400

0800381c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	807b      	strh	r3, [r7, #2]
 8003828:	4613      	mov	r3, r2
 800382a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800382c:	787b      	ldrb	r3, [r7, #1]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003832:	887a      	ldrh	r2, [r7, #2]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003838:	e002      	b.n	8003840 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800383a:	887a      	ldrh	r2, [r7, #2]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800385e:	887a      	ldrh	r2, [r7, #2]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4013      	ands	r3, r2
 8003864:	041a      	lsls	r2, r3, #16
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	43d9      	mvns	r1, r3
 800386a:	887b      	ldrh	r3, [r7, #2]
 800386c:	400b      	ands	r3, r1
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	619a      	str	r2, [r3, #24]
}
 8003874:	bf00      	nop
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800388a:	4b08      	ldr	r3, [pc, #32]	@ (80038ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800388c:	695a      	ldr	r2, [r3, #20]
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	4013      	ands	r3, r2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d006      	beq.n	80038a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003896:	4a05      	ldr	r2, [pc, #20]	@ (80038ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003898:	88fb      	ldrh	r3, [r7, #6]
 800389a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800389c:	88fb      	ldrh	r3, [r7, #6]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fd fa90 	bl	8000dc4 <HAL_GPIO_EXTI_Callback>
  }
}
 80038a4:	bf00      	nop
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40010400 	.word	0x40010400

080038b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e08d      	b.n	80039de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fe fa58 	bl	8001d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2224      	movs	r2, #36	@ 0x24
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0201 	bic.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003900:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003910:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	e006      	b.n	8003938 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003936:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	2b02      	cmp	r3, #2
 800393e:	d108      	bne.n	8003952 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	e007      	b.n	8003962 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003960:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003974:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003984:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691a      	ldr	r2, [r3, #16]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69d9      	ldr	r1, [r3, #28]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1a      	ldr	r2, [r3, #32]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	4608      	mov	r0, r1
 80039f2:	4611      	mov	r1, r2
 80039f4:	461a      	mov	r2, r3
 80039f6:	4603      	mov	r3, r0
 80039f8:	817b      	strh	r3, [r7, #10]
 80039fa:	460b      	mov	r3, r1
 80039fc:	813b      	strh	r3, [r7, #8]
 80039fe:	4613      	mov	r3, r2
 8003a00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	f040 80f9 	bne.w	8003c02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_I2C_Mem_Write+0x34>
 8003a16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d105      	bne.n	8003a28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a22:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0ed      	b.n	8003c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_I2C_Mem_Write+0x4e>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e0e6      	b.n	8003c04 <HAL_I2C_Mem_Write+0x21c>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a3e:	f7fe fb83 	bl	8002148 <HAL_GetTick>
 8003a42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2319      	movs	r3, #25
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 fac3 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0d1      	b.n	8003c04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2221      	movs	r2, #33	@ 0x21
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2240      	movs	r2, #64	@ 0x40
 8003a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a3a      	ldr	r2, [r7, #32]
 8003a7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a88:	88f8      	ldrh	r0, [r7, #6]
 8003a8a:	893a      	ldrh	r2, [r7, #8]
 8003a8c:	8979      	ldrh	r1, [r7, #10]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	4603      	mov	r3, r0
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f9d3 	bl	8003e44 <I2C_RequestMemoryWrite>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0a9      	b.n	8003c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2bff      	cmp	r3, #255	@ 0xff
 8003ab8:	d90e      	bls.n	8003ad8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	22ff      	movs	r2, #255	@ 0xff
 8003abe:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac4:	b2da      	uxtb	r2, r3
 8003ac6:	8979      	ldrh	r1, [r7, #10]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 fc47 	bl	8004364 <I2C_TransferConfig>
 8003ad6:	e00f      	b.n	8003af8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	8979      	ldrh	r1, [r7, #10]
 8003aea:	2300      	movs	r3, #0
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 fc36 	bl	8004364 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fac6 	bl	800408e <I2C_WaitOnTXISFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e07b      	b.n	8003c04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	781a      	ldrb	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d034      	beq.n	8003bb0 <HAL_I2C_Mem_Write+0x1c8>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d130      	bne.n	8003bb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b54:	2200      	movs	r2, #0
 8003b56:	2180      	movs	r1, #128	@ 0x80
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fa3f 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e04d      	b.n	8003c04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2bff      	cmp	r3, #255	@ 0xff
 8003b70:	d90e      	bls.n	8003b90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	22ff      	movs	r2, #255	@ 0xff
 8003b76:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	8979      	ldrh	r1, [r7, #10]
 8003b80:	2300      	movs	r3, #0
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 fbeb 	bl	8004364 <I2C_TransferConfig>
 8003b8e:	e00f      	b.n	8003bb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	8979      	ldrh	r1, [r7, #10]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fbda 	bl	8004364 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d19e      	bne.n	8003af8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 faac 	bl	800411c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e01a      	b.n	8003c04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	4b0a      	ldr	r3, [pc, #40]	@ (8003c0c <HAL_I2C_Mem_Write+0x224>)
 8003be2:	400b      	ands	r3, r1
 8003be4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e000      	b.n	8003c04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
  }
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	fe00e800 	.word	0xfe00e800

08003c10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af02      	add	r7, sp, #8
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	4608      	mov	r0, r1
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4603      	mov	r3, r0
 8003c20:	817b      	strh	r3, [r7, #10]
 8003c22:	460b      	mov	r3, r1
 8003c24:	813b      	strh	r3, [r7, #8]
 8003c26:	4613      	mov	r3, r2
 8003c28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	f040 80fd 	bne.w	8003e32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d002      	beq.n	8003c44 <HAL_I2C_Mem_Read+0x34>
 8003c3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d105      	bne.n	8003c50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c4a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0f1      	b.n	8003e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_I2C_Mem_Read+0x4e>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e0ea      	b.n	8003e34 <HAL_I2C_Mem_Read+0x224>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c66:	f7fe fa6f 	bl	8002148 <HAL_GetTick>
 8003c6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2319      	movs	r3, #25
 8003c72:	2201      	movs	r2, #1
 8003c74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f9af 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0d5      	b.n	8003e34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2222      	movs	r2, #34	@ 0x22
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2240      	movs	r2, #64	@ 0x40
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a3a      	ldr	r2, [r7, #32]
 8003ca2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ca8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cb0:	88f8      	ldrh	r0, [r7, #6]
 8003cb2:	893a      	ldrh	r2, [r7, #8]
 8003cb4:	8979      	ldrh	r1, [r7, #10]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	9301      	str	r3, [sp, #4]
 8003cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f913 	bl	8003eec <I2C_RequestMemoryRead>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0ad      	b.n	8003e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2bff      	cmp	r3, #255	@ 0xff
 8003ce0:	d90e      	bls.n	8003d00 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	8979      	ldrh	r1, [r7, #10]
 8003cf0:	4b52      	ldr	r3, [pc, #328]	@ (8003e3c <HAL_I2C_Mem_Read+0x22c>)
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 fb33 	bl	8004364 <I2C_TransferConfig>
 8003cfe:	e00f      	b.n	8003d20 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	8979      	ldrh	r1, [r7, #10]
 8003d12:	4b4a      	ldr	r3, [pc, #296]	@ (8003e3c <HAL_I2C_Mem_Read+0x22c>)
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fb22 	bl	8004364 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d26:	2200      	movs	r2, #0
 8003d28:	2104      	movs	r1, #4
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f956 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e07c      	b.n	8003e34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d034      	beq.n	8003de0 <HAL_I2C_Mem_Read+0x1d0>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d130      	bne.n	8003de0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d84:	2200      	movs	r2, #0
 8003d86:	2180      	movs	r1, #128	@ 0x80
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f927 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e04d      	b.n	8003e34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2bff      	cmp	r3, #255	@ 0xff
 8003da0:	d90e      	bls.n	8003dc0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2201      	movs	r2, #1
 8003da6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	8979      	ldrh	r1, [r7, #10]
 8003db0:	2300      	movs	r3, #0
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 fad3 	bl	8004364 <I2C_TransferConfig>
 8003dbe:	e00f      	b.n	8003de0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	8979      	ldrh	r1, [r7, #10]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fac2 	bl	8004364 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d19a      	bne.n	8003d20 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f994 	bl	800411c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e01a      	b.n	8003e34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2220      	movs	r2, #32
 8003e04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4b0b      	ldr	r3, [pc, #44]	@ (8003e40 <HAL_I2C_Mem_Read+0x230>)
 8003e12:	400b      	ands	r3, r1
 8003e14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e000      	b.n	8003e34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
  }
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	80002400 	.word	0x80002400
 8003e40:	fe00e800 	.word	0xfe00e800

08003e44 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	4611      	mov	r1, r2
 8003e50:	461a      	mov	r2, r3
 8003e52:	4603      	mov	r3, r0
 8003e54:	817b      	strh	r3, [r7, #10]
 8003e56:	460b      	mov	r3, r1
 8003e58:	813b      	strh	r3, [r7, #8]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e5e:	88fb      	ldrh	r3, [r7, #6]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	8979      	ldrh	r1, [r7, #10]
 8003e64:	4b20      	ldr	r3, [pc, #128]	@ (8003ee8 <I2C_RequestMemoryWrite+0xa4>)
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fa79 	bl	8004364 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e72:	69fa      	ldr	r2, [r7, #28]
 8003e74:	69b9      	ldr	r1, [r7, #24]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f909 	bl	800408e <I2C_WaitOnTXISFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e02c      	b.n	8003ee0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d105      	bne.n	8003e98 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e8c:	893b      	ldrh	r3, [r7, #8]
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e96:	e015      	b.n	8003ec4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e98:	893b      	ldrh	r3, [r7, #8]
 8003e9a:	0a1b      	lsrs	r3, r3, #8
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	69b9      	ldr	r1, [r7, #24]
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 f8ef 	bl	800408e <I2C_WaitOnTXISFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e012      	b.n	8003ee0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003eba:	893b      	ldrh	r3, [r7, #8]
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	2180      	movs	r1, #128	@ 0x80
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f884 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e000      	b.n	8003ee0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	80002000 	.word	0x80002000

08003eec <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	4608      	mov	r0, r1
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	817b      	strh	r3, [r7, #10]
 8003efe:	460b      	mov	r3, r1
 8003f00:	813b      	strh	r3, [r7, #8]
 8003f02:	4613      	mov	r3, r2
 8003f04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f06:	88fb      	ldrh	r3, [r7, #6]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	8979      	ldrh	r1, [r7, #10]
 8003f0c:	4b20      	ldr	r3, [pc, #128]	@ (8003f90 <I2C_RequestMemoryRead+0xa4>)
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	2300      	movs	r3, #0
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 fa26 	bl	8004364 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	69b9      	ldr	r1, [r7, #24]
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f8b6 	bl	800408e <I2C_WaitOnTXISFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e02c      	b.n	8003f86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d105      	bne.n	8003f3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f32:	893b      	ldrh	r3, [r7, #8]
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f3c:	e015      	b.n	8003f6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f3e:	893b      	ldrh	r3, [r7, #8]
 8003f40:	0a1b      	lsrs	r3, r3, #8
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	69b9      	ldr	r1, [r7, #24]
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f89c 	bl	800408e <I2C_WaitOnTXISFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e012      	b.n	8003f86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f60:	893b      	ldrh	r3, [r7, #8]
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2200      	movs	r2, #0
 8003f72:	2140      	movs	r1, #64	@ 0x40
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 f831 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	80002000 	.word	0x80002000

08003f94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d103      	bne.n	8003fb2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d007      	beq.n	8003fd0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699a      	ldr	r2, [r3, #24]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	619a      	str	r2, [r3, #24]
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fec:	e03b      	b.n	8004066 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fee:	69ba      	ldr	r2, [r7, #24]
 8003ff0:	6839      	ldr	r1, [r7, #0]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 f8d6 	bl	80041a4 <I2C_IsErrorOccurred>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e041      	b.n	8004086 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d02d      	beq.n	8004066 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400a:	f7fe f89d 	bl	8002148 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d302      	bcc.n	8004020 <I2C_WaitOnFlagUntilTimeout+0x44>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d122      	bne.n	8004066 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4013      	ands	r3, r2
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	429a      	cmp	r2, r3
 800402e:	bf0c      	ite	eq
 8004030:	2301      	moveq	r3, #1
 8004032:	2300      	movne	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	429a      	cmp	r2, r3
 800403c:	d113      	bne.n	8004066 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	f043 0220 	orr.w	r2, r3, #32
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e00f      	b.n	8004086 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699a      	ldr	r2, [r3, #24]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4013      	ands	r3, r2
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	429a      	cmp	r2, r3
 8004074:	bf0c      	ite	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	2300      	movne	r3, #0
 800407a:	b2db      	uxtb	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	429a      	cmp	r2, r3
 8004082:	d0b4      	beq.n	8003fee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800409a:	e033      	b.n	8004104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	68b9      	ldr	r1, [r7, #8]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f87f 	bl	80041a4 <I2C_IsErrorOccurred>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e031      	b.n	8004114 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b6:	d025      	beq.n	8004104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b8:	f7fe f846 	bl	8002148 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d302      	bcc.n	80040ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d11a      	bne.n	8004104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d013      	beq.n	8004104 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e0:	f043 0220 	orr.w	r2, r3, #32
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e007      	b.n	8004114 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b02      	cmp	r3, #2
 8004110:	d1c4      	bne.n	800409c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004128:	e02f      	b.n	800418a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f838 	bl	80041a4 <I2C_IsErrorOccurred>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e02d      	b.n	800419a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413e:	f7fe f803 	bl	8002148 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	429a      	cmp	r2, r3
 800414c:	d302      	bcc.n	8004154 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d11a      	bne.n	800418a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b20      	cmp	r3, #32
 8004160:	d013      	beq.n	800418a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004166:	f043 0220 	orr.w	r2, r3, #32
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e007      	b.n	800419a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b20      	cmp	r3, #32
 8004196:	d1c8      	bne.n	800412a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08a      	sub	sp, #40	@ 0x28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d068      	beq.n	80042a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2210      	movs	r2, #16
 80041d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041d8:	e049      	b.n	800426e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e0:	d045      	beq.n	800426e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041e2:	f7fd ffb1 	bl	8002148 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d302      	bcc.n	80041f8 <I2C_IsErrorOccurred+0x54>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d13a      	bne.n	800426e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004202:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800420a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004216:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800421a:	d121      	bne.n	8004260 <I2C_IsErrorOccurred+0xbc>
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004222:	d01d      	beq.n	8004260 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004224:	7cfb      	ldrb	r3, [r7, #19]
 8004226:	2b20      	cmp	r3, #32
 8004228:	d01a      	beq.n	8004260 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004238:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800423a:	f7fd ff85 	bl	8002148 <HAL_GetTick>
 800423e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004240:	e00e      	b.n	8004260 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004242:	f7fd ff81 	bl	8002148 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b19      	cmp	r3, #25
 800424e:	d907      	bls.n	8004260 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	f043 0320 	orr.w	r3, r3, #32
 8004256:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800425e:	e006      	b.n	800426e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	f003 0320 	and.w	r3, r3, #32
 800426a:	2b20      	cmp	r3, #32
 800426c:	d1e9      	bne.n	8004242 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b20      	cmp	r3, #32
 800427a:	d003      	beq.n	8004284 <I2C_IsErrorOccurred+0xe0>
 800427c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0aa      	beq.n	80041da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004288:	2b00      	cmp	r3, #0
 800428a:	d103      	bne.n	8004294 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2220      	movs	r2, #32
 8004292:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	f043 0304 	orr.w	r3, r3, #4
 800429a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00b      	beq.n	80042cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	f043 0301 	orr.w	r3, r3, #1
 80042ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	f043 0308 	orr.w	r3, r3, #8
 80042dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00b      	beq.n	8004310 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80042f8:	6a3b      	ldr	r3, [r7, #32]
 80042fa:	f043 0302 	orr.w	r3, r3, #2
 80042fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004308:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01c      	beq.n	8004352 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f7ff fe3b 	bl	8003f94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6859      	ldr	r1, [r3, #4]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	4b0d      	ldr	r3, [pc, #52]	@ (8004360 <I2C_IsErrorOccurred+0x1bc>)
 800432a:	400b      	ands	r3, r1
 800432c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	431a      	orrs	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004352:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004356:	4618      	mov	r0, r3
 8004358:	3728      	adds	r7, #40	@ 0x28
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	fe00e800 	.word	0xfe00e800

08004364 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	607b      	str	r3, [r7, #4]
 800436e:	460b      	mov	r3, r1
 8004370:	817b      	strh	r3, [r7, #10]
 8004372:	4613      	mov	r3, r2
 8004374:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004376:	897b      	ldrh	r3, [r7, #10]
 8004378:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800437c:	7a7b      	ldrb	r3, [r7, #9]
 800437e:	041b      	lsls	r3, r3, #16
 8004380:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004384:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	4313      	orrs	r3, r2
 800438e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004392:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	0d5b      	lsrs	r3, r3, #21
 800439e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80043a2:	4b08      	ldr	r3, [pc, #32]	@ (80043c4 <I2C_TransferConfig+0x60>)
 80043a4:	430b      	orrs	r3, r1
 80043a6:	43db      	mvns	r3, r3
 80043a8:	ea02 0103 	and.w	r1, r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80043b6:	bf00      	nop
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	03ff63ff 	.word	0x03ff63ff

080043c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b20      	cmp	r3, #32
 80043dc:	d138      	bne.n	8004450 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e032      	b.n	8004452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2224      	movs	r2, #36	@ 0x24
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0201 	bic.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800441a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6819      	ldr	r1, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	e000      	b.n	8004452 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004450:	2302      	movs	r3, #2
  }
}
 8004452:	4618      	mov	r0, r3
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800445e:	b480      	push	{r7}
 8004460:	b085      	sub	sp, #20
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b20      	cmp	r3, #32
 8004472:	d139      	bne.n	80044e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800447e:	2302      	movs	r3, #2
 8004480:	e033      	b.n	80044ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2224      	movs	r2, #36	@ 0x24
 800448e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f022 0201 	bic.w	r2, r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80044b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	021b      	lsls	r3, r3, #8
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	e000      	b.n	80044ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
  }
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
	...

080044f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80044fc:	4b04      	ldr	r3, [pc, #16]	@ (8004510 <HAL_PWREx_GetVoltageRange+0x18>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004504:	4618      	mov	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40007000 	.word	0x40007000

08004514 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004522:	d130      	bne.n	8004586 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004524:	4b23      	ldr	r3, [pc, #140]	@ (80045b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800452c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004530:	d038      	beq.n	80045a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004532:	4b20      	ldr	r3, [pc, #128]	@ (80045b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800453a:	4a1e      	ldr	r2, [pc, #120]	@ (80045b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800453c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004540:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004542:	4b1d      	ldr	r3, [pc, #116]	@ (80045b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2232      	movs	r2, #50	@ 0x32
 8004548:	fb02 f303 	mul.w	r3, r2, r3
 800454c:	4a1b      	ldr	r2, [pc, #108]	@ (80045bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	0c9b      	lsrs	r3, r3, #18
 8004554:	3301      	adds	r3, #1
 8004556:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004558:	e002      	b.n	8004560 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3b01      	subs	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004560:	4b14      	ldr	r3, [pc, #80]	@ (80045b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800456c:	d102      	bne.n	8004574 <HAL_PWREx_ControlVoltageScaling+0x60>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1f2      	bne.n	800455a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004574:	4b0f      	ldr	r3, [pc, #60]	@ (80045b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800457c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004580:	d110      	bne.n	80045a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e00f      	b.n	80045a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004586:	4b0b      	ldr	r3, [pc, #44]	@ (80045b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800458e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004592:	d007      	beq.n	80045a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004594:	4b07      	ldr	r3, [pc, #28]	@ (80045b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800459c:	4a05      	ldr	r2, [pc, #20]	@ (80045b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800459e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40007000 	.word	0x40007000
 80045b8:	20000000 	.word	0x20000000
 80045bc:	431bde83 	.word	0x431bde83

080045c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d102      	bne.n	80045d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f000 bc08 	b.w	8004de4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045d4:	4b96      	ldr	r3, [pc, #600]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045de:	4b94      	ldr	r3, [pc, #592]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0310 	and.w	r3, r3, #16
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 80e4 	beq.w	80047be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d007      	beq.n	800460c <HAL_RCC_OscConfig+0x4c>
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	2b0c      	cmp	r3, #12
 8004600:	f040 808b 	bne.w	800471a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b01      	cmp	r3, #1
 8004608:	f040 8087 	bne.w	800471a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800460c:	4b88      	ldr	r3, [pc, #544]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_RCC_OscConfig+0x64>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e3df      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1a      	ldr	r2, [r3, #32]
 8004628:	4b81      	ldr	r3, [pc, #516]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d004      	beq.n	800463e <HAL_RCC_OscConfig+0x7e>
 8004634:	4b7e      	ldr	r3, [pc, #504]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800463c:	e005      	b.n	800464a <HAL_RCC_OscConfig+0x8a>
 800463e:	4b7c      	ldr	r3, [pc, #496]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004640:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004644:	091b      	lsrs	r3, r3, #4
 8004646:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800464a:	4293      	cmp	r3, r2
 800464c:	d223      	bcs.n	8004696 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fdae 	bl	80051b4 <RCC_SetFlashLatencyFromMSIRange>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e3c0      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004662:	4b73      	ldr	r3, [pc, #460]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a72      	ldr	r2, [pc, #456]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004668:	f043 0308 	orr.w	r3, r3, #8
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	4b70      	ldr	r3, [pc, #448]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	496d      	ldr	r1, [pc, #436]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 800467c:	4313      	orrs	r3, r2
 800467e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004680:	4b6b      	ldr	r3, [pc, #428]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	021b      	lsls	r3, r3, #8
 800468e:	4968      	ldr	r1, [pc, #416]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004690:	4313      	orrs	r3, r2
 8004692:	604b      	str	r3, [r1, #4]
 8004694:	e025      	b.n	80046e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004696:	4b66      	ldr	r3, [pc, #408]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a65      	ldr	r2, [pc, #404]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 800469c:	f043 0308 	orr.w	r3, r3, #8
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	4b63      	ldr	r3, [pc, #396]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	4960      	ldr	r1, [pc, #384]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046b4:	4b5e      	ldr	r3, [pc, #376]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	021b      	lsls	r3, r3, #8
 80046c2:	495b      	ldr	r1, [pc, #364]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d109      	bne.n	80046e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fd6e 	bl	80051b4 <RCC_SetFlashLatencyFromMSIRange>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e380      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046e2:	f000 fc87 	bl	8004ff4 <HAL_RCC_GetSysClockFreq>
 80046e6:	4602      	mov	r2, r0
 80046e8:	4b51      	ldr	r3, [pc, #324]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	4950      	ldr	r1, [pc, #320]	@ (8004834 <HAL_RCC_OscConfig+0x274>)
 80046f4:	5ccb      	ldrb	r3, [r1, r3]
 80046f6:	f003 031f 	and.w	r3, r3, #31
 80046fa:	fa22 f303 	lsr.w	r3, r2, r3
 80046fe:	4a4e      	ldr	r2, [pc, #312]	@ (8004838 <HAL_RCC_OscConfig+0x278>)
 8004700:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004702:	4b4e      	ldr	r3, [pc, #312]	@ (800483c <HAL_RCC_OscConfig+0x27c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7fd fbf6 	bl	8001ef8 <HAL_InitTick>
 800470c:	4603      	mov	r3, r0
 800470e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d052      	beq.n	80047bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004716:	7bfb      	ldrb	r3, [r7, #15]
 8004718:	e364      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d032      	beq.n	8004788 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004722:	4b43      	ldr	r3, [pc, #268]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a42      	ldr	r2, [pc, #264]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800472e:	f7fd fd0b 	bl	8002148 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004736:	f7fd fd07 	bl	8002148 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e34d      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004748:	4b39      	ldr	r3, [pc, #228]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004754:	4b36      	ldr	r3, [pc, #216]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a35      	ldr	r2, [pc, #212]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 800475a:	f043 0308 	orr.w	r3, r3, #8
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	4b33      	ldr	r3, [pc, #204]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	4930      	ldr	r1, [pc, #192]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 800476e:	4313      	orrs	r3, r2
 8004770:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004772:	4b2f      	ldr	r3, [pc, #188]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	492b      	ldr	r1, [pc, #172]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004782:	4313      	orrs	r3, r2
 8004784:	604b      	str	r3, [r1, #4]
 8004786:	e01a      	b.n	80047be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004788:	4b29      	ldr	r3, [pc, #164]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a28      	ldr	r2, [pc, #160]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 800478e:	f023 0301 	bic.w	r3, r3, #1
 8004792:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004794:	f7fd fcd8 	bl	8002148 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800479c:	f7fd fcd4 	bl	8002148 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e31a      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80047ae:	4b20      	ldr	r3, [pc, #128]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x1dc>
 80047ba:	e000      	b.n	80047be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d073      	beq.n	80048b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d005      	beq.n	80047dc <HAL_RCC_OscConfig+0x21c>
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b0c      	cmp	r3, #12
 80047d4:	d10e      	bne.n	80047f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b03      	cmp	r3, #3
 80047da:	d10b      	bne.n	80047f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047dc:	4b14      	ldr	r3, [pc, #80]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d063      	beq.n	80048b0 <HAL_RCC_OscConfig+0x2f0>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d15f      	bne.n	80048b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e2f7      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047fc:	d106      	bne.n	800480c <HAL_RCC_OscConfig+0x24c>
 80047fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a0b      	ldr	r2, [pc, #44]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004808:	6013      	str	r3, [r2, #0]
 800480a:	e025      	b.n	8004858 <HAL_RCC_OscConfig+0x298>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004814:	d114      	bne.n	8004840 <HAL_RCC_OscConfig+0x280>
 8004816:	4b06      	ldr	r3, [pc, #24]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a05      	ldr	r2, [pc, #20]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 800481c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	4b03      	ldr	r3, [pc, #12]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a02      	ldr	r2, [pc, #8]	@ (8004830 <HAL_RCC_OscConfig+0x270>)
 8004828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	e013      	b.n	8004858 <HAL_RCC_OscConfig+0x298>
 8004830:	40021000 	.word	0x40021000
 8004834:	080099a0 	.word	0x080099a0
 8004838:	20000000 	.word	0x20000000
 800483c:	20000004 	.word	0x20000004
 8004840:	4ba0      	ldr	r3, [pc, #640]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a9f      	ldr	r2, [pc, #636]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	4b9d      	ldr	r3, [pc, #628]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a9c      	ldr	r2, [pc, #624]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d013      	beq.n	8004888 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004860:	f7fd fc72 	bl	8002148 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004868:	f7fd fc6e 	bl	8002148 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	@ 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e2b4      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800487a:	4b92      	ldr	r3, [pc, #584]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x2a8>
 8004886:	e014      	b.n	80048b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004888:	f7fd fc5e 	bl	8002148 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004890:	f7fd fc5a 	bl	8002148 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	@ 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e2a0      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048a2:	4b88      	ldr	r3, [pc, #544]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0x2d0>
 80048ae:	e000      	b.n	80048b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d060      	beq.n	8004980 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d005      	beq.n	80048d0 <HAL_RCC_OscConfig+0x310>
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b0c      	cmp	r3, #12
 80048c8:	d119      	bne.n	80048fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d116      	bne.n	80048fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048d0:	4b7c      	ldr	r3, [pc, #496]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_RCC_OscConfig+0x328>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e27d      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e8:	4b76      	ldr	r3, [pc, #472]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	061b      	lsls	r3, r3, #24
 80048f6:	4973      	ldr	r1, [pc, #460]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048fc:	e040      	b.n	8004980 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d023      	beq.n	800494e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004906:	4b6f      	ldr	r3, [pc, #444]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a6e      	ldr	r2, [pc, #440]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 800490c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004912:	f7fd fc19 	bl	8002148 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800491a:	f7fd fc15 	bl	8002148 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e25b      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800492c:	4b65      	ldr	r3, [pc, #404]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004938:	4b62      	ldr	r3, [pc, #392]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	061b      	lsls	r3, r3, #24
 8004946:	495f      	ldr	r1, [pc, #380]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004948:	4313      	orrs	r3, r2
 800494a:	604b      	str	r3, [r1, #4]
 800494c:	e018      	b.n	8004980 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800494e:	4b5d      	ldr	r3, [pc, #372]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a5c      	ldr	r2, [pc, #368]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495a:	f7fd fbf5 	bl	8002148 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004962:	f7fd fbf1 	bl	8002148 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e237      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004974:	4b53      	ldr	r3, [pc, #332]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1f0      	bne.n	8004962 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	d03c      	beq.n	8004a06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01c      	beq.n	80049ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004994:	4b4b      	ldr	r3, [pc, #300]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800499a:	4a4a      	ldr	r2, [pc, #296]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a4:	f7fd fbd0 	bl	8002148 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ac:	f7fd fbcc 	bl	8002148 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e212      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80049be:	4b41      	ldr	r3, [pc, #260]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 80049c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0ef      	beq.n	80049ac <HAL_RCC_OscConfig+0x3ec>
 80049cc:	e01b      	b.n	8004a06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049ce:	4b3d      	ldr	r3, [pc, #244]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 80049d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049d4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049de:	f7fd fbb3 	bl	8002148 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049e6:	f7fd fbaf 	bl	8002148 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e1f5      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049f8:	4b32      	ldr	r3, [pc, #200]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 80049fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1ef      	bne.n	80049e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0304 	and.w	r3, r3, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 80a6 	beq.w	8004b60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a14:	2300      	movs	r3, #0
 8004a16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004a18:	4b2a      	ldr	r3, [pc, #168]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10d      	bne.n	8004a40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a24:	4b27      	ldr	r3, [pc, #156]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a28:	4a26      	ldr	r2, [pc, #152]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a30:	4b24      	ldr	r3, [pc, #144]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a38:	60bb      	str	r3, [r7, #8]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a40:	4b21      	ldr	r3, [pc, #132]	@ (8004ac8 <HAL_RCC_OscConfig+0x508>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d118      	bne.n	8004a7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8004ac8 <HAL_RCC_OscConfig+0x508>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1d      	ldr	r2, [pc, #116]	@ (8004ac8 <HAL_RCC_OscConfig+0x508>)
 8004a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a58:	f7fd fb76 	bl	8002148 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a60:	f7fd fb72 	bl	8002148 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e1b8      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a72:	4b15      	ldr	r3, [pc, #84]	@ (8004ac8 <HAL_RCC_OscConfig+0x508>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d108      	bne.n	8004a98 <HAL_RCC_OscConfig+0x4d8>
 8004a86:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004a8e:	f043 0301 	orr.w	r3, r3, #1
 8004a92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004a96:	e029      	b.n	8004aec <HAL_RCC_OscConfig+0x52c>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2b05      	cmp	r3, #5
 8004a9e:	d115      	bne.n	8004acc <HAL_RCC_OscConfig+0x50c>
 8004aa0:	4b08      	ldr	r3, [pc, #32]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa6:	4a07      	ldr	r2, [pc, #28]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004aa8:	f043 0304 	orr.w	r3, r3, #4
 8004aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ab0:	4b04      	ldr	r3, [pc, #16]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab6:	4a03      	ldr	r2, [pc, #12]	@ (8004ac4 <HAL_RCC_OscConfig+0x504>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ac0:	e014      	b.n	8004aec <HAL_RCC_OscConfig+0x52c>
 8004ac2:	bf00      	nop
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	40007000 	.word	0x40007000
 8004acc:	4b9d      	ldr	r3, [pc, #628]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad2:	4a9c      	ldr	r2, [pc, #624]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004ad4:	f023 0301 	bic.w	r3, r3, #1
 8004ad8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004adc:	4b99      	ldr	r3, [pc, #612]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae2:	4a98      	ldr	r2, [pc, #608]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004ae4:	f023 0304 	bic.w	r3, r3, #4
 8004ae8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d016      	beq.n	8004b22 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fd fb28 	bl	8002148 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afc:	f7fd fb24 	bl	8002148 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e168      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b12:	4b8c      	ldr	r3, [pc, #560]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0ed      	beq.n	8004afc <HAL_RCC_OscConfig+0x53c>
 8004b20:	e015      	b.n	8004b4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b22:	f7fd fb11 	bl	8002148 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b28:	e00a      	b.n	8004b40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b2a:	f7fd fb0d 	bl	8002148 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e151      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b40:	4b80      	ldr	r3, [pc, #512]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1ed      	bne.n	8004b2a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b4e:	7ffb      	ldrb	r3, [r7, #31]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d105      	bne.n	8004b60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b54:	4b7b      	ldr	r3, [pc, #492]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b58:	4a7a      	ldr	r2, [pc, #488]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004b5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b5e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d03c      	beq.n	8004be6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d01c      	beq.n	8004bae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b74:	4b73      	ldr	r3, [pc, #460]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b7a:	4a72      	ldr	r2, [pc, #456]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004b7c:	f043 0301 	orr.w	r3, r3, #1
 8004b80:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b84:	f7fd fae0 	bl	8002148 <HAL_GetTick>
 8004b88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b8c:	f7fd fadc 	bl	8002148 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e122      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b9e:	4b69      	ldr	r3, [pc, #420]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004ba0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0ef      	beq.n	8004b8c <HAL_RCC_OscConfig+0x5cc>
 8004bac:	e01b      	b.n	8004be6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004bae:	4b65      	ldr	r3, [pc, #404]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004bb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bb4:	4a63      	ldr	r2, [pc, #396]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004bb6:	f023 0301 	bic.w	r3, r3, #1
 8004bba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bbe:	f7fd fac3 	bl	8002148 <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bc6:	f7fd fabf 	bl	8002148 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e105      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bd8:	4b5a      	ldr	r3, [pc, #360]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1ef      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 80f9 	beq.w	8004de2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	f040 80cf 	bne.w	8004d98 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004bfa:	4b52      	ldr	r3, [pc, #328]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f003 0203 	and.w	r2, r3, #3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d12c      	bne.n	8004c68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d123      	bne.n	8004c68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d11b      	bne.n	8004c68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d113      	bne.n	8004c68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4a:	085b      	lsrs	r3, r3, #1
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d109      	bne.n	8004c68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	3b01      	subs	r3, #1
 8004c62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d071      	beq.n	8004d4c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	2b0c      	cmp	r3, #12
 8004c6c:	d068      	beq.n	8004d40 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004c6e:	4b35      	ldr	r3, [pc, #212]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d105      	bne.n	8004c86 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004c7a:	4b32      	ldr	r3, [pc, #200]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e0ac      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004c8a:	4b2e      	ldr	r3, [pc, #184]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004c90:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c96:	f7fd fa57 	bl	8002148 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c9e:	f7fd fa53 	bl	8002148 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e099      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cb0:	4b24      	ldr	r3, [pc, #144]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f0      	bne.n	8004c9e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cbc:	4b21      	ldr	r3, [pc, #132]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	4b21      	ldr	r3, [pc, #132]	@ (8004d48 <HAL_RCC_OscConfig+0x788>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ccc:	3a01      	subs	r2, #1
 8004cce:	0112      	lsls	r2, r2, #4
 8004cd0:	4311      	orrs	r1, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004cd6:	0212      	lsls	r2, r2, #8
 8004cd8:	4311      	orrs	r1, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004cde:	0852      	lsrs	r2, r2, #1
 8004ce0:	3a01      	subs	r2, #1
 8004ce2:	0552      	lsls	r2, r2, #21
 8004ce4:	4311      	orrs	r1, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004cea:	0852      	lsrs	r2, r2, #1
 8004cec:	3a01      	subs	r2, #1
 8004cee:	0652      	lsls	r2, r2, #25
 8004cf0:	4311      	orrs	r1, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004cf6:	06d2      	lsls	r2, r2, #27
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	4912      	ldr	r1, [pc, #72]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d00:	4b10      	ldr	r3, [pc, #64]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a0f      	ldr	r2, [pc, #60]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004d06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	4a0c      	ldr	r2, [pc, #48]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d18:	f7fd fa16 	bl	8002148 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d20:	f7fd fa12 	bl	8002148 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e058      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d32:	4b04      	ldr	r3, [pc, #16]	@ (8004d44 <HAL_RCC_OscConfig+0x784>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f0      	beq.n	8004d20 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d3e:	e050      	b.n	8004de2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e04f      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
 8004d44:	40021000 	.word	0x40021000
 8004d48:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d4c:	4b27      	ldr	r3, [pc, #156]	@ (8004dec <HAL_RCC_OscConfig+0x82c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d144      	bne.n	8004de2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004d58:	4b24      	ldr	r3, [pc, #144]	@ (8004dec <HAL_RCC_OscConfig+0x82c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a23      	ldr	r2, [pc, #140]	@ (8004dec <HAL_RCC_OscConfig+0x82c>)
 8004d5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d62:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d64:	4b21      	ldr	r3, [pc, #132]	@ (8004dec <HAL_RCC_OscConfig+0x82c>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4a20      	ldr	r2, [pc, #128]	@ (8004dec <HAL_RCC_OscConfig+0x82c>)
 8004d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d6e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d70:	f7fd f9ea 	bl	8002148 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d78:	f7fd f9e6 	bl	8002148 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e02c      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d8a:	4b18      	ldr	r3, [pc, #96]	@ (8004dec <HAL_RCC_OscConfig+0x82c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0x7b8>
 8004d96:	e024      	b.n	8004de2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	2b0c      	cmp	r3, #12
 8004d9c:	d01f      	beq.n	8004dde <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9e:	4b13      	ldr	r3, [pc, #76]	@ (8004dec <HAL_RCC_OscConfig+0x82c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a12      	ldr	r2, [pc, #72]	@ (8004dec <HAL_RCC_OscConfig+0x82c>)
 8004da4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004daa:	f7fd f9cd 	bl	8002148 <HAL_GetTick>
 8004dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db2:	f7fd f9c9 	bl	8002148 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e00f      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dc4:	4b09      	ldr	r3, [pc, #36]	@ (8004dec <HAL_RCC_OscConfig+0x82c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f0      	bne.n	8004db2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004dd0:	4b06      	ldr	r3, [pc, #24]	@ (8004dec <HAL_RCC_OscConfig+0x82c>)
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	4905      	ldr	r1, [pc, #20]	@ (8004dec <HAL_RCC_OscConfig+0x82c>)
 8004dd6:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <HAL_RCC_OscConfig+0x830>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	60cb      	str	r3, [r1, #12]
 8004ddc:	e001      	b.n	8004de2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3720      	adds	r7, #32
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40021000 	.word	0x40021000
 8004df0:	feeefffc 	.word	0xfeeefffc

08004df4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0e7      	b.n	8004fd8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e08:	4b75      	ldr	r3, [pc, #468]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d910      	bls.n	8004e38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e16:	4b72      	ldr	r3, [pc, #456]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f023 0207 	bic.w	r2, r3, #7
 8004e1e:	4970      	ldr	r1, [pc, #448]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e26:	4b6e      	ldr	r3, [pc, #440]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d001      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0cf      	b.n	8004fd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d010      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	4b66      	ldr	r3, [pc, #408]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d908      	bls.n	8004e66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e54:	4b63      	ldr	r3, [pc, #396]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	4960      	ldr	r1, [pc, #384]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d04c      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d107      	bne.n	8004e8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d121      	bne.n	8004eca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e0a6      	b.n	8004fd8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d107      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e92:	4b54      	ldr	r3, [pc, #336]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d115      	bne.n	8004eca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e09a      	b.n	8004fd8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d107      	bne.n	8004eba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004eaa:	4b4e      	ldr	r3, [pc, #312]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e08e      	b.n	8004fd8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eba:	4b4a      	ldr	r3, [pc, #296]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e086      	b.n	8004fd8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004eca:	4b46      	ldr	r3, [pc, #280]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f023 0203 	bic.w	r2, r3, #3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4943      	ldr	r1, [pc, #268]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004edc:	f7fd f934 	bl	8002148 <HAL_GetTick>
 8004ee0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee2:	e00a      	b.n	8004efa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee4:	f7fd f930 	bl	8002148 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e06e      	b.n	8004fd8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efa:	4b3a      	ldr	r3, [pc, #232]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 020c 	and.w	r2, r3, #12
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d1eb      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d010      	beq.n	8004f3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	4b31      	ldr	r3, [pc, #196]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d208      	bcs.n	8004f3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f28:	4b2e      	ldr	r3, [pc, #184]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	492b      	ldr	r1, [pc, #172]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f3a:	4b29      	ldr	r3, [pc, #164]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d210      	bcs.n	8004f6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f48:	4b25      	ldr	r3, [pc, #148]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f023 0207 	bic.w	r2, r3, #7
 8004f50:	4923      	ldr	r1, [pc, #140]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f58:	4b21      	ldr	r3, [pc, #132]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1ec>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d001      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e036      	b.n	8004fd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d008      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f76:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	4918      	ldr	r1, [pc, #96]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d009      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f94:	4b13      	ldr	r3, [pc, #76]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	4910      	ldr	r1, [pc, #64]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004fa8:	f000 f824 	bl	8004ff4 <HAL_RCC_GetSysClockFreq>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	091b      	lsrs	r3, r3, #4
 8004fb4:	f003 030f 	and.w	r3, r3, #15
 8004fb8:	490b      	ldr	r1, [pc, #44]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1f4>)
 8004fba:	5ccb      	ldrb	r3, [r1, r3]
 8004fbc:	f003 031f 	and.w	r3, r3, #31
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc4:	4a09      	ldr	r2, [pc, #36]	@ (8004fec <HAL_RCC_ClockConfig+0x1f8>)
 8004fc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004fc8:	4b09      	ldr	r3, [pc, #36]	@ (8004ff0 <HAL_RCC_ClockConfig+0x1fc>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fc ff93 	bl	8001ef8 <HAL_InitTick>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004fd6:	7afb      	ldrb	r3, [r7, #11]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40022000 	.word	0x40022000
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	080099a0 	.word	0x080099a0
 8004fec:	20000000 	.word	0x20000000
 8004ff0:	20000004 	.word	0x20000004

08004ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b089      	sub	sp, #36	@ 0x24
 8004ff8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61fb      	str	r3, [r7, #28]
 8004ffe:	2300      	movs	r3, #0
 8005000:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005002:	4b3e      	ldr	r3, [pc, #248]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 030c 	and.w	r3, r3, #12
 800500a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800500c:	4b3b      	ldr	r3, [pc, #236]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x108>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d005      	beq.n	8005028 <HAL_RCC_GetSysClockFreq+0x34>
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	2b0c      	cmp	r3, #12
 8005020:	d121      	bne.n	8005066 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d11e      	bne.n	8005066 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005028:	4b34      	ldr	r3, [pc, #208]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x108>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d107      	bne.n	8005044 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005034:	4b31      	ldr	r3, [pc, #196]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800503a:	0a1b      	lsrs	r3, r3, #8
 800503c:	f003 030f 	and.w	r3, r3, #15
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	e005      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005044:	4b2d      	ldr	r3, [pc, #180]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	091b      	lsrs	r3, r3, #4
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005050:	4a2b      	ldr	r2, [pc, #172]	@ (8005100 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005058:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10d      	bne.n	800507c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005064:	e00a      	b.n	800507c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2b04      	cmp	r3, #4
 800506a:	d102      	bne.n	8005072 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800506c:	4b25      	ldr	r3, [pc, #148]	@ (8005104 <HAL_RCC_GetSysClockFreq+0x110>)
 800506e:	61bb      	str	r3, [r7, #24]
 8005070:	e004      	b.n	800507c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d101      	bne.n	800507c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005078:	4b23      	ldr	r3, [pc, #140]	@ (8005108 <HAL_RCC_GetSysClockFreq+0x114>)
 800507a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	2b0c      	cmp	r3, #12
 8005080:	d134      	bne.n	80050ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005082:	4b1e      	ldr	r3, [pc, #120]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d003      	beq.n	800509a <HAL_RCC_GetSysClockFreq+0xa6>
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	2b03      	cmp	r3, #3
 8005096:	d003      	beq.n	80050a0 <HAL_RCC_GetSysClockFreq+0xac>
 8005098:	e005      	b.n	80050a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800509a:	4b1a      	ldr	r3, [pc, #104]	@ (8005104 <HAL_RCC_GetSysClockFreq+0x110>)
 800509c:	617b      	str	r3, [r7, #20]
      break;
 800509e:	e005      	b.n	80050ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80050a0:	4b19      	ldr	r3, [pc, #100]	@ (8005108 <HAL_RCC_GetSysClockFreq+0x114>)
 80050a2:	617b      	str	r3, [r7, #20]
      break;
 80050a4:	e002      	b.n	80050ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	617b      	str	r3, [r7, #20]
      break;
 80050aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050ac:	4b13      	ldr	r3, [pc, #76]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x108>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	091b      	lsrs	r3, r3, #4
 80050b2:	f003 0307 	and.w	r3, r3, #7
 80050b6:	3301      	adds	r3, #1
 80050b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80050ba:	4b10      	ldr	r3, [pc, #64]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x108>)
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	0a1b      	lsrs	r3, r3, #8
 80050c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	fb03 f202 	mul.w	r2, r3, r2
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050d2:	4b0a      	ldr	r3, [pc, #40]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x108>)
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	0e5b      	lsrs	r3, r3, #25
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	3301      	adds	r3, #1
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80050ec:	69bb      	ldr	r3, [r7, #24]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3724      	adds	r7, #36	@ 0x24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40021000 	.word	0x40021000
 8005100:	080099b8 	.word	0x080099b8
 8005104:	00f42400 	.word	0x00f42400
 8005108:	007a1200 	.word	0x007a1200

0800510c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005110:	4b03      	ldr	r3, [pc, #12]	@ (8005120 <HAL_RCC_GetHCLKFreq+0x14>)
 8005112:	681b      	ldr	r3, [r3, #0]
}
 8005114:	4618      	mov	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	20000000 	.word	0x20000000

08005124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005128:	f7ff fff0 	bl	800510c <HAL_RCC_GetHCLKFreq>
 800512c:	4602      	mov	r2, r0
 800512e:	4b06      	ldr	r3, [pc, #24]	@ (8005148 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	0a1b      	lsrs	r3, r3, #8
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	4904      	ldr	r1, [pc, #16]	@ (800514c <HAL_RCC_GetPCLK1Freq+0x28>)
 800513a:	5ccb      	ldrb	r3, [r1, r3]
 800513c:	f003 031f 	and.w	r3, r3, #31
 8005140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005144:	4618      	mov	r0, r3
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40021000 	.word	0x40021000
 800514c:	080099b0 	.word	0x080099b0

08005150 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	220f      	movs	r2, #15
 800515e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005160:	4b12      	ldr	r3, [pc, #72]	@ (80051ac <HAL_RCC_GetClockConfig+0x5c>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f003 0203 	and.w	r2, r3, #3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800516c:	4b0f      	ldr	r3, [pc, #60]	@ (80051ac <HAL_RCC_GetClockConfig+0x5c>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005178:	4b0c      	ldr	r3, [pc, #48]	@ (80051ac <HAL_RCC_GetClockConfig+0x5c>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005184:	4b09      	ldr	r3, [pc, #36]	@ (80051ac <HAL_RCC_GetClockConfig+0x5c>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	08db      	lsrs	r3, r3, #3
 800518a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005192:	4b07      	ldr	r3, [pc, #28]	@ (80051b0 <HAL_RCC_GetClockConfig+0x60>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0207 	and.w	r2, r3, #7
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	601a      	str	r2, [r3, #0]
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40021000 	.word	0x40021000
 80051b0:	40022000 	.word	0x40022000

080051b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051bc:	2300      	movs	r3, #0
 80051be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051c0:	4b2a      	ldr	r3, [pc, #168]	@ (800526c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051cc:	f7ff f994 	bl	80044f8 <HAL_PWREx_GetVoltageRange>
 80051d0:	6178      	str	r0, [r7, #20]
 80051d2:	e014      	b.n	80051fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051d4:	4b25      	ldr	r3, [pc, #148]	@ (800526c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d8:	4a24      	ldr	r2, [pc, #144]	@ (800526c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051de:	6593      	str	r3, [r2, #88]	@ 0x58
 80051e0:	4b22      	ldr	r3, [pc, #136]	@ (800526c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051ec:	f7ff f984 	bl	80044f8 <HAL_PWREx_GetVoltageRange>
 80051f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051f2:	4b1e      	ldr	r3, [pc, #120]	@ (800526c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051f6:	4a1d      	ldr	r2, [pc, #116]	@ (800526c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80051f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005204:	d10b      	bne.n	800521e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b80      	cmp	r3, #128	@ 0x80
 800520a:	d919      	bls.n	8005240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005210:	d902      	bls.n	8005218 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005212:	2302      	movs	r3, #2
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	e013      	b.n	8005240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005218:	2301      	movs	r3, #1
 800521a:	613b      	str	r3, [r7, #16]
 800521c:	e010      	b.n	8005240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b80      	cmp	r3, #128	@ 0x80
 8005222:	d902      	bls.n	800522a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005224:	2303      	movs	r3, #3
 8005226:	613b      	str	r3, [r7, #16]
 8005228:	e00a      	b.n	8005240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b80      	cmp	r3, #128	@ 0x80
 800522e:	d102      	bne.n	8005236 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005230:	2302      	movs	r3, #2
 8005232:	613b      	str	r3, [r7, #16]
 8005234:	e004      	b.n	8005240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b70      	cmp	r3, #112	@ 0x70
 800523a:	d101      	bne.n	8005240 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800523c:	2301      	movs	r3, #1
 800523e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005240:	4b0b      	ldr	r3, [pc, #44]	@ (8005270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f023 0207 	bic.w	r2, r3, #7
 8005248:	4909      	ldr	r1, [pc, #36]	@ (8005270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005250:	4b07      	ldr	r3, [pc, #28]	@ (8005270 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	429a      	cmp	r2, r3
 800525c:	d001      	beq.n	8005262 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40021000 	.word	0x40021000
 8005270:	40022000 	.word	0x40022000

08005274 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800527c:	2300      	movs	r3, #0
 800527e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005280:	2300      	movs	r3, #0
 8005282:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800528c:	2b00      	cmp	r3, #0
 800528e:	d041      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005294:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005298:	d02a      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800529a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800529e:	d824      	bhi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80052a4:	d008      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80052a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80052aa:	d81e      	bhi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80052b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052b4:	d010      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052b6:	e018      	b.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052b8:	4b86      	ldr	r3, [pc, #536]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	4a85      	ldr	r2, [pc, #532]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052c4:	e015      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3304      	adds	r3, #4
 80052ca:	2100      	movs	r1, #0
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 facd 	bl	800586c <RCCEx_PLLSAI1_Config>
 80052d2:	4603      	mov	r3, r0
 80052d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052d6:	e00c      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3320      	adds	r3, #32
 80052dc:	2100      	movs	r1, #0
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 fbb6 	bl	8005a50 <RCCEx_PLLSAI2_Config>
 80052e4:	4603      	mov	r3, r0
 80052e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80052e8:	e003      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	74fb      	strb	r3, [r7, #19]
      break;
 80052ee:	e000      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80052f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052f2:	7cfb      	ldrb	r3, [r7, #19]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10b      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052f8:	4b76      	ldr	r3, [pc, #472]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005306:	4973      	ldr	r1, [pc, #460]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800530e:	e001      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005310:	7cfb      	ldrb	r3, [r7, #19]
 8005312:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d041      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005324:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005328:	d02a      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800532a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800532e:	d824      	bhi.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005330:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005334:	d008      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005336:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800533a:	d81e      	bhi.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005340:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005344:	d010      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005346:	e018      	b.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005348:	4b62      	ldr	r3, [pc, #392]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	4a61      	ldr	r2, [pc, #388]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800534e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005352:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005354:	e015      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	3304      	adds	r3, #4
 800535a:	2100      	movs	r1, #0
 800535c:	4618      	mov	r0, r3
 800535e:	f000 fa85 	bl	800586c <RCCEx_PLLSAI1_Config>
 8005362:	4603      	mov	r3, r0
 8005364:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005366:	e00c      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3320      	adds	r3, #32
 800536c:	2100      	movs	r1, #0
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fb6e 	bl	8005a50 <RCCEx_PLLSAI2_Config>
 8005374:	4603      	mov	r3, r0
 8005376:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005378:	e003      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	74fb      	strb	r3, [r7, #19]
      break;
 800537e:	e000      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005382:	7cfb      	ldrb	r3, [r7, #19]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10b      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005388:	4b52      	ldr	r3, [pc, #328]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800538e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005396:	494f      	ldr	r1, [pc, #316]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800539e:	e001      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a0:	7cfb      	ldrb	r3, [r7, #19]
 80053a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 80a0 	beq.w	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053b2:	2300      	movs	r3, #0
 80053b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053b6:	4b47      	ldr	r3, [pc, #284]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80053c6:	2300      	movs	r3, #0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00d      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053cc:	4b41      	ldr	r3, [pc, #260]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053d0:	4a40      	ldr	r2, [pc, #256]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80053d8:	4b3e      	ldr	r3, [pc, #248]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053e0:	60bb      	str	r3, [r7, #8]
 80053e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053e4:	2301      	movs	r3, #1
 80053e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053e8:	4b3b      	ldr	r3, [pc, #236]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a3a      	ldr	r2, [pc, #232]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80053ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053f4:	f7fc fea8 	bl	8002148 <HAL_GetTick>
 80053f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80053fa:	e009      	b.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053fc:	f7fc fea4 	bl	8002148 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d902      	bls.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	74fb      	strb	r3, [r7, #19]
        break;
 800540e:	e005      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005410:	4b31      	ldr	r3, [pc, #196]	@ (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0ef      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800541c:	7cfb      	ldrb	r3, [r7, #19]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d15c      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005422:	4b2c      	ldr	r3, [pc, #176]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005428:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800542c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d01f      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	429a      	cmp	r2, r3
 800543e:	d019      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005440:	4b24      	ldr	r3, [pc, #144]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800544a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800544c:	4b21      	ldr	r3, [pc, #132]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005452:	4a20      	ldr	r2, [pc, #128]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800545c:	4b1d      	ldr	r3, [pc, #116]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005462:	4a1c      	ldr	r2, [pc, #112]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800546c:	4a19      	ldr	r2, [pc, #100]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d016      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547e:	f7fc fe63 	bl	8002148 <HAL_GetTick>
 8005482:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005484:	e00b      	b.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005486:	f7fc fe5f 	bl	8002148 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005494:	4293      	cmp	r3, r2
 8005496:	d902      	bls.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	74fb      	strb	r3, [r7, #19]
            break;
 800549c:	e006      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800549e:	4b0d      	ldr	r3, [pc, #52]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0ec      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80054ac:	7cfb      	ldrb	r3, [r7, #19]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10c      	bne.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054b2:	4b08      	ldr	r3, [pc, #32]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c2:	4904      	ldr	r1, [pc, #16]	@ (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80054ca:	e009      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054cc:	7cfb      	ldrb	r3, [r7, #19]
 80054ce:	74bb      	strb	r3, [r7, #18]
 80054d0:	e006      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80054d2:	bf00      	nop
 80054d4:	40021000 	.word	0x40021000
 80054d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054dc:	7cfb      	ldrb	r3, [r7, #19]
 80054de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80054e0:	7c7b      	ldrb	r3, [r7, #17]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d105      	bne.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054e6:	4ba6      	ldr	r3, [pc, #664]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ea:	4aa5      	ldr	r2, [pc, #660]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054fe:	4ba0      	ldr	r3, [pc, #640]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005504:	f023 0203 	bic.w	r2, r3, #3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550c:	499c      	ldr	r1, [pc, #624]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005520:	4b97      	ldr	r3, [pc, #604]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005526:	f023 020c 	bic.w	r2, r3, #12
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552e:	4994      	ldr	r1, [pc, #592]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00a      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005542:	4b8f      	ldr	r3, [pc, #572]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005548:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005550:	498b      	ldr	r1, [pc, #556]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005564:	4b86      	ldr	r3, [pc, #536]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005572:	4983      	ldr	r1, [pc, #524]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005574:	4313      	orrs	r3, r2
 8005576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0310 	and.w	r3, r3, #16
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00a      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005586:	4b7e      	ldr	r3, [pc, #504]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800558c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005594:	497a      	ldr	r1, [pc, #488]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005596:	4313      	orrs	r3, r2
 8005598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0320 	and.w	r3, r3, #32
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055a8:	4b75      	ldr	r3, [pc, #468]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055b6:	4972      	ldr	r1, [pc, #456]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055ca:	4b6d      	ldr	r3, [pc, #436]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055d8:	4969      	ldr	r1, [pc, #420]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80055ec:	4b64      	ldr	r3, [pc, #400]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055fa:	4961      	ldr	r1, [pc, #388]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055fc:	4313      	orrs	r3, r2
 80055fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800560e:	4b5c      	ldr	r3, [pc, #368]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005614:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800561c:	4958      	ldr	r1, [pc, #352]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800561e:	4313      	orrs	r3, r2
 8005620:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005630:	4b53      	ldr	r3, [pc, #332]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005636:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800563e:	4950      	ldr	r1, [pc, #320]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005640:	4313      	orrs	r3, r2
 8005642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005652:	4b4b      	ldr	r3, [pc, #300]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005658:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005660:	4947      	ldr	r1, [pc, #284]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005674:	4b42      	ldr	r3, [pc, #264]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005676:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800567a:	f023 0203 	bic.w	r2, r3, #3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005682:	493f      	ldr	r1, [pc, #252]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005684:	4313      	orrs	r3, r2
 8005686:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d028      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005696:	4b3a      	ldr	r3, [pc, #232]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a4:	4936      	ldr	r1, [pc, #216]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80056b4:	d106      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056b6:	4b32      	ldr	r3, [pc, #200]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	4a31      	ldr	r2, [pc, #196]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056c0:	60d3      	str	r3, [r2, #12]
 80056c2:	e011      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056cc:	d10c      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3304      	adds	r3, #4
 80056d2:	2101      	movs	r1, #1
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 f8c9 	bl	800586c <RCCEx_PLLSAI1_Config>
 80056da:	4603      	mov	r3, r0
 80056dc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80056de:	7cfb      	ldrb	r3, [r7, #19]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80056e4:	7cfb      	ldrb	r3, [r7, #19]
 80056e6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d028      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056f4:	4b22      	ldr	r3, [pc, #136]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005702:	491f      	ldr	r1, [pc, #124]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005704:	4313      	orrs	r3, r2
 8005706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800570e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005712:	d106      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005714:	4b1a      	ldr	r3, [pc, #104]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4a19      	ldr	r2, [pc, #100]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800571a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800571e:	60d3      	str	r3, [r2, #12]
 8005720:	e011      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005726:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800572a:	d10c      	bne.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	3304      	adds	r3, #4
 8005730:	2101      	movs	r1, #1
 8005732:	4618      	mov	r0, r3
 8005734:	f000 f89a 	bl	800586c <RCCEx_PLLSAI1_Config>
 8005738:	4603      	mov	r3, r0
 800573a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800573c:	7cfb      	ldrb	r3, [r7, #19]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005742:	7cfb      	ldrb	r3, [r7, #19]
 8005744:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d02a      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005752:	4b0b      	ldr	r3, [pc, #44]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005758:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005760:	4907      	ldr	r1, [pc, #28]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005762:	4313      	orrs	r3, r2
 8005764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800576c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005770:	d108      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005772:	4b03      	ldr	r3, [pc, #12]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	4a02      	ldr	r2, [pc, #8]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005778:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800577c:	60d3      	str	r3, [r2, #12]
 800577e:	e013      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005780:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005788:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800578c:	d10c      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3304      	adds	r3, #4
 8005792:	2101      	movs	r1, #1
 8005794:	4618      	mov	r0, r3
 8005796:	f000 f869 	bl	800586c <RCCEx_PLLSAI1_Config>
 800579a:	4603      	mov	r3, r0
 800579c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800579e:	7cfb      	ldrb	r3, [r7, #19]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80057a4:	7cfb      	ldrb	r3, [r7, #19]
 80057a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d02f      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057b4:	4b2c      	ldr	r3, [pc, #176]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057c2:	4929      	ldr	r1, [pc, #164]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057d2:	d10d      	bne.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	3304      	adds	r3, #4
 80057d8:	2102      	movs	r1, #2
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 f846 	bl	800586c <RCCEx_PLLSAI1_Config>
 80057e0:	4603      	mov	r3, r0
 80057e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057e4:	7cfb      	ldrb	r3, [r7, #19]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d014      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80057ea:	7cfb      	ldrb	r3, [r7, #19]
 80057ec:	74bb      	strb	r3, [r7, #18]
 80057ee:	e011      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80057f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057f8:	d10c      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3320      	adds	r3, #32
 80057fe:	2102      	movs	r1, #2
 8005800:	4618      	mov	r0, r3
 8005802:	f000 f925 	bl	8005a50 <RCCEx_PLLSAI2_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800580a:	7cfb      	ldrb	r3, [r7, #19]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005810:	7cfb      	ldrb	r3, [r7, #19]
 8005812:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005820:	4b11      	ldr	r3, [pc, #68]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005826:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005830:	490d      	ldr	r1, [pc, #52]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00b      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005844:	4b08      	ldr	r3, [pc, #32]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005854:	4904      	ldr	r1, [pc, #16]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800585c:	7cbb      	ldrb	r3, [r7, #18]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	40021000 	.word	0x40021000

0800586c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800587a:	4b74      	ldr	r3, [pc, #464]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f003 0303 	and.w	r3, r3, #3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d018      	beq.n	80058b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005886:	4b71      	ldr	r3, [pc, #452]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f003 0203 	and.w	r2, r3, #3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d10d      	bne.n	80058b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
       ||
 800589a:	2b00      	cmp	r3, #0
 800589c:	d009      	beq.n	80058b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800589e:	4b6b      	ldr	r3, [pc, #428]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	091b      	lsrs	r3, r3, #4
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
       ||
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d047      	beq.n	8005942 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	73fb      	strb	r3, [r7, #15]
 80058b6:	e044      	b.n	8005942 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d018      	beq.n	80058f2 <RCCEx_PLLSAI1_Config+0x86>
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d825      	bhi.n	8005910 <RCCEx_PLLSAI1_Config+0xa4>
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d002      	beq.n	80058ce <RCCEx_PLLSAI1_Config+0x62>
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d009      	beq.n	80058e0 <RCCEx_PLLSAI1_Config+0x74>
 80058cc:	e020      	b.n	8005910 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058ce:	4b5f      	ldr	r3, [pc, #380]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d11d      	bne.n	8005916 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058de:	e01a      	b.n	8005916 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058e0:	4b5a      	ldr	r3, [pc, #360]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d116      	bne.n	800591a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f0:	e013      	b.n	800591a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80058f2:	4b56      	ldr	r3, [pc, #344]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10f      	bne.n	800591e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80058fe:	4b53      	ldr	r3, [pc, #332]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800590e:	e006      	b.n	800591e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
      break;
 8005914:	e004      	b.n	8005920 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005916:	bf00      	nop
 8005918:	e002      	b.n	8005920 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800591a:	bf00      	nop
 800591c:	e000      	b.n	8005920 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800591e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005920:	7bfb      	ldrb	r3, [r7, #15]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10d      	bne.n	8005942 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005926:	4b49      	ldr	r3, [pc, #292]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6819      	ldr	r1, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	3b01      	subs	r3, #1
 8005938:	011b      	lsls	r3, r3, #4
 800593a:	430b      	orrs	r3, r1
 800593c:	4943      	ldr	r1, [pc, #268]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800593e:	4313      	orrs	r3, r2
 8005940:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005942:	7bfb      	ldrb	r3, [r7, #15]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d17c      	bne.n	8005a42 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005948:	4b40      	ldr	r3, [pc, #256]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a3f      	ldr	r2, [pc, #252]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800594e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005952:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005954:	f7fc fbf8 	bl	8002148 <HAL_GetTick>
 8005958:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800595a:	e009      	b.n	8005970 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800595c:	f7fc fbf4 	bl	8002148 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d902      	bls.n	8005970 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	73fb      	strb	r3, [r7, #15]
        break;
 800596e:	e005      	b.n	800597c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005970:	4b36      	ldr	r3, [pc, #216]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1ef      	bne.n	800595c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d15f      	bne.n	8005a42 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d110      	bne.n	80059aa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005988:	4b30      	ldr	r3, [pc, #192]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005990:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6892      	ldr	r2, [r2, #8]
 8005998:	0211      	lsls	r1, r2, #8
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	68d2      	ldr	r2, [r2, #12]
 800599e:	06d2      	lsls	r2, r2, #27
 80059a0:	430a      	orrs	r2, r1
 80059a2:	492a      	ldr	r1, [pc, #168]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	610b      	str	r3, [r1, #16]
 80059a8:	e027      	b.n	80059fa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d112      	bne.n	80059d6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059b0:	4b26      	ldr	r3, [pc, #152]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80059b8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6892      	ldr	r2, [r2, #8]
 80059c0:	0211      	lsls	r1, r2, #8
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	6912      	ldr	r2, [r2, #16]
 80059c6:	0852      	lsrs	r2, r2, #1
 80059c8:	3a01      	subs	r2, #1
 80059ca:	0552      	lsls	r2, r2, #21
 80059cc:	430a      	orrs	r2, r1
 80059ce:	491f      	ldr	r1, [pc, #124]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	610b      	str	r3, [r1, #16]
 80059d4:	e011      	b.n	80059fa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059d6:	4b1d      	ldr	r3, [pc, #116]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80059de:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6892      	ldr	r2, [r2, #8]
 80059e6:	0211      	lsls	r1, r2, #8
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6952      	ldr	r2, [r2, #20]
 80059ec:	0852      	lsrs	r2, r2, #1
 80059ee:	3a01      	subs	r2, #1
 80059f0:	0652      	lsls	r2, r2, #25
 80059f2:	430a      	orrs	r2, r1
 80059f4:	4915      	ldr	r1, [pc, #84]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80059fa:	4b14      	ldr	r3, [pc, #80]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a13      	ldr	r2, [pc, #76]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a04:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a06:	f7fc fb9f 	bl	8002148 <HAL_GetTick>
 8005a0a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a0c:	e009      	b.n	8005a22 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a0e:	f7fc fb9b 	bl	8002148 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d902      	bls.n	8005a22 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	73fb      	strb	r3, [r7, #15]
          break;
 8005a20:	e005      	b.n	8005a2e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a22:	4b0a      	ldr	r3, [pc, #40]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0ef      	beq.n	8005a0e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d106      	bne.n	8005a42 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a34:	4b05      	ldr	r3, [pc, #20]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	4903      	ldr	r1, [pc, #12]	@ (8005a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	40021000 	.word	0x40021000

08005a50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a5e:	4b69      	ldr	r3, [pc, #420]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d018      	beq.n	8005a9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a6a:	4b66      	ldr	r3, [pc, #408]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f003 0203 	and.w	r2, r3, #3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d10d      	bne.n	8005a96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
       ||
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d009      	beq.n	8005a96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005a82:	4b60      	ldr	r3, [pc, #384]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	091b      	lsrs	r3, r3, #4
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
       ||
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d047      	beq.n	8005b26 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	73fb      	strb	r3, [r7, #15]
 8005a9a:	e044      	b.n	8005b26 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d018      	beq.n	8005ad6 <RCCEx_PLLSAI2_Config+0x86>
 8005aa4:	2b03      	cmp	r3, #3
 8005aa6:	d825      	bhi.n	8005af4 <RCCEx_PLLSAI2_Config+0xa4>
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d002      	beq.n	8005ab2 <RCCEx_PLLSAI2_Config+0x62>
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d009      	beq.n	8005ac4 <RCCEx_PLLSAI2_Config+0x74>
 8005ab0:	e020      	b.n	8005af4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ab2:	4b54      	ldr	r3, [pc, #336]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d11d      	bne.n	8005afa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ac2:	e01a      	b.n	8005afa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ac4:	4b4f      	ldr	r3, [pc, #316]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d116      	bne.n	8005afe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ad4:	e013      	b.n	8005afe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ad6:	4b4b      	ldr	r3, [pc, #300]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10f      	bne.n	8005b02 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ae2:	4b48      	ldr	r3, [pc, #288]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d109      	bne.n	8005b02 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005af2:	e006      	b.n	8005b02 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	73fb      	strb	r3, [r7, #15]
      break;
 8005af8:	e004      	b.n	8005b04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005afa:	bf00      	nop
 8005afc:	e002      	b.n	8005b04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005afe:	bf00      	nop
 8005b00:	e000      	b.n	8005b04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b02:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10d      	bne.n	8005b26 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6819      	ldr	r1, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	4938      	ldr	r1, [pc, #224]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d166      	bne.n	8005bfa <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b2c:	4b35      	ldr	r3, [pc, #212]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a34      	ldr	r2, [pc, #208]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b38:	f7fc fb06 	bl	8002148 <HAL_GetTick>
 8005b3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b3e:	e009      	b.n	8005b54 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b40:	f7fc fb02 	bl	8002148 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d902      	bls.n	8005b54 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	73fb      	strb	r3, [r7, #15]
        break;
 8005b52:	e005      	b.n	8005b60 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b54:	4b2b      	ldr	r3, [pc, #172]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1ef      	bne.n	8005b40 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d149      	bne.n	8005bfa <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d110      	bne.n	8005b8e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b6c:	4b25      	ldr	r3, [pc, #148]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005b74:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6892      	ldr	r2, [r2, #8]
 8005b7c:	0211      	lsls	r1, r2, #8
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	68d2      	ldr	r2, [r2, #12]
 8005b82:	06d2      	lsls	r2, r2, #27
 8005b84:	430a      	orrs	r2, r1
 8005b86:	491f      	ldr	r1, [pc, #124]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	614b      	str	r3, [r1, #20]
 8005b8c:	e011      	b.n	8005bb2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b96:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	6892      	ldr	r2, [r2, #8]
 8005b9e:	0211      	lsls	r1, r2, #8
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6912      	ldr	r2, [r2, #16]
 8005ba4:	0852      	lsrs	r2, r2, #1
 8005ba6:	3a01      	subs	r2, #1
 8005ba8:	0652      	lsls	r2, r2, #25
 8005baa:	430a      	orrs	r2, r1
 8005bac:	4915      	ldr	r1, [pc, #84]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005bb2:	4b14      	ldr	r3, [pc, #80]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a13      	ldr	r2, [pc, #76]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bbc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bbe:	f7fc fac3 	bl	8002148 <HAL_GetTick>
 8005bc2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bc4:	e009      	b.n	8005bda <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005bc6:	f7fc fabf 	bl	8002148 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d902      	bls.n	8005bda <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	73fb      	strb	r3, [r7, #15]
          break;
 8005bd8:	e005      	b.n	8005be6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bda:	4b0a      	ldr	r3, [pc, #40]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0ef      	beq.n	8005bc6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005bec:	4b05      	ldr	r3, [pc, #20]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005bee:	695a      	ldr	r2, [r3, #20]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	4903      	ldr	r1, [pc, #12]	@ (8005c04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40021000 	.word	0x40021000

08005c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e049      	b.n	8005cae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d106      	bne.n	8005c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f841 	bl	8005cb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4619      	mov	r1, r3
 8005c46:	4610      	mov	r0, r2
 8005c48:	f000 fab0 	bl	80061ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
	...

08005ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d001      	beq.n	8005ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e04f      	b.n	8005d84 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a23      	ldr	r2, [pc, #140]	@ (8005d90 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d01d      	beq.n	8005d42 <HAL_TIM_Base_Start_IT+0x76>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d0e:	d018      	beq.n	8005d42 <HAL_TIM_Base_Start_IT+0x76>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1f      	ldr	r2, [pc, #124]	@ (8005d94 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d013      	beq.n	8005d42 <HAL_TIM_Base_Start_IT+0x76>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8005d98 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00e      	beq.n	8005d42 <HAL_TIM_Base_Start_IT+0x76>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a1c      	ldr	r2, [pc, #112]	@ (8005d9c <HAL_TIM_Base_Start_IT+0xd0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d009      	beq.n	8005d42 <HAL_TIM_Base_Start_IT+0x76>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a1b      	ldr	r2, [pc, #108]	@ (8005da0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d004      	beq.n	8005d42 <HAL_TIM_Base_Start_IT+0x76>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a19      	ldr	r2, [pc, #100]	@ (8005da4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d115      	bne.n	8005d6e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	4b17      	ldr	r3, [pc, #92]	@ (8005da8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b06      	cmp	r3, #6
 8005d52:	d015      	beq.n	8005d80 <HAL_TIM_Base_Start_IT+0xb4>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d5a:	d011      	beq.n	8005d80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0201 	orr.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6c:	e008      	b.n	8005d80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0201 	orr.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	e000      	b.n	8005d82 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40012c00 	.word	0x40012c00
 8005d94:	40000400 	.word	0x40000400
 8005d98:	40000800 	.word	0x40000800
 8005d9c:	40000c00 	.word	0x40000c00
 8005da0:	40013400 	.word	0x40013400
 8005da4:	40014000 	.word	0x40014000
 8005da8:	00010007 	.word	0x00010007

08005dac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e049      	b.n	8005e52 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fc f838 	bl	8001e48 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3304      	adds	r3, #4
 8005de8:	4619      	mov	r1, r3
 8005dea:	4610      	mov	r0, r2
 8005dec:	f000 f9de 	bl	80061ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d020      	beq.n	8005ebe <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01b      	beq.n	8005ebe <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f06f 0202 	mvn.w	r2, #2
 8005e8e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	f003 0303 	and.w	r3, r3, #3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f963 	bl	8006170 <HAL_TIM_IC_CaptureCallback>
 8005eaa:	e005      	b.n	8005eb8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f955 	bl	800615c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 f966 	bl	8006184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d020      	beq.n	8005f0a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d01b      	beq.n	8005f0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f06f 0204 	mvn.w	r2, #4
 8005eda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f93d 	bl	8006170 <HAL_TIM_IC_CaptureCallback>
 8005ef6:	e005      	b.n	8005f04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f92f 	bl	800615c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 f940 	bl	8006184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f003 0308 	and.w	r3, r3, #8
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d020      	beq.n	8005f56 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d01b      	beq.n	8005f56 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f06f 0208 	mvn.w	r2, #8
 8005f26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2204      	movs	r2, #4
 8005f2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	f003 0303 	and.w	r3, r3, #3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f917 	bl	8006170 <HAL_TIM_IC_CaptureCallback>
 8005f42:	e005      	b.n	8005f50 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f909 	bl	800615c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f91a 	bl	8006184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d020      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f003 0310 	and.w	r3, r3, #16
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d01b      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f06f 0210 	mvn.w	r2, #16
 8005f72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2208      	movs	r2, #8
 8005f78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	69db      	ldr	r3, [r3, #28]
 8005f80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f8f1 	bl	8006170 <HAL_TIM_IC_CaptureCallback>
 8005f8e:	e005      	b.n	8005f9c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f8e3 	bl	800615c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f8f4 	bl	8006184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00c      	beq.n	8005fc6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d007      	beq.n	8005fc6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f06f 0201 	mvn.w	r2, #1
 8005fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f7fb fd97 	bl	8001af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d104      	bne.n	8005fda <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00c      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d007      	beq.n	8005ff4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fd68 	bl	8006ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00c      	beq.n	8006018 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006004:	2b00      	cmp	r3, #0
 8006006:	d007      	beq.n	8006018 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fd60 	bl	8006ad8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00c      	beq.n	800603c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d007      	beq.n	800603c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f8ae 	bl	8006198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00c      	beq.n	8006060 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	2b00      	cmp	r3, #0
 800604e:	d007      	beq.n	8006060 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0220 	mvn.w	r2, #32
 8006058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fd28 	bl	8006ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006060:	bf00      	nop
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006082:	2302      	movs	r3, #2
 8006084:	e066      	b.n	8006154 <HAL_TIM_OC_ConfigChannel+0xec>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b14      	cmp	r3, #20
 8006092:	d857      	bhi.n	8006144 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006094:	a201      	add	r2, pc, #4	@ (adr r2, 800609c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609a:	bf00      	nop
 800609c:	080060f1 	.word	0x080060f1
 80060a0:	08006145 	.word	0x08006145
 80060a4:	08006145 	.word	0x08006145
 80060a8:	08006145 	.word	0x08006145
 80060ac:	080060ff 	.word	0x080060ff
 80060b0:	08006145 	.word	0x08006145
 80060b4:	08006145 	.word	0x08006145
 80060b8:	08006145 	.word	0x08006145
 80060bc:	0800610d 	.word	0x0800610d
 80060c0:	08006145 	.word	0x08006145
 80060c4:	08006145 	.word	0x08006145
 80060c8:	08006145 	.word	0x08006145
 80060cc:	0800611b 	.word	0x0800611b
 80060d0:	08006145 	.word	0x08006145
 80060d4:	08006145 	.word	0x08006145
 80060d8:	08006145 	.word	0x08006145
 80060dc:	08006129 	.word	0x08006129
 80060e0:	08006145 	.word	0x08006145
 80060e4:	08006145 	.word	0x08006145
 80060e8:	08006145 	.word	0x08006145
 80060ec:	08006137 	.word	0x08006137
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 f8fe 	bl	80062f8 <TIM_OC1_SetConfig>
      break;
 80060fc:	e025      	b.n	800614a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68b9      	ldr	r1, [r7, #8]
 8006104:	4618      	mov	r0, r3
 8006106:	f000 f987 	bl	8006418 <TIM_OC2_SetConfig>
      break;
 800610a:	e01e      	b.n	800614a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fa0a 	bl	800652c <TIM_OC3_SetConfig>
      break;
 8006118:	e017      	b.n	800614a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68b9      	ldr	r1, [r7, #8]
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fa8b 	bl	800663c <TIM_OC4_SetConfig>
      break;
 8006126:	e010      	b.n	800614a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68b9      	ldr	r1, [r7, #8]
 800612e:	4618      	mov	r0, r3
 8006130:	f000 faee 	bl	8006710 <TIM_OC5_SetConfig>
      break;
 8006134:	e009      	b.n	800614a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	4618      	mov	r0, r3
 800613e:	f000 fb4b 	bl	80067d8 <TIM_OC6_SetConfig>
      break;
 8006142:	e002      	b.n	800614a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	75fb      	strb	r3, [r7, #23]
      break;
 8006148:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006152:	7dfb      	ldrb	r3, [r7, #23]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3718      	adds	r7, #24
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a46      	ldr	r2, [pc, #280]	@ (80062d8 <TIM_Base_SetConfig+0x12c>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d013      	beq.n	80061ec <TIM_Base_SetConfig+0x40>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ca:	d00f      	beq.n	80061ec <TIM_Base_SetConfig+0x40>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a43      	ldr	r2, [pc, #268]	@ (80062dc <TIM_Base_SetConfig+0x130>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00b      	beq.n	80061ec <TIM_Base_SetConfig+0x40>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a42      	ldr	r2, [pc, #264]	@ (80062e0 <TIM_Base_SetConfig+0x134>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d007      	beq.n	80061ec <TIM_Base_SetConfig+0x40>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a41      	ldr	r2, [pc, #260]	@ (80062e4 <TIM_Base_SetConfig+0x138>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d003      	beq.n	80061ec <TIM_Base_SetConfig+0x40>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a40      	ldr	r2, [pc, #256]	@ (80062e8 <TIM_Base_SetConfig+0x13c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d108      	bne.n	80061fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a35      	ldr	r2, [pc, #212]	@ (80062d8 <TIM_Base_SetConfig+0x12c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d01f      	beq.n	8006246 <TIM_Base_SetConfig+0x9a>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800620c:	d01b      	beq.n	8006246 <TIM_Base_SetConfig+0x9a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a32      	ldr	r2, [pc, #200]	@ (80062dc <TIM_Base_SetConfig+0x130>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d017      	beq.n	8006246 <TIM_Base_SetConfig+0x9a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a31      	ldr	r2, [pc, #196]	@ (80062e0 <TIM_Base_SetConfig+0x134>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d013      	beq.n	8006246 <TIM_Base_SetConfig+0x9a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a30      	ldr	r2, [pc, #192]	@ (80062e4 <TIM_Base_SetConfig+0x138>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00f      	beq.n	8006246 <TIM_Base_SetConfig+0x9a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a2f      	ldr	r2, [pc, #188]	@ (80062e8 <TIM_Base_SetConfig+0x13c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00b      	beq.n	8006246 <TIM_Base_SetConfig+0x9a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a2e      	ldr	r2, [pc, #184]	@ (80062ec <TIM_Base_SetConfig+0x140>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d007      	beq.n	8006246 <TIM_Base_SetConfig+0x9a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a2d      	ldr	r2, [pc, #180]	@ (80062f0 <TIM_Base_SetConfig+0x144>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d003      	beq.n	8006246 <TIM_Base_SetConfig+0x9a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a2c      	ldr	r2, [pc, #176]	@ (80062f4 <TIM_Base_SetConfig+0x148>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d108      	bne.n	8006258 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800624c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a16      	ldr	r2, [pc, #88]	@ (80062d8 <TIM_Base_SetConfig+0x12c>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00f      	beq.n	80062a4 <TIM_Base_SetConfig+0xf8>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a18      	ldr	r2, [pc, #96]	@ (80062e8 <TIM_Base_SetConfig+0x13c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00b      	beq.n	80062a4 <TIM_Base_SetConfig+0xf8>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a17      	ldr	r2, [pc, #92]	@ (80062ec <TIM_Base_SetConfig+0x140>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d007      	beq.n	80062a4 <TIM_Base_SetConfig+0xf8>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a16      	ldr	r2, [pc, #88]	@ (80062f0 <TIM_Base_SetConfig+0x144>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d003      	beq.n	80062a4 <TIM_Base_SetConfig+0xf8>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a15      	ldr	r2, [pc, #84]	@ (80062f4 <TIM_Base_SetConfig+0x148>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d103      	bne.n	80062ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d105      	bne.n	80062ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	f023 0201 	bic.w	r2, r3, #1
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	611a      	str	r2, [r3, #16]
  }
}
 80062ca:	bf00      	nop
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40012c00 	.word	0x40012c00
 80062dc:	40000400 	.word	0x40000400
 80062e0:	40000800 	.word	0x40000800
 80062e4:	40000c00 	.word	0x40000c00
 80062e8:	40013400 	.word	0x40013400
 80062ec:	40014000 	.word	0x40014000
 80062f0:	40014400 	.word	0x40014400
 80062f4:	40014800 	.word	0x40014800

080062f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	f023 0201 	bic.w	r2, r3, #1
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800632a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0303 	bic.w	r3, r3, #3
 8006332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f023 0302 	bic.w	r3, r3, #2
 8006344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	4313      	orrs	r3, r2
 800634e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a2c      	ldr	r2, [pc, #176]	@ (8006404 <TIM_OC1_SetConfig+0x10c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00f      	beq.n	8006378 <TIM_OC1_SetConfig+0x80>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a2b      	ldr	r2, [pc, #172]	@ (8006408 <TIM_OC1_SetConfig+0x110>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00b      	beq.n	8006378 <TIM_OC1_SetConfig+0x80>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a2a      	ldr	r2, [pc, #168]	@ (800640c <TIM_OC1_SetConfig+0x114>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d007      	beq.n	8006378 <TIM_OC1_SetConfig+0x80>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a29      	ldr	r2, [pc, #164]	@ (8006410 <TIM_OC1_SetConfig+0x118>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d003      	beq.n	8006378 <TIM_OC1_SetConfig+0x80>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a28      	ldr	r2, [pc, #160]	@ (8006414 <TIM_OC1_SetConfig+0x11c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d10c      	bne.n	8006392 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f023 0308 	bic.w	r3, r3, #8
 800637e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4313      	orrs	r3, r2
 8006388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f023 0304 	bic.w	r3, r3, #4
 8006390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a1b      	ldr	r2, [pc, #108]	@ (8006404 <TIM_OC1_SetConfig+0x10c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d00f      	beq.n	80063ba <TIM_OC1_SetConfig+0xc2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a1a      	ldr	r2, [pc, #104]	@ (8006408 <TIM_OC1_SetConfig+0x110>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00b      	beq.n	80063ba <TIM_OC1_SetConfig+0xc2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a19      	ldr	r2, [pc, #100]	@ (800640c <TIM_OC1_SetConfig+0x114>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d007      	beq.n	80063ba <TIM_OC1_SetConfig+0xc2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a18      	ldr	r2, [pc, #96]	@ (8006410 <TIM_OC1_SetConfig+0x118>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d003      	beq.n	80063ba <TIM_OC1_SetConfig+0xc2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a17      	ldr	r2, [pc, #92]	@ (8006414 <TIM_OC1_SetConfig+0x11c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d111      	bne.n	80063de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80063c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	621a      	str	r2, [r3, #32]
}
 80063f8:	bf00      	nop
 80063fa:	371c      	adds	r7, #28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	40012c00 	.word	0x40012c00
 8006408:	40013400 	.word	0x40013400
 800640c:	40014000 	.word	0x40014000
 8006410:	40014400 	.word	0x40014400
 8006414:	40014800 	.word	0x40014800

08006418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a1b      	ldr	r3, [r3, #32]
 800642c:	f023 0210 	bic.w	r2, r3, #16
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800644a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	021b      	lsls	r3, r3, #8
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	4313      	orrs	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	f023 0320 	bic.w	r3, r3, #32
 8006466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	011b      	lsls	r3, r3, #4
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	4313      	orrs	r3, r2
 8006472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a28      	ldr	r2, [pc, #160]	@ (8006518 <TIM_OC2_SetConfig+0x100>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d003      	beq.n	8006484 <TIM_OC2_SetConfig+0x6c>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a27      	ldr	r2, [pc, #156]	@ (800651c <TIM_OC2_SetConfig+0x104>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d10d      	bne.n	80064a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800648a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800649e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a1d      	ldr	r2, [pc, #116]	@ (8006518 <TIM_OC2_SetConfig+0x100>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00f      	beq.n	80064c8 <TIM_OC2_SetConfig+0xb0>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a1c      	ldr	r2, [pc, #112]	@ (800651c <TIM_OC2_SetConfig+0x104>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d00b      	beq.n	80064c8 <TIM_OC2_SetConfig+0xb0>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a1b      	ldr	r2, [pc, #108]	@ (8006520 <TIM_OC2_SetConfig+0x108>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d007      	beq.n	80064c8 <TIM_OC2_SetConfig+0xb0>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a1a      	ldr	r2, [pc, #104]	@ (8006524 <TIM_OC2_SetConfig+0x10c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d003      	beq.n	80064c8 <TIM_OC2_SetConfig+0xb0>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a19      	ldr	r2, [pc, #100]	@ (8006528 <TIM_OC2_SetConfig+0x110>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d113      	bne.n	80064f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	621a      	str	r2, [r3, #32]
}
 800650a:	bf00      	nop
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	40012c00 	.word	0x40012c00
 800651c:	40013400 	.word	0x40013400
 8006520:	40014000 	.word	0x40014000
 8006524:	40014400 	.word	0x40014400
 8006528:	40014800 	.word	0x40014800

0800652c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800652c:	b480      	push	{r7}
 800652e:	b087      	sub	sp, #28
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800655a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800655e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0303 	bic.w	r3, r3, #3
 8006566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	021b      	lsls	r3, r3, #8
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a27      	ldr	r2, [pc, #156]	@ (8006628 <TIM_OC3_SetConfig+0xfc>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d003      	beq.n	8006596 <TIM_OC3_SetConfig+0x6a>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a26      	ldr	r2, [pc, #152]	@ (800662c <TIM_OC3_SetConfig+0x100>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d10d      	bne.n	80065b2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800659c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	021b      	lsls	r3, r3, #8
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006628 <TIM_OC3_SetConfig+0xfc>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00f      	beq.n	80065da <TIM_OC3_SetConfig+0xae>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1b      	ldr	r2, [pc, #108]	@ (800662c <TIM_OC3_SetConfig+0x100>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00b      	beq.n	80065da <TIM_OC3_SetConfig+0xae>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006630 <TIM_OC3_SetConfig+0x104>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d007      	beq.n	80065da <TIM_OC3_SetConfig+0xae>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a19      	ldr	r2, [pc, #100]	@ (8006634 <TIM_OC3_SetConfig+0x108>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d003      	beq.n	80065da <TIM_OC3_SetConfig+0xae>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a18      	ldr	r2, [pc, #96]	@ (8006638 <TIM_OC3_SetConfig+0x10c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d113      	bne.n	8006602 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	011b      	lsls	r3, r3, #4
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	011b      	lsls	r3, r3, #4
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	4313      	orrs	r3, r2
 8006600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	621a      	str	r2, [r3, #32]
}
 800661c:	bf00      	nop
 800661e:	371c      	adds	r7, #28
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	40012c00 	.word	0x40012c00
 800662c:	40013400 	.word	0x40013400
 8006630:	40014000 	.word	0x40014000
 8006634:	40014400 	.word	0x40014400
 8006638:	40014800 	.word	0x40014800

0800663c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800666a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800666e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	4313      	orrs	r3, r2
 8006682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800668a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	031b      	lsls	r3, r3, #12
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a18      	ldr	r2, [pc, #96]	@ (80066fc <TIM_OC4_SetConfig+0xc0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00f      	beq.n	80066c0 <TIM_OC4_SetConfig+0x84>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a17      	ldr	r2, [pc, #92]	@ (8006700 <TIM_OC4_SetConfig+0xc4>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d00b      	beq.n	80066c0 <TIM_OC4_SetConfig+0x84>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a16      	ldr	r2, [pc, #88]	@ (8006704 <TIM_OC4_SetConfig+0xc8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d007      	beq.n	80066c0 <TIM_OC4_SetConfig+0x84>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a15      	ldr	r2, [pc, #84]	@ (8006708 <TIM_OC4_SetConfig+0xcc>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <TIM_OC4_SetConfig+0x84>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a14      	ldr	r2, [pc, #80]	@ (800670c <TIM_OC4_SetConfig+0xd0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d109      	bne.n	80066d4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	019b      	lsls	r3, r3, #6
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	621a      	str	r2, [r3, #32]
}
 80066ee:	bf00      	nop
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40013400 	.word	0x40013400
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400
 800670c:	40014800 	.word	0x40014800

08006710 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800673e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006754:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	041b      	lsls	r3, r3, #16
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4313      	orrs	r3, r2
 8006760:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a17      	ldr	r2, [pc, #92]	@ (80067c4 <TIM_OC5_SetConfig+0xb4>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00f      	beq.n	800678a <TIM_OC5_SetConfig+0x7a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a16      	ldr	r2, [pc, #88]	@ (80067c8 <TIM_OC5_SetConfig+0xb8>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00b      	beq.n	800678a <TIM_OC5_SetConfig+0x7a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a15      	ldr	r2, [pc, #84]	@ (80067cc <TIM_OC5_SetConfig+0xbc>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d007      	beq.n	800678a <TIM_OC5_SetConfig+0x7a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a14      	ldr	r2, [pc, #80]	@ (80067d0 <TIM_OC5_SetConfig+0xc0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d003      	beq.n	800678a <TIM_OC5_SetConfig+0x7a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a13      	ldr	r2, [pc, #76]	@ (80067d4 <TIM_OC5_SetConfig+0xc4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d109      	bne.n	800679e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006790:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4313      	orrs	r3, r2
 800679c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	685a      	ldr	r2, [r3, #4]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	621a      	str	r2, [r3, #32]
}
 80067b8:	bf00      	nop
 80067ba:	371c      	adds	r7, #28
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	40012c00 	.word	0x40012c00
 80067c8:	40013400 	.word	0x40013400
 80067cc:	40014000 	.word	0x40014000
 80067d0:	40014400 	.word	0x40014400
 80067d4:	40014800 	.word	0x40014800

080067d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006806:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800680a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	4313      	orrs	r3, r2
 8006816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800681e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	051b      	lsls	r3, r3, #20
 8006826:	693a      	ldr	r2, [r7, #16]
 8006828:	4313      	orrs	r3, r2
 800682a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a18      	ldr	r2, [pc, #96]	@ (8006890 <TIM_OC6_SetConfig+0xb8>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d00f      	beq.n	8006854 <TIM_OC6_SetConfig+0x7c>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a17      	ldr	r2, [pc, #92]	@ (8006894 <TIM_OC6_SetConfig+0xbc>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00b      	beq.n	8006854 <TIM_OC6_SetConfig+0x7c>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a16      	ldr	r2, [pc, #88]	@ (8006898 <TIM_OC6_SetConfig+0xc0>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d007      	beq.n	8006854 <TIM_OC6_SetConfig+0x7c>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a15      	ldr	r2, [pc, #84]	@ (800689c <TIM_OC6_SetConfig+0xc4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d003      	beq.n	8006854 <TIM_OC6_SetConfig+0x7c>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a14      	ldr	r2, [pc, #80]	@ (80068a0 <TIM_OC6_SetConfig+0xc8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d109      	bne.n	8006868 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800685a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	029b      	lsls	r3, r3, #10
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685a      	ldr	r2, [r3, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	621a      	str	r2, [r3, #32]
}
 8006882:	bf00      	nop
 8006884:	371c      	adds	r7, #28
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	40012c00 	.word	0x40012c00
 8006894:	40013400 	.word	0x40013400
 8006898:	40014000 	.word	0x40014000
 800689c:	40014400 	.word	0x40014400
 80068a0:	40014800 	.word	0x40014800

080068a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d101      	bne.n	80068bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068b8:	2302      	movs	r3, #2
 80068ba:	e068      	b.n	800698e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a2e      	ldr	r2, [pc, #184]	@ (800699c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d004      	beq.n	80068f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a2d      	ldr	r2, [pc, #180]	@ (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d108      	bne.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80068f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	4313      	orrs	r3, r2
 8006900:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006908:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	4313      	orrs	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a1e      	ldr	r2, [pc, #120]	@ (800699c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d01d      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800692e:	d018      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1b      	ldr	r2, [pc, #108]	@ (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d013      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a1a      	ldr	r2, [pc, #104]	@ (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00e      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a18      	ldr	r2, [pc, #96]	@ (80069ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d009      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a13      	ldr	r2, [pc, #76]	@ (80069a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d004      	beq.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a14      	ldr	r2, [pc, #80]	@ (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d10c      	bne.n	800697c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	4313      	orrs	r3, r2
 8006972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40012c00 	.word	0x40012c00
 80069a0:	40013400 	.word	0x40013400
 80069a4:	40000400 	.word	0x40000400
 80069a8:	40000800 	.word	0x40000800
 80069ac:	40000c00 	.word	0x40000c00
 80069b0:	40014000 	.word	0x40014000

080069b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d101      	bne.n	80069d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069cc:	2302      	movs	r3, #2
 80069ce:	e065      	b.n	8006a9c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	041b      	lsls	r3, r3, #16
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a16      	ldr	r2, [pc, #88]	@ (8006aa8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d004      	beq.n	8006a5e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a14      	ldr	r2, [pc, #80]	@ (8006aac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d115      	bne.n	8006a8a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a68:	051b      	lsls	r3, r3, #20
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	40012c00 	.word	0x40012c00
 8006aac:	40013400 	.word	0x40013400

08006ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <__NVIC_SetPriority>:
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	4603      	mov	r3, r0
 8006af4:	6039      	str	r1, [r7, #0]
 8006af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	db0a      	blt.n	8006b16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	490c      	ldr	r1, [pc, #48]	@ (8006b38 <__NVIC_SetPriority+0x4c>)
 8006b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b0a:	0112      	lsls	r2, r2, #4
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	440b      	add	r3, r1
 8006b10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006b14:	e00a      	b.n	8006b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	4908      	ldr	r1, [pc, #32]	@ (8006b3c <__NVIC_SetPriority+0x50>)
 8006b1c:	79fb      	ldrb	r3, [r7, #7]
 8006b1e:	f003 030f 	and.w	r3, r3, #15
 8006b22:	3b04      	subs	r3, #4
 8006b24:	0112      	lsls	r2, r2, #4
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	440b      	add	r3, r1
 8006b2a:	761a      	strb	r2, [r3, #24]
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	e000e100 	.word	0xe000e100
 8006b3c:	e000ed00 	.word	0xe000ed00

08006b40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006b44:	4b05      	ldr	r3, [pc, #20]	@ (8006b5c <SysTick_Handler+0x1c>)
 8006b46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006b48:	f001 fd46 	bl	80085d8 <xTaskGetSchedulerState>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d001      	beq.n	8006b56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006b52:	f002 fb41 	bl	80091d8 <xPortSysTickHandler>
  }
}
 8006b56:	bf00      	nop
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	e000e010 	.word	0xe000e010

08006b60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006b64:	2100      	movs	r1, #0
 8006b66:	f06f 0004 	mvn.w	r0, #4
 8006b6a:	f7ff ffbf 	bl	8006aec <__NVIC_SetPriority>
#endif
}
 8006b6e:	bf00      	nop
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b7a:	f3ef 8305 	mrs	r3, IPSR
 8006b7e:	603b      	str	r3, [r7, #0]
  return(result);
 8006b80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006b86:	f06f 0305 	mvn.w	r3, #5
 8006b8a:	607b      	str	r3, [r7, #4]
 8006b8c:	e00c      	b.n	8006ba8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb8 <osKernelInitialize+0x44>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d105      	bne.n	8006ba2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006b96:	4b08      	ldr	r3, [pc, #32]	@ (8006bb8 <osKernelInitialize+0x44>)
 8006b98:	2201      	movs	r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	607b      	str	r3, [r7, #4]
 8006ba0:	e002      	b.n	8006ba8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ba8:	687b      	ldr	r3, [r7, #4]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	2000027c 	.word	0x2000027c

08006bbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bc2:	f3ef 8305 	mrs	r3, IPSR
 8006bc6:	603b      	str	r3, [r7, #0]
  return(result);
 8006bc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006bce:	f06f 0305 	mvn.w	r3, #5
 8006bd2:	607b      	str	r3, [r7, #4]
 8006bd4:	e010      	b.n	8006bf8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006c04 <osKernelStart+0x48>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d109      	bne.n	8006bf2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006bde:	f7ff ffbf 	bl	8006b60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006be2:	4b08      	ldr	r3, [pc, #32]	@ (8006c04 <osKernelStart+0x48>)
 8006be4:	2202      	movs	r2, #2
 8006be6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006be8:	f001 f892 	bl	8007d10 <vTaskStartScheduler>
      stat = osOK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	607b      	str	r3, [r7, #4]
 8006bf0:	e002      	b.n	8006bf8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006bf8:	687b      	ldr	r3, [r7, #4]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	2000027c 	.word	0x2000027c

08006c08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08e      	sub	sp, #56	@ 0x38
 8006c0c:	af04      	add	r7, sp, #16
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006c14:	2300      	movs	r3, #0
 8006c16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c18:	f3ef 8305 	mrs	r3, IPSR
 8006c1c:	617b      	str	r3, [r7, #20]
  return(result);
 8006c1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d17e      	bne.n	8006d22 <osThreadNew+0x11a>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d07b      	beq.n	8006d22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006c2a:	2380      	movs	r3, #128	@ 0x80
 8006c2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006c2e:	2318      	movs	r3, #24
 8006c30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006c36:	f04f 33ff 	mov.w	r3, #4294967295
 8006c3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d045      	beq.n	8006cce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <osThreadNew+0x48>
        name = attr->name;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d008      	beq.n	8006c76 <osThreadNew+0x6e>
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	2b38      	cmp	r3, #56	@ 0x38
 8006c68:	d805      	bhi.n	8006c76 <osThreadNew+0x6e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <osThreadNew+0x72>
        return (NULL);
 8006c76:	2300      	movs	r3, #0
 8006c78:	e054      	b.n	8006d24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	089b      	lsrs	r3, r3, #2
 8006c88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00e      	beq.n	8006cb0 <osThreadNew+0xa8>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	2ba7      	cmp	r3, #167	@ 0xa7
 8006c98:	d90a      	bls.n	8006cb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d006      	beq.n	8006cb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <osThreadNew+0xa8>
        mem = 1;
 8006caa:	2301      	movs	r3, #1
 8006cac:	61bb      	str	r3, [r7, #24]
 8006cae:	e010      	b.n	8006cd2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10c      	bne.n	8006cd2 <osThreadNew+0xca>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d108      	bne.n	8006cd2 <osThreadNew+0xca>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d104      	bne.n	8006cd2 <osThreadNew+0xca>
          mem = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	61bb      	str	r3, [r7, #24]
 8006ccc:	e001      	b.n	8006cd2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d110      	bne.n	8006cfa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ce0:	9202      	str	r2, [sp, #8]
 8006ce2:	9301      	str	r3, [sp, #4]
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	6a3a      	ldr	r2, [r7, #32]
 8006cec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 fe1a 	bl	8007928 <xTaskCreateStatic>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	e013      	b.n	8006d22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d110      	bne.n	8006d22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	f107 0310 	add.w	r3, r7, #16
 8006d08:	9301      	str	r3, [sp, #4]
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 fe68 	bl	80079e8 <xTaskCreate>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d001      	beq.n	8006d22 <osThreadNew+0x11a>
            hTask = NULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d22:	693b      	ldr	r3, [r7, #16]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3728      	adds	r7, #40	@ 0x28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d34:	f3ef 8305 	mrs	r3, IPSR
 8006d38:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <osDelay+0x1c>
    stat = osErrorISR;
 8006d40:	f06f 0305 	mvn.w	r3, #5
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	e007      	b.n	8006d58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 ffa6 	bl	8007ca4 <vTaskDelay>
    }
  }

  return (stat);
 8006d58:	68fb      	ldr	r3, [r7, #12]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4a07      	ldr	r2, [pc, #28]	@ (8006d90 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	4a06      	ldr	r2, [pc, #24]	@ (8006d94 <vApplicationGetIdleTaskMemory+0x30>)
 8006d7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2280      	movs	r2, #128	@ 0x80
 8006d80:	601a      	str	r2, [r3, #0]
}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	20000280 	.word	0x20000280
 8006d94:	20000328 	.word	0x20000328

08006d98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4a07      	ldr	r2, [pc, #28]	@ (8006dc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006da8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	4a06      	ldr	r2, [pc, #24]	@ (8006dc8 <vApplicationGetTimerTaskMemory+0x30>)
 8006dae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006db6:	601a      	str	r2, [r3, #0]
}
 8006db8:	bf00      	nop
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	20000528 	.word	0x20000528
 8006dc8:	200005d0 	.word	0x200005d0

08006dcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f103 0208 	add.w	r2, r3, #8
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f04f 32ff 	mov.w	r2, #4294967295
 8006de4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f103 0208 	add.w	r2, r3, #8
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f103 0208 	add.w	r2, r3, #8
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e1a:	bf00      	nop
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e26:	b480      	push	{r7}
 8006e28:	b085      	sub	sp, #20
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	601a      	str	r2, [r3, #0]
}
 8006e62:	bf00      	nop
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e84:	d103      	bne.n	8006e8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	e00c      	b.n	8006ea8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3308      	adds	r3, #8
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	e002      	b.n	8006e9c <vListInsert+0x2e>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d2f6      	bcs.n	8006e96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	601a      	str	r2, [r3, #0]
}
 8006ed4:	bf00      	nop
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	6892      	ldr	r2, [r2, #8]
 8006ef6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6852      	ldr	r2, [r2, #4]
 8006f00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d103      	bne.n	8006f14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	1e5a      	subs	r2, r3, #1
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10b      	bne.n	8006f60 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006f5a:	bf00      	nop
 8006f5c:	bf00      	nop
 8006f5e:	e7fd      	b.n	8006f5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006f60:	f002 f8aa 	bl	80090b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f6c:	68f9      	ldr	r1, [r7, #12]
 8006f6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f70:	fb01 f303 	mul.w	r3, r1, r3
 8006f74:	441a      	add	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f90:	3b01      	subs	r3, #1
 8006f92:	68f9      	ldr	r1, [r7, #12]
 8006f94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006f96:	fb01 f303 	mul.w	r3, r1, r3
 8006f9a:	441a      	add	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	22ff      	movs	r2, #255	@ 0xff
 8006fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	22ff      	movs	r2, #255	@ 0xff
 8006fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d114      	bne.n	8006fe0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d01a      	beq.n	8006ff4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3310      	adds	r3, #16
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f001 f942 	bl	800824c <xTaskRemoveFromEventList>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d012      	beq.n	8006ff4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006fce:	4b0d      	ldr	r3, [pc, #52]	@ (8007004 <xQueueGenericReset+0xd0>)
 8006fd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	e009      	b.n	8006ff4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3310      	adds	r3, #16
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff fef1 	bl	8006dcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3324      	adds	r3, #36	@ 0x24
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff feec 	bl	8006dcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ff4:	f002 f892 	bl	800911c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ff8:	2301      	movs	r3, #1
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	e000ed04 	.word	0xe000ed04

08007008 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007008:	b580      	push	{r7, lr}
 800700a:	b08e      	sub	sp, #56	@ 0x38
 800700c:	af02      	add	r7, sp, #8
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10b      	bne.n	8007034 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800702e:	bf00      	nop
 8007030:	bf00      	nop
 8007032:	e7fd      	b.n	8007030 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10b      	bne.n	8007052 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800704c:	bf00      	nop
 800704e:	bf00      	nop
 8007050:	e7fd      	b.n	800704e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <xQueueGenericCreateStatic+0x56>
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <xQueueGenericCreateStatic+0x5a>
 800705e:	2301      	movs	r3, #1
 8007060:	e000      	b.n	8007064 <xQueueGenericCreateStatic+0x5c>
 8007062:	2300      	movs	r3, #0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10b      	bne.n	8007080 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	623b      	str	r3, [r7, #32]
}
 800707a:	bf00      	nop
 800707c:	bf00      	nop
 800707e:	e7fd      	b.n	800707c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d102      	bne.n	800708c <xQueueGenericCreateStatic+0x84>
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <xQueueGenericCreateStatic+0x88>
 800708c:	2301      	movs	r3, #1
 800708e:	e000      	b.n	8007092 <xQueueGenericCreateStatic+0x8a>
 8007090:	2300      	movs	r3, #0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10b      	bne.n	80070ae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	61fb      	str	r3, [r7, #28]
}
 80070a8:	bf00      	nop
 80070aa:	bf00      	nop
 80070ac:	e7fd      	b.n	80070aa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80070ae:	2350      	movs	r3, #80	@ 0x50
 80070b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b50      	cmp	r3, #80	@ 0x50
 80070b6:	d00b      	beq.n	80070d0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80070b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070bc:	f383 8811 	msr	BASEPRI, r3
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	f3bf 8f4f 	dsb	sy
 80070c8:	61bb      	str	r3, [r7, #24]
}
 80070ca:	bf00      	nop
 80070cc:	bf00      	nop
 80070ce:	e7fd      	b.n	80070cc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80070d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80070d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00d      	beq.n	80070f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80070dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070e4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80070e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	4613      	mov	r3, r2
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	68b9      	ldr	r1, [r7, #8]
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 f805 	bl	8007102 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3730      	adds	r7, #48	@ 0x30
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	607a      	str	r2, [r7, #4]
 800710e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d103      	bne.n	800711e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	69ba      	ldr	r2, [r7, #24]
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	e002      	b.n	8007124 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007130:	2101      	movs	r1, #1
 8007132:	69b8      	ldr	r0, [r7, #24]
 8007134:	f7ff fefe 	bl	8006f34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	78fa      	ldrb	r2, [r7, #3]
 800713c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007140:	bf00      	nop
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b08e      	sub	sp, #56	@ 0x38
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
 8007154:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007156:	2300      	movs	r3, #0
 8007158:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800715e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10b      	bne.n	800717c <xQueueGenericSend+0x34>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007176:	bf00      	nop
 8007178:	bf00      	nop
 800717a:	e7fd      	b.n	8007178 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d103      	bne.n	800718a <xQueueGenericSend+0x42>
 8007182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <xQueueGenericSend+0x46>
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <xQueueGenericSend+0x48>
 800718e:	2300      	movs	r3, #0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10b      	bne.n	80071ac <xQueueGenericSend+0x64>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80071a6:	bf00      	nop
 80071a8:	bf00      	nop
 80071aa:	e7fd      	b.n	80071a8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d103      	bne.n	80071ba <xQueueGenericSend+0x72>
 80071b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d101      	bne.n	80071be <xQueueGenericSend+0x76>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e000      	b.n	80071c0 <xQueueGenericSend+0x78>
 80071be:	2300      	movs	r3, #0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10b      	bne.n	80071dc <xQueueGenericSend+0x94>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	623b      	str	r3, [r7, #32]
}
 80071d6:	bf00      	nop
 80071d8:	bf00      	nop
 80071da:	e7fd      	b.n	80071d8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071dc:	f001 f9fc 	bl	80085d8 <xTaskGetSchedulerState>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d102      	bne.n	80071ec <xQueueGenericSend+0xa4>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d101      	bne.n	80071f0 <xQueueGenericSend+0xa8>
 80071ec:	2301      	movs	r3, #1
 80071ee:	e000      	b.n	80071f2 <xQueueGenericSend+0xaa>
 80071f0:	2300      	movs	r3, #0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10b      	bne.n	800720e <xQueueGenericSend+0xc6>
	__asm volatile
 80071f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	61fb      	str	r3, [r7, #28]
}
 8007208:	bf00      	nop
 800720a:	bf00      	nop
 800720c:	e7fd      	b.n	800720a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800720e:	f001 ff53 	bl	80090b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007214:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800721a:	429a      	cmp	r2, r3
 800721c:	d302      	bcc.n	8007224 <xQueueGenericSend+0xdc>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b02      	cmp	r3, #2
 8007222:	d129      	bne.n	8007278 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	68b9      	ldr	r1, [r7, #8]
 8007228:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800722a:	f000 fa0f 	bl	800764c <prvCopyDataToQueue>
 800722e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007234:	2b00      	cmp	r3, #0
 8007236:	d010      	beq.n	800725a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723a:	3324      	adds	r3, #36	@ 0x24
 800723c:	4618      	mov	r0, r3
 800723e:	f001 f805 	bl	800824c <xTaskRemoveFromEventList>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d013      	beq.n	8007270 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007248:	4b3f      	ldr	r3, [pc, #252]	@ (8007348 <xQueueGenericSend+0x200>)
 800724a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	e00a      	b.n	8007270 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800725a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725c:	2b00      	cmp	r3, #0
 800725e:	d007      	beq.n	8007270 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007260:	4b39      	ldr	r3, [pc, #228]	@ (8007348 <xQueueGenericSend+0x200>)
 8007262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007270:	f001 ff54 	bl	800911c <vPortExitCritical>
				return pdPASS;
 8007274:	2301      	movs	r3, #1
 8007276:	e063      	b.n	8007340 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d103      	bne.n	8007286 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800727e:	f001 ff4d 	bl	800911c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007282:	2300      	movs	r3, #0
 8007284:	e05c      	b.n	8007340 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007288:	2b00      	cmp	r3, #0
 800728a:	d106      	bne.n	800729a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800728c:	f107 0314 	add.w	r3, r7, #20
 8007290:	4618      	mov	r0, r3
 8007292:	f001 f83f 	bl	8008314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007296:	2301      	movs	r3, #1
 8007298:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800729a:	f001 ff3f 	bl	800911c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800729e:	f000 fda7 	bl	8007df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072a2:	f001 ff09 	bl	80090b8 <vPortEnterCritical>
 80072a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072ac:	b25b      	sxtb	r3, r3
 80072ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b2:	d103      	bne.n	80072bc <xQueueGenericSend+0x174>
 80072b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072c2:	b25b      	sxtb	r3, r3
 80072c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c8:	d103      	bne.n	80072d2 <xQueueGenericSend+0x18a>
 80072ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072d2:	f001 ff23 	bl	800911c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072d6:	1d3a      	adds	r2, r7, #4
 80072d8:	f107 0314 	add.w	r3, r7, #20
 80072dc:	4611      	mov	r1, r2
 80072de:	4618      	mov	r0, r3
 80072e0:	f001 f82e 	bl	8008340 <xTaskCheckForTimeOut>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d124      	bne.n	8007334 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072ec:	f000 faa6 	bl	800783c <prvIsQueueFull>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d018      	beq.n	8007328 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f8:	3310      	adds	r3, #16
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	4611      	mov	r1, r2
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 ff52 	bl	80081a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007306:	f000 fa31 	bl	800776c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800730a:	f000 fd7f 	bl	8007e0c <xTaskResumeAll>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	f47f af7c 	bne.w	800720e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007316:	4b0c      	ldr	r3, [pc, #48]	@ (8007348 <xQueueGenericSend+0x200>)
 8007318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800731c:	601a      	str	r2, [r3, #0]
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	f3bf 8f6f 	isb	sy
 8007326:	e772      	b.n	800720e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007328:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800732a:	f000 fa1f 	bl	800776c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800732e:	f000 fd6d 	bl	8007e0c <xTaskResumeAll>
 8007332:	e76c      	b.n	800720e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007334:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007336:	f000 fa19 	bl	800776c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800733a:	f000 fd67 	bl	8007e0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800733e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007340:	4618      	mov	r0, r3
 8007342:	3738      	adds	r7, #56	@ 0x38
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	e000ed04 	.word	0xe000ed04

0800734c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b090      	sub	sp, #64	@ 0x40
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	607a      	str	r2, [r7, #4]
 8007358:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800735e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10b      	bne.n	800737c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007376:	bf00      	nop
 8007378:	bf00      	nop
 800737a:	e7fd      	b.n	8007378 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d103      	bne.n	800738a <xQueueGenericSendFromISR+0x3e>
 8007382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <xQueueGenericSendFromISR+0x42>
 800738a:	2301      	movs	r3, #1
 800738c:	e000      	b.n	8007390 <xQueueGenericSendFromISR+0x44>
 800738e:	2300      	movs	r3, #0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10b      	bne.n	80073ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80073a6:	bf00      	nop
 80073a8:	bf00      	nop
 80073aa:	e7fd      	b.n	80073a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d103      	bne.n	80073ba <xQueueGenericSendFromISR+0x6e>
 80073b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d101      	bne.n	80073be <xQueueGenericSendFromISR+0x72>
 80073ba:	2301      	movs	r3, #1
 80073bc:	e000      	b.n	80073c0 <xQueueGenericSendFromISR+0x74>
 80073be:	2300      	movs	r3, #0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10b      	bne.n	80073dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	623b      	str	r3, [r7, #32]
}
 80073d6:	bf00      	nop
 80073d8:	bf00      	nop
 80073da:	e7fd      	b.n	80073d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073dc:	f001 ff4c 	bl	8009278 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80073e0:	f3ef 8211 	mrs	r2, BASEPRI
 80073e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	61fa      	str	r2, [r7, #28]
 80073f6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80073f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007404:	429a      	cmp	r2, r3
 8007406:	d302      	bcc.n	800740e <xQueueGenericSendFromISR+0xc2>
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2b02      	cmp	r3, #2
 800740c:	d12f      	bne.n	800746e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800740e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007410:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007414:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	68b9      	ldr	r1, [r7, #8]
 8007422:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007424:	f000 f912 	bl	800764c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007428:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007430:	d112      	bne.n	8007458 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007436:	2b00      	cmp	r3, #0
 8007438:	d016      	beq.n	8007468 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800743a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743c:	3324      	adds	r3, #36	@ 0x24
 800743e:	4618      	mov	r0, r3
 8007440:	f000 ff04 	bl	800824c <xTaskRemoveFromEventList>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00e      	beq.n	8007468 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00b      	beq.n	8007468 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	e007      	b.n	8007468 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007458:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800745c:	3301      	adds	r3, #1
 800745e:	b2db      	uxtb	r3, r3
 8007460:	b25a      	sxtb	r2, r3
 8007462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007468:	2301      	movs	r3, #1
 800746a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800746c:	e001      	b.n	8007472 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800746e:	2300      	movs	r3, #0
 8007470:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007474:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800747c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800747e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007480:	4618      	mov	r0, r3
 8007482:	3740      	adds	r7, #64	@ 0x40
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08c      	sub	sp, #48	@ 0x30
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007494:	2300      	movs	r3, #0
 8007496:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800749c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10b      	bne.n	80074ba <xQueueReceive+0x32>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	623b      	str	r3, [r7, #32]
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop
 80074b8:	e7fd      	b.n	80074b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d103      	bne.n	80074c8 <xQueueReceive+0x40>
 80074c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <xQueueReceive+0x44>
 80074c8:	2301      	movs	r3, #1
 80074ca:	e000      	b.n	80074ce <xQueueReceive+0x46>
 80074cc:	2300      	movs	r3, #0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10b      	bne.n	80074ea <xQueueReceive+0x62>
	__asm volatile
 80074d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	61fb      	str	r3, [r7, #28]
}
 80074e4:	bf00      	nop
 80074e6:	bf00      	nop
 80074e8:	e7fd      	b.n	80074e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074ea:	f001 f875 	bl	80085d8 <xTaskGetSchedulerState>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d102      	bne.n	80074fa <xQueueReceive+0x72>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d101      	bne.n	80074fe <xQueueReceive+0x76>
 80074fa:	2301      	movs	r3, #1
 80074fc:	e000      	b.n	8007500 <xQueueReceive+0x78>
 80074fe:	2300      	movs	r3, #0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10b      	bne.n	800751c <xQueueReceive+0x94>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	61bb      	str	r3, [r7, #24]
}
 8007516:	bf00      	nop
 8007518:	bf00      	nop
 800751a:	e7fd      	b.n	8007518 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800751c:	f001 fdcc 	bl	80090b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007524:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007528:	2b00      	cmp	r3, #0
 800752a:	d01f      	beq.n	800756c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800752c:	68b9      	ldr	r1, [r7, #8]
 800752e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007530:	f000 f8f6 	bl	8007720 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007536:	1e5a      	subs	r2, r3, #1
 8007538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800753c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d00f      	beq.n	8007564 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007546:	3310      	adds	r3, #16
 8007548:	4618      	mov	r0, r3
 800754a:	f000 fe7f 	bl	800824c <xTaskRemoveFromEventList>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d007      	beq.n	8007564 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007554:	4b3c      	ldr	r3, [pc, #240]	@ (8007648 <xQueueReceive+0x1c0>)
 8007556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007564:	f001 fdda 	bl	800911c <vPortExitCritical>
				return pdPASS;
 8007568:	2301      	movs	r3, #1
 800756a:	e069      	b.n	8007640 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d103      	bne.n	800757a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007572:	f001 fdd3 	bl	800911c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007576:	2300      	movs	r3, #0
 8007578:	e062      	b.n	8007640 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800757a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800757c:	2b00      	cmp	r3, #0
 800757e:	d106      	bne.n	800758e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007580:	f107 0310 	add.w	r3, r7, #16
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fec5 	bl	8008314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800758a:	2301      	movs	r3, #1
 800758c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800758e:	f001 fdc5 	bl	800911c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007592:	f000 fc2d 	bl	8007df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007596:	f001 fd8f 	bl	80090b8 <vPortEnterCritical>
 800759a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075a0:	b25b      	sxtb	r3, r3
 80075a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a6:	d103      	bne.n	80075b0 <xQueueReceive+0x128>
 80075a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075b6:	b25b      	sxtb	r3, r3
 80075b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075bc:	d103      	bne.n	80075c6 <xQueueReceive+0x13e>
 80075be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075c6:	f001 fda9 	bl	800911c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075ca:	1d3a      	adds	r2, r7, #4
 80075cc:	f107 0310 	add.w	r3, r7, #16
 80075d0:	4611      	mov	r1, r2
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 feb4 	bl	8008340 <xTaskCheckForTimeOut>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d123      	bne.n	8007626 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075e0:	f000 f916 	bl	8007810 <prvIsQueueEmpty>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d017      	beq.n	800761a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ec:	3324      	adds	r3, #36	@ 0x24
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	4611      	mov	r1, r2
 80075f2:	4618      	mov	r0, r3
 80075f4:	f000 fdd8 	bl	80081a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075fa:	f000 f8b7 	bl	800776c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075fe:	f000 fc05 	bl	8007e0c <xTaskResumeAll>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d189      	bne.n	800751c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007608:	4b0f      	ldr	r3, [pc, #60]	@ (8007648 <xQueueReceive+0x1c0>)
 800760a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	e780      	b.n	800751c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800761a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800761c:	f000 f8a6 	bl	800776c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007620:	f000 fbf4 	bl	8007e0c <xTaskResumeAll>
 8007624:	e77a      	b.n	800751c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007628:	f000 f8a0 	bl	800776c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800762c:	f000 fbee 	bl	8007e0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007630:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007632:	f000 f8ed 	bl	8007810 <prvIsQueueEmpty>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	f43f af6f 	beq.w	800751c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800763e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007640:	4618      	mov	r0, r3
 8007642:	3730      	adds	r7, #48	@ 0x30
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	e000ed04 	.word	0xe000ed04

0800764c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007658:	2300      	movs	r3, #0
 800765a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007660:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10d      	bne.n	8007686 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d14d      	bne.n	800770e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	4618      	mov	r0, r3
 8007678:	f000 ffcc 	bl	8008614 <xTaskPriorityDisinherit>
 800767c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	609a      	str	r2, [r3, #8]
 8007684:	e043      	b.n	800770e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d119      	bne.n	80076c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6858      	ldr	r0, [r3, #4]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007694:	461a      	mov	r2, r3
 8007696:	68b9      	ldr	r1, [r7, #8]
 8007698:	f002 f8a2 	bl	80097e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a4:	441a      	add	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d32b      	bcc.n	800770e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	605a      	str	r2, [r3, #4]
 80076be:	e026      	b.n	800770e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	68d8      	ldr	r0, [r3, #12]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c8:	461a      	mov	r2, r3
 80076ca:	68b9      	ldr	r1, [r7, #8]
 80076cc:	f002 f888 	bl	80097e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	68da      	ldr	r2, [r3, #12]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d8:	425b      	negs	r3, r3
 80076da:	441a      	add	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	68da      	ldr	r2, [r3, #12]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d207      	bcs.n	80076fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	689a      	ldr	r2, [r3, #8]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f4:	425b      	negs	r3, r3
 80076f6:	441a      	add	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d105      	bne.n	800770e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	3b01      	subs	r3, #1
 800770c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	1c5a      	adds	r2, r3, #1
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007716:	697b      	ldr	r3, [r7, #20]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800772e:	2b00      	cmp	r3, #0
 8007730:	d018      	beq.n	8007764 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800773a:	441a      	add	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	429a      	cmp	r2, r3
 800774a:	d303      	bcc.n	8007754 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68d9      	ldr	r1, [r3, #12]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775c:	461a      	mov	r2, r3
 800775e:	6838      	ldr	r0, [r7, #0]
 8007760:	f002 f83e 	bl	80097e0 <memcpy>
	}
}
 8007764:	bf00      	nop
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007774:	f001 fca0 	bl	80090b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800777e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007780:	e011      	b.n	80077a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007786:	2b00      	cmp	r3, #0
 8007788:	d012      	beq.n	80077b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	3324      	adds	r3, #36	@ 0x24
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fd5c 	bl	800824c <xTaskRemoveFromEventList>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800779a:	f000 fe35 	bl	8008408 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	3b01      	subs	r3, #1
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	dce9      	bgt.n	8007782 <prvUnlockQueue+0x16>
 80077ae:	e000      	b.n	80077b2 <prvUnlockQueue+0x46>
					break;
 80077b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	22ff      	movs	r2, #255	@ 0xff
 80077b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80077ba:	f001 fcaf 	bl	800911c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80077be:	f001 fc7b 	bl	80090b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077ca:	e011      	b.n	80077f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d012      	beq.n	80077fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3310      	adds	r3, #16
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 fd37 	bl	800824c <xTaskRemoveFromEventList>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80077e4:	f000 fe10 	bl	8008408 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	dce9      	bgt.n	80077cc <prvUnlockQueue+0x60>
 80077f8:	e000      	b.n	80077fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80077fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	22ff      	movs	r2, #255	@ 0xff
 8007800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007804:	f001 fc8a 	bl	800911c <vPortExitCritical>
}
 8007808:	bf00      	nop
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007818:	f001 fc4e 	bl	80090b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007820:	2b00      	cmp	r3, #0
 8007822:	d102      	bne.n	800782a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007824:	2301      	movs	r3, #1
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	e001      	b.n	800782e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800782a:	2300      	movs	r3, #0
 800782c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800782e:	f001 fc75 	bl	800911c <vPortExitCritical>

	return xReturn;
 8007832:	68fb      	ldr	r3, [r7, #12]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007844:	f001 fc38 	bl	80090b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007850:	429a      	cmp	r2, r3
 8007852:	d102      	bne.n	800785a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007854:	2301      	movs	r3, #1
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	e001      	b.n	800785e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800785a:	2300      	movs	r3, #0
 800785c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800785e:	f001 fc5d 	bl	800911c <vPortExitCritical>

	return xReturn;
 8007862:	68fb      	ldr	r3, [r7, #12]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007876:	2300      	movs	r3, #0
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	e014      	b.n	80078a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800787c:	4a0f      	ldr	r2, [pc, #60]	@ (80078bc <vQueueAddToRegistry+0x50>)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10b      	bne.n	80078a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007888:	490c      	ldr	r1, [pc, #48]	@ (80078bc <vQueueAddToRegistry+0x50>)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007892:	4a0a      	ldr	r2, [pc, #40]	@ (80078bc <vQueueAddToRegistry+0x50>)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	00db      	lsls	r3, r3, #3
 8007898:	4413      	add	r3, r2
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800789e:	e006      	b.n	80078ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3301      	adds	r3, #1
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b07      	cmp	r3, #7
 80078aa:	d9e7      	bls.n	800787c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80078ac:	bf00      	nop
 80078ae:	bf00      	nop
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	200009d0 	.word	0x200009d0

080078c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80078d0:	f001 fbf2 	bl	80090b8 <vPortEnterCritical>
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078da:	b25b      	sxtb	r3, r3
 80078dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e0:	d103      	bne.n	80078ea <vQueueWaitForMessageRestricted+0x2a>
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078f0:	b25b      	sxtb	r3, r3
 80078f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f6:	d103      	bne.n	8007900 <vQueueWaitForMessageRestricted+0x40>
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007900:	f001 fc0c 	bl	800911c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007908:	2b00      	cmp	r3, #0
 800790a:	d106      	bne.n	800791a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	3324      	adds	r3, #36	@ 0x24
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	68b9      	ldr	r1, [r7, #8]
 8007914:	4618      	mov	r0, r3
 8007916:	f000 fc6d 	bl	80081f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800791a:	6978      	ldr	r0, [r7, #20]
 800791c:	f7ff ff26 	bl	800776c <prvUnlockQueue>
	}
 8007920:	bf00      	nop
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007928:	b580      	push	{r7, lr}
 800792a:	b08e      	sub	sp, #56	@ 0x38
 800792c:	af04      	add	r7, sp, #16
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
 8007934:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007938:	2b00      	cmp	r3, #0
 800793a:	d10b      	bne.n	8007954 <xTaskCreateStatic+0x2c>
	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	623b      	str	r3, [r7, #32]
}
 800794e:	bf00      	nop
 8007950:	bf00      	nop
 8007952:	e7fd      	b.n	8007950 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10b      	bne.n	8007972 <xTaskCreateStatic+0x4a>
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	61fb      	str	r3, [r7, #28]
}
 800796c:	bf00      	nop
 800796e:	bf00      	nop
 8007970:	e7fd      	b.n	800796e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007972:	23a8      	movs	r3, #168	@ 0xa8
 8007974:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	2ba8      	cmp	r3, #168	@ 0xa8
 800797a:	d00b      	beq.n	8007994 <xTaskCreateStatic+0x6c>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	61bb      	str	r3, [r7, #24]
}
 800798e:	bf00      	nop
 8007990:	bf00      	nop
 8007992:	e7fd      	b.n	8007990 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007994:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007998:	2b00      	cmp	r3, #0
 800799a:	d01e      	beq.n	80079da <xTaskCreateStatic+0xb2>
 800799c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d01b      	beq.n	80079da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80079a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80079aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80079ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80079b4:	2300      	movs	r3, #0
 80079b6:	9303      	str	r3, [sp, #12]
 80079b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ba:	9302      	str	r3, [sp, #8]
 80079bc:	f107 0314 	add.w	r3, r7, #20
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	68b9      	ldr	r1, [r7, #8]
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f851 	bl	8007a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80079d4:	f000 f8f6 	bl	8007bc4 <prvAddNewTaskToReadyList>
 80079d8:	e001      	b.n	80079de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80079da:	2300      	movs	r3, #0
 80079dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80079de:	697b      	ldr	r3, [r7, #20]
	}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3728      	adds	r7, #40	@ 0x28
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08c      	sub	sp, #48	@ 0x30
 80079ec:	af04      	add	r7, sp, #16
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	603b      	str	r3, [r7, #0]
 80079f4:	4613      	mov	r3, r2
 80079f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079f8:	88fb      	ldrh	r3, [r7, #6]
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4618      	mov	r0, r3
 80079fe:	f001 fc7d 	bl	80092fc <pvPortMalloc>
 8007a02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00e      	beq.n	8007a28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a0a:	20a8      	movs	r0, #168	@ 0xa8
 8007a0c:	f001 fc76 	bl	80092fc <pvPortMalloc>
 8007a10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a1e:	e005      	b.n	8007a2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a20:	6978      	ldr	r0, [r7, #20]
 8007a22:	f001 fd39 	bl	8009498 <vPortFree>
 8007a26:	e001      	b.n	8007a2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d017      	beq.n	8007a62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a3a:	88fa      	ldrh	r2, [r7, #6]
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	9303      	str	r3, [sp, #12]
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	9302      	str	r3, [sp, #8]
 8007a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a46:	9301      	str	r3, [sp, #4]
 8007a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a4a:	9300      	str	r3, [sp, #0]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	68b9      	ldr	r1, [r7, #8]
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 f80f 	bl	8007a74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a56:	69f8      	ldr	r0, [r7, #28]
 8007a58:	f000 f8b4 	bl	8007bc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	61bb      	str	r3, [r7, #24]
 8007a60:	e002      	b.n	8007a68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a62:	f04f 33ff 	mov.w	r3, #4294967295
 8007a66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a68:	69bb      	ldr	r3, [r7, #24]
	}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3720      	adds	r7, #32
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b088      	sub	sp, #32
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a84:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	21a5      	movs	r1, #165	@ 0xa5
 8007a8e:	f001 fe23 	bl	80096d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	f023 0307 	bic.w	r3, r3, #7
 8007aaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	f003 0307 	and.w	r3, r3, #7
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00b      	beq.n	8007ace <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	617b      	str	r3, [r7, #20]
}
 8007ac8:	bf00      	nop
 8007aca:	bf00      	nop
 8007acc:	e7fd      	b.n	8007aca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d01f      	beq.n	8007b14 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	61fb      	str	r3, [r7, #28]
 8007ad8:	e012      	b.n	8007b00 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	4413      	add	r3, r2
 8007ae0:	7819      	ldrb	r1, [r3, #0]
 8007ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	3334      	adds	r3, #52	@ 0x34
 8007aea:	460a      	mov	r2, r1
 8007aec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	4413      	add	r3, r2
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d006      	beq.n	8007b08 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	3301      	adds	r3, #1
 8007afe:	61fb      	str	r3, [r7, #28]
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	2b0f      	cmp	r3, #15
 8007b04:	d9e9      	bls.n	8007ada <prvInitialiseNewTask+0x66>
 8007b06:	e000      	b.n	8007b0a <prvInitialiseNewTask+0x96>
			{
				break;
 8007b08:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b12:	e003      	b.n	8007b1c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1e:	2b37      	cmp	r3, #55	@ 0x37
 8007b20:	d901      	bls.n	8007b26 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b22:	2337      	movs	r3, #55	@ 0x37
 8007b24:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b30:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b34:	2200      	movs	r2, #0
 8007b36:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7ff f965 	bl	8006e0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b44:	3318      	adds	r3, #24
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7ff f960 	bl	8006e0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b50:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b54:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b60:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b64:	2200      	movs	r2, #0
 8007b66:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b74:	3354      	adds	r3, #84	@ 0x54
 8007b76:	224c      	movs	r2, #76	@ 0x4c
 8007b78:	2100      	movs	r1, #0
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f001 fdac 	bl	80096d8 <memset>
 8007b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b82:	4a0d      	ldr	r2, [pc, #52]	@ (8007bb8 <prvInitialiseNewTask+0x144>)
 8007b84:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b88:	4a0c      	ldr	r2, [pc, #48]	@ (8007bbc <prvInitialiseNewTask+0x148>)
 8007b8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8007bc0 <prvInitialiseNewTask+0x14c>)
 8007b90:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b92:	683a      	ldr	r2, [r7, #0]
 8007b94:	68f9      	ldr	r1, [r7, #12]
 8007b96:	69b8      	ldr	r0, [r7, #24]
 8007b98:	f001 f95a 	bl	8008e50 <pxPortInitialiseStack>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d002      	beq.n	8007bae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bae:	bf00      	nop
 8007bb0:	3720      	adds	r7, #32
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20001c1c 	.word	0x20001c1c
 8007bbc:	20001c84 	.word	0x20001c84
 8007bc0:	20001cec 	.word	0x20001cec

08007bc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007bcc:	f001 fa74 	bl	80090b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8007c88 <prvAddNewTaskToReadyList+0xc4>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8007c88 <prvAddNewTaskToReadyList+0xc4>)
 8007bd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007bda:	4b2c      	ldr	r3, [pc, #176]	@ (8007c8c <prvAddNewTaskToReadyList+0xc8>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d109      	bne.n	8007bf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007be2:	4a2a      	ldr	r2, [pc, #168]	@ (8007c8c <prvAddNewTaskToReadyList+0xc8>)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007be8:	4b27      	ldr	r3, [pc, #156]	@ (8007c88 <prvAddNewTaskToReadyList+0xc4>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d110      	bne.n	8007c12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007bf0:	f000 fc2e 	bl	8008450 <prvInitialiseTaskLists>
 8007bf4:	e00d      	b.n	8007c12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007bf6:	4b26      	ldr	r3, [pc, #152]	@ (8007c90 <prvAddNewTaskToReadyList+0xcc>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d109      	bne.n	8007c12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007bfe:	4b23      	ldr	r3, [pc, #140]	@ (8007c8c <prvAddNewTaskToReadyList+0xc8>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d802      	bhi.n	8007c12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8007c8c <prvAddNewTaskToReadyList+0xc8>)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c12:	4b20      	ldr	r3, [pc, #128]	@ (8007c94 <prvAddNewTaskToReadyList+0xd0>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	3301      	adds	r3, #1
 8007c18:	4a1e      	ldr	r2, [pc, #120]	@ (8007c94 <prvAddNewTaskToReadyList+0xd0>)
 8007c1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8007c94 <prvAddNewTaskToReadyList+0xd0>)
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c28:	4b1b      	ldr	r3, [pc, #108]	@ (8007c98 <prvAddNewTaskToReadyList+0xd4>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d903      	bls.n	8007c38 <prvAddNewTaskToReadyList+0x74>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c34:	4a18      	ldr	r2, [pc, #96]	@ (8007c98 <prvAddNewTaskToReadyList+0xd4>)
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4a15      	ldr	r2, [pc, #84]	@ (8007c9c <prvAddNewTaskToReadyList+0xd8>)
 8007c46:	441a      	add	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	4610      	mov	r0, r2
 8007c50:	f7ff f8e9 	bl	8006e26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c54:	f001 fa62 	bl	800911c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c58:	4b0d      	ldr	r3, [pc, #52]	@ (8007c90 <prvAddNewTaskToReadyList+0xcc>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00e      	beq.n	8007c7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007c60:	4b0a      	ldr	r3, [pc, #40]	@ (8007c8c <prvAddNewTaskToReadyList+0xc8>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d207      	bcs.n	8007c7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ca0 <prvAddNewTaskToReadyList+0xdc>)
 8007c70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c7e:	bf00      	nop
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	20000ee4 	.word	0x20000ee4
 8007c8c:	20000a10 	.word	0x20000a10
 8007c90:	20000ef0 	.word	0x20000ef0
 8007c94:	20000f00 	.word	0x20000f00
 8007c98:	20000eec 	.word	0x20000eec
 8007c9c:	20000a14 	.word	0x20000a14
 8007ca0:	e000ed04 	.word	0xe000ed04

08007ca4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d018      	beq.n	8007ce8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007cb6:	4b14      	ldr	r3, [pc, #80]	@ (8007d08 <vTaskDelay+0x64>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00b      	beq.n	8007cd6 <vTaskDelay+0x32>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	60bb      	str	r3, [r7, #8]
}
 8007cd0:	bf00      	nop
 8007cd2:	bf00      	nop
 8007cd4:	e7fd      	b.n	8007cd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007cd6:	f000 f88b 	bl	8007df0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007cda:	2100      	movs	r1, #0
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fd09 	bl	80086f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ce2:	f000 f893 	bl	8007e0c <xTaskResumeAll>
 8007ce6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d107      	bne.n	8007cfe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007cee:	4b07      	ldr	r3, [pc, #28]	@ (8007d0c <vTaskDelay+0x68>)
 8007cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cf4:	601a      	str	r2, [r3, #0]
 8007cf6:	f3bf 8f4f 	dsb	sy
 8007cfa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007cfe:	bf00      	nop
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20000f0c 	.word	0x20000f0c
 8007d0c:	e000ed04 	.word	0xe000ed04

08007d10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08a      	sub	sp, #40	@ 0x28
 8007d14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d1e:	463a      	mov	r2, r7
 8007d20:	1d39      	adds	r1, r7, #4
 8007d22:	f107 0308 	add.w	r3, r7, #8
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7ff f81c 	bl	8006d64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	9202      	str	r2, [sp, #8]
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	2300      	movs	r3, #0
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	460a      	mov	r2, r1
 8007d3e:	4924      	ldr	r1, [pc, #144]	@ (8007dd0 <vTaskStartScheduler+0xc0>)
 8007d40:	4824      	ldr	r0, [pc, #144]	@ (8007dd4 <vTaskStartScheduler+0xc4>)
 8007d42:	f7ff fdf1 	bl	8007928 <xTaskCreateStatic>
 8007d46:	4603      	mov	r3, r0
 8007d48:	4a23      	ldr	r2, [pc, #140]	@ (8007dd8 <vTaskStartScheduler+0xc8>)
 8007d4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d4c:	4b22      	ldr	r3, [pc, #136]	@ (8007dd8 <vTaskStartScheduler+0xc8>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d54:	2301      	movs	r3, #1
 8007d56:	617b      	str	r3, [r7, #20]
 8007d58:	e001      	b.n	8007d5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d102      	bne.n	8007d6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007d64:	f000 fd1a 	bl	800879c <xTimerCreateTimerTask>
 8007d68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d11b      	bne.n	8007da8 <vTaskStartScheduler+0x98>
	__asm volatile
 8007d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	613b      	str	r3, [r7, #16]
}
 8007d82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d84:	4b15      	ldr	r3, [pc, #84]	@ (8007ddc <vTaskStartScheduler+0xcc>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3354      	adds	r3, #84	@ 0x54
 8007d8a:	4a15      	ldr	r2, [pc, #84]	@ (8007de0 <vTaskStartScheduler+0xd0>)
 8007d8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d8e:	4b15      	ldr	r3, [pc, #84]	@ (8007de4 <vTaskStartScheduler+0xd4>)
 8007d90:	f04f 32ff 	mov.w	r2, #4294967295
 8007d94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d96:	4b14      	ldr	r3, [pc, #80]	@ (8007de8 <vTaskStartScheduler+0xd8>)
 8007d98:	2201      	movs	r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d9c:	4b13      	ldr	r3, [pc, #76]	@ (8007dec <vTaskStartScheduler+0xdc>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007da2:	f001 f8e5 	bl	8008f70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007da6:	e00f      	b.n	8007dc8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dae:	d10b      	bne.n	8007dc8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	60fb      	str	r3, [r7, #12]
}
 8007dc2:	bf00      	nop
 8007dc4:	bf00      	nop
 8007dc6:	e7fd      	b.n	8007dc4 <vTaskStartScheduler+0xb4>
}
 8007dc8:	bf00      	nop
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	080098f8 	.word	0x080098f8
 8007dd4:	08008421 	.word	0x08008421
 8007dd8:	20000f08 	.word	0x20000f08
 8007ddc:	20000a10 	.word	0x20000a10
 8007de0:	20000010 	.word	0x20000010
 8007de4:	20000f04 	.word	0x20000f04
 8007de8:	20000ef0 	.word	0x20000ef0
 8007dec:	20000ee8 	.word	0x20000ee8

08007df0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007df0:	b480      	push	{r7}
 8007df2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007df4:	4b04      	ldr	r3, [pc, #16]	@ (8007e08 <vTaskSuspendAll+0x18>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	4a03      	ldr	r2, [pc, #12]	@ (8007e08 <vTaskSuspendAll+0x18>)
 8007dfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007dfe:	bf00      	nop
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	20000f0c 	.word	0x20000f0c

08007e0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e1a:	4b42      	ldr	r3, [pc, #264]	@ (8007f24 <xTaskResumeAll+0x118>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10b      	bne.n	8007e3a <xTaskResumeAll+0x2e>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	603b      	str	r3, [r7, #0]
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop
 8007e38:	e7fd      	b.n	8007e36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e3a:	f001 f93d 	bl	80090b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e3e:	4b39      	ldr	r3, [pc, #228]	@ (8007f24 <xTaskResumeAll+0x118>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3b01      	subs	r3, #1
 8007e44:	4a37      	ldr	r2, [pc, #220]	@ (8007f24 <xTaskResumeAll+0x118>)
 8007e46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e48:	4b36      	ldr	r3, [pc, #216]	@ (8007f24 <xTaskResumeAll+0x118>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d162      	bne.n	8007f16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e50:	4b35      	ldr	r3, [pc, #212]	@ (8007f28 <xTaskResumeAll+0x11c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d05e      	beq.n	8007f16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e58:	e02f      	b.n	8007eba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e5a:	4b34      	ldr	r3, [pc, #208]	@ (8007f2c <xTaskResumeAll+0x120>)
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	3318      	adds	r3, #24
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7ff f83a 	bl	8006ee0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff f835 	bl	8006ee0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8007f30 <xTaskResumeAll+0x124>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d903      	bls.n	8007e8a <xTaskResumeAll+0x7e>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e86:	4a2a      	ldr	r2, [pc, #168]	@ (8007f30 <xTaskResumeAll+0x124>)
 8007e88:	6013      	str	r3, [r2, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e8e:	4613      	mov	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4a27      	ldr	r2, [pc, #156]	@ (8007f34 <xTaskResumeAll+0x128>)
 8007e98:	441a      	add	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	f7fe ffc0 	bl	8006e26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eaa:	4b23      	ldr	r3, [pc, #140]	@ (8007f38 <xTaskResumeAll+0x12c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d302      	bcc.n	8007eba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007eb4:	4b21      	ldr	r3, [pc, #132]	@ (8007f3c <xTaskResumeAll+0x130>)
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007eba:	4b1c      	ldr	r3, [pc, #112]	@ (8007f2c <xTaskResumeAll+0x120>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1cb      	bne.n	8007e5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ec8:	f000 fb66 	bl	8008598 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8007f40 <xTaskResumeAll+0x134>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d010      	beq.n	8007efa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ed8:	f000 f846 	bl	8007f68 <xTaskIncrementTick>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d002      	beq.n	8007ee8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007ee2:	4b16      	ldr	r3, [pc, #88]	@ (8007f3c <xTaskResumeAll+0x130>)
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3b01      	subs	r3, #1
 8007eec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1f1      	bne.n	8007ed8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007ef4:	4b12      	ldr	r3, [pc, #72]	@ (8007f40 <xTaskResumeAll+0x134>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007efa:	4b10      	ldr	r3, [pc, #64]	@ (8007f3c <xTaskResumeAll+0x130>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d009      	beq.n	8007f16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f02:	2301      	movs	r3, #1
 8007f04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f06:	4b0f      	ldr	r3, [pc, #60]	@ (8007f44 <xTaskResumeAll+0x138>)
 8007f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f16:	f001 f901 	bl	800911c <vPortExitCritical>

	return xAlreadyYielded;
 8007f1a:	68bb      	ldr	r3, [r7, #8]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	20000f0c 	.word	0x20000f0c
 8007f28:	20000ee4 	.word	0x20000ee4
 8007f2c:	20000ea4 	.word	0x20000ea4
 8007f30:	20000eec 	.word	0x20000eec
 8007f34:	20000a14 	.word	0x20000a14
 8007f38:	20000a10 	.word	0x20000a10
 8007f3c:	20000ef8 	.word	0x20000ef8
 8007f40:	20000ef4 	.word	0x20000ef4
 8007f44:	e000ed04 	.word	0xe000ed04

08007f48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f4e:	4b05      	ldr	r3, [pc, #20]	@ (8007f64 <xTaskGetTickCount+0x1c>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f54:	687b      	ldr	r3, [r7, #4]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20000ee8 	.word	0x20000ee8

08007f68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f72:	4b4f      	ldr	r3, [pc, #316]	@ (80080b0 <xTaskIncrementTick+0x148>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f040 8090 	bne.w	800809c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f7c:	4b4d      	ldr	r3, [pc, #308]	@ (80080b4 <xTaskIncrementTick+0x14c>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3301      	adds	r3, #1
 8007f82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f84:	4a4b      	ldr	r2, [pc, #300]	@ (80080b4 <xTaskIncrementTick+0x14c>)
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d121      	bne.n	8007fd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f90:	4b49      	ldr	r3, [pc, #292]	@ (80080b8 <xTaskIncrementTick+0x150>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d00b      	beq.n	8007fb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	603b      	str	r3, [r7, #0]
}
 8007fac:	bf00      	nop
 8007fae:	bf00      	nop
 8007fb0:	e7fd      	b.n	8007fae <xTaskIncrementTick+0x46>
 8007fb2:	4b41      	ldr	r3, [pc, #260]	@ (80080b8 <xTaskIncrementTick+0x150>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	60fb      	str	r3, [r7, #12]
 8007fb8:	4b40      	ldr	r3, [pc, #256]	@ (80080bc <xTaskIncrementTick+0x154>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a3e      	ldr	r2, [pc, #248]	@ (80080b8 <xTaskIncrementTick+0x150>)
 8007fbe:	6013      	str	r3, [r2, #0]
 8007fc0:	4a3e      	ldr	r2, [pc, #248]	@ (80080bc <xTaskIncrementTick+0x154>)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6013      	str	r3, [r2, #0]
 8007fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80080c0 <xTaskIncrementTick+0x158>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	4a3c      	ldr	r2, [pc, #240]	@ (80080c0 <xTaskIncrementTick+0x158>)
 8007fce:	6013      	str	r3, [r2, #0]
 8007fd0:	f000 fae2 	bl	8008598 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80080c4 <xTaskIncrementTick+0x15c>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d349      	bcc.n	8008072 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fde:	4b36      	ldr	r3, [pc, #216]	@ (80080b8 <xTaskIncrementTick+0x150>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d104      	bne.n	8007ff2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fe8:	4b36      	ldr	r3, [pc, #216]	@ (80080c4 <xTaskIncrementTick+0x15c>)
 8007fea:	f04f 32ff 	mov.w	r2, #4294967295
 8007fee:	601a      	str	r2, [r3, #0]
					break;
 8007ff0:	e03f      	b.n	8008072 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ff2:	4b31      	ldr	r3, [pc, #196]	@ (80080b8 <xTaskIncrementTick+0x150>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	429a      	cmp	r2, r3
 8008008:	d203      	bcs.n	8008012 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800800a:	4a2e      	ldr	r2, [pc, #184]	@ (80080c4 <xTaskIncrementTick+0x15c>)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008010:	e02f      	b.n	8008072 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	3304      	adds	r3, #4
 8008016:	4618      	mov	r0, r3
 8008018:	f7fe ff62 	bl	8006ee0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008020:	2b00      	cmp	r3, #0
 8008022:	d004      	beq.n	800802e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	3318      	adds	r3, #24
 8008028:	4618      	mov	r0, r3
 800802a:	f7fe ff59 	bl	8006ee0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008032:	4b25      	ldr	r3, [pc, #148]	@ (80080c8 <xTaskIncrementTick+0x160>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	429a      	cmp	r2, r3
 8008038:	d903      	bls.n	8008042 <xTaskIncrementTick+0xda>
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800803e:	4a22      	ldr	r2, [pc, #136]	@ (80080c8 <xTaskIncrementTick+0x160>)
 8008040:	6013      	str	r3, [r2, #0]
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008046:	4613      	mov	r3, r2
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	4413      	add	r3, r2
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	4a1f      	ldr	r2, [pc, #124]	@ (80080cc <xTaskIncrementTick+0x164>)
 8008050:	441a      	add	r2, r3
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	3304      	adds	r3, #4
 8008056:	4619      	mov	r1, r3
 8008058:	4610      	mov	r0, r2
 800805a:	f7fe fee4 	bl	8006e26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008062:	4b1b      	ldr	r3, [pc, #108]	@ (80080d0 <xTaskIncrementTick+0x168>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008068:	429a      	cmp	r2, r3
 800806a:	d3b8      	bcc.n	8007fde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800806c:	2301      	movs	r3, #1
 800806e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008070:	e7b5      	b.n	8007fde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008072:	4b17      	ldr	r3, [pc, #92]	@ (80080d0 <xTaskIncrementTick+0x168>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008078:	4914      	ldr	r1, [pc, #80]	@ (80080cc <xTaskIncrementTick+0x164>)
 800807a:	4613      	mov	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	440b      	add	r3, r1
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d901      	bls.n	800808e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800808a:	2301      	movs	r3, #1
 800808c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800808e:	4b11      	ldr	r3, [pc, #68]	@ (80080d4 <xTaskIncrementTick+0x16c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d007      	beq.n	80080a6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008096:	2301      	movs	r3, #1
 8008098:	617b      	str	r3, [r7, #20]
 800809a:	e004      	b.n	80080a6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800809c:	4b0e      	ldr	r3, [pc, #56]	@ (80080d8 <xTaskIncrementTick+0x170>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3301      	adds	r3, #1
 80080a2:	4a0d      	ldr	r2, [pc, #52]	@ (80080d8 <xTaskIncrementTick+0x170>)
 80080a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80080a6:	697b      	ldr	r3, [r7, #20]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	20000f0c 	.word	0x20000f0c
 80080b4:	20000ee8 	.word	0x20000ee8
 80080b8:	20000e9c 	.word	0x20000e9c
 80080bc:	20000ea0 	.word	0x20000ea0
 80080c0:	20000efc 	.word	0x20000efc
 80080c4:	20000f04 	.word	0x20000f04
 80080c8:	20000eec 	.word	0x20000eec
 80080cc:	20000a14 	.word	0x20000a14
 80080d0:	20000a10 	.word	0x20000a10
 80080d4:	20000ef8 	.word	0x20000ef8
 80080d8:	20000ef4 	.word	0x20000ef4

080080dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80080dc:	b480      	push	{r7}
 80080de:	b085      	sub	sp, #20
 80080e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80080e2:	4b2b      	ldr	r3, [pc, #172]	@ (8008190 <vTaskSwitchContext+0xb4>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80080ea:	4b2a      	ldr	r3, [pc, #168]	@ (8008194 <vTaskSwitchContext+0xb8>)
 80080ec:	2201      	movs	r2, #1
 80080ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80080f0:	e047      	b.n	8008182 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80080f2:	4b28      	ldr	r3, [pc, #160]	@ (8008194 <vTaskSwitchContext+0xb8>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080f8:	4b27      	ldr	r3, [pc, #156]	@ (8008198 <vTaskSwitchContext+0xbc>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	e011      	b.n	8008124 <vTaskSwitchContext+0x48>
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10b      	bne.n	800811e <vTaskSwitchContext+0x42>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	607b      	str	r3, [r7, #4]
}
 8008118:	bf00      	nop
 800811a:	bf00      	nop
 800811c:	e7fd      	b.n	800811a <vTaskSwitchContext+0x3e>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3b01      	subs	r3, #1
 8008122:	60fb      	str	r3, [r7, #12]
 8008124:	491d      	ldr	r1, [pc, #116]	@ (800819c <vTaskSwitchContext+0xc0>)
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	4613      	mov	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	440b      	add	r3, r1
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d0e3      	beq.n	8008100 <vTaskSwitchContext+0x24>
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	4613      	mov	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4a16      	ldr	r2, [pc, #88]	@ (800819c <vTaskSwitchContext+0xc0>)
 8008144:	4413      	add	r3, r2
 8008146:	60bb      	str	r3, [r7, #8]
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	605a      	str	r2, [r3, #4]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	3308      	adds	r3, #8
 800815a:	429a      	cmp	r2, r3
 800815c:	d104      	bne.n	8008168 <vTaskSwitchContext+0x8c>
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	605a      	str	r2, [r3, #4]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	4a0c      	ldr	r2, [pc, #48]	@ (80081a0 <vTaskSwitchContext+0xc4>)
 8008170:	6013      	str	r3, [r2, #0]
 8008172:	4a09      	ldr	r2, [pc, #36]	@ (8008198 <vTaskSwitchContext+0xbc>)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008178:	4b09      	ldr	r3, [pc, #36]	@ (80081a0 <vTaskSwitchContext+0xc4>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3354      	adds	r3, #84	@ 0x54
 800817e:	4a09      	ldr	r2, [pc, #36]	@ (80081a4 <vTaskSwitchContext+0xc8>)
 8008180:	6013      	str	r3, [r2, #0]
}
 8008182:	bf00      	nop
 8008184:	3714      	adds	r7, #20
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	20000f0c 	.word	0x20000f0c
 8008194:	20000ef8 	.word	0x20000ef8
 8008198:	20000eec 	.word	0x20000eec
 800819c:	20000a14 	.word	0x20000a14
 80081a0:	20000a10 	.word	0x20000a10
 80081a4:	20000010 	.word	0x20000010

080081a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10b      	bne.n	80081d0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	60fb      	str	r3, [r7, #12]
}
 80081ca:	bf00      	nop
 80081cc:	bf00      	nop
 80081ce:	e7fd      	b.n	80081cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081d0:	4b07      	ldr	r3, [pc, #28]	@ (80081f0 <vTaskPlaceOnEventList+0x48>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	3318      	adds	r3, #24
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7fe fe48 	bl	8006e6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081de:	2101      	movs	r1, #1
 80081e0:	6838      	ldr	r0, [r7, #0]
 80081e2:	f000 fa87 	bl	80086f4 <prvAddCurrentTaskToDelayedList>
}
 80081e6:	bf00      	nop
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	20000a10 	.word	0x20000a10

080081f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10b      	bne.n	800821e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	617b      	str	r3, [r7, #20]
}
 8008218:	bf00      	nop
 800821a:	bf00      	nop
 800821c:	e7fd      	b.n	800821a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800821e:	4b0a      	ldr	r3, [pc, #40]	@ (8008248 <vTaskPlaceOnEventListRestricted+0x54>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3318      	adds	r3, #24
 8008224:	4619      	mov	r1, r3
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f7fe fdfd 	bl	8006e26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d002      	beq.n	8008238 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008232:	f04f 33ff 	mov.w	r3, #4294967295
 8008236:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008238:	6879      	ldr	r1, [r7, #4]
 800823a:	68b8      	ldr	r0, [r7, #8]
 800823c:	f000 fa5a 	bl	80086f4 <prvAddCurrentTaskToDelayedList>
	}
 8008240:	bf00      	nop
 8008242:	3718      	adds	r7, #24
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	20000a10 	.word	0x20000a10

0800824c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d10b      	bne.n	800827a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	60fb      	str	r3, [r7, #12]
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop
 8008278:	e7fd      	b.n	8008276 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	3318      	adds	r3, #24
 800827e:	4618      	mov	r0, r3
 8008280:	f7fe fe2e 	bl	8006ee0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008284:	4b1d      	ldr	r3, [pc, #116]	@ (80082fc <xTaskRemoveFromEventList+0xb0>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d11d      	bne.n	80082c8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	3304      	adds	r3, #4
 8008290:	4618      	mov	r0, r3
 8008292:	f7fe fe25 	bl	8006ee0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800829a:	4b19      	ldr	r3, [pc, #100]	@ (8008300 <xTaskRemoveFromEventList+0xb4>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d903      	bls.n	80082aa <xTaskRemoveFromEventList+0x5e>
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a6:	4a16      	ldr	r2, [pc, #88]	@ (8008300 <xTaskRemoveFromEventList+0xb4>)
 80082a8:	6013      	str	r3, [r2, #0]
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4a13      	ldr	r2, [pc, #76]	@ (8008304 <xTaskRemoveFromEventList+0xb8>)
 80082b8:	441a      	add	r2, r3
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	3304      	adds	r3, #4
 80082be:	4619      	mov	r1, r3
 80082c0:	4610      	mov	r0, r2
 80082c2:	f7fe fdb0 	bl	8006e26 <vListInsertEnd>
 80082c6:	e005      	b.n	80082d4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	3318      	adds	r3, #24
 80082cc:	4619      	mov	r1, r3
 80082ce:	480e      	ldr	r0, [pc, #56]	@ (8008308 <xTaskRemoveFromEventList+0xbc>)
 80082d0:	f7fe fda9 	bl	8006e26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d8:	4b0c      	ldr	r3, [pc, #48]	@ (800830c <xTaskRemoveFromEventList+0xc0>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082de:	429a      	cmp	r2, r3
 80082e0:	d905      	bls.n	80082ee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80082e2:	2301      	movs	r3, #1
 80082e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80082e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008310 <xTaskRemoveFromEventList+0xc4>)
 80082e8:	2201      	movs	r2, #1
 80082ea:	601a      	str	r2, [r3, #0]
 80082ec:	e001      	b.n	80082f2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80082ee:	2300      	movs	r3, #0
 80082f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80082f2:	697b      	ldr	r3, [r7, #20]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20000f0c 	.word	0x20000f0c
 8008300:	20000eec 	.word	0x20000eec
 8008304:	20000a14 	.word	0x20000a14
 8008308:	20000ea4 	.word	0x20000ea4
 800830c:	20000a10 	.word	0x20000a10
 8008310:	20000ef8 	.word	0x20000ef8

08008314 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800831c:	4b06      	ldr	r3, [pc, #24]	@ (8008338 <vTaskInternalSetTimeOutState+0x24>)
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008324:	4b05      	ldr	r3, [pc, #20]	@ (800833c <vTaskInternalSetTimeOutState+0x28>)
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	605a      	str	r2, [r3, #4]
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr
 8008338:	20000efc 	.word	0x20000efc
 800833c:	20000ee8 	.word	0x20000ee8

08008340 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b088      	sub	sp, #32
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10b      	bne.n	8008368 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	613b      	str	r3, [r7, #16]
}
 8008362:	bf00      	nop
 8008364:	bf00      	nop
 8008366:	e7fd      	b.n	8008364 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10b      	bne.n	8008386 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	60fb      	str	r3, [r7, #12]
}
 8008380:	bf00      	nop
 8008382:	bf00      	nop
 8008384:	e7fd      	b.n	8008382 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008386:	f000 fe97 	bl	80090b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800838a:	4b1d      	ldr	r3, [pc, #116]	@ (8008400 <xTaskCheckForTimeOut+0xc0>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a2:	d102      	bne.n	80083aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80083a4:	2300      	movs	r3, #0
 80083a6:	61fb      	str	r3, [r7, #28]
 80083a8:	e023      	b.n	80083f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	4b15      	ldr	r3, [pc, #84]	@ (8008404 <xTaskCheckForTimeOut+0xc4>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d007      	beq.n	80083c6 <xTaskCheckForTimeOut+0x86>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	69ba      	ldr	r2, [r7, #24]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d302      	bcc.n	80083c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80083c0:	2301      	movs	r3, #1
 80083c2:	61fb      	str	r3, [r7, #28]
 80083c4:	e015      	b.n	80083f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d20b      	bcs.n	80083e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	1ad2      	subs	r2, r2, r3
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f7ff ff99 	bl	8008314 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80083e2:	2300      	movs	r3, #0
 80083e4:	61fb      	str	r3, [r7, #28]
 80083e6:	e004      	b.n	80083f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2200      	movs	r2, #0
 80083ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80083ee:	2301      	movs	r3, #1
 80083f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80083f2:	f000 fe93 	bl	800911c <vPortExitCritical>

	return xReturn;
 80083f6:	69fb      	ldr	r3, [r7, #28]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3720      	adds	r7, #32
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	20000ee8 	.word	0x20000ee8
 8008404:	20000efc 	.word	0x20000efc

08008408 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008408:	b480      	push	{r7}
 800840a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800840c:	4b03      	ldr	r3, [pc, #12]	@ (800841c <vTaskMissedYield+0x14>)
 800840e:	2201      	movs	r2, #1
 8008410:	601a      	str	r2, [r3, #0]
}
 8008412:	bf00      	nop
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	20000ef8 	.word	0x20000ef8

08008420 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008428:	f000 f852 	bl	80084d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800842c:	4b06      	ldr	r3, [pc, #24]	@ (8008448 <prvIdleTask+0x28>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d9f9      	bls.n	8008428 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008434:	4b05      	ldr	r3, [pc, #20]	@ (800844c <prvIdleTask+0x2c>)
 8008436:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008444:	e7f0      	b.n	8008428 <prvIdleTask+0x8>
 8008446:	bf00      	nop
 8008448:	20000a14 	.word	0x20000a14
 800844c:	e000ed04 	.word	0xe000ed04

08008450 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008456:	2300      	movs	r3, #0
 8008458:	607b      	str	r3, [r7, #4]
 800845a:	e00c      	b.n	8008476 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4a12      	ldr	r2, [pc, #72]	@ (80084b0 <prvInitialiseTaskLists+0x60>)
 8008468:	4413      	add	r3, r2
 800846a:	4618      	mov	r0, r3
 800846c:	f7fe fcae 	bl	8006dcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	3301      	adds	r3, #1
 8008474:	607b      	str	r3, [r7, #4]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b37      	cmp	r3, #55	@ 0x37
 800847a:	d9ef      	bls.n	800845c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800847c:	480d      	ldr	r0, [pc, #52]	@ (80084b4 <prvInitialiseTaskLists+0x64>)
 800847e:	f7fe fca5 	bl	8006dcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008482:	480d      	ldr	r0, [pc, #52]	@ (80084b8 <prvInitialiseTaskLists+0x68>)
 8008484:	f7fe fca2 	bl	8006dcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008488:	480c      	ldr	r0, [pc, #48]	@ (80084bc <prvInitialiseTaskLists+0x6c>)
 800848a:	f7fe fc9f 	bl	8006dcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800848e:	480c      	ldr	r0, [pc, #48]	@ (80084c0 <prvInitialiseTaskLists+0x70>)
 8008490:	f7fe fc9c 	bl	8006dcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008494:	480b      	ldr	r0, [pc, #44]	@ (80084c4 <prvInitialiseTaskLists+0x74>)
 8008496:	f7fe fc99 	bl	8006dcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800849a:	4b0b      	ldr	r3, [pc, #44]	@ (80084c8 <prvInitialiseTaskLists+0x78>)
 800849c:	4a05      	ldr	r2, [pc, #20]	@ (80084b4 <prvInitialiseTaskLists+0x64>)
 800849e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084a0:	4b0a      	ldr	r3, [pc, #40]	@ (80084cc <prvInitialiseTaskLists+0x7c>)
 80084a2:	4a05      	ldr	r2, [pc, #20]	@ (80084b8 <prvInitialiseTaskLists+0x68>)
 80084a4:	601a      	str	r2, [r3, #0]
}
 80084a6:	bf00      	nop
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	20000a14 	.word	0x20000a14
 80084b4:	20000e74 	.word	0x20000e74
 80084b8:	20000e88 	.word	0x20000e88
 80084bc:	20000ea4 	.word	0x20000ea4
 80084c0:	20000eb8 	.word	0x20000eb8
 80084c4:	20000ed0 	.word	0x20000ed0
 80084c8:	20000e9c 	.word	0x20000e9c
 80084cc:	20000ea0 	.word	0x20000ea0

080084d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084d6:	e019      	b.n	800850c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084d8:	f000 fdee 	bl	80090b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084dc:	4b10      	ldr	r3, [pc, #64]	@ (8008520 <prvCheckTasksWaitingTermination+0x50>)
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3304      	adds	r3, #4
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fe fcf9 	bl	8006ee0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80084ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008524 <prvCheckTasksWaitingTermination+0x54>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3b01      	subs	r3, #1
 80084f4:	4a0b      	ldr	r2, [pc, #44]	@ (8008524 <prvCheckTasksWaitingTermination+0x54>)
 80084f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80084f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008528 <prvCheckTasksWaitingTermination+0x58>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3b01      	subs	r3, #1
 80084fe:	4a0a      	ldr	r2, [pc, #40]	@ (8008528 <prvCheckTasksWaitingTermination+0x58>)
 8008500:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008502:	f000 fe0b 	bl	800911c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f810 	bl	800852c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800850c:	4b06      	ldr	r3, [pc, #24]	@ (8008528 <prvCheckTasksWaitingTermination+0x58>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e1      	bne.n	80084d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20000eb8 	.word	0x20000eb8
 8008524:	20000ee4 	.word	0x20000ee4
 8008528:	20000ecc 	.word	0x20000ecc

0800852c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	3354      	adds	r3, #84	@ 0x54
 8008538:	4618      	mov	r0, r3
 800853a:	f001 f8d5 	bl	80096e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008544:	2b00      	cmp	r3, #0
 8008546:	d108      	bne.n	800855a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800854c:	4618      	mov	r0, r3
 800854e:	f000 ffa3 	bl	8009498 <vPortFree>
				vPortFree( pxTCB );
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 ffa0 	bl	8009498 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008558:	e019      	b.n	800858e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008560:	2b01      	cmp	r3, #1
 8008562:	d103      	bne.n	800856c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 ff97 	bl	8009498 <vPortFree>
	}
 800856a:	e010      	b.n	800858e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008572:	2b02      	cmp	r3, #2
 8008574:	d00b      	beq.n	800858e <prvDeleteTCB+0x62>
	__asm volatile
 8008576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	60fb      	str	r3, [r7, #12]
}
 8008588:	bf00      	nop
 800858a:	bf00      	nop
 800858c:	e7fd      	b.n	800858a <prvDeleteTCB+0x5e>
	}
 800858e:	bf00      	nop
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
	...

08008598 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800859e:	4b0c      	ldr	r3, [pc, #48]	@ (80085d0 <prvResetNextTaskUnblockTime+0x38>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d104      	bne.n	80085b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085a8:	4b0a      	ldr	r3, [pc, #40]	@ (80085d4 <prvResetNextTaskUnblockTime+0x3c>)
 80085aa:	f04f 32ff 	mov.w	r2, #4294967295
 80085ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085b0:	e008      	b.n	80085c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b2:	4b07      	ldr	r3, [pc, #28]	@ (80085d0 <prvResetNextTaskUnblockTime+0x38>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	4a04      	ldr	r2, [pc, #16]	@ (80085d4 <prvResetNextTaskUnblockTime+0x3c>)
 80085c2:	6013      	str	r3, [r2, #0]
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr
 80085d0:	20000e9c 	.word	0x20000e9c
 80085d4:	20000f04 	.word	0x20000f04

080085d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085de:	4b0b      	ldr	r3, [pc, #44]	@ (800860c <xTaskGetSchedulerState+0x34>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d102      	bne.n	80085ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085e6:	2301      	movs	r3, #1
 80085e8:	607b      	str	r3, [r7, #4]
 80085ea:	e008      	b.n	80085fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085ec:	4b08      	ldr	r3, [pc, #32]	@ (8008610 <xTaskGetSchedulerState+0x38>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d102      	bne.n	80085fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80085f4:	2302      	movs	r3, #2
 80085f6:	607b      	str	r3, [r7, #4]
 80085f8:	e001      	b.n	80085fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80085fa:	2300      	movs	r3, #0
 80085fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80085fe:	687b      	ldr	r3, [r7, #4]
	}
 8008600:	4618      	mov	r0, r3
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	20000ef0 	.word	0x20000ef0
 8008610:	20000f0c 	.word	0x20000f0c

08008614 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008620:	2300      	movs	r3, #0
 8008622:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d058      	beq.n	80086dc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800862a:	4b2f      	ldr	r3, [pc, #188]	@ (80086e8 <xTaskPriorityDisinherit+0xd4>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	429a      	cmp	r2, r3
 8008632:	d00b      	beq.n	800864c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	60fb      	str	r3, [r7, #12]
}
 8008646:	bf00      	nop
 8008648:	bf00      	nop
 800864a:	e7fd      	b.n	8008648 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10b      	bne.n	800866c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008658:	f383 8811 	msr	BASEPRI, r3
 800865c:	f3bf 8f6f 	isb	sy
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	60bb      	str	r3, [r7, #8]
}
 8008666:	bf00      	nop
 8008668:	bf00      	nop
 800866a:	e7fd      	b.n	8008668 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008670:	1e5a      	subs	r2, r3, #1
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800867e:	429a      	cmp	r2, r3
 8008680:	d02c      	beq.n	80086dc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008686:	2b00      	cmp	r3, #0
 8008688:	d128      	bne.n	80086dc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	3304      	adds	r3, #4
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe fc26 	bl	8006ee0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ac:	4b0f      	ldr	r3, [pc, #60]	@ (80086ec <xTaskPriorityDisinherit+0xd8>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d903      	bls.n	80086bc <xTaskPriorityDisinherit+0xa8>
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b8:	4a0c      	ldr	r2, [pc, #48]	@ (80086ec <xTaskPriorityDisinherit+0xd8>)
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086c0:	4613      	mov	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4a09      	ldr	r2, [pc, #36]	@ (80086f0 <xTaskPriorityDisinherit+0xdc>)
 80086ca:	441a      	add	r2, r3
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	3304      	adds	r3, #4
 80086d0:	4619      	mov	r1, r3
 80086d2:	4610      	mov	r0, r2
 80086d4:	f7fe fba7 	bl	8006e26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086d8:	2301      	movs	r3, #1
 80086da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086dc:	697b      	ldr	r3, [r7, #20]
	}
 80086de:	4618      	mov	r0, r3
 80086e0:	3718      	adds	r7, #24
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	20000a10 	.word	0x20000a10
 80086ec:	20000eec 	.word	0x20000eec
 80086f0:	20000a14 	.word	0x20000a14

080086f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086fe:	4b21      	ldr	r3, [pc, #132]	@ (8008784 <prvAddCurrentTaskToDelayedList+0x90>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008704:	4b20      	ldr	r3, [pc, #128]	@ (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3304      	adds	r3, #4
 800870a:	4618      	mov	r0, r3
 800870c:	f7fe fbe8 	bl	8006ee0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008716:	d10a      	bne.n	800872e <prvAddCurrentTaskToDelayedList+0x3a>
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d007      	beq.n	800872e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800871e:	4b1a      	ldr	r3, [pc, #104]	@ (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3304      	adds	r3, #4
 8008724:	4619      	mov	r1, r3
 8008726:	4819      	ldr	r0, [pc, #100]	@ (800878c <prvAddCurrentTaskToDelayedList+0x98>)
 8008728:	f7fe fb7d 	bl	8006e26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800872c:	e026      	b.n	800877c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4413      	add	r3, r2
 8008734:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008736:	4b14      	ldr	r3, [pc, #80]	@ (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	429a      	cmp	r2, r3
 8008744:	d209      	bcs.n	800875a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008746:	4b12      	ldr	r3, [pc, #72]	@ (8008790 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	4b0f      	ldr	r3, [pc, #60]	@ (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3304      	adds	r3, #4
 8008750:	4619      	mov	r1, r3
 8008752:	4610      	mov	r0, r2
 8008754:	f7fe fb8b 	bl	8006e6e <vListInsert>
}
 8008758:	e010      	b.n	800877c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800875a:	4b0e      	ldr	r3, [pc, #56]	@ (8008794 <prvAddCurrentTaskToDelayedList+0xa0>)
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	4b0a      	ldr	r3, [pc, #40]	@ (8008788 <prvAddCurrentTaskToDelayedList+0x94>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3304      	adds	r3, #4
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f7fe fb81 	bl	8006e6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800876c:	4b0a      	ldr	r3, [pc, #40]	@ (8008798 <prvAddCurrentTaskToDelayedList+0xa4>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	429a      	cmp	r2, r3
 8008774:	d202      	bcs.n	800877c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008776:	4a08      	ldr	r2, [pc, #32]	@ (8008798 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	6013      	str	r3, [r2, #0]
}
 800877c:	bf00      	nop
 800877e:	3710      	adds	r7, #16
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20000ee8 	.word	0x20000ee8
 8008788:	20000a10 	.word	0x20000a10
 800878c:	20000ed0 	.word	0x20000ed0
 8008790:	20000ea0 	.word	0x20000ea0
 8008794:	20000e9c 	.word	0x20000e9c
 8008798:	20000f04 	.word	0x20000f04

0800879c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b08a      	sub	sp, #40	@ 0x28
 80087a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80087a2:	2300      	movs	r3, #0
 80087a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80087a6:	f000 fb13 	bl	8008dd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80087aa:	4b1d      	ldr	r3, [pc, #116]	@ (8008820 <xTimerCreateTimerTask+0x84>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d021      	beq.n	80087f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80087ba:	1d3a      	adds	r2, r7, #4
 80087bc:	f107 0108 	add.w	r1, r7, #8
 80087c0:	f107 030c 	add.w	r3, r7, #12
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fe fae7 	bl	8006d98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	9202      	str	r2, [sp, #8]
 80087d2:	9301      	str	r3, [sp, #4]
 80087d4:	2302      	movs	r3, #2
 80087d6:	9300      	str	r3, [sp, #0]
 80087d8:	2300      	movs	r3, #0
 80087da:	460a      	mov	r2, r1
 80087dc:	4911      	ldr	r1, [pc, #68]	@ (8008824 <xTimerCreateTimerTask+0x88>)
 80087de:	4812      	ldr	r0, [pc, #72]	@ (8008828 <xTimerCreateTimerTask+0x8c>)
 80087e0:	f7ff f8a2 	bl	8007928 <xTaskCreateStatic>
 80087e4:	4603      	mov	r3, r0
 80087e6:	4a11      	ldr	r2, [pc, #68]	@ (800882c <xTimerCreateTimerTask+0x90>)
 80087e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80087ea:	4b10      	ldr	r3, [pc, #64]	@ (800882c <xTimerCreateTimerTask+0x90>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80087f2:	2301      	movs	r3, #1
 80087f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10b      	bne.n	8008814 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80087fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008800:	f383 8811 	msr	BASEPRI, r3
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	f3bf 8f4f 	dsb	sy
 800880c:	613b      	str	r3, [r7, #16]
}
 800880e:	bf00      	nop
 8008810:	bf00      	nop
 8008812:	e7fd      	b.n	8008810 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008814:	697b      	ldr	r3, [r7, #20]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20000f40 	.word	0x20000f40
 8008824:	08009900 	.word	0x08009900
 8008828:	08008969 	.word	0x08008969
 800882c:	20000f44 	.word	0x20000f44

08008830 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b08a      	sub	sp, #40	@ 0x28
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
 800883c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800883e:	2300      	movs	r3, #0
 8008840:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10b      	bne.n	8008860 <xTimerGenericCommand+0x30>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	623b      	str	r3, [r7, #32]
}
 800885a:	bf00      	nop
 800885c:	bf00      	nop
 800885e:	e7fd      	b.n	800885c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008860:	4b19      	ldr	r3, [pc, #100]	@ (80088c8 <xTimerGenericCommand+0x98>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d02a      	beq.n	80088be <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2b05      	cmp	r3, #5
 8008878:	dc18      	bgt.n	80088ac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800887a:	f7ff fead 	bl	80085d8 <xTaskGetSchedulerState>
 800887e:	4603      	mov	r3, r0
 8008880:	2b02      	cmp	r3, #2
 8008882:	d109      	bne.n	8008898 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008884:	4b10      	ldr	r3, [pc, #64]	@ (80088c8 <xTimerGenericCommand+0x98>)
 8008886:	6818      	ldr	r0, [r3, #0]
 8008888:	f107 0110 	add.w	r1, r7, #16
 800888c:	2300      	movs	r3, #0
 800888e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008890:	f7fe fc5a 	bl	8007148 <xQueueGenericSend>
 8008894:	6278      	str	r0, [r7, #36]	@ 0x24
 8008896:	e012      	b.n	80088be <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008898:	4b0b      	ldr	r3, [pc, #44]	@ (80088c8 <xTimerGenericCommand+0x98>)
 800889a:	6818      	ldr	r0, [r3, #0]
 800889c:	f107 0110 	add.w	r1, r7, #16
 80088a0:	2300      	movs	r3, #0
 80088a2:	2200      	movs	r2, #0
 80088a4:	f7fe fc50 	bl	8007148 <xQueueGenericSend>
 80088a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80088aa:	e008      	b.n	80088be <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80088ac:	4b06      	ldr	r3, [pc, #24]	@ (80088c8 <xTimerGenericCommand+0x98>)
 80088ae:	6818      	ldr	r0, [r3, #0]
 80088b0:	f107 0110 	add.w	r1, r7, #16
 80088b4:	2300      	movs	r3, #0
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	f7fe fd48 	bl	800734c <xQueueGenericSendFromISR>
 80088bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80088be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3728      	adds	r7, #40	@ 0x28
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	20000f40 	.word	0x20000f40

080088cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af02      	add	r7, sp, #8
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d6:	4b23      	ldr	r3, [pc, #140]	@ (8008964 <prvProcessExpiredTimer+0x98>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	3304      	adds	r3, #4
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fe fafb 	bl	8006ee0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088f0:	f003 0304 	and.w	r3, r3, #4
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d023      	beq.n	8008940 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	699a      	ldr	r2, [r3, #24]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	18d1      	adds	r1, r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	6978      	ldr	r0, [r7, #20]
 8008906:	f000 f8d5 	bl	8008ab4 <prvInsertTimerInActiveList>
 800890a:	4603      	mov	r3, r0
 800890c:	2b00      	cmp	r3, #0
 800890e:	d020      	beq.n	8008952 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008910:	2300      	movs	r3, #0
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	2300      	movs	r3, #0
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	2100      	movs	r1, #0
 800891a:	6978      	ldr	r0, [r7, #20]
 800891c:	f7ff ff88 	bl	8008830 <xTimerGenericCommand>
 8008920:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d114      	bne.n	8008952 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892c:	f383 8811 	msr	BASEPRI, r3
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	60fb      	str	r3, [r7, #12]
}
 800893a:	bf00      	nop
 800893c:	bf00      	nop
 800893e:	e7fd      	b.n	800893c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008946:	f023 0301 	bic.w	r3, r3, #1
 800894a:	b2da      	uxtb	r2, r3
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	6978      	ldr	r0, [r7, #20]
 8008958:	4798      	blx	r3
}
 800895a:	bf00      	nop
 800895c:	3718      	adds	r7, #24
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	20000f38 	.word	0x20000f38

08008968 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008970:	f107 0308 	add.w	r3, r7, #8
 8008974:	4618      	mov	r0, r3
 8008976:	f000 f859 	bl	8008a2c <prvGetNextExpireTime>
 800897a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	4619      	mov	r1, r3
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f805 	bl	8008990 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008986:	f000 f8d7 	bl	8008b38 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800898a:	bf00      	nop
 800898c:	e7f0      	b.n	8008970 <prvTimerTask+0x8>
	...

08008990 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800899a:	f7ff fa29 	bl	8007df0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800899e:	f107 0308 	add.w	r3, r7, #8
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 f866 	bl	8008a74 <prvSampleTimeNow>
 80089a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d130      	bne.n	8008a12 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10a      	bne.n	80089cc <prvProcessTimerOrBlockTask+0x3c>
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d806      	bhi.n	80089cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80089be:	f7ff fa25 	bl	8007e0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80089c2:	68f9      	ldr	r1, [r7, #12]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7ff ff81 	bl	80088cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80089ca:	e024      	b.n	8008a16 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d008      	beq.n	80089e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80089d2:	4b13      	ldr	r3, [pc, #76]	@ (8008a20 <prvProcessTimerOrBlockTask+0x90>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <prvProcessTimerOrBlockTask+0x50>
 80089dc:	2301      	movs	r3, #1
 80089de:	e000      	b.n	80089e2 <prvProcessTimerOrBlockTask+0x52>
 80089e0:	2300      	movs	r3, #0
 80089e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80089e4:	4b0f      	ldr	r3, [pc, #60]	@ (8008a24 <prvProcessTimerOrBlockTask+0x94>)
 80089e6:	6818      	ldr	r0, [r3, #0]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	4619      	mov	r1, r3
 80089f2:	f7fe ff65 	bl	80078c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80089f6:	f7ff fa09 	bl	8007e0c <xTaskResumeAll>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10a      	bne.n	8008a16 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008a00:	4b09      	ldr	r3, [pc, #36]	@ (8008a28 <prvProcessTimerOrBlockTask+0x98>)
 8008a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	f3bf 8f6f 	isb	sy
}
 8008a10:	e001      	b.n	8008a16 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008a12:	f7ff f9fb 	bl	8007e0c <xTaskResumeAll>
}
 8008a16:	bf00      	nop
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	20000f3c 	.word	0x20000f3c
 8008a24:	20000f40 	.word	0x20000f40
 8008a28:	e000ed04 	.word	0xe000ed04

08008a2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a34:	4b0e      	ldr	r3, [pc, #56]	@ (8008a70 <prvGetNextExpireTime+0x44>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d101      	bne.n	8008a42 <prvGetNextExpireTime+0x16>
 8008a3e:	2201      	movs	r2, #1
 8008a40:	e000      	b.n	8008a44 <prvGetNextExpireTime+0x18>
 8008a42:	2200      	movs	r2, #0
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d105      	bne.n	8008a5c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a50:	4b07      	ldr	r3, [pc, #28]	@ (8008a70 <prvGetNextExpireTime+0x44>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	60fb      	str	r3, [r7, #12]
 8008a5a:	e001      	b.n	8008a60 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a60:	68fb      	ldr	r3, [r7, #12]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	20000f38 	.word	0x20000f38

08008a74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a7c:	f7ff fa64 	bl	8007f48 <xTaskGetTickCount>
 8008a80:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a82:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab0 <prvSampleTimeNow+0x3c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d205      	bcs.n	8008a98 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a8c:	f000 f93a 	bl	8008d04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	e002      	b.n	8008a9e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a9e:	4a04      	ldr	r2, [pc, #16]	@ (8008ab0 <prvSampleTimeNow+0x3c>)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	20000f48 	.word	0x20000f48

08008ab4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
 8008ac0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008ad2:	68ba      	ldr	r2, [r7, #8]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d812      	bhi.n	8008b00 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	1ad2      	subs	r2, r2, r3
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d302      	bcc.n	8008aee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	617b      	str	r3, [r7, #20]
 8008aec:	e01b      	b.n	8008b26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008aee:	4b10      	ldr	r3, [pc, #64]	@ (8008b30 <prvInsertTimerInActiveList+0x7c>)
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	3304      	adds	r3, #4
 8008af6:	4619      	mov	r1, r3
 8008af8:	4610      	mov	r0, r2
 8008afa:	f7fe f9b8 	bl	8006e6e <vListInsert>
 8008afe:	e012      	b.n	8008b26 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d206      	bcs.n	8008b16 <prvInsertTimerInActiveList+0x62>
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d302      	bcc.n	8008b16 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008b10:	2301      	movs	r3, #1
 8008b12:	617b      	str	r3, [r7, #20]
 8008b14:	e007      	b.n	8008b26 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b16:	4b07      	ldr	r3, [pc, #28]	@ (8008b34 <prvInsertTimerInActiveList+0x80>)
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	4619      	mov	r1, r3
 8008b20:	4610      	mov	r0, r2
 8008b22:	f7fe f9a4 	bl	8006e6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008b26:	697b      	ldr	r3, [r7, #20]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	20000f3c 	.word	0x20000f3c
 8008b34:	20000f38 	.word	0x20000f38

08008b38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b08e      	sub	sp, #56	@ 0x38
 8008b3c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b3e:	e0ce      	b.n	8008cde <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	da19      	bge.n	8008b7a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008b46:	1d3b      	adds	r3, r7, #4
 8008b48:	3304      	adds	r3, #4
 8008b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10b      	bne.n	8008b6a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	61fb      	str	r3, [r7, #28]
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop
 8008b68:	e7fd      	b.n	8008b66 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b70:	6850      	ldr	r0, [r2, #4]
 8008b72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b74:	6892      	ldr	r2, [r2, #8]
 8008b76:	4611      	mov	r1, r2
 8008b78:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f2c0 80ae 	blt.w	8008cde <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b88:	695b      	ldr	r3, [r3, #20]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d004      	beq.n	8008b98 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b90:	3304      	adds	r3, #4
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe f9a4 	bl	8006ee0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b98:	463b      	mov	r3, r7
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff ff6a 	bl	8008a74 <prvSampleTimeNow>
 8008ba0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b09      	cmp	r3, #9
 8008ba6:	f200 8097 	bhi.w	8008cd8 <prvProcessReceivedCommands+0x1a0>
 8008baa:	a201      	add	r2, pc, #4	@ (adr r2, 8008bb0 <prvProcessReceivedCommands+0x78>)
 8008bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb0:	08008bd9 	.word	0x08008bd9
 8008bb4:	08008bd9 	.word	0x08008bd9
 8008bb8:	08008bd9 	.word	0x08008bd9
 8008bbc:	08008c4f 	.word	0x08008c4f
 8008bc0:	08008c63 	.word	0x08008c63
 8008bc4:	08008caf 	.word	0x08008caf
 8008bc8:	08008bd9 	.word	0x08008bd9
 8008bcc:	08008bd9 	.word	0x08008bd9
 8008bd0:	08008c4f 	.word	0x08008c4f
 8008bd4:	08008c63 	.word	0x08008c63
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bde:	f043 0301 	orr.w	r3, r3, #1
 8008be2:	b2da      	uxtb	r2, r3
 8008be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	18d1      	adds	r1, r2, r3
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bf8:	f7ff ff5c 	bl	8008ab4 <prvInsertTimerInActiveList>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d06c      	beq.n	8008cdc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c04:	6a1b      	ldr	r3, [r3, #32]
 8008c06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c10:	f003 0304 	and.w	r3, r3, #4
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d061      	beq.n	8008cdc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	441a      	add	r2, r3
 8008c20:	2300      	movs	r3, #0
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	2300      	movs	r3, #0
 8008c26:	2100      	movs	r1, #0
 8008c28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c2a:	f7ff fe01 	bl	8008830 <xTimerGenericCommand>
 8008c2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008c30:	6a3b      	ldr	r3, [r7, #32]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d152      	bne.n	8008cdc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	61bb      	str	r3, [r7, #24]
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	e7fd      	b.n	8008c4a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c54:	f023 0301 	bic.w	r3, r3, #1
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008c60:	e03d      	b.n	8008cde <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c68:	f043 0301 	orr.w	r3, r3, #1
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10b      	bne.n	8008c9a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	617b      	str	r3, [r7, #20]
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop
 8008c98:	e7fd      	b.n	8008c96 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c9c:	699a      	ldr	r2, [r3, #24]
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca0:	18d1      	adds	r1, r2, r3
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ca6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ca8:	f7ff ff04 	bl	8008ab4 <prvInsertTimerInActiveList>
					break;
 8008cac:	e017      	b.n	8008cde <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cb4:	f003 0302 	and.w	r3, r3, #2
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d103      	bne.n	8008cc4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008cbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008cbe:	f000 fbeb 	bl	8009498 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008cc2:	e00c      	b.n	8008cde <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cca:	f023 0301 	bic.w	r3, r3, #1
 8008cce:	b2da      	uxtb	r2, r3
 8008cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008cd6:	e002      	b.n	8008cde <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008cd8:	bf00      	nop
 8008cda:	e000      	b.n	8008cde <prvProcessReceivedCommands+0x1a6>
					break;
 8008cdc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cde:	4b08      	ldr	r3, [pc, #32]	@ (8008d00 <prvProcessReceivedCommands+0x1c8>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	1d39      	adds	r1, r7, #4
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fe fbce 	bl	8007488 <xQueueReceive>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f47f af26 	bne.w	8008b40 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop
 8008cf8:	3730      	adds	r7, #48	@ 0x30
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20000f40 	.word	0x20000f40

08008d04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d0a:	e049      	b.n	8008da0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8008dc8 <prvSwitchTimerLists+0xc4>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d16:	4b2c      	ldr	r3, [pc, #176]	@ (8008dc8 <prvSwitchTimerLists+0xc4>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	3304      	adds	r3, #4
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7fe f8db 	bl	8006ee0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6a1b      	ldr	r3, [r3, #32]
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d38:	f003 0304 	and.w	r3, r3, #4
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d02f      	beq.n	8008da0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	4413      	add	r3, r2
 8008d48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d90e      	bls.n	8008d70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8008dc8 <prvSwitchTimerLists+0xc4>)
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3304      	adds	r3, #4
 8008d66:	4619      	mov	r1, r3
 8008d68:	4610      	mov	r0, r2
 8008d6a:	f7fe f880 	bl	8006e6e <vListInsert>
 8008d6e:	e017      	b.n	8008da0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d70:	2300      	movs	r3, #0
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	2300      	movs	r3, #0
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	2100      	movs	r1, #0
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f7ff fd58 	bl	8008830 <xTimerGenericCommand>
 8008d80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10b      	bne.n	8008da0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8c:	f383 8811 	msr	BASEPRI, r3
 8008d90:	f3bf 8f6f 	isb	sy
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	603b      	str	r3, [r7, #0]
}
 8008d9a:	bf00      	nop
 8008d9c:	bf00      	nop
 8008d9e:	e7fd      	b.n	8008d9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008da0:	4b09      	ldr	r3, [pc, #36]	@ (8008dc8 <prvSwitchTimerLists+0xc4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1b0      	bne.n	8008d0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008daa:	4b07      	ldr	r3, [pc, #28]	@ (8008dc8 <prvSwitchTimerLists+0xc4>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008db0:	4b06      	ldr	r3, [pc, #24]	@ (8008dcc <prvSwitchTimerLists+0xc8>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a04      	ldr	r2, [pc, #16]	@ (8008dc8 <prvSwitchTimerLists+0xc4>)
 8008db6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008db8:	4a04      	ldr	r2, [pc, #16]	@ (8008dcc <prvSwitchTimerLists+0xc8>)
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	6013      	str	r3, [r2, #0]
}
 8008dbe:	bf00      	nop
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	20000f38 	.word	0x20000f38
 8008dcc:	20000f3c 	.word	0x20000f3c

08008dd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008dd6:	f000 f96f 	bl	80090b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008dda:	4b15      	ldr	r3, [pc, #84]	@ (8008e30 <prvCheckForValidListAndQueue+0x60>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d120      	bne.n	8008e24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008de2:	4814      	ldr	r0, [pc, #80]	@ (8008e34 <prvCheckForValidListAndQueue+0x64>)
 8008de4:	f7fd fff2 	bl	8006dcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008de8:	4813      	ldr	r0, [pc, #76]	@ (8008e38 <prvCheckForValidListAndQueue+0x68>)
 8008dea:	f7fd ffef 	bl	8006dcc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008dee:	4b13      	ldr	r3, [pc, #76]	@ (8008e3c <prvCheckForValidListAndQueue+0x6c>)
 8008df0:	4a10      	ldr	r2, [pc, #64]	@ (8008e34 <prvCheckForValidListAndQueue+0x64>)
 8008df2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008df4:	4b12      	ldr	r3, [pc, #72]	@ (8008e40 <prvCheckForValidListAndQueue+0x70>)
 8008df6:	4a10      	ldr	r2, [pc, #64]	@ (8008e38 <prvCheckForValidListAndQueue+0x68>)
 8008df8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	4b11      	ldr	r3, [pc, #68]	@ (8008e44 <prvCheckForValidListAndQueue+0x74>)
 8008e00:	4a11      	ldr	r2, [pc, #68]	@ (8008e48 <prvCheckForValidListAndQueue+0x78>)
 8008e02:	2110      	movs	r1, #16
 8008e04:	200a      	movs	r0, #10
 8008e06:	f7fe f8ff 	bl	8007008 <xQueueGenericCreateStatic>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	4a08      	ldr	r2, [pc, #32]	@ (8008e30 <prvCheckForValidListAndQueue+0x60>)
 8008e0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008e10:	4b07      	ldr	r3, [pc, #28]	@ (8008e30 <prvCheckForValidListAndQueue+0x60>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d005      	beq.n	8008e24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008e18:	4b05      	ldr	r3, [pc, #20]	@ (8008e30 <prvCheckForValidListAndQueue+0x60>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	490b      	ldr	r1, [pc, #44]	@ (8008e4c <prvCheckForValidListAndQueue+0x7c>)
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fe fd24 	bl	800786c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e24:	f000 f97a 	bl	800911c <vPortExitCritical>
}
 8008e28:	bf00      	nop
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	20000f40 	.word	0x20000f40
 8008e34:	20000f10 	.word	0x20000f10
 8008e38:	20000f24 	.word	0x20000f24
 8008e3c:	20000f38 	.word	0x20000f38
 8008e40:	20000f3c 	.word	0x20000f3c
 8008e44:	20000fec 	.word	0x20000fec
 8008e48:	20000f4c 	.word	0x20000f4c
 8008e4c:	08009908 	.word	0x08009908

08008e50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	3b04      	subs	r3, #4
 8008e60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	3b04      	subs	r3, #4
 8008e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	f023 0201 	bic.w	r2, r3, #1
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3b04      	subs	r3, #4
 8008e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e80:	4a0c      	ldr	r2, [pc, #48]	@ (8008eb4 <pxPortInitialiseStack+0x64>)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3b14      	subs	r3, #20
 8008e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3b04      	subs	r3, #4
 8008e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f06f 0202 	mvn.w	r2, #2
 8008e9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	3b20      	subs	r3, #32
 8008ea4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	08008eb9 	.word	0x08008eb9

08008eb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008ec2:	4b13      	ldr	r3, [pc, #76]	@ (8008f10 <prvTaskExitError+0x58>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eca:	d00b      	beq.n	8008ee4 <prvTaskExitError+0x2c>
	__asm volatile
 8008ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ed0:	f383 8811 	msr	BASEPRI, r3
 8008ed4:	f3bf 8f6f 	isb	sy
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	60fb      	str	r3, [r7, #12]
}
 8008ede:	bf00      	nop
 8008ee0:	bf00      	nop
 8008ee2:	e7fd      	b.n	8008ee0 <prvTaskExitError+0x28>
	__asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	60bb      	str	r3, [r7, #8]
}
 8008ef6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ef8:	bf00      	nop
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d0fc      	beq.n	8008efa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f00:	bf00      	nop
 8008f02:	bf00      	nop
 8008f04:	3714      	adds	r7, #20
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	2000000c 	.word	0x2000000c
	...

08008f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f20:	4b07      	ldr	r3, [pc, #28]	@ (8008f40 <pxCurrentTCBConst2>)
 8008f22:	6819      	ldr	r1, [r3, #0]
 8008f24:	6808      	ldr	r0, [r1, #0]
 8008f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2a:	f380 8809 	msr	PSP, r0
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f04f 0000 	mov.w	r0, #0
 8008f36:	f380 8811 	msr	BASEPRI, r0
 8008f3a:	4770      	bx	lr
 8008f3c:	f3af 8000 	nop.w

08008f40 <pxCurrentTCBConst2>:
 8008f40:	20000a10 	.word	0x20000a10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop

08008f48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f48:	4808      	ldr	r0, [pc, #32]	@ (8008f6c <prvPortStartFirstTask+0x24>)
 8008f4a:	6800      	ldr	r0, [r0, #0]
 8008f4c:	6800      	ldr	r0, [r0, #0]
 8008f4e:	f380 8808 	msr	MSP, r0
 8008f52:	f04f 0000 	mov.w	r0, #0
 8008f56:	f380 8814 	msr	CONTROL, r0
 8008f5a:	b662      	cpsie	i
 8008f5c:	b661      	cpsie	f
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	df00      	svc	0
 8008f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f6a:	bf00      	nop
 8008f6c:	e000ed08 	.word	0xe000ed08

08008f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f76:	4b47      	ldr	r3, [pc, #284]	@ (8009094 <xPortStartScheduler+0x124>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a47      	ldr	r2, [pc, #284]	@ (8009098 <xPortStartScheduler+0x128>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d10b      	bne.n	8008f98 <xPortStartScheduler+0x28>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	613b      	str	r3, [r7, #16]
}
 8008f92:	bf00      	nop
 8008f94:	bf00      	nop
 8008f96:	e7fd      	b.n	8008f94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f98:	4b3e      	ldr	r3, [pc, #248]	@ (8009094 <xPortStartScheduler+0x124>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a3f      	ldr	r2, [pc, #252]	@ (800909c <xPortStartScheduler+0x12c>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d10b      	bne.n	8008fba <xPortStartScheduler+0x4a>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	60fb      	str	r3, [r7, #12]
}
 8008fb4:	bf00      	nop
 8008fb6:	bf00      	nop
 8008fb8:	e7fd      	b.n	8008fb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008fba:	4b39      	ldr	r3, [pc, #228]	@ (80090a0 <xPortStartScheduler+0x130>)
 8008fbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	22ff      	movs	r2, #255	@ 0xff
 8008fca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008fd4:	78fb      	ldrb	r3, [r7, #3]
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	4b31      	ldr	r3, [pc, #196]	@ (80090a4 <xPortStartScheduler+0x134>)
 8008fe0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008fe2:	4b31      	ldr	r3, [pc, #196]	@ (80090a8 <xPortStartScheduler+0x138>)
 8008fe4:	2207      	movs	r2, #7
 8008fe6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fe8:	e009      	b.n	8008ffe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008fea:	4b2f      	ldr	r3, [pc, #188]	@ (80090a8 <xPortStartScheduler+0x138>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	4a2d      	ldr	r2, [pc, #180]	@ (80090a8 <xPortStartScheduler+0x138>)
 8008ff2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ff4:	78fb      	ldrb	r3, [r7, #3]
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	005b      	lsls	r3, r3, #1
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ffe:	78fb      	ldrb	r3, [r7, #3]
 8009000:	b2db      	uxtb	r3, r3
 8009002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009006:	2b80      	cmp	r3, #128	@ 0x80
 8009008:	d0ef      	beq.n	8008fea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800900a:	4b27      	ldr	r3, [pc, #156]	@ (80090a8 <xPortStartScheduler+0x138>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f1c3 0307 	rsb	r3, r3, #7
 8009012:	2b04      	cmp	r3, #4
 8009014:	d00b      	beq.n	800902e <xPortStartScheduler+0xbe>
	__asm volatile
 8009016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	60bb      	str	r3, [r7, #8]
}
 8009028:	bf00      	nop
 800902a:	bf00      	nop
 800902c:	e7fd      	b.n	800902a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800902e:	4b1e      	ldr	r3, [pc, #120]	@ (80090a8 <xPortStartScheduler+0x138>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	021b      	lsls	r3, r3, #8
 8009034:	4a1c      	ldr	r2, [pc, #112]	@ (80090a8 <xPortStartScheduler+0x138>)
 8009036:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009038:	4b1b      	ldr	r3, [pc, #108]	@ (80090a8 <xPortStartScheduler+0x138>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009040:	4a19      	ldr	r2, [pc, #100]	@ (80090a8 <xPortStartScheduler+0x138>)
 8009042:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	b2da      	uxtb	r2, r3
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800904c:	4b17      	ldr	r3, [pc, #92]	@ (80090ac <xPortStartScheduler+0x13c>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a16      	ldr	r2, [pc, #88]	@ (80090ac <xPortStartScheduler+0x13c>)
 8009052:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009056:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009058:	4b14      	ldr	r3, [pc, #80]	@ (80090ac <xPortStartScheduler+0x13c>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a13      	ldr	r2, [pc, #76]	@ (80090ac <xPortStartScheduler+0x13c>)
 800905e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009062:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009064:	f000 f8da 	bl	800921c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009068:	4b11      	ldr	r3, [pc, #68]	@ (80090b0 <xPortStartScheduler+0x140>)
 800906a:	2200      	movs	r2, #0
 800906c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800906e:	f000 f8f9 	bl	8009264 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009072:	4b10      	ldr	r3, [pc, #64]	@ (80090b4 <xPortStartScheduler+0x144>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a0f      	ldr	r2, [pc, #60]	@ (80090b4 <xPortStartScheduler+0x144>)
 8009078:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800907c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800907e:	f7ff ff63 	bl	8008f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009082:	f7ff f82b 	bl	80080dc <vTaskSwitchContext>
	prvTaskExitError();
 8009086:	f7ff ff17 	bl	8008eb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3718      	adds	r7, #24
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	e000ed00 	.word	0xe000ed00
 8009098:	410fc271 	.word	0x410fc271
 800909c:	410fc270 	.word	0x410fc270
 80090a0:	e000e400 	.word	0xe000e400
 80090a4:	2000103c 	.word	0x2000103c
 80090a8:	20001040 	.word	0x20001040
 80090ac:	e000ed20 	.word	0xe000ed20
 80090b0:	2000000c 	.word	0x2000000c
 80090b4:	e000ef34 	.word	0xe000ef34

080090b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
	__asm volatile
 80090be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	607b      	str	r3, [r7, #4]
}
 80090d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80090d2:	4b10      	ldr	r3, [pc, #64]	@ (8009114 <vPortEnterCritical+0x5c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	3301      	adds	r3, #1
 80090d8:	4a0e      	ldr	r2, [pc, #56]	@ (8009114 <vPortEnterCritical+0x5c>)
 80090da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80090dc:	4b0d      	ldr	r3, [pc, #52]	@ (8009114 <vPortEnterCritical+0x5c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d110      	bne.n	8009106 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80090e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009118 <vPortEnterCritical+0x60>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00b      	beq.n	8009106 <vPortEnterCritical+0x4e>
	__asm volatile
 80090ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	603b      	str	r3, [r7, #0]
}
 8009100:	bf00      	nop
 8009102:	bf00      	nop
 8009104:	e7fd      	b.n	8009102 <vPortEnterCritical+0x4a>
	}
}
 8009106:	bf00      	nop
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	2000000c 	.word	0x2000000c
 8009118:	e000ed04 	.word	0xe000ed04

0800911c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009122:	4b12      	ldr	r3, [pc, #72]	@ (800916c <vPortExitCritical+0x50>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d10b      	bne.n	8009142 <vPortExitCritical+0x26>
	__asm volatile
 800912a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912e:	f383 8811 	msr	BASEPRI, r3
 8009132:	f3bf 8f6f 	isb	sy
 8009136:	f3bf 8f4f 	dsb	sy
 800913a:	607b      	str	r3, [r7, #4]
}
 800913c:	bf00      	nop
 800913e:	bf00      	nop
 8009140:	e7fd      	b.n	800913e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009142:	4b0a      	ldr	r3, [pc, #40]	@ (800916c <vPortExitCritical+0x50>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3b01      	subs	r3, #1
 8009148:	4a08      	ldr	r2, [pc, #32]	@ (800916c <vPortExitCritical+0x50>)
 800914a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800914c:	4b07      	ldr	r3, [pc, #28]	@ (800916c <vPortExitCritical+0x50>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d105      	bne.n	8009160 <vPortExitCritical+0x44>
 8009154:	2300      	movs	r3, #0
 8009156:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	f383 8811 	msr	BASEPRI, r3
}
 800915e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr
 800916c:	2000000c 	.word	0x2000000c

08009170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009170:	f3ef 8009 	mrs	r0, PSP
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	4b15      	ldr	r3, [pc, #84]	@ (80091d0 <pxCurrentTCBConst>)
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	f01e 0f10 	tst.w	lr, #16
 8009180:	bf08      	it	eq
 8009182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918a:	6010      	str	r0, [r2, #0]
 800918c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009190:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009194:	f380 8811 	msr	BASEPRI, r0
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	f3bf 8f6f 	isb	sy
 80091a0:	f7fe ff9c 	bl	80080dc <vTaskSwitchContext>
 80091a4:	f04f 0000 	mov.w	r0, #0
 80091a8:	f380 8811 	msr	BASEPRI, r0
 80091ac:	bc09      	pop	{r0, r3}
 80091ae:	6819      	ldr	r1, [r3, #0]
 80091b0:	6808      	ldr	r0, [r1, #0]
 80091b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b6:	f01e 0f10 	tst.w	lr, #16
 80091ba:	bf08      	it	eq
 80091bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80091c0:	f380 8809 	msr	PSP, r0
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	f3af 8000 	nop.w

080091d0 <pxCurrentTCBConst>:
 80091d0:	20000a10 	.word	0x20000a10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80091d4:	bf00      	nop
 80091d6:	bf00      	nop

080091d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	607b      	str	r3, [r7, #4]
}
 80091f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091f2:	f7fe feb9 	bl	8007f68 <xTaskIncrementTick>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d003      	beq.n	8009204 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091fc:	4b06      	ldr	r3, [pc, #24]	@ (8009218 <xPortSysTickHandler+0x40>)
 80091fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	2300      	movs	r3, #0
 8009206:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	f383 8811 	msr	BASEPRI, r3
}
 800920e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	e000ed04 	.word	0xe000ed04

0800921c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800921c:	b480      	push	{r7}
 800921e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009220:	4b0b      	ldr	r3, [pc, #44]	@ (8009250 <vPortSetupTimerInterrupt+0x34>)
 8009222:	2200      	movs	r2, #0
 8009224:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009226:	4b0b      	ldr	r3, [pc, #44]	@ (8009254 <vPortSetupTimerInterrupt+0x38>)
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800922c:	4b0a      	ldr	r3, [pc, #40]	@ (8009258 <vPortSetupTimerInterrupt+0x3c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a0a      	ldr	r2, [pc, #40]	@ (800925c <vPortSetupTimerInterrupt+0x40>)
 8009232:	fba2 2303 	umull	r2, r3, r2, r3
 8009236:	099b      	lsrs	r3, r3, #6
 8009238:	4a09      	ldr	r2, [pc, #36]	@ (8009260 <vPortSetupTimerInterrupt+0x44>)
 800923a:	3b01      	subs	r3, #1
 800923c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800923e:	4b04      	ldr	r3, [pc, #16]	@ (8009250 <vPortSetupTimerInterrupt+0x34>)
 8009240:	2207      	movs	r2, #7
 8009242:	601a      	str	r2, [r3, #0]
}
 8009244:	bf00      	nop
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	e000e010 	.word	0xe000e010
 8009254:	e000e018 	.word	0xe000e018
 8009258:	20000000 	.word	0x20000000
 800925c:	10624dd3 	.word	0x10624dd3
 8009260:	e000e014 	.word	0xe000e014

08009264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009264:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009274 <vPortEnableVFP+0x10>
 8009268:	6801      	ldr	r1, [r0, #0]
 800926a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800926e:	6001      	str	r1, [r0, #0]
 8009270:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009272:	bf00      	nop
 8009274:	e000ed88 	.word	0xe000ed88

08009278 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800927e:	f3ef 8305 	mrs	r3, IPSR
 8009282:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2b0f      	cmp	r3, #15
 8009288:	d915      	bls.n	80092b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800928a:	4a18      	ldr	r2, [pc, #96]	@ (80092ec <vPortValidateInterruptPriority+0x74>)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4413      	add	r3, r2
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009294:	4b16      	ldr	r3, [pc, #88]	@ (80092f0 <vPortValidateInterruptPriority+0x78>)
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	7afa      	ldrb	r2, [r7, #11]
 800929a:	429a      	cmp	r2, r3
 800929c:	d20b      	bcs.n	80092b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800929e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	607b      	str	r3, [r7, #4]
}
 80092b0:	bf00      	nop
 80092b2:	bf00      	nop
 80092b4:	e7fd      	b.n	80092b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80092b6:	4b0f      	ldr	r3, [pc, #60]	@ (80092f4 <vPortValidateInterruptPriority+0x7c>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80092be:	4b0e      	ldr	r3, [pc, #56]	@ (80092f8 <vPortValidateInterruptPriority+0x80>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d90b      	bls.n	80092de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	603b      	str	r3, [r7, #0]
}
 80092d8:	bf00      	nop
 80092da:	bf00      	nop
 80092dc:	e7fd      	b.n	80092da <vPortValidateInterruptPriority+0x62>
	}
 80092de:	bf00      	nop
 80092e0:	3714      	adds	r7, #20
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	e000e3f0 	.word	0xe000e3f0
 80092f0:	2000103c 	.word	0x2000103c
 80092f4:	e000ed0c 	.word	0xe000ed0c
 80092f8:	20001040 	.word	0x20001040

080092fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b08a      	sub	sp, #40	@ 0x28
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009304:	2300      	movs	r3, #0
 8009306:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009308:	f7fe fd72 	bl	8007df0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800930c:	4b5c      	ldr	r3, [pc, #368]	@ (8009480 <pvPortMalloc+0x184>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009314:	f000 f924 	bl	8009560 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009318:	4b5a      	ldr	r3, [pc, #360]	@ (8009484 <pvPortMalloc+0x188>)
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4013      	ands	r3, r2
 8009320:	2b00      	cmp	r3, #0
 8009322:	f040 8095 	bne.w	8009450 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d01e      	beq.n	800936a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800932c:	2208      	movs	r2, #8
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4413      	add	r3, r2
 8009332:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f003 0307 	and.w	r3, r3, #7
 800933a:	2b00      	cmp	r3, #0
 800933c:	d015      	beq.n	800936a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f023 0307 	bic.w	r3, r3, #7
 8009344:	3308      	adds	r3, #8
 8009346:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f003 0307 	and.w	r3, r3, #7
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00b      	beq.n	800936a <pvPortMalloc+0x6e>
	__asm volatile
 8009352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	617b      	str	r3, [r7, #20]
}
 8009364:	bf00      	nop
 8009366:	bf00      	nop
 8009368:	e7fd      	b.n	8009366 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d06f      	beq.n	8009450 <pvPortMalloc+0x154>
 8009370:	4b45      	ldr	r3, [pc, #276]	@ (8009488 <pvPortMalloc+0x18c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	429a      	cmp	r2, r3
 8009378:	d86a      	bhi.n	8009450 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800937a:	4b44      	ldr	r3, [pc, #272]	@ (800948c <pvPortMalloc+0x190>)
 800937c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800937e:	4b43      	ldr	r3, [pc, #268]	@ (800948c <pvPortMalloc+0x190>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009384:	e004      	b.n	8009390 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009388:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800938a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	429a      	cmp	r2, r3
 8009398:	d903      	bls.n	80093a2 <pvPortMalloc+0xa6>
 800939a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1f1      	bne.n	8009386 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80093a2:	4b37      	ldr	r3, [pc, #220]	@ (8009480 <pvPortMalloc+0x184>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d051      	beq.n	8009450 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80093ac:	6a3b      	ldr	r3, [r7, #32]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2208      	movs	r2, #8
 80093b2:	4413      	add	r3, r2
 80093b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80093b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	6a3b      	ldr	r3, [r7, #32]
 80093bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80093be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c0:	685a      	ldr	r2, [r3, #4]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	1ad2      	subs	r2, r2, r3
 80093c6:	2308      	movs	r3, #8
 80093c8:	005b      	lsls	r3, r3, #1
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d920      	bls.n	8009410 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4413      	add	r3, r2
 80093d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	f003 0307 	and.w	r3, r3, #7
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00b      	beq.n	80093f8 <pvPortMalloc+0xfc>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	613b      	str	r3, [r7, #16]
}
 80093f2:	bf00      	nop
 80093f4:	bf00      	nop
 80093f6:	e7fd      	b.n	80093f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	1ad2      	subs	r2, r2, r3
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800940a:	69b8      	ldr	r0, [r7, #24]
 800940c:	f000 f90a 	bl	8009624 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009410:	4b1d      	ldr	r3, [pc, #116]	@ (8009488 <pvPortMalloc+0x18c>)
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	4a1b      	ldr	r2, [pc, #108]	@ (8009488 <pvPortMalloc+0x18c>)
 800941c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800941e:	4b1a      	ldr	r3, [pc, #104]	@ (8009488 <pvPortMalloc+0x18c>)
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	4b1b      	ldr	r3, [pc, #108]	@ (8009490 <pvPortMalloc+0x194>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	429a      	cmp	r2, r3
 8009428:	d203      	bcs.n	8009432 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800942a:	4b17      	ldr	r3, [pc, #92]	@ (8009488 <pvPortMalloc+0x18c>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a18      	ldr	r2, [pc, #96]	@ (8009490 <pvPortMalloc+0x194>)
 8009430:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	4b13      	ldr	r3, [pc, #76]	@ (8009484 <pvPortMalloc+0x188>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	431a      	orrs	r2, r3
 800943c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009442:	2200      	movs	r2, #0
 8009444:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009446:	4b13      	ldr	r3, [pc, #76]	@ (8009494 <pvPortMalloc+0x198>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	3301      	adds	r3, #1
 800944c:	4a11      	ldr	r2, [pc, #68]	@ (8009494 <pvPortMalloc+0x198>)
 800944e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009450:	f7fe fcdc 	bl	8007e0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	f003 0307 	and.w	r3, r3, #7
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00b      	beq.n	8009476 <pvPortMalloc+0x17a>
	__asm volatile
 800945e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009462:	f383 8811 	msr	BASEPRI, r3
 8009466:	f3bf 8f6f 	isb	sy
 800946a:	f3bf 8f4f 	dsb	sy
 800946e:	60fb      	str	r3, [r7, #12]
}
 8009470:	bf00      	nop
 8009472:	bf00      	nop
 8009474:	e7fd      	b.n	8009472 <pvPortMalloc+0x176>
	return pvReturn;
 8009476:	69fb      	ldr	r3, [r7, #28]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3728      	adds	r7, #40	@ 0x28
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	20001c04 	.word	0x20001c04
 8009484:	20001c18 	.word	0x20001c18
 8009488:	20001c08 	.word	0x20001c08
 800948c:	20001bfc 	.word	0x20001bfc
 8009490:	20001c0c 	.word	0x20001c0c
 8009494:	20001c10 	.word	0x20001c10

08009498 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b086      	sub	sp, #24
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d04f      	beq.n	800954a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80094aa:	2308      	movs	r3, #8
 80094ac:	425b      	negs	r3, r3
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	4413      	add	r3, r2
 80094b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	4b25      	ldr	r3, [pc, #148]	@ (8009554 <vPortFree+0xbc>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4013      	ands	r3, r2
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10b      	bne.n	80094de <vPortFree+0x46>
	__asm volatile
 80094c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ca:	f383 8811 	msr	BASEPRI, r3
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	f3bf 8f4f 	dsb	sy
 80094d6:	60fb      	str	r3, [r7, #12]
}
 80094d8:	bf00      	nop
 80094da:	bf00      	nop
 80094dc:	e7fd      	b.n	80094da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00b      	beq.n	80094fe <vPortFree+0x66>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	60bb      	str	r3, [r7, #8]
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	e7fd      	b.n	80094fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	685a      	ldr	r2, [r3, #4]
 8009502:	4b14      	ldr	r3, [pc, #80]	@ (8009554 <vPortFree+0xbc>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4013      	ands	r3, r2
 8009508:	2b00      	cmp	r3, #0
 800950a:	d01e      	beq.n	800954a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d11a      	bne.n	800954a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	685a      	ldr	r2, [r3, #4]
 8009518:	4b0e      	ldr	r3, [pc, #56]	@ (8009554 <vPortFree+0xbc>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	43db      	mvns	r3, r3
 800951e:	401a      	ands	r2, r3
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009524:	f7fe fc64 	bl	8007df0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	4b0a      	ldr	r3, [pc, #40]	@ (8009558 <vPortFree+0xc0>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4413      	add	r3, r2
 8009532:	4a09      	ldr	r2, [pc, #36]	@ (8009558 <vPortFree+0xc0>)
 8009534:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009536:	6938      	ldr	r0, [r7, #16]
 8009538:	f000 f874 	bl	8009624 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800953c:	4b07      	ldr	r3, [pc, #28]	@ (800955c <vPortFree+0xc4>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3301      	adds	r3, #1
 8009542:	4a06      	ldr	r2, [pc, #24]	@ (800955c <vPortFree+0xc4>)
 8009544:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009546:	f7fe fc61 	bl	8007e0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800954a:	bf00      	nop
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	20001c18 	.word	0x20001c18
 8009558:	20001c08 	.word	0x20001c08
 800955c:	20001c14 	.word	0x20001c14

08009560 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009566:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800956a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800956c:	4b27      	ldr	r3, [pc, #156]	@ (800960c <prvHeapInit+0xac>)
 800956e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f003 0307 	and.w	r3, r3, #7
 8009576:	2b00      	cmp	r3, #0
 8009578:	d00c      	beq.n	8009594 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	3307      	adds	r3, #7
 800957e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f023 0307 	bic.w	r3, r3, #7
 8009586:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	4a1f      	ldr	r2, [pc, #124]	@ (800960c <prvHeapInit+0xac>)
 8009590:	4413      	add	r3, r2
 8009592:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009598:	4a1d      	ldr	r2, [pc, #116]	@ (8009610 <prvHeapInit+0xb0>)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800959e:	4b1c      	ldr	r3, [pc, #112]	@ (8009610 <prvHeapInit+0xb0>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	4413      	add	r3, r2
 80095aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80095ac:	2208      	movs	r2, #8
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	1a9b      	subs	r3, r3, r2
 80095b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f023 0307 	bic.w	r3, r3, #7
 80095ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	4a15      	ldr	r2, [pc, #84]	@ (8009614 <prvHeapInit+0xb4>)
 80095c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80095c2:	4b14      	ldr	r3, [pc, #80]	@ (8009614 <prvHeapInit+0xb4>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2200      	movs	r2, #0
 80095c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80095ca:	4b12      	ldr	r3, [pc, #72]	@ (8009614 <prvHeapInit+0xb4>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2200      	movs	r2, #0
 80095d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	1ad2      	subs	r2, r2, r3
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80095e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009614 <prvHeapInit+0xb4>)
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	4a0a      	ldr	r2, [pc, #40]	@ (8009618 <prvHeapInit+0xb8>)
 80095ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	4a09      	ldr	r2, [pc, #36]	@ (800961c <prvHeapInit+0xbc>)
 80095f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80095f8:	4b09      	ldr	r3, [pc, #36]	@ (8009620 <prvHeapInit+0xc0>)
 80095fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80095fe:	601a      	str	r2, [r3, #0]
}
 8009600:	bf00      	nop
 8009602:	3714      	adds	r7, #20
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr
 800960c:	20001044 	.word	0x20001044
 8009610:	20001bfc 	.word	0x20001bfc
 8009614:	20001c04 	.word	0x20001c04
 8009618:	20001c0c 	.word	0x20001c0c
 800961c:	20001c08 	.word	0x20001c08
 8009620:	20001c18 	.word	0x20001c18

08009624 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800962c:	4b28      	ldr	r3, [pc, #160]	@ (80096d0 <prvInsertBlockIntoFreeList+0xac>)
 800962e:	60fb      	str	r3, [r7, #12]
 8009630:	e002      	b.n	8009638 <prvInsertBlockIntoFreeList+0x14>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	429a      	cmp	r2, r3
 8009640:	d8f7      	bhi.n	8009632 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	4413      	add	r3, r2
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	429a      	cmp	r2, r3
 8009652:	d108      	bne.n	8009666 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	441a      	add	r2, r3
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	441a      	add	r2, r3
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	429a      	cmp	r2, r3
 8009678:	d118      	bne.n	80096ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	4b15      	ldr	r3, [pc, #84]	@ (80096d4 <prvInsertBlockIntoFreeList+0xb0>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	429a      	cmp	r2, r3
 8009684:	d00d      	beq.n	80096a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685a      	ldr	r2, [r3, #4]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	441a      	add	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	601a      	str	r2, [r3, #0]
 80096a0:	e008      	b.n	80096b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80096a2:	4b0c      	ldr	r3, [pc, #48]	@ (80096d4 <prvInsertBlockIntoFreeList+0xb0>)
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	601a      	str	r2, [r3, #0]
 80096aa:	e003      	b.n	80096b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d002      	beq.n	80096c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096c2:	bf00      	nop
 80096c4:	3714      	adds	r7, #20
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	20001bfc 	.word	0x20001bfc
 80096d4:	20001c04 	.word	0x20001c04

080096d8 <memset>:
 80096d8:	4402      	add	r2, r0
 80096da:	4603      	mov	r3, r0
 80096dc:	4293      	cmp	r3, r2
 80096de:	d100      	bne.n	80096e2 <memset+0xa>
 80096e0:	4770      	bx	lr
 80096e2:	f803 1b01 	strb.w	r1, [r3], #1
 80096e6:	e7f9      	b.n	80096dc <memset+0x4>

080096e8 <_reclaim_reent>:
 80096e8:	4b29      	ldr	r3, [pc, #164]	@ (8009790 <_reclaim_reent+0xa8>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4283      	cmp	r3, r0
 80096ee:	b570      	push	{r4, r5, r6, lr}
 80096f0:	4604      	mov	r4, r0
 80096f2:	d04b      	beq.n	800978c <_reclaim_reent+0xa4>
 80096f4:	69c3      	ldr	r3, [r0, #28]
 80096f6:	b1ab      	cbz	r3, 8009724 <_reclaim_reent+0x3c>
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	b16b      	cbz	r3, 8009718 <_reclaim_reent+0x30>
 80096fc:	2500      	movs	r5, #0
 80096fe:	69e3      	ldr	r3, [r4, #28]
 8009700:	68db      	ldr	r3, [r3, #12]
 8009702:	5959      	ldr	r1, [r3, r5]
 8009704:	2900      	cmp	r1, #0
 8009706:	d13b      	bne.n	8009780 <_reclaim_reent+0x98>
 8009708:	3504      	adds	r5, #4
 800970a:	2d80      	cmp	r5, #128	@ 0x80
 800970c:	d1f7      	bne.n	80096fe <_reclaim_reent+0x16>
 800970e:	69e3      	ldr	r3, [r4, #28]
 8009710:	4620      	mov	r0, r4
 8009712:	68d9      	ldr	r1, [r3, #12]
 8009714:	f000 f872 	bl	80097fc <_free_r>
 8009718:	69e3      	ldr	r3, [r4, #28]
 800971a:	6819      	ldr	r1, [r3, #0]
 800971c:	b111      	cbz	r1, 8009724 <_reclaim_reent+0x3c>
 800971e:	4620      	mov	r0, r4
 8009720:	f000 f86c 	bl	80097fc <_free_r>
 8009724:	6961      	ldr	r1, [r4, #20]
 8009726:	b111      	cbz	r1, 800972e <_reclaim_reent+0x46>
 8009728:	4620      	mov	r0, r4
 800972a:	f000 f867 	bl	80097fc <_free_r>
 800972e:	69e1      	ldr	r1, [r4, #28]
 8009730:	b111      	cbz	r1, 8009738 <_reclaim_reent+0x50>
 8009732:	4620      	mov	r0, r4
 8009734:	f000 f862 	bl	80097fc <_free_r>
 8009738:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800973a:	b111      	cbz	r1, 8009742 <_reclaim_reent+0x5a>
 800973c:	4620      	mov	r0, r4
 800973e:	f000 f85d 	bl	80097fc <_free_r>
 8009742:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009744:	b111      	cbz	r1, 800974c <_reclaim_reent+0x64>
 8009746:	4620      	mov	r0, r4
 8009748:	f000 f858 	bl	80097fc <_free_r>
 800974c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800974e:	b111      	cbz	r1, 8009756 <_reclaim_reent+0x6e>
 8009750:	4620      	mov	r0, r4
 8009752:	f000 f853 	bl	80097fc <_free_r>
 8009756:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009758:	b111      	cbz	r1, 8009760 <_reclaim_reent+0x78>
 800975a:	4620      	mov	r0, r4
 800975c:	f000 f84e 	bl	80097fc <_free_r>
 8009760:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009762:	b111      	cbz	r1, 800976a <_reclaim_reent+0x82>
 8009764:	4620      	mov	r0, r4
 8009766:	f000 f849 	bl	80097fc <_free_r>
 800976a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800976c:	b111      	cbz	r1, 8009774 <_reclaim_reent+0x8c>
 800976e:	4620      	mov	r0, r4
 8009770:	f000 f844 	bl	80097fc <_free_r>
 8009774:	6a23      	ldr	r3, [r4, #32]
 8009776:	b14b      	cbz	r3, 800978c <_reclaim_reent+0xa4>
 8009778:	4620      	mov	r0, r4
 800977a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800977e:	4718      	bx	r3
 8009780:	680e      	ldr	r6, [r1, #0]
 8009782:	4620      	mov	r0, r4
 8009784:	f000 f83a 	bl	80097fc <_free_r>
 8009788:	4631      	mov	r1, r6
 800978a:	e7bb      	b.n	8009704 <_reclaim_reent+0x1c>
 800978c:	bd70      	pop	{r4, r5, r6, pc}
 800978e:	bf00      	nop
 8009790:	20000010 	.word	0x20000010

08009794 <__libc_init_array>:
 8009794:	b570      	push	{r4, r5, r6, lr}
 8009796:	4d0d      	ldr	r5, [pc, #52]	@ (80097cc <__libc_init_array+0x38>)
 8009798:	4c0d      	ldr	r4, [pc, #52]	@ (80097d0 <__libc_init_array+0x3c>)
 800979a:	1b64      	subs	r4, r4, r5
 800979c:	10a4      	asrs	r4, r4, #2
 800979e:	2600      	movs	r6, #0
 80097a0:	42a6      	cmp	r6, r4
 80097a2:	d109      	bne.n	80097b8 <__libc_init_array+0x24>
 80097a4:	4d0b      	ldr	r5, [pc, #44]	@ (80097d4 <__libc_init_array+0x40>)
 80097a6:	4c0c      	ldr	r4, [pc, #48]	@ (80097d8 <__libc_init_array+0x44>)
 80097a8:	f000 f87e 	bl	80098a8 <_init>
 80097ac:	1b64      	subs	r4, r4, r5
 80097ae:	10a4      	asrs	r4, r4, #2
 80097b0:	2600      	movs	r6, #0
 80097b2:	42a6      	cmp	r6, r4
 80097b4:	d105      	bne.n	80097c2 <__libc_init_array+0x2e>
 80097b6:	bd70      	pop	{r4, r5, r6, pc}
 80097b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80097bc:	4798      	blx	r3
 80097be:	3601      	adds	r6, #1
 80097c0:	e7ee      	b.n	80097a0 <__libc_init_array+0xc>
 80097c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80097c6:	4798      	blx	r3
 80097c8:	3601      	adds	r6, #1
 80097ca:	e7f2      	b.n	80097b2 <__libc_init_array+0x1e>
 80097cc:	080099e8 	.word	0x080099e8
 80097d0:	080099e8 	.word	0x080099e8
 80097d4:	080099e8 	.word	0x080099e8
 80097d8:	080099ec 	.word	0x080099ec

080097dc <__retarget_lock_acquire_recursive>:
 80097dc:	4770      	bx	lr

080097de <__retarget_lock_release_recursive>:
 80097de:	4770      	bx	lr

080097e0 <memcpy>:
 80097e0:	440a      	add	r2, r1
 80097e2:	4291      	cmp	r1, r2
 80097e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80097e8:	d100      	bne.n	80097ec <memcpy+0xc>
 80097ea:	4770      	bx	lr
 80097ec:	b510      	push	{r4, lr}
 80097ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097f6:	4291      	cmp	r1, r2
 80097f8:	d1f9      	bne.n	80097ee <memcpy+0xe>
 80097fa:	bd10      	pop	{r4, pc}

080097fc <_free_r>:
 80097fc:	b538      	push	{r3, r4, r5, lr}
 80097fe:	4605      	mov	r5, r0
 8009800:	2900      	cmp	r1, #0
 8009802:	d041      	beq.n	8009888 <_free_r+0x8c>
 8009804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009808:	1f0c      	subs	r4, r1, #4
 800980a:	2b00      	cmp	r3, #0
 800980c:	bfb8      	it	lt
 800980e:	18e4      	addlt	r4, r4, r3
 8009810:	f000 f83e 	bl	8009890 <__malloc_lock>
 8009814:	4a1d      	ldr	r2, [pc, #116]	@ (800988c <_free_r+0x90>)
 8009816:	6813      	ldr	r3, [r2, #0]
 8009818:	b933      	cbnz	r3, 8009828 <_free_r+0x2c>
 800981a:	6063      	str	r3, [r4, #4]
 800981c:	6014      	str	r4, [r2, #0]
 800981e:	4628      	mov	r0, r5
 8009820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009824:	f000 b83a 	b.w	800989c <__malloc_unlock>
 8009828:	42a3      	cmp	r3, r4
 800982a:	d908      	bls.n	800983e <_free_r+0x42>
 800982c:	6820      	ldr	r0, [r4, #0]
 800982e:	1821      	adds	r1, r4, r0
 8009830:	428b      	cmp	r3, r1
 8009832:	bf01      	itttt	eq
 8009834:	6819      	ldreq	r1, [r3, #0]
 8009836:	685b      	ldreq	r3, [r3, #4]
 8009838:	1809      	addeq	r1, r1, r0
 800983a:	6021      	streq	r1, [r4, #0]
 800983c:	e7ed      	b.n	800981a <_free_r+0x1e>
 800983e:	461a      	mov	r2, r3
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	b10b      	cbz	r3, 8009848 <_free_r+0x4c>
 8009844:	42a3      	cmp	r3, r4
 8009846:	d9fa      	bls.n	800983e <_free_r+0x42>
 8009848:	6811      	ldr	r1, [r2, #0]
 800984a:	1850      	adds	r0, r2, r1
 800984c:	42a0      	cmp	r0, r4
 800984e:	d10b      	bne.n	8009868 <_free_r+0x6c>
 8009850:	6820      	ldr	r0, [r4, #0]
 8009852:	4401      	add	r1, r0
 8009854:	1850      	adds	r0, r2, r1
 8009856:	4283      	cmp	r3, r0
 8009858:	6011      	str	r1, [r2, #0]
 800985a:	d1e0      	bne.n	800981e <_free_r+0x22>
 800985c:	6818      	ldr	r0, [r3, #0]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	6053      	str	r3, [r2, #4]
 8009862:	4408      	add	r0, r1
 8009864:	6010      	str	r0, [r2, #0]
 8009866:	e7da      	b.n	800981e <_free_r+0x22>
 8009868:	d902      	bls.n	8009870 <_free_r+0x74>
 800986a:	230c      	movs	r3, #12
 800986c:	602b      	str	r3, [r5, #0]
 800986e:	e7d6      	b.n	800981e <_free_r+0x22>
 8009870:	6820      	ldr	r0, [r4, #0]
 8009872:	1821      	adds	r1, r4, r0
 8009874:	428b      	cmp	r3, r1
 8009876:	bf04      	itt	eq
 8009878:	6819      	ldreq	r1, [r3, #0]
 800987a:	685b      	ldreq	r3, [r3, #4]
 800987c:	6063      	str	r3, [r4, #4]
 800987e:	bf04      	itt	eq
 8009880:	1809      	addeq	r1, r1, r0
 8009882:	6021      	streq	r1, [r4, #0]
 8009884:	6054      	str	r4, [r2, #4]
 8009886:	e7ca      	b.n	800981e <_free_r+0x22>
 8009888:	bd38      	pop	{r3, r4, r5, pc}
 800988a:	bf00      	nop
 800988c:	20001d58 	.word	0x20001d58

08009890 <__malloc_lock>:
 8009890:	4801      	ldr	r0, [pc, #4]	@ (8009898 <__malloc_lock+0x8>)
 8009892:	f7ff bfa3 	b.w	80097dc <__retarget_lock_acquire_recursive>
 8009896:	bf00      	nop
 8009898:	20001d54 	.word	0x20001d54

0800989c <__malloc_unlock>:
 800989c:	4801      	ldr	r0, [pc, #4]	@ (80098a4 <__malloc_unlock+0x8>)
 800989e:	f7ff bf9e 	b.w	80097de <__retarget_lock_release_recursive>
 80098a2:	bf00      	nop
 80098a4:	20001d54 	.word	0x20001d54

080098a8 <_init>:
 80098a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098aa:	bf00      	nop
 80098ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ae:	bc08      	pop	{r3}
 80098b0:	469e      	mov	lr, r3
 80098b2:	4770      	bx	lr

080098b4 <_fini>:
 80098b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b6:	bf00      	nop
 80098b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ba:	bc08      	pop	{r3}
 80098bc:	469e      	mov	lr, r3
 80098be:	4770      	bx	lr
