
VCU2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007140  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080072f0  080072f0  000082f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007418  08007418  00009060  2**0
                  CONTENTS
  4 .ARM          00000000  08007418  08007418  00009060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007418  08007418  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007418  08007418  00008418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800741c  0800741c  0000841c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007420  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c6c  20000060  08007480  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ccc  08007480  00009ccc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc7c  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ec2  00000000  00000000  00026d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  0002abd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001451  00000000  00000000  0002c610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d6b  00000000  00000000  0002da61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d6a7  00000000  00000000  000317cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d1f6  00000000  00000000  0004ee73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015c069  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000722c  00000000  00000000  0015c0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001632d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080072d8 	.word	0x080072d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	080072d8 	.word	0x080072d8

080001f0 <HAL_GPIO_EXTI_Callback>:
uint8_t RxData[8];  // Array to store the received data

//CAN transmission

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == GPIO_PIN_13) {
//		kill_sw = 0;
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, kill_sw);
		//
	}
}
 80001fa:	bf00      	nop
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
	...

08000208 <HAL_CAN_RxFifo0MsgPendingCallback>:

// Can reception
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000210:	4b5d      	ldr	r3, [pc, #372]	@ (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000212:	4a5e      	ldr	r2, [pc, #376]	@ (800038c <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8000214:	2100      	movs	r1, #0
 8000216:	6878      	ldr	r0, [r7, #4]
 8000218:	f001 f9a4 	bl	8001564 <HAL_CAN_GetRxMessage>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8000222:	f000 fc8f 	bl	8000b44 <Error_Handler>
  }
  if (RxHeader.StdId == 0x000)
 8000226:	4b59      	ldr	r3, [pc, #356]	@ (800038c <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d10f      	bne.n	800024e <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
  {
	  if (RxData[0] == 0) {
 800022e:	4b56      	ldr	r3, [pc, #344]	@ (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d10b      	bne.n	800024e <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
		throttle = (uint16_t)RxData[2]<<8 | RxData[1];
 8000236:	4b54      	ldr	r3, [pc, #336]	@ (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000238:	789b      	ldrb	r3, [r3, #2]
 800023a:	021b      	lsls	r3, r3, #8
 800023c:	b21a      	sxth	r2, r3
 800023e:	4b52      	ldr	r3, [pc, #328]	@ (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000240:	785b      	ldrb	r3, [r3, #1]
 8000242:	b21b      	sxth	r3, r3
 8000244:	4313      	orrs	r3, r2
 8000246:	b21b      	sxth	r3, r3
 8000248:	b29a      	uxth	r2, r3
 800024a:	4b51      	ldr	r3, [pc, #324]	@ (8000390 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 800024c:	801a      	strh	r2, [r3, #0]
	  }
  }
  if (RxHeader.StdId == 0x7FF){
 800024e:	4b4f      	ldr	r3, [pc, #316]	@ (800038c <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000256:	4293      	cmp	r3, r2
 8000258:	f040 8092 	bne.w	8000380 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>
	  if(RxData[0] == 1){
 800025c:	4b4a      	ldr	r3, [pc, #296]	@ (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b01      	cmp	r3, #1
 8000262:	f040 808d 	bne.w	8000380 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>
		  //byte 1
		  //ignition switch
		  if((RxData[1] & 0x80) != 0x00){
 8000266:	4b48      	ldr	r3, [pc, #288]	@ (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000268:	785b      	ldrb	r3, [r3, #1]
 800026a:	b25b      	sxtb	r3, r3
 800026c:	2b00      	cmp	r3, #0
 800026e:	da05      	bge.n	800027c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
			  mppt_pre_contactor_en = false;
 8000270:	4b48      	ldr	r3, [pc, #288]	@ (8000394 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000272:	2200      	movs	r2, #0
 8000274:	701a      	strb	r2, [r3, #0]
			  mppt_contactor_en = false;
 8000276:	4b48      	ldr	r3, [pc, #288]	@ (8000398 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8000278:	2200      	movs	r2, #0
 800027a:	701a      	strb	r2, [r3, #0]
			  //preform shut down sequence
		  }

		  if((RxData[1] & 0x40) != 0x00){
 800027c:	4b42      	ldr	r3, [pc, #264]	@ (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800027e:	785b      	ldrb	r3, [r3, #1]
 8000280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000284:	2b00      	cmp	r3, #0
 8000286:	d003      	beq.n	8000290 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
			  brakes_active = true; // turn brakes on
 8000288:	4b44      	ldr	r3, [pc, #272]	@ (800039c <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 800028a:	2201      	movs	r2, #1
 800028c:	701a      	strb	r2, [r3, #0]
 800028e:	e002      	b.n	8000296 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
		  }else{
			  brakes_active = false; // turn breaks off
 8000290:	4b42      	ldr	r3, [pc, #264]	@ (800039c <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8000292:	2200      	movs	r2, #0
 8000294:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x20) != 0x00){
 8000296:	4b3c      	ldr	r3, [pc, #240]	@ (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000298:	785b      	ldrb	r3, [r3, #1]
 800029a:	f003 0320 	and.w	r3, r3, #32
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d003      	beq.n	80002aa <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
			  dirrection = true; //Forward
 80002a2:	4b3f      	ldr	r3, [pc, #252]	@ (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	701a      	strb	r2, [r3, #0]
 80002a8:	e002      	b.n	80002b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
		  }else{
			  dirrection = false;
 80002aa:	4b3d      	ldr	r3, [pc, #244]	@ (80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x10) != 0x00){
 80002b0:	4b35      	ldr	r3, [pc, #212]	@ (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80002b2:	785b      	ldrb	r3, [r3, #1]
 80002b4:	f003 0310 	and.w	r3, r3, #16
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d003      	beq.n	80002c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
			  mc_main_ctrl = true;
 80002bc:	4b39      	ldr	r3, [pc, #228]	@ (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 80002be:	2201      	movs	r2, #1
 80002c0:	701a      	strb	r2, [r3, #0]
 80002c2:	e002      	b.n	80002ca <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
		  }else{
			  mc_main_ctrl = false;
 80002c4:	4b37      	ldr	r3, [pc, #220]	@ (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x08) != 0x00){
 80002ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80002cc:	785b      	ldrb	r3, [r3, #1]
 80002ce:	f003 0308 	and.w	r3, r3, #8
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d003      	beq.n	80002de <HAL_CAN_RxFifo0MsgPendingCallback+0xd6>
			  array = true;
 80002d6:	4b34      	ldr	r3, [pc, #208]	@ (80003a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 80002d8:	2201      	movs	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
 80002dc:	e002      	b.n	80002e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>
		  }else{
			  array = false;
 80002de:	4b32      	ldr	r3, [pc, #200]	@ (80003a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x04) != 0x00){
 80002e4:	4b28      	ldr	r3, [pc, #160]	@ (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80002e6:	785b      	ldrb	r3, [r3, #1]
 80002e8:	f003 0304 	and.w	r3, r3, #4
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d003      	beq.n	80002f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
			  array_precharge = true;
 80002f0:	4b2e      	ldr	r3, [pc, #184]	@ (80003ac <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	701a      	strb	r2, [r3, #0]
 80002f6:	e002      	b.n	80002fe <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
		  }else{
			  array_precharge = false;
 80002f8:	4b2c      	ldr	r3, [pc, #176]	@ (80003ac <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	701a      	strb	r2, [r3, #0]
		  }


		  //byte #2
		  if((RxData[2] & 0x01) != 0x00){
 80002fe:	4b22      	ldr	r3, [pc, #136]	@ (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000300:	789b      	ldrb	r3, [r3, #2]
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	2b00      	cmp	r3, #0
 8000308:	d003      	beq.n	8000312 <HAL_CAN_RxFifo0MsgPendingCallback+0x10a>
			  blinkers_active = true;
 800030a:	4b29      	ldr	r3, [pc, #164]	@ (80003b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 800030c:	2201      	movs	r2, #1
 800030e:	701a      	strb	r2, [r3, #0]
 8000310:	e002      	b.n	8000318 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>

		  }else{
			  blinkers_active = false;
 8000312:	4b27      	ldr	r3, [pc, #156]	@ (80003b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8000314:	2200      	movs	r2, #0
 8000316:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[2] & 0x02) != 0x00){
 8000318:	4b1b      	ldr	r3, [pc, #108]	@ (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800031a:	789b      	ldrb	r3, [r3, #2]
 800031c:	f003 0302 	and.w	r3, r3, #2
 8000320:	2b00      	cmp	r3, #0
 8000322:	d010      	beq.n	8000346 <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
			  if(left_turn_active != true){
 8000324:	4b23      	ldr	r3, [pc, #140]	@ (80003b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	f083 0301 	eor.w	r3, r3, #1
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2b00      	cmp	r3, #0
 8000330:	d00c      	beq.n	800034c <HAL_CAN_RxFifo0MsgPendingCallback+0x144>
				  left_turn_active = true; // Turn on left
 8000332:	4b20      	ldr	r3, [pc, #128]	@ (80003b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000334:	2201      	movs	r2, #1
 8000336:	701a      	strb	r2, [r3, #0]
				  right_turn_active = false; // Turn off right
 8000338:	4b1f      	ldr	r3, [pc, #124]	@ (80003b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 800033e:	4b1f      	ldr	r3, [pc, #124]	@ (80003bc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	e002      	b.n	800034c <HAL_CAN_RxFifo0MsgPendingCallback+0x144>
			  }

		  }else{
			  left_turn_active = false;
 8000346:	4b1b      	ldr	r3, [pc, #108]	@ (80003b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000348:	2200      	movs	r2, #0
 800034a:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[2] & 0x04) != 0x00){
 800034c:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800034e:	789b      	ldrb	r3, [r3, #2]
 8000350:	f003 0304 	and.w	r3, r3, #4
 8000354:	2b00      	cmp	r3, #0
 8000356:	d010      	beq.n	800037a <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
			  if(right_turn_active != true){
 8000358:	4b17      	ldr	r3, [pc, #92]	@ (80003b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	f083 0301 	eor.w	r3, r3, #1
 8000360:	b2db      	uxtb	r3, r3
 8000362:	2b00      	cmp	r3, #0
 8000364:	d00c      	beq.n	8000380 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>
				  right_turn_active = true; // Turn on right
 8000366:	4b14      	ldr	r3, [pc, #80]	@ (80003b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000368:	2201      	movs	r2, #1
 800036a:	701a      	strb	r2, [r3, #0]
				  left_turn_active = false; //Turn off left
 800036c:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800036e:	2200      	movs	r2, #0
 8000370:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 8000372:	4b12      	ldr	r3, [pc, #72]	@ (80003bc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
		  }


	  }
  }
}
 8000378:	e002      	b.n	8000380 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>
			  right_turn_active = false;
 800037a:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000190 	.word	0x20000190
 800038c:	20000174 	.word	0x20000174
 8000390:	20000144 	.word	0x20000144
 8000394:	20000159 	.word	0x20000159
 8000398:	20000158 	.word	0x20000158
 800039c:	20000148 	.word	0x20000148
 80003a0:	2000014c 	.word	0x2000014c
 80003a4:	2000014d 	.word	0x2000014d
 80003a8:	2000014e 	.word	0x2000014e
 80003ac:	2000014f 	.word	0x2000014f
 80003b0:	20000149 	.word	0x20000149
 80003b4:	2000014a 	.word	0x2000014a
 80003b8:	2000014b 	.word	0x2000014b
 80003bc:	20000154 	.word	0x20000154

080003c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

  brakes_active = false;
 80003c4:	4b33      	ldr	r3, [pc, #204]	@ (8000494 <main+0xd4>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	701a      	strb	r2, [r3, #0]
  blinkers_active = false;
 80003ca:	4b33      	ldr	r3, [pc, #204]	@ (8000498 <main+0xd8>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	701a      	strb	r2, [r3, #0]
  left_turn_active = false;
 80003d0:	4b32      	ldr	r3, [pc, #200]	@ (800049c <main+0xdc>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
  right_turn_active = true;
 80003d6:	4b32      	ldr	r3, [pc, #200]	@ (80004a0 <main+0xe0>)
 80003d8:	2201      	movs	r2, #1
 80003da:	701a      	strb	r2, [r3, #0]


  dirrection = false;
 80003dc:	4b31      	ldr	r3, [pc, #196]	@ (80004a4 <main+0xe4>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
  mc_pwreco_ctrl = false;
 80003e2:	4b31      	ldr	r3, [pc, #196]	@ (80004a8 <main+0xe8>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	701a      	strb	r2, [r3, #0]
  mc_main_ctrl = false;
 80003e8:	4b30      	ldr	r3, [pc, #192]	@ (80004ac <main+0xec>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	701a      	strb	r2, [r3, #0]
  array = false;
 80003ee:	4b30      	ldr	r3, [pc, #192]	@ (80004b0 <main+0xf0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	701a      	strb	r2, [r3, #0]
  array_precharge = false;
 80003f4:	4b2f      	ldr	r3, [pc, #188]	@ (80004b4 <main+0xf4>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 fe36 	bl	800106a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f877 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f9bf 	bl	8000784 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000406:	f000 f941 	bl	800068c <MX_DAC1_Init>
  MX_CAN1_Init();
 800040a:	f000 f8b7 	bl	800057c <MX_CAN1_Init>
  MX_CAN2_Init();
 800040e:	f000 f907 	bl	8000620 <MX_CAN2_Init>
  MX_I2C2_Init();
 8000412:	f000 f977 	bl	8000704 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000416:	4828      	ldr	r0, [pc, #160]	@ (80004b8 <main+0xf8>)
 8000418:	f001 f860 	bl	80014dc <HAL_CAN_Start>

  //intalize can RX interupt
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800041c:	2102      	movs	r1, #2
 800041e:	4826      	ldr	r0, [pc, #152]	@ (80004b8 <main+0xf8>)
 8000420:	f001 f9c2 	bl	80017a8 <HAL_CAN_ActivateNotification>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <main+0x6e>
  {
	  Error_Handler();
 800042a:	f000 fb8b 	bl	8000b44 <Error_Handler>
  }



  //hdac1.State = HAL_DAC_STATE_RESET;
  TxHeader.IDE = CAN_ID_STD;
 800042e:	4b23      	ldr	r3, [pc, #140]	@ (80004bc <main+0xfc>)
 8000430:	2200      	movs	r2, #0
 8000432:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x446;
 8000434:	4b21      	ldr	r3, [pc, #132]	@ (80004bc <main+0xfc>)
 8000436:	f240 4246 	movw	r2, #1094	@ 0x446
 800043a:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 800043c:	4b1f      	ldr	r3, [pc, #124]	@ (80004bc <main+0xfc>)
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 2;
 8000442:	4b1e      	ldr	r3, [pc, #120]	@ (80004bc <main+0xfc>)
 8000444:	2202      	movs	r2, #2
 8000446:	611a      	str	r2, [r3, #16]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000448:	f004 f8b0 	bl	80045ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(Heart_Beat, NULL, &HeartBeat_attributes);
 800044c:	4a1c      	ldr	r2, [pc, #112]	@ (80004c0 <main+0x100>)
 800044e:	2100      	movs	r1, #0
 8000450:	481c      	ldr	r0, [pc, #112]	@ (80004c4 <main+0x104>)
 8000452:	f004 f8f5 	bl	8004640 <osThreadNew>
 8000456:	4603      	mov	r3, r0
 8000458:	4a1b      	ldr	r2, [pc, #108]	@ (80004c8 <main+0x108>)
 800045a:	6013      	str	r3, [r2, #0]

  /* creation of UpdateThrottle */
  UpdateThrottleHandle = osThreadNew(Update_Throttle, NULL, &UpdateThrottle_attributes);
 800045c:	4a1b      	ldr	r2, [pc, #108]	@ (80004cc <main+0x10c>)
 800045e:	2100      	movs	r1, #0
 8000460:	481b      	ldr	r0, [pc, #108]	@ (80004d0 <main+0x110>)
 8000462:	f004 f8ed 	bl	8004640 <osThreadNew>
 8000466:	4603      	mov	r3, r0
 8000468:	4a1a      	ldr	r2, [pc, #104]	@ (80004d4 <main+0x114>)
 800046a:	6013      	str	r3, [r2, #0]

  /* creation of LightsControl */
  LightsControlHandle = osThreadNew(Lights_Control, NULL, &LightsControl_attributes);
 800046c:	4a1a      	ldr	r2, [pc, #104]	@ (80004d8 <main+0x118>)
 800046e:	2100      	movs	r1, #0
 8000470:	481a      	ldr	r0, [pc, #104]	@ (80004dc <main+0x11c>)
 8000472:	f004 f8e5 	bl	8004640 <osThreadNew>
 8000476:	4603      	mov	r3, r0
 8000478:	4a19      	ldr	r2, [pc, #100]	@ (80004e0 <main+0x120>)
 800047a:	6013      	str	r3, [r2, #0]

  /* creation of ReadSensors */
  ReadSensorsHandle = osThreadNew(Read_Sensors, NULL, &ReadSensors_attributes);
 800047c:	4a19      	ldr	r2, [pc, #100]	@ (80004e4 <main+0x124>)
 800047e:	2100      	movs	r1, #0
 8000480:	4819      	ldr	r0, [pc, #100]	@ (80004e8 <main+0x128>)
 8000482:	f004 f8dd 	bl	8004640 <osThreadNew>
 8000486:	4603      	mov	r3, r0
 8000488:	4a18      	ldr	r2, [pc, #96]	@ (80004ec <main+0x12c>)
 800048a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800048c:	f004 f8b2 	bl	80045f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <main+0xd0>
 8000494:	20000148 	.word	0x20000148
 8000498:	20000149 	.word	0x20000149
 800049c:	2000014a 	.word	0x2000014a
 80004a0:	2000014b 	.word	0x2000014b
 80004a4:	2000014c 	.word	0x2000014c
 80004a8:	20000150 	.word	0x20000150
 80004ac:	2000014d 	.word	0x2000014d
 80004b0:	2000014e 	.word	0x2000014e
 80004b4:	2000014f 	.word	0x2000014f
 80004b8:	2000007c 	.word	0x2000007c
 80004bc:	2000015c 	.word	0x2000015c
 80004c0:	08007340 	.word	0x08007340
 80004c4:	080008ad 	.word	0x080008ad
 80004c8:	20000134 	.word	0x20000134
 80004cc:	08007364 	.word	0x08007364
 80004d0:	080008e1 	.word	0x080008e1
 80004d4:	20000138 	.word	0x20000138
 80004d8:	08007388 	.word	0x08007388
 80004dc:	08000a05 	.word	0x08000a05
 80004e0:	2000013c 	.word	0x2000013c
 80004e4:	080073ac 	.word	0x080073ac
 80004e8:	08000b11 	.word	0x08000b11
 80004ec:	20000140 	.word	0x20000140

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b096      	sub	sp, #88	@ 0x58
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	2244      	movs	r2, #68	@ 0x44
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f006 fe02 	bl	8007108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	463b      	mov	r3, r7
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000512:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000516:	f002 f9c5 	bl	80028a4 <HAL_PWREx_ControlVoltageScaling>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000520:	f000 fb10 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000524:	2310      	movs	r3, #16
 8000526:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000528:	2301      	movs	r3, #1
 800052a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000530:	2360      	movs	r3, #96	@ 0x60
 8000532:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000534:	2300      	movs	r3, #0
 8000536:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000538:	f107 0314 	add.w	r3, r7, #20
 800053c:	4618      	mov	r0, r3
 800053e:	f002 fa07 	bl	8002950 <HAL_RCC_OscConfig>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000548:	f000 fafc 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054c:	230f      	movs	r3, #15
 800054e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000550:	2300      	movs	r3, #0
 8000552:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000560:	463b      	mov	r3, r7
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f002 fe0d 	bl	8003184 <HAL_RCC_ClockConfig>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000570:	f000 fae8 	bl	8000b44 <Error_Handler>
  }
}
 8000574:	bf00      	nop
 8000576:	3758      	adds	r7, #88	@ 0x58
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	@ 0x28
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000582:	4b25      	ldr	r3, [pc, #148]	@ (8000618 <MX_CAN1_Init+0x9c>)
 8000584:	4a25      	ldr	r2, [pc, #148]	@ (800061c <MX_CAN1_Init+0xa0>)
 8000586:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000588:	4b23      	ldr	r3, [pc, #140]	@ (8000618 <MX_CAN1_Init+0x9c>)
 800058a:	2202      	movs	r2, #2
 800058c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800058e:	4b22      	ldr	r3, [pc, #136]	@ (8000618 <MX_CAN1_Init+0x9c>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000594:	4b20      	ldr	r3, [pc, #128]	@ (8000618 <MX_CAN1_Init+0x9c>)
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800059a:	4b1f      	ldr	r3, [pc, #124]	@ (8000618 <MX_CAN1_Init+0x9c>)
 800059c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005a0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000618 <MX_CAN1_Init+0x9c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000618 <MX_CAN1_Init+0x9c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000618 <MX_CAN1_Init+0x9c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005b4:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <MX_CAN1_Init+0x9c>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005ba:	4b17      	ldr	r3, [pc, #92]	@ (8000618 <MX_CAN1_Init+0x9c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005c0:	4b15      	ldr	r3, [pc, #84]	@ (8000618 <MX_CAN1_Init+0x9c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005c6:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <MX_CAN1_Init+0x9c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005cc:	4812      	ldr	r0, [pc, #72]	@ (8000618 <MX_CAN1_Init+0x9c>)
 80005ce:	f000 fda9 	bl	8001124 <HAL_CAN_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005d8:	f000 fab4 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80005e0:	2312      	movs	r3, #18
 80005e2:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x000<<5;
 80005e8:	2300      	movs	r3, #0
 80005ea:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x000<<5;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005fc:	2301      	movs	r3, #1
 80005fe:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8000600:	2314      	movs	r3, #20
 8000602:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000604:	463b      	mov	r3, r7
 8000606:	4619      	mov	r1, r3
 8000608:	4803      	ldr	r0, [pc, #12]	@ (8000618 <MX_CAN1_Init+0x9c>)
 800060a:	f000 fe87 	bl	800131c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800060e:	bf00      	nop
 8000610:	3728      	adds	r7, #40	@ 0x28
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000007c 	.word	0x2000007c
 800061c:	40006400 	.word	0x40006400

08000620 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000624:	4b17      	ldr	r3, [pc, #92]	@ (8000684 <MX_CAN2_Init+0x64>)
 8000626:	4a18      	ldr	r2, [pc, #96]	@ (8000688 <MX_CAN2_Init+0x68>)
 8000628:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 800062a:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <MX_CAN2_Init+0x64>)
 800062c:	2202      	movs	r2, #2
 800062e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000630:	4b14      	ldr	r3, [pc, #80]	@ (8000684 <MX_CAN2_Init+0x64>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000636:	4b13      	ldr	r3, [pc, #76]	@ (8000684 <MX_CAN2_Init+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800063c:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <MX_CAN2_Init+0x64>)
 800063e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000642:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000644:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <MX_CAN2_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800064a:	4b0e      	ldr	r3, [pc, #56]	@ (8000684 <MX_CAN2_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <MX_CAN2_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <MX_CAN2_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800065c:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <MX_CAN2_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000662:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <MX_CAN2_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <MX_CAN2_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	@ (8000684 <MX_CAN2_Init+0x64>)
 8000670:	f000 fd58 	bl	8001124 <HAL_CAN_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 800067a:	f000 fa63 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200000a4 	.word	0x200000a4
 8000688:	40006800 	.word	0x40006800

0800068c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	@ 0x28
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2224      	movs	r2, #36	@ 0x24
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f006 fd35 	bl	8007108 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800069e:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <MX_DAC1_Init+0x70>)
 80006a0:	4a17      	ldr	r2, [pc, #92]	@ (8000700 <MX_DAC1_Init+0x74>)
 80006a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006a4:	4815      	ldr	r0, [pc, #84]	@ (80006fc <MX_DAC1_Init+0x70>)
 80006a6:	f001 fbb7 	bl	8001e18 <HAL_DAC_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006b0:	f000 fa48 	bl	8000b44 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	4619      	mov	r1, r3
 80006ce:	480b      	ldr	r0, [pc, #44]	@ (80006fc <MX_DAC1_Init+0x70>)
 80006d0:	f001 fc9a 	bl	8002008 <HAL_DAC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80006da:	f000 fa33 	bl	8000b44 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2210      	movs	r2, #16
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	@ (80006fc <MX_DAC1_Init+0x70>)
 80006e6:	f001 fc8f 	bl	8002008 <HAL_DAC_ConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80006f0:	f000 fa28 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	@ 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200000cc 	.word	0x200000cc
 8000700:	40007400 	.word	0x40007400

08000704 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000708:	4b1b      	ldr	r3, [pc, #108]	@ (8000778 <MX_I2C2_Init+0x74>)
 800070a:	4a1c      	ldr	r2, [pc, #112]	@ (800077c <MX_I2C2_Init+0x78>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 800070e:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <MX_I2C2_Init+0x74>)
 8000710:	4a1b      	ldr	r2, [pc, #108]	@ (8000780 <MX_I2C2_Init+0x7c>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000714:	4b18      	ldr	r3, [pc, #96]	@ (8000778 <MX_I2C2_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800071a:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <MX_I2C2_Init+0x74>)
 800071c:	2201      	movs	r2, #1
 800071e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <MX_I2C2_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000726:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <MX_I2C2_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800072c:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <MX_I2C2_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000732:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_I2C2_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000738:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <MX_I2C2_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800073e:	480e      	ldr	r0, [pc, #56]	@ (8000778 <MX_I2C2_Init+0x74>)
 8000740:	f001 ff70 	bl	8002624 <HAL_I2C_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800074a:	f000 f9fb 	bl	8000b44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800074e:	2100      	movs	r1, #0
 8000750:	4809      	ldr	r0, [pc, #36]	@ (8000778 <MX_I2C2_Init+0x74>)
 8000752:	f002 f802 	bl	800275a <HAL_I2CEx_ConfigAnalogFilter>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800075c:	f000 f9f2 	bl	8000b44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000760:	2100      	movs	r1, #0
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_I2C2_Init+0x74>)
 8000764:	f002 f844 	bl	80027f0 <HAL_I2CEx_ConfigDigitalFilter>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800076e:	f000 f9e9 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200000e0 	.word	0x200000e0
 800077c:	40005800 	.word	0x40005800
 8000780:	00100d14 	.word	0x00100d14

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	4b41      	ldr	r3, [pc, #260]	@ (80008a0 <MX_GPIO_Init+0x11c>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	4a40      	ldr	r2, [pc, #256]	@ (80008a0 <MX_GPIO_Init+0x11c>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a6:	4b3e      	ldr	r3, [pc, #248]	@ (80008a0 <MX_GPIO_Init+0x11c>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	4b3b      	ldr	r3, [pc, #236]	@ (80008a0 <MX_GPIO_Init+0x11c>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	4a3a      	ldr	r2, [pc, #232]	@ (80008a0 <MX_GPIO_Init+0x11c>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007be:	4b38      	ldr	r3, [pc, #224]	@ (80008a0 <MX_GPIO_Init+0x11c>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b35      	ldr	r3, [pc, #212]	@ (80008a0 <MX_GPIO_Init+0x11c>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	4a34      	ldr	r2, [pc, #208]	@ (80008a0 <MX_GPIO_Init+0x11c>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d6:	4b32      	ldr	r3, [pc, #200]	@ (80008a0 <MX_GPIO_Init+0x11c>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80007e2:	2200      	movs	r2, #0
 80007e4:	f24c 010f 	movw	r1, #49167	@ 0xc00f
 80007e8:	482e      	ldr	r0, [pc, #184]	@ (80008a4 <MX_GPIO_Init+0x120>)
 80007ea:	f001 fed1 	bl	8002590 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2107      	movs	r1, #7
 80007f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f6:	f001 fecb 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f242 0102 	movw	r1, #8194	@ 0x2002
 8000800:	4829      	ldr	r0, [pc, #164]	@ (80008a8 <MX_GPIO_Init+0x124>)
 8000802:	f001 fec5 	bl	8002590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000806:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800080a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	4821      	ldr	r0, [pc, #132]	@ (80008a4 <MX_GPIO_Init+0x120>)
 800081e:	f001 fd25 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000822:	f24c 030f 	movw	r3, #49167	@ 0xc00f
 8000826:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	481a      	ldr	r0, [pc, #104]	@ (80008a4 <MX_GPIO_Init+0x120>)
 800083c:	f001 fd16 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : MC_Main_Pin PA1 PA2 */
  GPIO_InitStruct.Pin = MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2;
 8000840:	2307      	movs	r3, #7
 8000842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	4619      	mov	r1, r3
 8000856:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800085a:	f001 fd07 	bl	800226c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 800085e:	f242 0302 	movw	r3, #8194	@ 0x2002
 8000862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4619      	mov	r1, r3
 8000876:	480c      	ldr	r0, [pc, #48]	@ (80008a8 <MX_GPIO_Init+0x124>)
 8000878:	f001 fcf8 	bl	800226c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2105      	movs	r1, #5
 8000880:	2028      	movs	r0, #40	@ 0x28
 8000882:	f001 fa9f 	bl	8001dc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000886:	2028      	movs	r0, #40	@ 0x28
 8000888:	f001 fab8 	bl	8001dfc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2101      	movs	r1, #1
 8000890:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <MX_GPIO_Init+0x120>)
 8000892:	f001 fe7d 	bl	8002590 <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_2 */
}
 8000896:	bf00      	nop
 8000898:	3720      	adds	r7, #32
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000800 	.word	0x48000800
 80008a8:	48000400 	.word	0x48000400

080008ac <Heart_Beat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Heart_Beat */
void Heart_Beat(void *argument)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ba:	4807      	ldr	r0, [pc, #28]	@ (80008d8 <Heart_Beat+0x2c>)
 80008bc:	f001 fe68 	bl	8002590 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80008c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008c4:	4805      	ldr	r0, [pc, #20]	@ (80008dc <Heart_Beat+0x30>)
 80008c6:	f001 fe7b 	bl	80025c0 <HAL_GPIO_TogglePin>
    osDelay(500);
 80008ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008ce:	f003 ff49 	bl	8004764 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80008d2:	bf00      	nop
 80008d4:	e7ee      	b.n	80008b4 <Heart_Beat+0x8>
 80008d6:	bf00      	nop
 80008d8:	48000800 	.word	0x48000800
 80008dc:	48000400 	.word	0x48000400

080008e0 <Update_Throttle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Update_Throttle */
void Update_Throttle(void *argument)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Update_Throttle */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2104      	movs	r1, #4
 80008ec:	483c      	ldr	r0, [pc, #240]	@ (80009e0 <Update_Throttle+0x100>)
 80008ee:	f001 fe4f 	bl	8002590 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	2104      	movs	r1, #4
 80008f6:	483a      	ldr	r0, [pc, #232]	@ (80009e0 <Update_Throttle+0x100>)
 80008f8:	f001 fe4a 	bl	8002590 <HAL_GPIO_WritePin>



  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1); //Start DAC 1 and 2
 80008fc:	2100      	movs	r1, #0
 80008fe:	4839      	ldr	r0, [pc, #228]	@ (80009e4 <Update_Throttle+0x104>)
 8000900:	f001 faac 	bl	8001e5c <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 8000904:	2110      	movs	r1, #16
 8000906:	4837      	ldr	r0, [pc, #220]	@ (80009e4 <Update_Throttle+0x104>)
 8000908:	f001 faa8 	bl	8001e5c <HAL_DAC_Start>
  array = 1;
 800090c:	4b36      	ldr	r3, [pc, #216]	@ (80009e8 <Update_Throttle+0x108>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
  array_precharge = 1;
 8000912:	4b36      	ldr	r3, [pc, #216]	@ (80009ec <Update_Throttle+0x10c>)
 8000914:	2201      	movs	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, throttle);
 8000918:	4b35      	ldr	r3, [pc, #212]	@ (80009f0 <Update_Throttle+0x110>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	2200      	movs	r2, #0
 800091e:	2110      	movs	r1, #16
 8000920:	4830      	ldr	r0, [pc, #192]	@ (80009e4 <Update_Throttle+0x104>)
 8000922:	f001 fb42 	bl	8001faa <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, regen);
 8000926:	4b33      	ldr	r3, [pc, #204]	@ (80009f4 <Update_Throttle+0x114>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	2200      	movs	r2, #0
 800092c:	2100      	movs	r1, #0
 800092e:	482d      	ldr	r0, [pc, #180]	@ (80009e4 <Update_Throttle+0x104>)
 8000930:	f001 fb3b 	bl	8001faa <HAL_DAC_SetValue>
	  //updates gpio pins with states from global variables

	  //change for bistable relay
	  //gonna have to think about this section

	  if(mc_main_ctrl){
 8000934:	4b30      	ldr	r3, [pc, #192]	@ (80009f8 <Update_Throttle+0x118>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d006      	beq.n	800094a <Update_Throttle+0x6a>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	2101      	movs	r1, #1
 8000940:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000944:	f001 fe24 	bl	8002590 <HAL_GPIO_WritePin>
 8000948:	e005      	b.n	8000956 <Update_Throttle+0x76>
	  }else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2101      	movs	r1, #1
 800094e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000952:	f001 fe1d 	bl	8002590 <HAL_GPIO_WritePin>
	  }

	  if(mc_pwreco_ctrl){
 8000956:	4b29      	ldr	r3, [pc, #164]	@ (80009fc <Update_Throttle+0x11c>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d006      	beq.n	800096c <Update_Throttle+0x8c>
		  //closed power
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2102      	movs	r1, #2
 8000962:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000966:	f001 fe13 	bl	8002590 <HAL_GPIO_WritePin>
 800096a:	e005      	b.n	8000978 <Update_Throttle+0x98>
	  }else{
		  //open eco
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	2102      	movs	r1, #2
 8000970:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000974:	f001 fe0c 	bl	8002590 <HAL_GPIO_WritePin>
	  }


	  if(dirrection == true){
 8000978:	4b21      	ldr	r3, [pc, #132]	@ (8000a00 <Update_Throttle+0x120>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d006      	beq.n	800098e <Update_Throttle+0xae>
		  //closed forward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8000980:	2201      	movs	r2, #1
 8000982:	2104      	movs	r1, #4
 8000984:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000988:	f001 fe02 	bl	8002590 <HAL_GPIO_WritePin>
 800098c:	e005      	b.n	800099a <Update_Throttle+0xba>
	  }else{
		  //open backward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2104      	movs	r1, #4
 8000992:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000996:	f001 fdfb 	bl	8002590 <HAL_GPIO_WritePin>
	  }

	  if(array_precharge == true){
 800099a:	4b14      	ldr	r3, [pc, #80]	@ (80009ec <Update_Throttle+0x10c>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d005      	beq.n	80009ae <Update_Throttle+0xce>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2104      	movs	r1, #4
 80009a6:	480e      	ldr	r0, [pc, #56]	@ (80009e0 <Update_Throttle+0x100>)
 80009a8:	f001 fdf2 	bl	8002590 <HAL_GPIO_WritePin>
 80009ac:	e004      	b.n	80009b8 <Update_Throttle+0xd8>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2104      	movs	r1, #4
 80009b2:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <Update_Throttle+0x100>)
 80009b4:	f001 fdec 	bl	8002590 <HAL_GPIO_WritePin>
	  }

	  if(array == true){
 80009b8:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <Update_Throttle+0x108>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d005      	beq.n	80009cc <Update_Throttle+0xec>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2108      	movs	r1, #8
 80009c4:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <Update_Throttle+0x100>)
 80009c6:	f001 fde3 	bl	8002590 <HAL_GPIO_WritePin>
 80009ca:	e004      	b.n	80009d6 <Update_Throttle+0xf6>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	2108      	movs	r1, #8
 80009d0:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <Update_Throttle+0x100>)
 80009d2:	f001 fddd 	bl	8002590 <HAL_GPIO_WritePin>
	  }


	  osDelay(20);
 80009d6:	2014      	movs	r0, #20
 80009d8:	f003 fec4 	bl	8004764 <osDelay>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, throttle);
 80009dc:	e79c      	b.n	8000918 <Update_Throttle+0x38>
 80009de:	bf00      	nop
 80009e0:	48000800 	.word	0x48000800
 80009e4:	200000cc 	.word	0x200000cc
 80009e8:	2000014e 	.word	0x2000014e
 80009ec:	2000014f 	.word	0x2000014f
 80009f0:	20000144 	.word	0x20000144
 80009f4:	20000146 	.word	0x20000146
 80009f8:	2000014d 	.word	0x2000014d
 80009fc:	20000150 	.word	0x20000150
 8000a00:	2000014c 	.word	0x2000014c

08000a04 <Lights_Control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Lights_Control */
void Lights_Control(void *argument)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  if(left_turn_active){
 8000a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000af8 <Lights_Control+0xf4>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d016      	beq.n	8000a42 <Lights_Control+0x3e>
		  if(signal_counter < 5){
 8000a14:	4b39      	ldr	r3, [pc, #228]	@ (8000afc <Lights_Control+0xf8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b04      	cmp	r3, #4
 8000a1a:	dc06      	bgt.n	8000a2a <Lights_Control+0x26>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a22:	4837      	ldr	r0, [pc, #220]	@ (8000b00 <Lights_Control+0xfc>)
 8000a24:	f001 fdb4 	bl	8002590 <HAL_GPIO_WritePin>
 8000a28:	e005      	b.n	8000a36 <Lights_Control+0x32>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a30:	4833      	ldr	r0, [pc, #204]	@ (8000b00 <Lights_Control+0xfc>)
 8000a32:	f001 fdad 	bl	8002590 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 8000a36:	4b31      	ldr	r3, [pc, #196]	@ (8000afc <Lights_Control+0xf8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	4a2f      	ldr	r2, [pc, #188]	@ (8000afc <Lights_Control+0xf8>)
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	e010      	b.n	8000a64 <Lights_Control+0x60>

	  }else{
		  if(brakes_active){
 8000a42:	4b30      	ldr	r3, [pc, #192]	@ (8000b04 <Lights_Control+0x100>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d006      	beq.n	8000a58 <Lights_Control+0x54>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a50:	482b      	ldr	r0, [pc, #172]	@ (8000b00 <Lights_Control+0xfc>)
 8000a52:	f001 fd9d 	bl	8002590 <HAL_GPIO_WritePin>
 8000a56:	e005      	b.n	8000a64 <Lights_Control+0x60>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a5e:	4828      	ldr	r0, [pc, #160]	@ (8000b00 <Lights_Control+0xfc>)
 8000a60:	f001 fd96 	bl	8002590 <HAL_GPIO_WritePin>
		  }
	  }

	  if(right_turn_active){
 8000a64:	4b28      	ldr	r3, [pc, #160]	@ (8000b08 <Lights_Control+0x104>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d014      	beq.n	8000a96 <Lights_Control+0x92>
		  if(signal_counter < 5){
 8000a6c:	4b23      	ldr	r3, [pc, #140]	@ (8000afc <Lights_Control+0xf8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b04      	cmp	r3, #4
 8000a72:	dc05      	bgt.n	8000a80 <Lights_Control+0x7c>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2102      	movs	r1, #2
 8000a78:	4821      	ldr	r0, [pc, #132]	@ (8000b00 <Lights_Control+0xfc>)
 8000a7a:	f001 fd89 	bl	8002590 <HAL_GPIO_WritePin>
 8000a7e:	e004      	b.n	8000a8a <Lights_Control+0x86>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2102      	movs	r1, #2
 8000a84:	481e      	ldr	r0, [pc, #120]	@ (8000b00 <Lights_Control+0xfc>)
 8000a86:	f001 fd83 	bl	8002590 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000afc <Lights_Control+0xf8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	4a1a      	ldr	r2, [pc, #104]	@ (8000afc <Lights_Control+0xf8>)
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	e00e      	b.n	8000ab4 <Lights_Control+0xb0>

	  }else{
		  if(brakes_active){
 8000a96:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <Lights_Control+0x100>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d005      	beq.n	8000aaa <Lights_Control+0xa6>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4817      	ldr	r0, [pc, #92]	@ (8000b00 <Lights_Control+0xfc>)
 8000aa4:	f001 fd74 	bl	8002590 <HAL_GPIO_WritePin>
 8000aa8:	e004      	b.n	8000ab4 <Lights_Control+0xb0>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2102      	movs	r1, #2
 8000aae:	4814      	ldr	r0, [pc, #80]	@ (8000b00 <Lights_Control+0xfc>)
 8000ab0:	f001 fd6e 	bl	8002590 <HAL_GPIO_WritePin>
		  }
	  }

	  if(brakes_active){
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <Lights_Control+0x100>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d005      	beq.n	8000ac8 <Lights_Control+0xc4>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET); //sets center rear light (brake light)
 8000abc:	2200      	movs	r2, #0
 8000abe:	2101      	movs	r1, #1
 8000ac0:	480f      	ldr	r0, [pc, #60]	@ (8000b00 <Lights_Control+0xfc>)
 8000ac2:	f001 fd65 	bl	8002590 <HAL_GPIO_WritePin>
 8000ac6:	e004      	b.n	8000ad2 <Lights_Control+0xce>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2101      	movs	r1, #1
 8000acc:	480c      	ldr	r0, [pc, #48]	@ (8000b00 <Lights_Control+0xfc>)
 8000ace:	f001 fd5f 	bl	8002590 <HAL_GPIO_WritePin>
	  }
	  signal_counter = signal_counter%10;
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <Lights_Control+0xf8>)
 8000ad4:	6819      	ldr	r1, [r3, #0]
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b0c <Lights_Control+0x108>)
 8000ad8:	fb83 2301 	smull	r2, r3, r3, r1
 8000adc:	109a      	asrs	r2, r3, #2
 8000ade:	17cb      	asrs	r3, r1, #31
 8000ae0:	1ad2      	subs	r2, r2, r3
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	4413      	add	r3, r2
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	1aca      	subs	r2, r1, r3
 8000aec:	4b03      	ldr	r3, [pc, #12]	@ (8000afc <Lights_Control+0xf8>)
 8000aee:	601a      	str	r2, [r3, #0]
	  osDelay(100);
 8000af0:	2064      	movs	r0, #100	@ 0x64
 8000af2:	f003 fe37 	bl	8004764 <osDelay>
	  if(left_turn_active){
 8000af6:	e789      	b.n	8000a0c <Lights_Control+0x8>
 8000af8:	2000014a 	.word	0x2000014a
 8000afc:	20000154 	.word	0x20000154
 8000b00:	48000800 	.word	0x48000800
 8000b04:	20000148 	.word	0x20000148
 8000b08:	2000014b 	.word	0x2000014b
 8000b0c:	66666667 	.word	0x66666667

08000b10 <Read_Sensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Read_Sensors */
void Read_Sensors(void *argument)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	//send CAN message
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
		Error_Handler();
	}
	*/
	  osDelay(100);
 8000b18:	2064      	movs	r0, #100	@ 0x64
 8000b1a:	f003 fe23 	bl	8004764 <osDelay>
 8000b1e:	e7fb      	b.n	8000b18 <Read_Sensors+0x8>

08000b20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	@ (8000b40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d101      	bne.n	8000b36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b32:	f000 fab3 	bl	800109c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40001000 	.word	0x40001000

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <Error_Handler+0x8>

08000b50 <HAL_MspInit>:
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b5a:	4a10      	ldr	r2, [pc, #64]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b72:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b7a:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2200      	movs	r2, #0
 8000b88:	210f      	movs	r1, #15
 8000b8a:	f06f 0001 	mvn.w	r0, #1
 8000b8e:	f001 f919 	bl	8001dc4 <HAL_NVIC_SetPriority>
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <HAL_CAN_MspInit>:
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	@ 0x30
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a56      	ldr	r2, [pc, #344]	@ (8000d18 <HAL_CAN_MspInit+0x178>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d14b      	bne.n	8000c5a <HAL_CAN_MspInit+0xba>
 8000bc2:	4b56      	ldr	r3, [pc, #344]	@ (8000d1c <HAL_CAN_MspInit+0x17c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4a54      	ldr	r2, [pc, #336]	@ (8000d1c <HAL_CAN_MspInit+0x17c>)
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	4b53      	ldr	r3, [pc, #332]	@ (8000d1c <HAL_CAN_MspInit+0x17c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d10b      	bne.n	8000bec <HAL_CAN_MspInit+0x4c>
 8000bd4:	4b52      	ldr	r3, [pc, #328]	@ (8000d20 <HAL_CAN_MspInit+0x180>)
 8000bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd8:	4a51      	ldr	r2, [pc, #324]	@ (8000d20 <HAL_CAN_MspInit+0x180>)
 8000bda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bde:	6593      	str	r3, [r2, #88]	@ 0x58
 8000be0:	4b4f      	ldr	r3, [pc, #316]	@ (8000d20 <HAL_CAN_MspInit+0x180>)
 8000be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000be8:	61bb      	str	r3, [r7, #24]
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	4b4c      	ldr	r3, [pc, #304]	@ (8000d20 <HAL_CAN_MspInit+0x180>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf0:	4a4b      	ldr	r2, [pc, #300]	@ (8000d20 <HAL_CAN_MspInit+0x180>)
 8000bf2:	f043 0302 	orr.w	r3, r3, #2
 8000bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf8:	4b49      	ldr	r3, [pc, #292]	@ (8000d20 <HAL_CAN_MspInit+0x180>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	617b      	str	r3, [r7, #20]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c08:	61fb      	str	r3, [r7, #28]
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	623b      	str	r3, [r7, #32]
 8000c0e:	2301      	movs	r3, #1
 8000c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c12:	2303      	movs	r3, #3
 8000c14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c16:	2309      	movs	r3, #9
 8000c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4840      	ldr	r0, [pc, #256]	@ (8000d24 <HAL_CAN_MspInit+0x184>)
 8000c22:	f001 fb23 	bl	800226c <HAL_GPIO_Init>
 8000c26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c2a:	61fb      	str	r3, [r7, #28]
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	623b      	str	r3, [r7, #32]
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c34:	2303      	movs	r3, #3
 8000c36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c38:	2309      	movs	r3, #9
 8000c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	4838      	ldr	r0, [pc, #224]	@ (8000d24 <HAL_CAN_MspInit+0x184>)
 8000c44:	f001 fb12 	bl	800226c <HAL_GPIO_Init>
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2105      	movs	r1, #5
 8000c4c:	2014      	movs	r0, #20
 8000c4e:	f001 f8b9 	bl	8001dc4 <HAL_NVIC_SetPriority>
 8000c52:	2014      	movs	r0, #20
 8000c54:	f001 f8d2 	bl	8001dfc <HAL_NVIC_EnableIRQ>
 8000c58:	e059      	b.n	8000d0e <HAL_CAN_MspInit+0x16e>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a32      	ldr	r2, [pc, #200]	@ (8000d28 <HAL_CAN_MspInit+0x188>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d154      	bne.n	8000d0e <HAL_CAN_MspInit+0x16e>
 8000c64:	4b2e      	ldr	r3, [pc, #184]	@ (8000d20 <HAL_CAN_MspInit+0x180>)
 8000c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c68:	4a2d      	ldr	r2, [pc, #180]	@ (8000d20 <HAL_CAN_MspInit+0x180>)
 8000c6a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c70:	4b2b      	ldr	r3, [pc, #172]	@ (8000d20 <HAL_CAN_MspInit+0x180>)
 8000c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	4b27      	ldr	r3, [pc, #156]	@ (8000d1c <HAL_CAN_MspInit+0x17c>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	4a26      	ldr	r2, [pc, #152]	@ (8000d1c <HAL_CAN_MspInit+0x17c>)
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	4b25      	ldr	r3, [pc, #148]	@ (8000d1c <HAL_CAN_MspInit+0x17c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d10b      	bne.n	8000ca6 <HAL_CAN_MspInit+0x106>
 8000c8e:	4b24      	ldr	r3, [pc, #144]	@ (8000d20 <HAL_CAN_MspInit+0x180>)
 8000c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c92:	4a23      	ldr	r2, [pc, #140]	@ (8000d20 <HAL_CAN_MspInit+0x180>)
 8000c94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c98:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <HAL_CAN_MspInit+0x180>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <HAL_CAN_MspInit+0x180>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	4a1d      	ldr	r2, [pc, #116]	@ (8000d20 <HAL_CAN_MspInit+0x180>)
 8000cac:	f043 0302 	orr.w	r3, r3, #2
 8000cb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <HAL_CAN_MspInit+0x180>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	60bb      	str	r3, [r7, #8]
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2320      	movs	r3, #32
 8000cc0:	61fb      	str	r3, [r7, #28]
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	623b      	str	r3, [r7, #32]
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cca:	2303      	movs	r3, #3
 8000ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cce:	2303      	movs	r3, #3
 8000cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4812      	ldr	r0, [pc, #72]	@ (8000d24 <HAL_CAN_MspInit+0x184>)
 8000cda:	f001 fac7 	bl	800226c <HAL_GPIO_Init>
 8000cde:	2340      	movs	r3, #64	@ 0x40
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	623b      	str	r3, [r7, #32]
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cea:	2303      	movs	r3, #3
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cee:	2308      	movs	r3, #8
 8000cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	480a      	ldr	r0, [pc, #40]	@ (8000d24 <HAL_CAN_MspInit+0x184>)
 8000cfa:	f001 fab7 	bl	800226c <HAL_GPIO_Init>
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2105      	movs	r1, #5
 8000d02:	2057      	movs	r0, #87	@ 0x57
 8000d04:	f001 f85e 	bl	8001dc4 <HAL_NVIC_SetPriority>
 8000d08:	2057      	movs	r0, #87	@ 0x57
 8000d0a:	f001 f877 	bl	8001dfc <HAL_NVIC_EnableIRQ>
 8000d0e:	bf00      	nop
 8000d10:	3730      	adds	r7, #48	@ 0x30
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40006400 	.word	0x40006400
 8000d1c:	20000198 	.word	0x20000198
 8000d20:	40021000 	.word	0x40021000
 8000d24:	48000400 	.word	0x48000400
 8000d28:	40006800 	.word	0x40006800

08000d2c <HAL_DAC_MspInit>:
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	@ 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a19      	ldr	r2, [pc, #100]	@ (8000db0 <HAL_DAC_MspInit+0x84>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d12c      	bne.n	8000da8 <HAL_DAC_MspInit+0x7c>
 8000d4e:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <HAL_DAC_MspInit+0x88>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d52:	4a18      	ldr	r2, [pc, #96]	@ (8000db4 <HAL_DAC_MspInit+0x88>)
 8000d54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d5a:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <HAL_DAC_MspInit+0x88>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <HAL_DAC_MspInit+0x88>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6a:	4a12      	ldr	r2, [pc, #72]	@ (8000db4 <HAL_DAC_MspInit+0x88>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <HAL_DAC_MspInit+0x88>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2330      	movs	r3, #48	@ 0x30
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	2303      	movs	r3, #3
 8000d84:	61bb      	str	r3, [r7, #24]
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d94:	f001 fa6a 	bl	800226c <HAL_GPIO_Init>
 8000d98:	2200      	movs	r2, #0
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	2036      	movs	r0, #54	@ 0x36
 8000d9e:	f001 f811 	bl	8001dc4 <HAL_NVIC_SetPriority>
 8000da2:	2036      	movs	r0, #54	@ 0x36
 8000da4:	f001 f82a 	bl	8001dfc <HAL_NVIC_EnableIRQ>
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	@ 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40007400 	.word	0x40007400
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_I2C_MspInit>:
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b0ac      	sub	sp, #176	@ 0xb0
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	228c      	movs	r2, #140	@ 0x8c
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f006 f995 	bl	8007108 <memset>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a21      	ldr	r2, [pc, #132]	@ (8000e68 <HAL_I2C_MspInit+0xb0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d13b      	bne.n	8000e60 <HAL_I2C_MspInit+0xa8>
 8000de8:	2380      	movs	r3, #128	@ 0x80
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	2300      	movs	r3, #0
 8000dee:	667b      	str	r3, [r7, #100]	@ 0x64
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4618      	mov	r0, r3
 8000df6:	f002 fc05 	bl	8003604 <HAL_RCCEx_PeriphCLKConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_I2C_MspInit+0x4c>
 8000e00:	f7ff fea0 	bl	8000b44 <Error_Handler>
 8000e04:	4b19      	ldr	r3, [pc, #100]	@ (8000e6c <HAL_I2C_MspInit+0xb4>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e08:	4a18      	ldr	r2, [pc, #96]	@ (8000e6c <HAL_I2C_MspInit+0xb4>)
 8000e0a:	f043 0302 	orr.w	r3, r3, #2
 8000e0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e10:	4b16      	ldr	r3, [pc, #88]	@ (8000e6c <HAL_I2C_MspInit+0xb4>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000e24:	2312      	movs	r3, #18
 8000e26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000e30:	2303      	movs	r3, #3
 8000e32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000e36:	2304      	movs	r3, #4
 8000e38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000e3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e40:	4619      	mov	r1, r3
 8000e42:	480b      	ldr	r0, [pc, #44]	@ (8000e70 <HAL_I2C_MspInit+0xb8>)
 8000e44:	f001 fa12 	bl	800226c <HAL_GPIO_Init>
 8000e48:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <HAL_I2C_MspInit+0xb4>)
 8000e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4c:	4a07      	ldr	r2, [pc, #28]	@ (8000e6c <HAL_I2C_MspInit+0xb4>)
 8000e4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e52:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e54:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <HAL_I2C_MspInit+0xb4>)
 8000e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	bf00      	nop
 8000e62:	37b0      	adds	r7, #176	@ 0xb0
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40005800 	.word	0x40005800
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	48000400 	.word	0x48000400

08000e74 <HAL_InitTick>:
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08e      	sub	sp, #56	@ 0x38
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000e82:	4b34      	ldr	r3, [pc, #208]	@ (8000f54 <HAL_InitTick+0xe0>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e86:	4a33      	ldr	r2, [pc, #204]	@ (8000f54 <HAL_InitTick+0xe0>)
 8000e88:	f043 0310 	orr.w	r3, r3, #16
 8000e8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e8e:	4b31      	ldr	r3, [pc, #196]	@ (8000f54 <HAL_InitTick+0xe0>)
 8000e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f107 0210 	add.w	r2, r7, #16
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f002 fb1b 	bl	80034e0 <HAL_RCC_GetClockConfig>
 8000eaa:	6a3b      	ldr	r3, [r7, #32]
 8000eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d103      	bne.n	8000ebc <HAL_InitTick+0x48>
 8000eb4:	f002 fafe 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8000eb8:	6378      	str	r0, [r7, #52]	@ 0x34
 8000eba:	e004      	b.n	8000ec6 <HAL_InitTick+0x52>
 8000ebc:	f002 fafa 	bl	80034b4 <HAL_RCC_GetPCLK1Freq>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ec8:	4a23      	ldr	r2, [pc, #140]	@ (8000f58 <HAL_InitTick+0xe4>)
 8000eca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ece:	0c9b      	lsrs	r3, r3, #18
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000ed4:	4b21      	ldr	r3, [pc, #132]	@ (8000f5c <HAL_InitTick+0xe8>)
 8000ed6:	4a22      	ldr	r2, [pc, #136]	@ (8000f60 <HAL_InitTick+0xec>)
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	4b20      	ldr	r3, [pc, #128]	@ (8000f5c <HAL_InitTick+0xe8>)
 8000edc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f5c <HAL_InitTick+0xe8>)
 8000ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ee6:	6053      	str	r3, [r2, #4]
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f5c <HAL_InitTick+0xe8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
 8000eee:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <HAL_InitTick+0xe8>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	4b19      	ldr	r3, [pc, #100]	@ (8000f5c <HAL_InitTick+0xe8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
 8000efa:	4818      	ldr	r0, [pc, #96]	@ (8000f5c <HAL_InitTick+0xe8>)
 8000efc:	f003 f84c 	bl	8003f98 <HAL_TIM_Base_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000f06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d11b      	bne.n	8000f46 <HAL_InitTick+0xd2>
 8000f0e:	4813      	ldr	r0, [pc, #76]	@ (8000f5c <HAL_InitTick+0xe8>)
 8000f10:	f003 f8a4 	bl	800405c <HAL_TIM_Base_Start_IT>
 8000f14:	4603      	mov	r3, r0
 8000f16:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000f1a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d111      	bne.n	8000f46 <HAL_InitTick+0xd2>
 8000f22:	2036      	movs	r0, #54	@ 0x36
 8000f24:	f000 ff6a 	bl	8001dfc <HAL_NVIC_EnableIRQ>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b0f      	cmp	r3, #15
 8000f2c:	d808      	bhi.n	8000f40 <HAL_InitTick+0xcc>
 8000f2e:	2200      	movs	r2, #0
 8000f30:	6879      	ldr	r1, [r7, #4]
 8000f32:	2036      	movs	r0, #54	@ 0x36
 8000f34:	f000 ff46 	bl	8001dc4 <HAL_NVIC_SetPriority>
 8000f38:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <HAL_InitTick+0xf0>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e002      	b.n	8000f46 <HAL_InitTick+0xd2>
 8000f40:	2301      	movs	r3, #1
 8000f42:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000f46:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3738      	adds	r7, #56	@ 0x38
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000
 8000f58:	431bde83 	.word	0x431bde83
 8000f5c:	2000019c 	.word	0x2000019c
 8000f60:	40001000 	.word	0x40001000
 8000f64:	20000004 	.word	0x20000004

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <NMI_Handler+0x4>

08000f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <HardFault_Handler+0x4>

08000f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <MemManage_Handler+0x4>

08000f80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
	...

08000fa0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <CAN1_RX0_IRQHandler+0x10>)
 8000fa6:	f000 fc25 	bl	80017f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000007c 	.word	0x2000007c

08000fb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fb8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fbc:	f001 fb1a 	bl	80025f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fc8:	4803      	ldr	r0, [pc, #12]	@ (8000fd8 <TIM6_DAC_IRQHandler+0x14>)
 8000fca:	f003 f8b7 	bl	800413c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8000fce:	4803      	ldr	r0, [pc, #12]	@ (8000fdc <TIM6_DAC_IRQHandler+0x18>)
 8000fd0:	f000 ff91 	bl	8001ef6 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000019c 	.word	0x2000019c
 8000fdc:	200000cc 	.word	0x200000cc

08000fe0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <CAN2_RX0_IRQHandler+0x10>)
 8000fe6:	f000 fc05 	bl	80017f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200000a4 	.word	0x200000a4

08000ff4 <SystemInit>:
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <SystemInit+0x20>)
 8000ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ffe:	4a05      	ldr	r2, [pc, #20]	@ (8001014 <SystemInit+0x20>)
 8001000:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001004:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001050 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800101c:	f7ff ffea 	bl	8000ff4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001020:	480c      	ldr	r0, [pc, #48]	@ (8001054 <LoopForever+0x6>)
  ldr r1, =_edata
 8001022:	490d      	ldr	r1, [pc, #52]	@ (8001058 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001024:	4a0d      	ldr	r2, [pc, #52]	@ (800105c <LoopForever+0xe>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001038:	4c0a      	ldr	r4, [pc, #40]	@ (8001064 <LoopForever+0x16>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001046:	f006 f8bd 	bl	80071c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800104a:	f7ff f9b9 	bl	80003c0 <main>

0800104e <LoopForever>:

LoopForever:
    b LoopForever
 800104e:	e7fe      	b.n	800104e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001050:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800105c:	08007420 	.word	0x08007420
  ldr r2, =_sbss
 8001060:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001064:	20001ccc 	.word	0x20001ccc

08001068 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC1_2_IRQHandler>

0800106a <HAL_Init>:
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	2300      	movs	r3, #0
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	2003      	movs	r0, #3
 8001076:	f000 fe9a 	bl	8001dae <HAL_NVIC_SetPriorityGrouping>
 800107a:	200f      	movs	r0, #15
 800107c:	f7ff fefa 	bl	8000e74 <HAL_InitTick>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d002      	beq.n	800108c <HAL_Init+0x22>
 8001086:	2301      	movs	r3, #1
 8001088:	71fb      	strb	r3, [r7, #7]
 800108a:	e001      	b.n	8001090 <HAL_Init+0x26>
 800108c:	f7ff fd60 	bl	8000b50 <HAL_MspInit>
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_IncTick>:
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	@ (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008
 80010c0:	200001e8 	.word	0x200001e8

080010c4 <HAL_GetTick>:
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4b03      	ldr	r3, [pc, #12]	@ (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	200001e8 	.word	0x200001e8

080010dc <HAL_Delay>:
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	f7ff ffee 	bl	80010c4 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f4:	d005      	beq.n	8001102 <HAL_Delay+0x26>
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <HAL_Delay+0x44>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	bf00      	nop
 8001104:	f7ff ffde 	bl	80010c4 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d8f7      	bhi.n	8001104 <HAL_Delay+0x28>
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008

08001124 <HAL_CAN_Init>:
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_CAN_Init+0x12>
 8001132:	2301      	movs	r3, #1
 8001134:	e0ed      	b.n	8001312 <HAL_CAN_Init+0x1ee>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3020 	ldrb.w	r3, [r3, #32]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <HAL_CAN_Init+0x24>
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff fd2c 	bl	8000ba0 <HAL_CAN_MspInit>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0201 	orr.w	r2, r2, #1
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	f7ff ffb4 	bl	80010c4 <HAL_GetTick>
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	e012      	b.n	8001186 <HAL_CAN_Init+0x62>
 8001160:	f7ff ffb0 	bl	80010c4 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b0a      	cmp	r3, #10
 800116c:	d90b      	bls.n	8001186 <HAL_CAN_Init+0x62>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001172:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	625a      	str	r2, [r3, #36]	@ 0x24
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2205      	movs	r2, #5
 800117e:	f883 2020 	strb.w	r2, [r3, #32]
 8001182:	2301      	movs	r3, #1
 8001184:	e0c5      	b.n	8001312 <HAL_CAN_Init+0x1ee>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0e5      	beq.n	8001160 <HAL_CAN_Init+0x3c>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0202 	bic.w	r2, r2, #2
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	f7ff ff8e 	bl	80010c4 <HAL_GetTick>
 80011a8:	60f8      	str	r0, [r7, #12]
 80011aa:	e012      	b.n	80011d2 <HAL_CAN_Init+0xae>
 80011ac:	f7ff ff8a 	bl	80010c4 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b0a      	cmp	r3, #10
 80011b8:	d90b      	bls.n	80011d2 <HAL_CAN_Init+0xae>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2205      	movs	r2, #5
 80011ca:	f883 2020 	strb.w	r2, [r3, #32]
 80011ce:	2301      	movs	r3, #1
 80011d0:	e09f      	b.n	8001312 <HAL_CAN_Init+0x1ee>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0302 	and.w	r3, r3, #2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1e5      	bne.n	80011ac <HAL_CAN_Init+0x88>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	7e1b      	ldrb	r3, [r3, #24]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d108      	bne.n	80011fa <HAL_CAN_Init+0xd6>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e007      	b.n	800120a <HAL_CAN_Init+0xe6>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	7e5b      	ldrb	r3, [r3, #25]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d108      	bne.n	8001224 <HAL_CAN_Init+0x100>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	e007      	b.n	8001234 <HAL_CAN_Init+0x110>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7e9b      	ldrb	r3, [r3, #26]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d108      	bne.n	800124e <HAL_CAN_Init+0x12a>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f042 0220 	orr.w	r2, r2, #32
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	e007      	b.n	800125e <HAL_CAN_Init+0x13a>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0220 	bic.w	r2, r2, #32
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7edb      	ldrb	r3, [r3, #27]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d108      	bne.n	8001278 <HAL_CAN_Init+0x154>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f022 0210 	bic.w	r2, r2, #16
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	e007      	b.n	8001288 <HAL_CAN_Init+0x164>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 0210 	orr.w	r2, r2, #16
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7f1b      	ldrb	r3, [r3, #28]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d108      	bne.n	80012a2 <HAL_CAN_Init+0x17e>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0208 	orr.w	r2, r2, #8
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	e007      	b.n	80012b2 <HAL_CAN_Init+0x18e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0208 	bic.w	r2, r2, #8
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7f5b      	ldrb	r3, [r3, #29]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d108      	bne.n	80012cc <HAL_CAN_Init+0x1a8>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f042 0204 	orr.w	r2, r2, #4
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	e007      	b.n	80012dc <HAL_CAN_Init+0x1b8>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0204 	bic.w	r2, r2, #4
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	ea42 0103 	orr.w	r1, r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	1e5a      	subs	r2, r3, #1
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	430a      	orrs	r2, r1
 8001300:	61da      	str	r2, [r3, #28]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	625a      	str	r2, [r3, #36]	@ 0x24
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2020 	strb.w	r2, [r3, #32]
 8001310:	2300      	movs	r3, #0
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_CAN_ConfigFilter>:
 800131c:	b480      	push	{r7}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	617b      	str	r3, [r7, #20]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001332:	74fb      	strb	r3, [r7, #19]
 8001334:	7cfb      	ldrb	r3, [r7, #19]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d003      	beq.n	8001342 <HAL_CAN_ConfigFilter+0x26>
 800133a:	7cfb      	ldrb	r3, [r7, #19]
 800133c:	2b02      	cmp	r3, #2
 800133e:	f040 80be 	bne.w	80014be <HAL_CAN_ConfigFilter+0x1a2>
 8001342:	4b65      	ldr	r3, [pc, #404]	@ (80014d8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800134c:	f043 0201 	orr.w	r2, r3, #1
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800135c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	431a      	orrs	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	f003 031f 	and.w	r3, r3, #31
 8001382:	2201      	movs	r2, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	43db      	mvns	r3, r3
 8001394:	401a      	ands	r2, r3
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d123      	bne.n	80013ec <HAL_CAN_ConfigFilter+0xd0>
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	401a      	ands	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	0419      	lsls	r1, r3, #16
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	6952      	ldr	r2, [r2, #20]
 80013c6:	4319      	orrs	r1, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	3248      	adds	r2, #72	@ 0x48
 80013cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	0419      	lsls	r1, r3, #16
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	6979      	ldr	r1, [r7, #20]
 80013e4:	3348      	adds	r3, #72	@ 0x48
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	440b      	add	r3, r1
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d122      	bne.n	800143a <HAL_CAN_ConfigFilter+0x11e>
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	431a      	orrs	r2, r3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0419      	lsls	r1, r3, #16
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	b29b      	uxth	r3, r3
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	6952      	ldr	r2, [r2, #20]
 8001414:	4319      	orrs	r1, r3
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3248      	adds	r2, #72	@ 0x48
 800141a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	0419      	lsls	r1, r3, #16
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	b29a      	uxth	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	430a      	orrs	r2, r1
 8001430:	6979      	ldr	r1, [r7, #20]
 8001432:	3348      	adds	r3, #72	@ 0x48
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	440b      	add	r3, r1
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d109      	bne.n	8001456 <HAL_CAN_ConfigFilter+0x13a>
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	43db      	mvns	r3, r3
 800144c:	401a      	ands	r2, r3
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001454:	e007      	b.n	8001466 <HAL_CAN_ConfigFilter+0x14a>
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	431a      	orrs	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d109      	bne.n	8001482 <HAL_CAN_ConfigFilter+0x166>
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43db      	mvns	r3, r3
 8001478:	401a      	ands	r2, r3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001480:	e007      	b.n	8001492 <HAL_CAN_ConfigFilter+0x176>
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	431a      	orrs	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d107      	bne.n	80014aa <HAL_CAN_ConfigFilter+0x18e>
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014b0:	f023 0201 	bic.w	r2, r3, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 80014ba:	2300      	movs	r3, #0
 80014bc:	e006      	b.n	80014cc <HAL_CAN_ConfigFilter+0x1b0>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80014ca:	2301      	movs	r3, #1
 80014cc:	4618      	mov	r0, r3
 80014ce:	371c      	adds	r7, #28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	40006400 	.word	0x40006400

080014dc <HAL_CAN_Start>:
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d12e      	bne.n	800154e <HAL_CAN_Start+0x72>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2202      	movs	r2, #2
 80014f4:	f883 2020 	strb.w	r2, [r3, #32]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0201 	bic.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	f7ff fddc 	bl	80010c4 <HAL_GetTick>
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	e012      	b.n	8001536 <HAL_CAN_Start+0x5a>
 8001510:	f7ff fdd8 	bl	80010c4 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b0a      	cmp	r3, #10
 800151c:	d90b      	bls.n	8001536 <HAL_CAN_Start+0x5a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001522:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	625a      	str	r2, [r3, #36]	@ 0x24
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2205      	movs	r2, #5
 800152e:	f883 2020 	strb.w	r2, [r3, #32]
 8001532:	2301      	movs	r3, #1
 8001534:	e012      	b.n	800155c <HAL_CAN_Start+0x80>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1e5      	bne.n	8001510 <HAL_CAN_Start+0x34>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	625a      	str	r2, [r3, #36]	@ 0x24
 800154a:	2300      	movs	r3, #0
 800154c:	e006      	b.n	800155c <HAL_CAN_Start+0x80>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001552:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	625a      	str	r2, [r3, #36]	@ 0x24
 800155a:	2301      	movs	r3, #1
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_CAN_GetRxMessage>:
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001578:	75fb      	strb	r3, [r7, #23]
 800157a:	7dfb      	ldrb	r3, [r7, #23]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d003      	beq.n	8001588 <HAL_CAN_GetRxMessage+0x24>
 8001580:	7dfb      	ldrb	r3, [r7, #23]
 8001582:	2b02      	cmp	r3, #2
 8001584:	f040 8103 	bne.w	800178e <HAL_CAN_GetRxMessage+0x22a>
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10e      	bne.n	80015ac <HAL_CAN_GetRxMessage+0x48>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d116      	bne.n	80015ca <HAL_CAN_GetRxMessage+0x66>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0f7      	b.n	800179c <HAL_CAN_GetRxMessage+0x238>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d107      	bne.n	80015ca <HAL_CAN_GetRxMessage+0x66>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80015c6:	2301      	movs	r3, #1
 80015c8:	e0e8      	b.n	800179c <HAL_CAN_GetRxMessage+0x238>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	331b      	adds	r3, #27
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	4413      	add	r3, r2
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0204 	and.w	r2, r3, #4
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10c      	bne.n	8001602 <HAL_CAN_GetRxMessage+0x9e>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	331b      	adds	r3, #27
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	4413      	add	r3, r2
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	0d5b      	lsrs	r3, r3, #21
 80015f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	e00b      	b.n	800161a <HAL_CAN_GetRxMessage+0xb6>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	331b      	adds	r3, #27
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	4413      	add	r3, r2
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	08db      	lsrs	r3, r3, #3
 8001612:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	331b      	adds	r3, #27
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	4413      	add	r3, r2
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0202 	and.w	r2, r3, #2
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	331b      	adds	r3, #27
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	4413      	add	r3, r2
 800163c:	3304      	adds	r3, #4
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_CAN_GetRxMessage+0xec>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2208      	movs	r2, #8
 800164c:	611a      	str	r2, [r3, #16]
 800164e:	e00b      	b.n	8001668 <HAL_CAN_GetRxMessage+0x104>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	331b      	adds	r3, #27
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	4413      	add	r3, r2
 800165c:	3304      	adds	r3, #4
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 020f 	and.w	r2, r3, #15
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	611a      	str	r2, [r3, #16]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	331b      	adds	r3, #27
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	4413      	add	r3, r2
 8001674:	3304      	adds	r3, #4
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	0a1b      	lsrs	r3, r3, #8
 800167a:	b2da      	uxtb	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	619a      	str	r2, [r3, #24]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	331b      	adds	r3, #27
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	4413      	add	r3, r2
 800168c:	3304      	adds	r3, #4
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	0c1b      	lsrs	r3, r3, #16
 8001692:	b29a      	uxth	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	615a      	str	r2, [r3, #20]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	4413      	add	r3, r2
 80016b8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	0a1a      	lsrs	r2, r3, #8
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	701a      	strb	r2, [r3, #0]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	4413      	add	r3, r2
 80016d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	0c1a      	lsrs	r2, r3, #16
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	3302      	adds	r3, #2
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	701a      	strb	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	4413      	add	r3, r2
 80016ec:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	0e1a      	lsrs	r2, r3, #24
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	3303      	adds	r3, #3
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	701a      	strb	r2, [r3, #0]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	4413      	add	r3, r2
 8001706:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	3304      	adds	r3, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	4413      	add	r3, r2
 800171e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	0a1a      	lsrs	r2, r3, #8
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	3305      	adds	r3, #5
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	4413      	add	r3, r2
 8001738:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	0c1a      	lsrs	r2, r3, #16
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	3306      	adds	r3, #6
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	701a      	strb	r2, [r3, #0]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	4413      	add	r3, r2
 8001752:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	0e1a      	lsrs	r2, r3, #24
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	3307      	adds	r3, #7
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d108      	bne.n	800177a <HAL_CAN_GetRxMessage+0x216>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0220 	orr.w	r2, r2, #32
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	e007      	b.n	800178a <HAL_CAN_GetRxMessage+0x226>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f042 0220 	orr.w	r2, r2, #32
 8001788:	611a      	str	r2, [r3, #16]
 800178a:	2300      	movs	r3, #0
 800178c:	e006      	b.n	800179c <HAL_CAN_GetRxMessage+0x238>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001792:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	625a      	str	r2, [r3, #36]	@ 0x24
 800179a:	2301      	movs	r3, #1
 800179c:	4618      	mov	r0, r3
 800179e:	371c      	adds	r7, #28
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_CAN_ActivateNotification>:
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b8:	73fb      	strb	r3, [r7, #15]
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d002      	beq.n	80017c6 <HAL_CAN_ActivateNotification+0x1e>
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d109      	bne.n	80017da <HAL_CAN_ActivateNotification+0x32>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6959      	ldr	r1, [r3, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	615a      	str	r2, [r3, #20]
 80017d6:	2300      	movs	r3, #0
 80017d8:	e006      	b.n	80017e8 <HAL_CAN_ActivateNotification+0x40>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80017e6:	2301      	movs	r3, #1
 80017e8:	4618      	mov	r0, r3
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_CAN_IRQHandler>:
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	@ 0x28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	2300      	movs	r3, #0
 80017fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	623b      	str	r3, [r7, #32]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d07c      	beq.n	8001934 <HAL_CAN_IRQHandler+0x140>
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	d023      	beq.n	800188c <HAL_CAN_IRQHandler+0x98>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2201      	movs	r2, #1
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_CAN_IRQHandler+0x6a>
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f983 	bl	8001b62 <HAL_CAN_TxMailbox0CompleteCallback>
 800185c:	e016      	b.n	800188c <HAL_CAN_IRQHandler+0x98>
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <HAL_CAN_IRQHandler+0x7e>
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001870:	e00c      	b.n	800188c <HAL_CAN_IRQHandler+0x98>
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b00      	cmp	r3, #0
 800187a:	d004      	beq.n	8001886 <HAL_CAN_IRQHandler+0x92>
 800187c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800187e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
 8001884:	e002      	b.n	800188c <HAL_CAN_IRQHandler+0x98>
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f989 	bl	8001b9e <HAL_CAN_TxMailbox0AbortCallback>
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d024      	beq.n	80018e0 <HAL_CAN_IRQHandler+0xec>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_CAN_IRQHandler+0xbe>
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f963 	bl	8001b76 <HAL_CAN_TxMailbox1CompleteCallback>
 80018b0:	e016      	b.n	80018e0 <HAL_CAN_IRQHandler+0xec>
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d004      	beq.n	80018c6 <HAL_CAN_IRQHandler+0xd2>
 80018bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018c4:	e00c      	b.n	80018e0 <HAL_CAN_IRQHandler+0xec>
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d004      	beq.n	80018da <HAL_CAN_IRQHandler+0xe6>
 80018d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018d8:	e002      	b.n	80018e0 <HAL_CAN_IRQHandler+0xec>
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f969 	bl	8001bb2 <HAL_CAN_TxMailbox1AbortCallback>
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d024      	beq.n	8001934 <HAL_CAN_IRQHandler+0x140>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_CAN_IRQHandler+0x112>
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f943 	bl	8001b8a <HAL_CAN_TxMailbox2CompleteCallback>
 8001904:	e016      	b.n	8001934 <HAL_CAN_IRQHandler+0x140>
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <HAL_CAN_IRQHandler+0x126>
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
 8001918:	e00c      	b.n	8001934 <HAL_CAN_IRQHandler+0x140>
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <HAL_CAN_IRQHandler+0x13a>
 8001924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
 800192c:	e002      	b.n	8001934 <HAL_CAN_IRQHandler+0x140>
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f949 	bl	8001bc6 <HAL_CAN_TxMailbox2AbortCallback>
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00c      	beq.n	8001958 <HAL_CAN_IRQHandler+0x164>
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f003 0310 	and.w	r3, r3, #16
 8001944:	2b00      	cmp	r3, #0
 8001946:	d007      	beq.n	8001958 <HAL_CAN_IRQHandler+0x164>
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800194e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2210      	movs	r2, #16
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	6a3b      	ldr	r3, [r7, #32]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00b      	beq.n	800197a <HAL_CAN_IRQHandler+0x186>
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f003 0308 	and.w	r3, r3, #8
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <HAL_CAN_IRQHandler+0x186>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2208      	movs	r2, #8
 8001972:	60da      	str	r2, [r3, #12]
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f930 	bl	8001bda <HAL_CAN_RxFifo0FullCallback>
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d009      	beq.n	8001998 <HAL_CAN_IRQHandler+0x1a4>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b00      	cmp	r3, #0
 8001990:	d002      	beq.n	8001998 <HAL_CAN_IRQHandler+0x1a4>
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7fe fc38 	bl	8000208 <HAL_CAN_RxFifo0MsgPendingCallback>
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00c      	beq.n	80019bc <HAL_CAN_IRQHandler+0x1c8>
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d007      	beq.n	80019bc <HAL_CAN_IRQHandler+0x1c8>
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2210      	movs	r2, #16
 80019ba:	611a      	str	r2, [r3, #16]
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	f003 0320 	and.w	r3, r3, #32
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00b      	beq.n	80019de <HAL_CAN_IRQHandler+0x1ea>
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <HAL_CAN_IRQHandler+0x1ea>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2208      	movs	r2, #8
 80019d6:	611a      	str	r2, [r3, #16]
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f912 	bl	8001c02 <HAL_CAN_RxFifo1FullCallback>
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	f003 0310 	and.w	r3, r3, #16
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d009      	beq.n	80019fc <HAL_CAN_IRQHandler+0x208>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <HAL_CAN_IRQHandler+0x208>
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f8f9 	bl	8001bee <HAL_CAN_RxFifo1MsgPendingCallback>
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00b      	beq.n	8001a1e <HAL_CAN_IRQHandler+0x22a>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	f003 0310 	and.w	r3, r3, #16
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d006      	beq.n	8001a1e <HAL_CAN_IRQHandler+0x22a>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2210      	movs	r2, #16
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 f8fc 	bl	8001c16 <HAL_CAN_SleepCallback>
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d00b      	beq.n	8001a40 <HAL_CAN_IRQHandler+0x24c>
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d006      	beq.n	8001a40 <HAL_CAN_IRQHandler+0x24c>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2208      	movs	r2, #8
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 f8f5 	bl	8001c2a <HAL_CAN_WakeUpFromRxMsgCallback>
 8001a40:	6a3b      	ldr	r3, [r7, #32]
 8001a42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d07b      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x34e>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d072      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x346>
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d008      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x27c>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_CAN_IRQHandler+0x27c>
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a70:	6a3b      	ldr	r3, [r7, #32]
 8001a72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d008      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x298>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x298>
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d008      	beq.n	8001aa8 <HAL_CAN_IRQHandler+0x2b4>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_CAN_IRQHandler+0x2b4>
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d043      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x346>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d03e      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x346>
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ac2:	2b60      	cmp	r3, #96	@ 0x60
 8001ac4:	d02b      	beq.n	8001b1e <HAL_CAN_IRQHandler+0x32a>
 8001ac6:	2b60      	cmp	r3, #96	@ 0x60
 8001ac8:	d82e      	bhi.n	8001b28 <HAL_CAN_IRQHandler+0x334>
 8001aca:	2b50      	cmp	r3, #80	@ 0x50
 8001acc:	d022      	beq.n	8001b14 <HAL_CAN_IRQHandler+0x320>
 8001ace:	2b50      	cmp	r3, #80	@ 0x50
 8001ad0:	d82a      	bhi.n	8001b28 <HAL_CAN_IRQHandler+0x334>
 8001ad2:	2b40      	cmp	r3, #64	@ 0x40
 8001ad4:	d019      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x316>
 8001ad6:	2b40      	cmp	r3, #64	@ 0x40
 8001ad8:	d826      	bhi.n	8001b28 <HAL_CAN_IRQHandler+0x334>
 8001ada:	2b30      	cmp	r3, #48	@ 0x30
 8001adc:	d010      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x30c>
 8001ade:	2b30      	cmp	r3, #48	@ 0x30
 8001ae0:	d822      	bhi.n	8001b28 <HAL_CAN_IRQHandler+0x334>
 8001ae2:	2b10      	cmp	r3, #16
 8001ae4:	d002      	beq.n	8001aec <HAL_CAN_IRQHandler+0x2f8>
 8001ae6:	2b20      	cmp	r3, #32
 8001ae8:	d005      	beq.n	8001af6 <HAL_CAN_IRQHandler+0x302>
 8001aea:	e01d      	b.n	8001b28 <HAL_CAN_IRQHandler+0x334>
 8001aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aee:	f043 0308 	orr.w	r3, r3, #8
 8001af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af4:	e019      	b.n	8001b2a <HAL_CAN_IRQHandler+0x336>
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	f043 0310 	orr.w	r3, r3, #16
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001afe:	e014      	b.n	8001b2a <HAL_CAN_IRQHandler+0x336>
 8001b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b02:	f043 0320 	orr.w	r3, r3, #32
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b08:	e00f      	b.n	8001b2a <HAL_CAN_IRQHandler+0x336>
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b12:	e00a      	b.n	8001b2a <HAL_CAN_IRQHandler+0x336>
 8001b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b1c:	e005      	b.n	8001b2a <HAL_CAN_IRQHandler+0x336>
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b26:	e000      	b.n	8001b2a <HAL_CAN_IRQHandler+0x336>
 8001b28:	bf00      	nop
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699a      	ldr	r2, [r3, #24]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b38:	619a      	str	r2, [r3, #24]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2204      	movs	r2, #4
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x366>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f872 	bl	8001c3e <HAL_CAN_ErrorCallback>
 8001b5a:	bf00      	nop
 8001b5c:	3728      	adds	r7, #40	@ 0x28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_CAN_TxMailbox0CompleteCallback>:
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <HAL_CAN_TxMailbox1CompleteCallback>:
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_CAN_TxMailbox2CompleteCallback>:
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HAL_CAN_TxMailbox0AbortCallback>:
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_CAN_TxMailbox1AbortCallback>:
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_CAN_TxMailbox2AbortCallback>:
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <HAL_CAN_RxFifo0FullCallback>:
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <HAL_CAN_RxFifo1MsgPendingCallback>:
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <HAL_CAN_RxFifo1FullCallback>:
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_CAN_SleepCallback>:
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_CAN_WakeUpFromRxMsgCallback>:
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_CAN_ErrorCallback>:
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <__NVIC_SetPriorityGrouping>:
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	4b0c      	ldr	r3, [pc, #48]	@ (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c70:	4013      	ands	r3, r2
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	021a      	lsls	r2, r3, #8
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4a04      	ldr	r2, [pc, #16]	@ (8001c98 <__NVIC_SetPriorityGrouping+0x44>)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	60d3      	str	r3, [r2, #12]
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <__NVIC_GetPriorityGrouping>:
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4b04      	ldr	r3, [pc, #16]	@ (8001cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	0a1b      	lsrs	r3, r3, #8
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <__NVIC_EnableIRQ>:
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	db0b      	blt.n	8001ce2 <__NVIC_EnableIRQ+0x2a>
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	4907      	ldr	r1, [pc, #28]	@ (8001cf0 <__NVIC_EnableIRQ+0x38>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	2001      	movs	r0, #1
 8001cda:	fa00 f202 	lsl.w	r2, r0, r2
 8001cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000e100 	.word	0xe000e100

08001cf4 <__NVIC_SetPriority>:
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	71fb      	strb	r3, [r7, #7]
 8001d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	db0a      	blt.n	8001d1e <__NVIC_SetPriority+0x2a>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	490c      	ldr	r1, [pc, #48]	@ (8001d40 <__NVIC_SetPriority+0x4c>)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	0112      	lsls	r2, r2, #4
 8001d14:	b2d2      	uxtb	r2, r2
 8001d16:	440b      	add	r3, r1
 8001d18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001d1c:	e00a      	b.n	8001d34 <__NVIC_SetPriority+0x40>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	4908      	ldr	r1, [pc, #32]	@ (8001d44 <__NVIC_SetPriority+0x50>)
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	3b04      	subs	r3, #4
 8001d2c:	0112      	lsls	r2, r2, #4
 8001d2e:	b2d2      	uxtb	r2, r2
 8001d30:	440b      	add	r3, r1
 8001d32:	761a      	strb	r2, [r3, #24]
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000e100 	.word	0xe000e100
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <NVIC_EncodePriority>:
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	@ 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0307 	and.w	r3, r3, #7
 8001d5a:	61fb      	str	r3, [r7, #28]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f1c3 0307 	rsb	r3, r3, #7
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	bf28      	it	cs
 8001d66:	2304      	movcs	r3, #4
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	3304      	adds	r3, #4
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d902      	bls.n	8001d78 <NVIC_EncodePriority+0x30>
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3b03      	subs	r3, #3
 8001d76:	e000      	b.n	8001d7a <NVIC_EncodePriority+0x32>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43da      	mvns	r2, r3
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	401a      	ands	r2, r3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	f04f 31ff 	mov.w	r1, #4294967295
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	43d9      	mvns	r1, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	400b      	ands	r3, r1
 8001da0:	4313      	orrs	r3, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	@ 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_NVIC_SetPriorityGrouping>:
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ff4c 	bl	8001c54 <__NVIC_SetPriorityGrouping>
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_NVIC_SetPriority>:
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	73fb      	strb	r3, [r7, #15]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	f7ff ff61 	bl	8001c9c <__NVIC_GetPriorityGrouping>
 8001dda:	6178      	str	r0, [r7, #20]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	68b9      	ldr	r1, [r7, #8]
 8001de0:	6978      	ldr	r0, [r7, #20]
 8001de2:	f7ff ffb1 	bl	8001d48 <NVIC_EncodePriority>
 8001de6:	4602      	mov	r2, r0
 8001de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff80 	bl	8001cf4 <__NVIC_SetPriority>
 8001df4:	bf00      	nop
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_NVIC_EnableIRQ>:
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff54 	bl	8001cb8 <__NVIC_EnableIRQ>
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_DAC_Init>:
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_DAC_Init+0x12>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e014      	b.n	8001e54 <HAL_DAC_Init+0x3c>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	791b      	ldrb	r3, [r3, #4]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d105      	bne.n	8001e40 <HAL_DAC_Init+0x28>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	715a      	strb	r2, [r3, #5]
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7fe ff76 	bl	8000d2c <HAL_DAC_MspInit>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2202      	movs	r2, #2
 8001e44:	711a      	strb	r2, [r3, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	711a      	strb	r2, [r3, #4]
 8001e52:	2300      	movs	r3, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_DAC_Start>:
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	795b      	ldrb	r3, [r3, #5]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_DAC_Start+0x16>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e03b      	b.n	8001eea <HAL_DAC_Start+0x8e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	715a      	strb	r2, [r3, #5]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	711a      	strb	r2, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6819      	ldr	r1, [r3, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	f003 0310 	and.w	r3, r3, #16
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10f      	bne.n	8001ebc <HAL_DAC_Start+0x60>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d118      	bne.n	8001edc <HAL_DAC_Start+0x80>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	e00f      	b.n	8001edc <HAL_DAC_Start+0x80>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001ec6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001eca:	d107      	bne.n	8001edc <HAL_DAC_Start+0x80>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0202 	orr.w	r2, r2, #2
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	711a      	strb	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	715a      	strb	r2, [r3, #5]
 8001ee8:	2300      	movs	r3, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_DAC_IRQHandler>:
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f0c:	d120      	bne.n	8001f50 <HAL_DAC_IRQHandler+0x5a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f1c:	d118      	bne.n	8001f50 <HAL_DAC_IRQHandler+0x5a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2204      	movs	r2, #4
 8001f22:	711a      	strb	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	611a      	str	r2, [r3, #16]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f38:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f852 	bl	8001ff4 <HAL_DAC_DMAUnderrunCallbackCh1>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f5e:	d120      	bne.n	8001fa2 <HAL_DAC_IRQHandler+0xac>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f6e:	d118      	bne.n	8001fa2 <HAL_DAC_IRQHandler+0xac>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2204      	movs	r2, #4
 8001f74:	711a      	strb	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f043 0202 	orr.w	r2, r3, #2
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	611a      	str	r2, [r3, #16]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001f8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f95a 	bl	8002256 <HAL_DACEx_DMAUnderrunCallbackCh2>
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_DAC_SetValue>:
 8001faa:	b480      	push	{r7}
 8001fac:	b087      	sub	sp, #28
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d105      	bne.n	8001fd4 <HAL_DAC_SetValue+0x2a>
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	3308      	adds	r3, #8
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	e004      	b.n	8001fde <HAL_DAC_SetValue+0x34>
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	3314      	adds	r3, #20
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	371c      	adds	r7, #28
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_DAC_ConfigChannel>:
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	2300      	movs	r3, #0
 8002016:	61fb      	str	r3, [r7, #28]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	795b      	ldrb	r3, [r3, #5]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <HAL_DAC_ConfigChannel+0x1c>
 8002020:	2302      	movs	r3, #2
 8002022:	e114      	b.n	800224e <HAL_DAC_ConfigChannel+0x246>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2201      	movs	r2, #1
 8002028:	715a      	strb	r2, [r3, #5]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2202      	movs	r2, #2
 800202e:	711a      	strb	r2, [r3, #4]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b04      	cmp	r3, #4
 8002036:	f040 8081 	bne.w	800213c <HAL_DAC_ConfigChannel+0x134>
 800203a:	f7ff f843 	bl	80010c4 <HAL_GetTick>
 800203e:	61f8      	str	r0, [r7, #28]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d140      	bne.n	80020c8 <HAL_DAC_ConfigChannel+0xc0>
 8002046:	e018      	b.n	800207a <HAL_DAC_ConfigChannel+0x72>
 8002048:	f7ff f83c 	bl	80010c4 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b01      	cmp	r3, #1
 8002054:	d911      	bls.n	800207a <HAL_DAC_ConfigChannel+0x72>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800205c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00a      	beq.n	800207a <HAL_DAC_ConfigChannel+0x72>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	f043 0208 	orr.w	r2, r3, #8
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	611a      	str	r2, [r3, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2203      	movs	r2, #3
 8002074:	711a      	strb	r2, [r3, #4]
 8002076:	2303      	movs	r3, #3
 8002078:	e0e9      	b.n	800224e <HAL_DAC_ConfigChannel+0x246>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002080:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1df      	bne.n	8002048 <HAL_DAC_ConfigChannel+0x40>
 8002088:	2001      	movs	r0, #1
 800208a:	f7ff f827 	bl	80010dc <HAL_Delay>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	6992      	ldr	r2, [r2, #24]
 8002096:	641a      	str	r2, [r3, #64]	@ 0x40
 8002098:	e023      	b.n	80020e2 <HAL_DAC_ConfigChannel+0xda>
 800209a:	f7ff f813 	bl	80010c4 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d90f      	bls.n	80020c8 <HAL_DAC_ConfigChannel+0xc0>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	da0a      	bge.n	80020c8 <HAL_DAC_ConfigChannel+0xc0>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f043 0208 	orr.w	r2, r3, #8
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	611a      	str	r2, [r3, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2203      	movs	r2, #3
 80020c2:	711a      	strb	r2, [r3, #4]
 80020c4:	2303      	movs	r3, #3
 80020c6:	e0c2      	b.n	800224e <HAL_DAC_ConfigChannel+0x246>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	dbe3      	blt.n	800209a <HAL_DAC_ConfigChannel+0x92>
 80020d2:	2001      	movs	r0, #1
 80020d4:	f7ff f802 	bl	80010dc <HAL_Delay>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	6992      	ldr	r2, [r2, #24]
 80020e0:	645a      	str	r2, [r3, #68]	@ 0x44
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	ea02 0103 	and.w	r1, r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	409a      	lsls	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	430a      	orrs	r2, r1
 800210e:	649a      	str	r2, [r3, #72]	@ 0x48
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	21ff      	movs	r1, #255	@ 0xff
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	ea02 0103 	and.w	r1, r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	6a1a      	ldr	r2, [r3, #32]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	409a      	lsls	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d11d      	bne.n	8002180 <HAL_DAC_ConfigChannel+0x178>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800214a:	61bb      	str	r3, [r7, #24]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	221f      	movs	r2, #31
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2207      	movs	r2, #7
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	431a      	orrs	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6819      	ldr	r1, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43da      	mvns	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	400a      	ands	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6819      	ldr	r1, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	22c0      	movs	r2, #192	@ 0xc0
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43da      	mvns	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	400a      	ands	r2, r1
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2201      	movs	r2, #1
 8002244:	711a      	strb	r2, [r3, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	715a      	strb	r2, [r3, #5]
 800224c:	2300      	movs	r3, #0
 800224e:	4618      	mov	r0, r3
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
	...

0800226c <HAL_GPIO_Init>:
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	e166      	b.n	800254a <HAL_GPIO_Init+0x2de>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2101      	movs	r1, #1
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8158 	beq.w	8002544 <HAL_GPIO_Init+0x2d8>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b01      	cmp	r3, #1
 800229e:	d005      	beq.n	80022ac <HAL_GPIO_Init+0x40>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d130      	bne.n	800230e <HAL_GPIO_Init+0xa2>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68da      	ldr	r2, [r3, #12]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	609a      	str	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	2201      	movs	r2, #1
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 0201 	and.w	r2, r3, #1
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b03      	cmp	r3, #3
 8002318:	d017      	beq.n	800234a <HAL_GPIO_Init+0xde>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	2203      	movs	r2, #3
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43db      	mvns	r3, r3
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4013      	ands	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	689a      	ldr	r2, [r3, #8]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d123      	bne.n	800239e <HAL_GPIO_Init+0x132>
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	08da      	lsrs	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3208      	adds	r2, #8
 800235e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	4013      	ands	r3, r2
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	691a      	ldr	r2, [r3, #16]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	08da      	lsrs	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3208      	adds	r2, #8
 8002398:	6939      	ldr	r1, [r7, #16]
 800239a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	2203      	movs	r2, #3
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0203 	and.w	r2, r3, #3
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 80b2 	beq.w	8002544 <HAL_GPIO_Init+0x2d8>
 80023e0:	4b61      	ldr	r3, [pc, #388]	@ (8002568 <HAL_GPIO_Init+0x2fc>)
 80023e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023e4:	4a60      	ldr	r2, [pc, #384]	@ (8002568 <HAL_GPIO_Init+0x2fc>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80023ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002568 <HAL_GPIO_Init+0x2fc>)
 80023ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	4a5c      	ldr	r2, [pc, #368]	@ (800256c <HAL_GPIO_Init+0x300>)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	220f      	movs	r2, #15
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002422:	d02b      	beq.n	800247c <HAL_GPIO_Init+0x210>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a52      	ldr	r2, [pc, #328]	@ (8002570 <HAL_GPIO_Init+0x304>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d025      	beq.n	8002478 <HAL_GPIO_Init+0x20c>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a51      	ldr	r2, [pc, #324]	@ (8002574 <HAL_GPIO_Init+0x308>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d01f      	beq.n	8002474 <HAL_GPIO_Init+0x208>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a50      	ldr	r2, [pc, #320]	@ (8002578 <HAL_GPIO_Init+0x30c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d019      	beq.n	8002470 <HAL_GPIO_Init+0x204>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a4f      	ldr	r2, [pc, #316]	@ (800257c <HAL_GPIO_Init+0x310>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d013      	beq.n	800246c <HAL_GPIO_Init+0x200>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4a4e      	ldr	r2, [pc, #312]	@ (8002580 <HAL_GPIO_Init+0x314>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00d      	beq.n	8002468 <HAL_GPIO_Init+0x1fc>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a4d      	ldr	r2, [pc, #308]	@ (8002584 <HAL_GPIO_Init+0x318>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d007      	beq.n	8002464 <HAL_GPIO_Init+0x1f8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a4c      	ldr	r2, [pc, #304]	@ (8002588 <HAL_GPIO_Init+0x31c>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d101      	bne.n	8002460 <HAL_GPIO_Init+0x1f4>
 800245c:	2307      	movs	r3, #7
 800245e:	e00e      	b.n	800247e <HAL_GPIO_Init+0x212>
 8002460:	2308      	movs	r3, #8
 8002462:	e00c      	b.n	800247e <HAL_GPIO_Init+0x212>
 8002464:	2306      	movs	r3, #6
 8002466:	e00a      	b.n	800247e <HAL_GPIO_Init+0x212>
 8002468:	2305      	movs	r3, #5
 800246a:	e008      	b.n	800247e <HAL_GPIO_Init+0x212>
 800246c:	2304      	movs	r3, #4
 800246e:	e006      	b.n	800247e <HAL_GPIO_Init+0x212>
 8002470:	2303      	movs	r3, #3
 8002472:	e004      	b.n	800247e <HAL_GPIO_Init+0x212>
 8002474:	2302      	movs	r3, #2
 8002476:	e002      	b.n	800247e <HAL_GPIO_Init+0x212>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <HAL_GPIO_Init+0x212>
 800247c:	2300      	movs	r3, #0
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	f002 0203 	and.w	r2, r2, #3
 8002484:	0092      	lsls	r2, r2, #2
 8002486:	4093      	lsls	r3, r2
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	4937      	ldr	r1, [pc, #220]	@ (800256c <HAL_GPIO_Init+0x300>)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	089b      	lsrs	r3, r3, #2
 8002494:	3302      	adds	r3, #2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800249c:	4b3b      	ldr	r3, [pc, #236]	@ (800258c <HAL_GPIO_Init+0x320>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x254>
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	4a32      	ldr	r2, [pc, #200]	@ (800258c <HAL_GPIO_Init+0x320>)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	6093      	str	r3, [r2, #8]
 80024c6:	4b31      	ldr	r3, [pc, #196]	@ (800258c <HAL_GPIO_Init+0x320>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x27e>
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	4a28      	ldr	r2, [pc, #160]	@ (800258c <HAL_GPIO_Init+0x320>)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	60d3      	str	r3, [r2, #12]
 80024f0:	4b26      	ldr	r3, [pc, #152]	@ (800258c <HAL_GPIO_Init+0x320>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x2a8>
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	4a1d      	ldr	r2, [pc, #116]	@ (800258c <HAL_GPIO_Init+0x320>)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	6053      	str	r3, [r2, #4]
 800251a:	4b1c      	ldr	r3, [pc, #112]	@ (800258c <HAL_GPIO_Init+0x320>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x2d2>
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	4a13      	ldr	r2, [pc, #76]	@ (800258c <HAL_GPIO_Init+0x320>)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3301      	adds	r3, #1
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	f47f ae91 	bne.w	800227c <HAL_GPIO_Init+0x10>
 800255a:	bf00      	nop
 800255c:	bf00      	nop
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	40021000 	.word	0x40021000
 800256c:	40010000 	.word	0x40010000
 8002570:	48000400 	.word	0x48000400
 8002574:	48000800 	.word	0x48000800
 8002578:	48000c00 	.word	0x48000c00
 800257c:	48001000 	.word	0x48001000
 8002580:	48001400 	.word	0x48001400
 8002584:	48001800 	.word	0x48001800
 8002588:	48001c00 	.word	0x48001c00
 800258c:	40010400 	.word	0x40010400

08002590 <HAL_GPIO_WritePin>:
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	707b      	strb	r3, [r7, #1]
 80025a0:	787b      	ldrb	r3, [r7, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_GPIO_WritePin+0x1e>
 80025a6:	887a      	ldrh	r2, [r7, #2]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	619a      	str	r2, [r3, #24]
 80025ac:	e002      	b.n	80025b4 <HAL_GPIO_WritePin+0x24>
 80025ae:	887a      	ldrh	r2, [r7, #2]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_GPIO_TogglePin>:
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4013      	ands	r3, r2
 80025d8:	041a      	lsls	r2, r3, #16
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	43d9      	mvns	r1, r3
 80025de:	887b      	ldrh	r3, [r7, #2]
 80025e0:	400b      	ands	r3, r1
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	619a      	str	r2, [r3, #24]
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_GPIO_EXTI_IRQHandler>:
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	80fb      	strh	r3, [r7, #6]
 80025fe:	4b08      	ldr	r3, [pc, #32]	@ (8002620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	88fb      	ldrh	r3, [r7, #6]
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d006      	beq.n	8002618 <HAL_GPIO_EXTI_IRQHandler+0x24>
 800260a:	4a05      	ldr	r2, [pc, #20]	@ (8002620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	6153      	str	r3, [r2, #20]
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd fdec 	bl	80001f0 <HAL_GPIO_EXTI_Callback>
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40010400 	.word	0x40010400

08002624 <HAL_I2C_Init>:
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_I2C_Init+0x12>
 8002632:	2301      	movs	r3, #1
 8002634:	e08d      	b.n	8002752 <HAL_I2C_Init+0x12e>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d106      	bne.n	8002650 <HAL_I2C_Init+0x2c>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fe fbb4 	bl	8000db8 <HAL_I2C_MspInit>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2224      	movs	r2, #36	@ 0x24
 8002654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0201 	bic.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002674:	611a      	str	r2, [r3, #16]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_I2C_Init+0x7a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	e006      	b.n	80026ac <HAL_I2C_Init+0x88>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d108      	bne.n	80026c6 <HAL_I2C_Init+0xa2>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	e007      	b.n	80026d6 <HAL_I2C_Init+0xb2>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6812      	ldr	r2, [r2, #0]
 80026e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026e8:	6053      	str	r3, [r2, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	ea42 0103 	orr.w	r1, r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	021a      	lsls	r2, r3, #8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	60da      	str	r2, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69d9      	ldr	r1, [r3, #28]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1a      	ldr	r2, [r3, #32]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	645a      	str	r2, [r3, #68]	@ 0x44
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	@ 0x30
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002750:	2300      	movs	r3, #0
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_I2CEx_ConfigAnalogFilter>:
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b20      	cmp	r3, #32
 800276e:	d138      	bne.n	80027e2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002776:	2b01      	cmp	r3, #1
 8002778:	d101      	bne.n	800277e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800277a:	2302      	movs	r3, #2
 800277c:	e032      	b.n	80027e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2224      	movs	r2, #36	@ 0x24
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0201 	bic.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f042 0201 	orr.w	r2, r2, #1
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027e2:	2302      	movs	r3, #2
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_I2CEx_ConfigDigitalFilter>:
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b20      	cmp	r3, #32
 8002804:	d139      	bne.n	800287a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002810:	2302      	movs	r3, #2
 8002812:	e033      	b.n	800287c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2224      	movs	r2, #36	@ 0x24
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0201 	orr.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002876:	2300      	movs	r3, #0
 8002878:	e000      	b.n	800287c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800287a:	2302      	movs	r3, #2
 800287c:	4618      	mov	r0, r3
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_PWREx_GetVoltageRange>:
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
 800288c:	4b04      	ldr	r3, [pc, #16]	@ (80028a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40007000 	.word	0x40007000

080028a4 <HAL_PWREx_ControlVoltageScaling>:
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028b2:	d130      	bne.n	8002916 <HAL_PWREx_ControlVoltageScaling+0x72>
 80028b4:	4b23      	ldr	r3, [pc, #140]	@ (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028c0:	d038      	beq.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x90>
 80028c2:	4b20      	ldr	r3, [pc, #128]	@ (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002948 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2232      	movs	r2, #50	@ 0x32
 80028d8:	fb02 f303 	mul.w	r3, r2, r3
 80028dc:	4a1b      	ldr	r2, [pc, #108]	@ (800294c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0c9b      	lsrs	r3, r3, #18
 80028e4:	3301      	adds	r3, #1
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	e002      	b.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	4b14      	ldr	r3, [pc, #80]	@ (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028fc:	d102      	bne.n	8002904 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f2      	bne.n	80028ea <HAL_PWREx_ControlVoltageScaling+0x46>
 8002904:	4b0f      	ldr	r3, [pc, #60]	@ (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800290c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002910:	d110      	bne.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x90>
 8002912:	2303      	movs	r3, #3
 8002914:	e00f      	b.n	8002936 <HAL_PWREx_ControlVoltageScaling+0x92>
 8002916:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800291e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002922:	d007      	beq.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x90>
 8002924:	4b07      	ldr	r3, [pc, #28]	@ (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800292c:	4a05      	ldr	r2, [pc, #20]	@ (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800292e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	2300      	movs	r3, #0
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40007000 	.word	0x40007000
 8002948:	20000000 	.word	0x20000000
 800294c:	431bde83 	.word	0x431bde83

08002950 <HAL_RCC_OscConfig>:
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <HAL_RCC_OscConfig+0x14>
 800295e:	2301      	movs	r3, #1
 8002960:	f000 bc08 	b.w	8003174 <HAL_RCC_OscConfig+0x824>
 8002964:	4b96      	ldr	r3, [pc, #600]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	4b94      	ldr	r3, [pc, #592]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80e4 	beq.w	8002b4e <HAL_RCC_OscConfig+0x1fe>
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <HAL_RCC_OscConfig+0x4c>
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2b0c      	cmp	r3, #12
 8002990:	f040 808b 	bne.w	8002aaa <HAL_RCC_OscConfig+0x15a>
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b01      	cmp	r3, #1
 8002998:	f040 8087 	bne.w	8002aaa <HAL_RCC_OscConfig+0x15a>
 800299c:	4b88      	ldr	r3, [pc, #544]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_OscConfig+0x64>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_OscConfig+0x64>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e3df      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1a      	ldr	r2, [r3, #32]
 80029b8:	4b81      	ldr	r3, [pc, #516]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <HAL_RCC_OscConfig+0x7e>
 80029c4:	4b7e      	ldr	r3, [pc, #504]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029cc:	e005      	b.n	80029da <HAL_RCC_OscConfig+0x8a>
 80029ce:	4b7c      	ldr	r3, [pc, #496]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 80029d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029da:	4293      	cmp	r3, r2
 80029dc:	d223      	bcs.n	8002a26 <HAL_RCC_OscConfig+0xd6>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fdae 	bl	8003544 <RCC_SetFlashLatencyFromMSIRange>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_RCC_OscConfig+0xa2>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e3c0      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 80029f2:	4b73      	ldr	r3, [pc, #460]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a72      	ldr	r2, [pc, #456]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 80029f8:	f043 0308 	orr.w	r3, r3, #8
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b70      	ldr	r3, [pc, #448]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	496d      	ldr	r1, [pc, #436]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]
 8002a10:	4b6b      	ldr	r3, [pc, #428]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	021b      	lsls	r3, r3, #8
 8002a1e:	4968      	ldr	r1, [pc, #416]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
 8002a24:	e025      	b.n	8002a72 <HAL_RCC_OscConfig+0x122>
 8002a26:	4b66      	ldr	r3, [pc, #408]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a65      	ldr	r2, [pc, #404]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a2c:	f043 0308 	orr.w	r3, r3, #8
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b63      	ldr	r3, [pc, #396]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4960      	ldr	r1, [pc, #384]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	600b      	str	r3, [r1, #0]
 8002a44:	4b5e      	ldr	r3, [pc, #376]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	495b      	ldr	r1, [pc, #364]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_RCC_OscConfig+0x122>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fd6e 	bl	8003544 <RCC_SetFlashLatencyFromMSIRange>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_RCC_OscConfig+0x122>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e380      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8002a72:	f000 fc87 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b51      	ldr	r3, [pc, #324]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	4950      	ldr	r1, [pc, #320]	@ (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002a84:	5ccb      	ldrb	r3, [r1, r3]
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	4a4e      	ldr	r2, [pc, #312]	@ (8002bc8 <HAL_RCC_OscConfig+0x278>)
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	4b4e      	ldr	r3, [pc, #312]	@ (8002bcc <HAL_RCC_OscConfig+0x27c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe f9ec 	bl	8000e74 <HAL_InitTick>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	73fb      	strb	r3, [r7, #15]
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d052      	beq.n	8002b4c <HAL_RCC_OscConfig+0x1fc>
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	e364      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d032      	beq.n	8002b18 <HAL_RCC_OscConfig+0x1c8>
 8002ab2:	4b43      	ldr	r3, [pc, #268]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a42      	ldr	r2, [pc, #264]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	f7fe fb01 	bl	80010c4 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x188>
 8002ac6:	f7fe fafd 	bl	80010c4 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x188>
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e34d      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8002ad8:	4b39      	ldr	r3, [pc, #228]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x176>
 8002ae4:	4b36      	ldr	r3, [pc, #216]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a35      	ldr	r2, [pc, #212]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002aea:	f043 0308 	orr.w	r3, r3, #8
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b33      	ldr	r3, [pc, #204]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4930      	ldr	r1, [pc, #192]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]
 8002b02:	4b2f      	ldr	r3, [pc, #188]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	492b      	ldr	r1, [pc, #172]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
 8002b16:	e01a      	b.n	8002b4e <HAL_RCC_OscConfig+0x1fe>
 8002b18:	4b29      	ldr	r3, [pc, #164]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a28      	ldr	r2, [pc, #160]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	f7fe face 	bl	80010c4 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x1ee>
 8002b2c:	f7fe faca 	bl	80010c4 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x1ee>
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e31a      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8002b3e:	4b20      	ldr	r3, [pc, #128]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1dc>
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x1fe>
 8002b4c:	bf00      	nop
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d073      	beq.n	8002c42 <HAL_RCC_OscConfig+0x2f2>
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_OscConfig+0x21c>
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d10e      	bne.n	8002b84 <HAL_RCC_OscConfig+0x234>
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d10b      	bne.n	8002b84 <HAL_RCC_OscConfig+0x234>
 8002b6c:	4b14      	ldr	r3, [pc, #80]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d063      	beq.n	8002c40 <HAL_RCC_OscConfig+0x2f0>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d15f      	bne.n	8002c40 <HAL_RCC_OscConfig+0x2f0>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e2f7      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b8c:	d106      	bne.n	8002b9c <HAL_RCC_OscConfig+0x24c>
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	e025      	b.n	8002be8 <HAL_RCC_OscConfig+0x298>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ba4:	d114      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x280>
 8002ba6:	4b06      	ldr	r3, [pc, #24]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a05      	ldr	r2, [pc, #20]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002bac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	4b03      	ldr	r3, [pc, #12]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a02      	ldr	r2, [pc, #8]	@ (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e013      	b.n	8002be8 <HAL_RCC_OscConfig+0x298>
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	080073d0 	.word	0x080073d0
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	20000004 	.word	0x20000004
 8002bd0:	4ba0      	ldr	r3, [pc, #640]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a9f      	ldr	r2, [pc, #636]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b9d      	ldr	r3, [pc, #628]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a9c      	ldr	r2, [pc, #624]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002be2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002be6:	6013      	str	r3, [r2, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <HAL_RCC_OscConfig+0x2c8>
 8002bf0:	f7fe fa68 	bl	80010c4 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x2ba>
 8002bf8:	f7fe fa64 	bl	80010c4 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	@ 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x2ba>
 8002c06:	2303      	movs	r3, #3
 8002c08:	e2b4      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8002c0a:	4b92      	ldr	r3, [pc, #584]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x2a8>
 8002c16:	e014      	b.n	8002c42 <HAL_RCC_OscConfig+0x2f2>
 8002c18:	f7fe fa54 	bl	80010c4 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x2e2>
 8002c20:	f7fe fa50 	bl	80010c4 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	@ 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x2e2>
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e2a0      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8002c32:	4b88      	ldr	r3, [pc, #544]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x2d0>
 8002c3e:	e000      	b.n	8002c42 <HAL_RCC_OscConfig+0x2f2>
 8002c40:	bf00      	nop
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d060      	beq.n	8002d10 <HAL_RCC_OscConfig+0x3c0>
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_OscConfig+0x310>
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d119      	bne.n	8002c8e <HAL_RCC_OscConfig+0x33e>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d116      	bne.n	8002c8e <HAL_RCC_OscConfig+0x33e>
 8002c60:	4b7c      	ldr	r3, [pc, #496]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_OscConfig+0x328>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_OscConfig+0x328>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e27d      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8002c78:	4b76      	ldr	r3, [pc, #472]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	4973      	ldr	r1, [pc, #460]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	604b      	str	r3, [r1, #4]
 8002c8c:	e040      	b.n	8002d10 <HAL_RCC_OscConfig+0x3c0>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d023      	beq.n	8002cde <HAL_RCC_OscConfig+0x38e>
 8002c96:	4b6f      	ldr	r3, [pc, #444]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a6e      	ldr	r2, [pc, #440]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	f7fe fa0f 	bl	80010c4 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x36c>
 8002caa:	f7fe fa0b 	bl	80010c4 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x36c>
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e25b      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8002cbc:	4b65      	ldr	r3, [pc, #404]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x35a>
 8002cc8:	4b62      	ldr	r3, [pc, #392]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	061b      	lsls	r3, r3, #24
 8002cd6:	495f      	ldr	r1, [pc, #380]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
 8002cdc:	e018      	b.n	8002d10 <HAL_RCC_OscConfig+0x3c0>
 8002cde:	4b5d      	ldr	r3, [pc, #372]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a5c      	ldr	r2, [pc, #368]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002ce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	f7fe f9eb 	bl	80010c4 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x3b4>
 8002cf2:	f7fe f9e7 	bl	80010c4 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x3b4>
 8002d00:	2303      	movs	r3, #3
 8002d02:	e237      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8002d04:	4b53      	ldr	r3, [pc, #332]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f0      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x3a2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d03c      	beq.n	8002d96 <HAL_RCC_OscConfig+0x446>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01c      	beq.n	8002d5e <HAL_RCC_OscConfig+0x40e>
 8002d24:	4b4b      	ldr	r3, [pc, #300]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d2a:	4a4a      	ldr	r2, [pc, #296]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002d34:	f7fe f9c6 	bl	80010c4 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x3fe>
 8002d3c:	f7fe f9c2 	bl	80010c4 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x3fe>
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e212      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8002d4e:	4b41      	ldr	r3, [pc, #260]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ef      	beq.n	8002d3c <HAL_RCC_OscConfig+0x3ec>
 8002d5c:	e01b      	b.n	8002d96 <HAL_RCC_OscConfig+0x446>
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d64:	4a3b      	ldr	r2, [pc, #236]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d66:	f023 0301 	bic.w	r3, r3, #1
 8002d6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002d6e:	f7fe f9a9 	bl	80010c4 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x438>
 8002d76:	f7fe f9a5 	bl	80010c4 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x438>
 8002d84:	2303      	movs	r3, #3
 8002d86:	e1f5      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8002d88:	4b32      	ldr	r3, [pc, #200]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1ef      	bne.n	8002d76 <HAL_RCC_OscConfig+0x426>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 80a6 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x5a0>
 8002da4:	2300      	movs	r3, #0
 8002da6:	77fb      	strb	r3, [r7, #31]
 8002da8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10d      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x480>
 8002db4:	4b27      	ldr	r3, [pc, #156]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db8:	4a26      	ldr	r2, [pc, #152]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dc0:	4b24      	ldr	r3, [pc, #144]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	77fb      	strb	r3, [r7, #31]
 8002dd0:	4b21      	ldr	r3, [pc, #132]	@ (8002e58 <HAL_RCC_OscConfig+0x508>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d118      	bne.n	8002e0e <HAL_RCC_OscConfig+0x4be>
 8002ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8002e58 <HAL_RCC_OscConfig+0x508>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e58 <HAL_RCC_OscConfig+0x508>)
 8002de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	f7fe f96c 	bl	80010c4 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x4b2>
 8002df0:	f7fe f968 	bl	80010c4 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x4b2>
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e1b8      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8002e02:	4b15      	ldr	r3, [pc, #84]	@ (8002e58 <HAL_RCC_OscConfig+0x508>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x4a0>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d108      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4d8>
 8002e16:	4b0f      	ldr	r3, [pc, #60]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e26:	e029      	b.n	8002e7c <HAL_RCC_OscConfig+0x52c>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d115      	bne.n	8002e5c <HAL_RCC_OscConfig+0x50c>
 8002e30:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e36:	4a07      	ldr	r2, [pc, #28]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e40:	4b04      	ldr	r3, [pc, #16]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e46:	4a03      	ldr	r2, [pc, #12]	@ (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e50:	e014      	b.n	8002e7c <HAL_RCC_OscConfig+0x52c>
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	4b9d      	ldr	r3, [pc, #628]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e62:	4a9c      	ldr	r2, [pc, #624]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8002e64:	f023 0301 	bic.w	r3, r3, #1
 8002e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e6c:	4b99      	ldr	r3, [pc, #612]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e72:	4a98      	ldr	r2, [pc, #608]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8002e74:	f023 0304 	bic.w	r3, r3, #4
 8002e78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d016      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x562>
 8002e84:	f7fe f91e 	bl	80010c4 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x552>
 8002e8c:	f7fe f91a 	bl	80010c4 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x552>
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e168      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8002ea2:	4b8c      	ldr	r3, [pc, #560]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0ed      	beq.n	8002e8c <HAL_RCC_OscConfig+0x53c>
 8002eb0:	e015      	b.n	8002ede <HAL_RCC_OscConfig+0x58e>
 8002eb2:	f7fe f907 	bl	80010c4 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x580>
 8002eba:	f7fe f903 	bl	80010c4 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x580>
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e151      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8002ed0:	4b80      	ldr	r3, [pc, #512]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ed      	bne.n	8002eba <HAL_RCC_OscConfig+0x56a>
 8002ede:	7ffb      	ldrb	r3, [r7, #31]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x5a0>
 8002ee4:	4b7b      	ldr	r3, [pc, #492]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee8:	4a7a      	ldr	r2, [pc, #488]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8002eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d03c      	beq.n	8002f76 <HAL_RCC_OscConfig+0x626>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01c      	beq.n	8002f3e <HAL_RCC_OscConfig+0x5ee>
 8002f04:	4b73      	ldr	r3, [pc, #460]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8002f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f0a:	4a72      	ldr	r2, [pc, #456]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8002f14:	f7fe f8d6 	bl	80010c4 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x5de>
 8002f1c:	f7fe f8d2 	bl	80010c4 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x5de>
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e122      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8002f2e:	4b69      	ldr	r3, [pc, #420]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8002f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0ef      	beq.n	8002f1c <HAL_RCC_OscConfig+0x5cc>
 8002f3c:	e01b      	b.n	8002f76 <HAL_RCC_OscConfig+0x626>
 8002f3e:	4b65      	ldr	r3, [pc, #404]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8002f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f44:	4a63      	ldr	r2, [pc, #396]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8002f4e:	f7fe f8b9 	bl	80010c4 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x618>
 8002f56:	f7fe f8b5 	bl	80010c4 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x618>
 8002f64:	2303      	movs	r3, #3
 8002f66:	e105      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8002f68:	4b5a      	ldr	r3, [pc, #360]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8002f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1ef      	bne.n	8002f56 <HAL_RCC_OscConfig+0x606>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 80f9 	beq.w	8003172 <HAL_RCC_OscConfig+0x822>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	f040 80cf 	bne.w	8003128 <HAL_RCC_OscConfig+0x7d8>
 8002f8a:	4b52      	ldr	r3, [pc, #328]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f003 0203 	and.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d12c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6a8>
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d123      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6a8>
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d11b      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6a8>
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fca:	06db      	lsls	r3, r3, #27
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d113      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6a8>
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fda:	085b      	lsrs	r3, r3, #1
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	055b      	lsls	r3, r3, #21
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d109      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6a8>
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	085b      	lsrs	r3, r3, #1
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	065b      	lsls	r3, r3, #25
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d071      	beq.n	80030dc <HAL_RCC_OscConfig+0x78c>
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b0c      	cmp	r3, #12
 8002ffc:	d068      	beq.n	80030d0 <HAL_RCC_OscConfig+0x780>
 8002ffe:	4b35      	ldr	r3, [pc, #212]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d105      	bne.n	8003016 <HAL_RCC_OscConfig+0x6c6>
 800300a:	4b32      	ldr	r3, [pc, #200]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_RCC_OscConfig+0x6ca>
 8003016:	2301      	movs	r3, #1
 8003018:	e0ac      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 800301a:	4b2e      	ldr	r3, [pc, #184]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a2d      	ldr	r2, [pc, #180]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8003020:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	f7fe f84d 	bl	80010c4 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x6f0>
 800302e:	f7fe f849 	bl	80010c4 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x6f0>
 800303c:	2303      	movs	r3, #3
 800303e:	e099      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8003040:	4b24      	ldr	r3, [pc, #144]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f0      	bne.n	800302e <HAL_RCC_OscConfig+0x6de>
 800304c:	4b21      	ldr	r3, [pc, #132]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	4b21      	ldr	r3, [pc, #132]	@ (80030d8 <HAL_RCC_OscConfig+0x788>)
 8003052:	4013      	ands	r3, r2
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800305c:	3a01      	subs	r2, #1
 800305e:	0112      	lsls	r2, r2, #4
 8003060:	4311      	orrs	r1, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003066:	0212      	lsls	r2, r2, #8
 8003068:	4311      	orrs	r1, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800306e:	0852      	lsrs	r2, r2, #1
 8003070:	3a01      	subs	r2, #1
 8003072:	0552      	lsls	r2, r2, #21
 8003074:	4311      	orrs	r1, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800307a:	0852      	lsrs	r2, r2, #1
 800307c:	3a01      	subs	r2, #1
 800307e:	0652      	lsls	r2, r2, #25
 8003080:	4311      	orrs	r1, r2
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003086:	06d2      	lsls	r2, r2, #27
 8003088:	430a      	orrs	r2, r1
 800308a:	4912      	ldr	r1, [pc, #72]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 800308c:	4313      	orrs	r3, r2
 800308e:	60cb      	str	r3, [r1, #12]
 8003090:	4b10      	ldr	r3, [pc, #64]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a0f      	ldr	r2, [pc, #60]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	4b0d      	ldr	r3, [pc, #52]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4a0c      	ldr	r2, [pc, #48]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 80030a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030a6:	60d3      	str	r3, [r2, #12]
 80030a8:	f7fe f80c 	bl	80010c4 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x772>
 80030b0:	f7fe f808 	bl	80010c4 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x772>
 80030be:	2303      	movs	r3, #3
 80030c0:	e058      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 80030c2:	4b04      	ldr	r3, [pc, #16]	@ (80030d4 <HAL_RCC_OscConfig+0x784>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x760>
 80030ce:	e050      	b.n	8003172 <HAL_RCC_OscConfig+0x822>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e04f      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 80030d4:	40021000 	.word	0x40021000
 80030d8:	019d808c 	.word	0x019d808c
 80030dc:	4b27      	ldr	r3, [pc, #156]	@ (800317c <HAL_RCC_OscConfig+0x82c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d144      	bne.n	8003172 <HAL_RCC_OscConfig+0x822>
 80030e8:	4b24      	ldr	r3, [pc, #144]	@ (800317c <HAL_RCC_OscConfig+0x82c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a23      	ldr	r2, [pc, #140]	@ (800317c <HAL_RCC_OscConfig+0x82c>)
 80030ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b21      	ldr	r3, [pc, #132]	@ (800317c <HAL_RCC_OscConfig+0x82c>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	4a20      	ldr	r2, [pc, #128]	@ (800317c <HAL_RCC_OscConfig+0x82c>)
 80030fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030fe:	60d3      	str	r3, [r2, #12]
 8003100:	f7fd ffe0 	bl	80010c4 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x7ca>
 8003108:	f7fd ffdc 	bl	80010c4 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x7ca>
 8003116:	2303      	movs	r3, #3
 8003118:	e02c      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 800311a:	4b18      	ldr	r3, [pc, #96]	@ (800317c <HAL_RCC_OscConfig+0x82c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0x7b8>
 8003126:	e024      	b.n	8003172 <HAL_RCC_OscConfig+0x822>
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b0c      	cmp	r3, #12
 800312c:	d01f      	beq.n	800316e <HAL_RCC_OscConfig+0x81e>
 800312e:	4b13      	ldr	r3, [pc, #76]	@ (800317c <HAL_RCC_OscConfig+0x82c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a12      	ldr	r2, [pc, #72]	@ (800317c <HAL_RCC_OscConfig+0x82c>)
 8003134:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	f7fd ffc3 	bl	80010c4 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x804>
 8003142:	f7fd ffbf 	bl	80010c4 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x804>
 8003150:	2303      	movs	r3, #3
 8003152:	e00f      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8003154:	4b09      	ldr	r3, [pc, #36]	@ (800317c <HAL_RCC_OscConfig+0x82c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f0      	bne.n	8003142 <HAL_RCC_OscConfig+0x7f2>
 8003160:	4b06      	ldr	r3, [pc, #24]	@ (800317c <HAL_RCC_OscConfig+0x82c>)
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	4905      	ldr	r1, [pc, #20]	@ (800317c <HAL_RCC_OscConfig+0x82c>)
 8003166:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <HAL_RCC_OscConfig+0x830>)
 8003168:	4013      	ands	r3, r2
 800316a:	60cb      	str	r3, [r1, #12]
 800316c:	e001      	b.n	8003172 <HAL_RCC_OscConfig+0x822>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_RCC_OscConfig+0x824>
 8003172:	2300      	movs	r3, #0
 8003174:	4618      	mov	r0, r3
 8003176:	3720      	adds	r7, #32
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40021000 	.word	0x40021000
 8003180:	feeefffc 	.word	0xfeeefffc

08003184 <HAL_RCC_ClockConfig>:
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_ClockConfig+0x14>
 8003194:	2301      	movs	r3, #1
 8003196:	e0e7      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
 8003198:	4b75      	ldr	r3, [pc, #468]	@ (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d910      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x44>
 80031a6:	4b72      	ldr	r3, [pc, #456]	@ (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 0207 	bic.w	r2, r3, #7
 80031ae:	4970      	ldr	r1, [pc, #448]	@ (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]
 80031b6:	4b6e      	ldr	r3, [pc, #440]	@ (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x44>
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0cf      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d010      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x72>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	4b66      	ldr	r3, [pc, #408]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d908      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x72>
 80031e4:	4b63      	ldr	r3, [pc, #396]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	4960      	ldr	r1, [pc, #384]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d04c      	beq.n	800329c <HAL_RCC_ClockConfig+0x118>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b03      	cmp	r3, #3
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0x96>
 800320a:	4b5a      	ldr	r3, [pc, #360]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d121      	bne.n	800325a <HAL_RCC_ClockConfig+0xd6>
 8003216:	2301      	movs	r3, #1
 8003218:	e0a6      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xae>
 8003222:	4b54      	ldr	r3, [pc, #336]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d115      	bne.n	800325a <HAL_RCC_ClockConfig+0xd6>
 800322e:	2301      	movs	r3, #1
 8003230:	e09a      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xc6>
 800323a:	4b4e      	ldr	r3, [pc, #312]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_RCC_ClockConfig+0xd6>
 8003246:	2301      	movs	r3, #1
 8003248:	e08e      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
 800324a:	4b4a      	ldr	r3, [pc, #296]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_ClockConfig+0xd6>
 8003256:	2301      	movs	r3, #1
 8003258:	e086      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
 800325a:	4b46      	ldr	r3, [pc, #280]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f023 0203 	bic.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4943      	ldr	r1, [pc, #268]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003268:	4313      	orrs	r3, r2
 800326a:	608b      	str	r3, [r1, #8]
 800326c:	f7fd ff2a 	bl	80010c4 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	e00a      	b.n	800328a <HAL_RCC_ClockConfig+0x106>
 8003274:	f7fd ff26 	bl	80010c4 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x106>
 8003286:	2303      	movs	r3, #3
 8003288:	e06e      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
 800328a:	4b3a      	ldr	r3, [pc, #232]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 020c 	and.w	r2, r3, #12
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	429a      	cmp	r2, r3
 800329a:	d1eb      	bne.n	8003274 <HAL_RCC_ClockConfig+0xf0>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d010      	beq.n	80032ca <HAL_RCC_ClockConfig+0x146>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	4b31      	ldr	r3, [pc, #196]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d208      	bcs.n	80032ca <HAL_RCC_ClockConfig+0x146>
 80032b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	492b      	ldr	r1, [pc, #172]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
 80032ca:	4b29      	ldr	r3, [pc, #164]	@ (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d210      	bcs.n	80032fa <HAL_RCC_ClockConfig+0x176>
 80032d8:	4b25      	ldr	r3, [pc, #148]	@ (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 0207 	bic.w	r2, r3, #7
 80032e0:	4923      	ldr	r1, [pc, #140]	@ (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]
 80032e8:	4b21      	ldr	r3, [pc, #132]	@ (8003370 <HAL_RCC_ClockConfig+0x1ec>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d001      	beq.n	80032fa <HAL_RCC_ClockConfig+0x176>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e036      	b.n	8003368 <HAL_RCC_ClockConfig+0x1e4>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <HAL_RCC_ClockConfig+0x194>
 8003306:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	4918      	ldr	r1, [pc, #96]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003314:	4313      	orrs	r3, r2
 8003316:	608b      	str	r3, [r1, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d009      	beq.n	8003338 <HAL_RCC_ClockConfig+0x1b4>
 8003324:	4b13      	ldr	r3, [pc, #76]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4910      	ldr	r1, [pc, #64]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003334:	4313      	orrs	r3, r2
 8003336:	608b      	str	r3, [r1, #8]
 8003338:	f000 f824 	bl	8003384 <HAL_RCC_GetSysClockFreq>
 800333c:	4602      	mov	r2, r0
 800333e:	4b0d      	ldr	r3, [pc, #52]	@ (8003374 <HAL_RCC_ClockConfig+0x1f0>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	091b      	lsrs	r3, r3, #4
 8003344:	f003 030f 	and.w	r3, r3, #15
 8003348:	490b      	ldr	r1, [pc, #44]	@ (8003378 <HAL_RCC_ClockConfig+0x1f4>)
 800334a:	5ccb      	ldrb	r3, [r1, r3]
 800334c:	f003 031f 	and.w	r3, r3, #31
 8003350:	fa22 f303 	lsr.w	r3, r2, r3
 8003354:	4a09      	ldr	r2, [pc, #36]	@ (800337c <HAL_RCC_ClockConfig+0x1f8>)
 8003356:	6013      	str	r3, [r2, #0]
 8003358:	4b09      	ldr	r3, [pc, #36]	@ (8003380 <HAL_RCC_ClockConfig+0x1fc>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd fd89 	bl	8000e74 <HAL_InitTick>
 8003362:	4603      	mov	r3, r0
 8003364:	72fb      	strb	r3, [r7, #11]
 8003366:	7afb      	ldrb	r3, [r7, #11]
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40022000 	.word	0x40022000
 8003374:	40021000 	.word	0x40021000
 8003378:	080073d0 	.word	0x080073d0
 800337c:	20000000 	.word	0x20000000
 8003380:	20000004 	.word	0x20000004

08003384 <HAL_RCC_GetSysClockFreq>:
 8003384:	b480      	push	{r7}
 8003386:	b089      	sub	sp, #36	@ 0x24
 8003388:	af00      	add	r7, sp, #0
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	4b3e      	ldr	r3, [pc, #248]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	4b3b      	ldr	r3, [pc, #236]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x34>
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b0c      	cmp	r3, #12
 80033b0:	d121      	bne.n	80033f6 <HAL_RCC_GetSysClockFreq+0x72>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d11e      	bne.n	80033f6 <HAL_RCC_GetSysClockFreq+0x72>
 80033b8:	4b34      	ldr	r3, [pc, #208]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_GetSysClockFreq+0x50>
 80033c4:	4b31      	ldr	r3, [pc, #196]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 80033c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033ca:	0a1b      	lsrs	r3, r3, #8
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	e005      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x5c>
 80033d4:	4b2d      	ldr	r3, [pc, #180]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	61fb      	str	r3, [r7, #28]
 80033e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003490 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10d      	bne.n	800340c <HAL_RCC_GetSysClockFreq+0x88>
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	61bb      	str	r3, [r7, #24]
 80033f4:	e00a      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x88>
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d102      	bne.n	8003402 <HAL_RCC_GetSysClockFreq+0x7e>
 80033fc:	4b25      	ldr	r3, [pc, #148]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x110>)
 80033fe:	61bb      	str	r3, [r7, #24]
 8003400:	e004      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x88>
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d101      	bne.n	800340c <HAL_RCC_GetSysClockFreq+0x88>
 8003408:	4b23      	ldr	r3, [pc, #140]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x114>)
 800340a:	61bb      	str	r3, [r7, #24]
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d134      	bne.n	800347c <HAL_RCC_GetSysClockFreq+0xf8>
 8003412:	4b1e      	ldr	r3, [pc, #120]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	60bb      	str	r3, [r7, #8]
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d003      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0xa6>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d003      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0xac>
 8003428:	e005      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0xb2>
 800342a:	4b1a      	ldr	r3, [pc, #104]	@ (8003494 <HAL_RCC_GetSysClockFreq+0x110>)
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	e005      	b.n	800343c <HAL_RCC_GetSysClockFreq+0xb8>
 8003430:	4b19      	ldr	r3, [pc, #100]	@ (8003498 <HAL_RCC_GetSysClockFreq+0x114>)
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	e002      	b.n	800343c <HAL_RCC_GetSysClockFreq+0xb8>
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	bf00      	nop
 800343c:	4b13      	ldr	r3, [pc, #76]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	3301      	adds	r3, #1
 8003448:	607b      	str	r3, [r7, #4]
 800344a:	4b10      	ldr	r3, [pc, #64]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	0a1b      	lsrs	r3, r3, #8
 8003450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	fb03 f202 	mul.w	r2, r3, r2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	4b0a      	ldr	r3, [pc, #40]	@ (800348c <HAL_RCC_GetSysClockFreq+0x108>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	0e5b      	lsrs	r3, r3, #25
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	3301      	adds	r3, #1
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	fbb2 f3f3 	udiv	r3, r2, r3
 800347a:	61bb      	str	r3, [r7, #24]
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	4618      	mov	r0, r3
 8003480:	3724      	adds	r7, #36	@ 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	080073e8 	.word	0x080073e8
 8003494:	00f42400 	.word	0x00f42400
 8003498:	007a1200 	.word	0x007a1200

0800349c <HAL_RCC_GetHCLKFreq>:
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
 80034a0:	4b03      	ldr	r3, [pc, #12]	@ (80034b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	20000000 	.word	0x20000000

080034b4 <HAL_RCC_GetPCLK1Freq>:
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	f7ff fff0 	bl	800349c <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0a1b      	lsrs	r3, r3, #8
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4904      	ldr	r1, [pc, #16]	@ (80034dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40021000 	.word	0x40021000
 80034dc:	080073e0 	.word	0x080073e0

080034e0 <HAL_RCC_GetClockConfig>:
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	220f      	movs	r2, #15
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	4b12      	ldr	r3, [pc, #72]	@ (800353c <HAL_RCC_GetClockConfig+0x5c>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 0203 	and.w	r2, r3, #3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	4b0f      	ldr	r3, [pc, #60]	@ (800353c <HAL_RCC_GetClockConfig+0x5c>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	4b0c      	ldr	r3, [pc, #48]	@ (800353c <HAL_RCC_GetClockConfig+0x5c>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	60da      	str	r2, [r3, #12]
 8003514:	4b09      	ldr	r3, [pc, #36]	@ (800353c <HAL_RCC_GetClockConfig+0x5c>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	08db      	lsrs	r3, r3, #3
 800351a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	611a      	str	r2, [r3, #16]
 8003522:	4b07      	ldr	r3, [pc, #28]	@ (8003540 <HAL_RCC_GetClockConfig+0x60>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0207 	and.w	r2, r3, #7
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	601a      	str	r2, [r3, #0]
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	40022000 	.word	0x40022000

08003544 <RCC_SetFlashLatencyFromMSIRange>:
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	2300      	movs	r3, #0
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	4b2a      	ldr	r3, [pc, #168]	@ (80035fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0x20>
 800355c:	f7ff f994 	bl	8002888 <HAL_PWREx_GetVoltageRange>
 8003560:	6178      	str	r0, [r7, #20]
 8003562:	e014      	b.n	800358e <RCC_SetFlashLatencyFromMSIRange+0x4a>
 8003564:	4b25      	ldr	r3, [pc, #148]	@ (80035fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003568:	4a24      	ldr	r2, [pc, #144]	@ (80035fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800356a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800356e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003570:	4b22      	ldr	r3, [pc, #136]	@ (80035fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f7ff f984 	bl	8002888 <HAL_PWREx_GetVoltageRange>
 8003580:	6178      	str	r0, [r7, #20]
 8003582:	4b1e      	ldr	r3, [pc, #120]	@ (80035fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003586:	4a1d      	ldr	r2, [pc, #116]	@ (80035fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003588:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800358c:	6593      	str	r3, [r2, #88]	@ 0x58
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003594:	d10b      	bne.n	80035ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b80      	cmp	r3, #128	@ 0x80
 800359a:	d919      	bls.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2ba0      	cmp	r3, #160	@ 0xa0
 80035a0:	d902      	bls.n	80035a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
 80035a2:	2302      	movs	r3, #2
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	e013      	b.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80035a8:	2301      	movs	r3, #1
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	e010      	b.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b80      	cmp	r3, #128	@ 0x80
 80035b2:	d902      	bls.n	80035ba <RCC_SetFlashLatencyFromMSIRange+0x76>
 80035b4:	2303      	movs	r3, #3
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	e00a      	b.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b80      	cmp	r3, #128	@ 0x80
 80035be:	d102      	bne.n	80035c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
 80035c0:	2302      	movs	r3, #2
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	e004      	b.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b70      	cmp	r3, #112	@ 0x70
 80035ca:	d101      	bne.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80035cc:	2301      	movs	r3, #1
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f023 0207 	bic.w	r2, r3, #7
 80035d8:	4909      	ldr	r1, [pc, #36]	@ (8003600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	600b      	str	r3, [r1, #0]
 80035e0:	4b07      	ldr	r3, [pc, #28]	@ (8003600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0307 	and.w	r3, r3, #7
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d001      	beq.n	80035f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 80035f2:	2300      	movs	r3, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	40021000 	.word	0x40021000
 8003600:	40022000 	.word	0x40022000

08003604 <HAL_RCCEx_PeriphCLKConfig>:
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	2300      	movs	r3, #0
 800360e:	74fb      	strb	r3, [r7, #19]
 8003610:	2300      	movs	r3, #0
 8003612:	74bb      	strb	r3, [r7, #18]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800361c:	2b00      	cmp	r3, #0
 800361e:	d041      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003624:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003628:	d02a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800362a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800362e:	d824      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003630:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003634:	d008      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003636:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800363a:	d81e      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003640:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003644:	d010      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003646:	e018      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003648:	4b86      	ldr	r3, [pc, #536]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	4a85      	ldr	r2, [pc, #532]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003652:	60d3      	str	r3, [r2, #12]
 8003654:	e015      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	3304      	adds	r3, #4
 800365a:	2100      	movs	r1, #0
 800365c:	4618      	mov	r0, r3
 800365e:	f000 facd 	bl	8003bfc <RCCEx_PLLSAI1_Config>
 8003662:	4603      	mov	r3, r0
 8003664:	74fb      	strb	r3, [r7, #19]
 8003666:	e00c      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3320      	adds	r3, #32
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fbb6 	bl	8003de0 <RCCEx_PLLSAI2_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	74fb      	strb	r3, [r7, #19]
 8003678:	e003      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800367a:	2301      	movs	r3, #1
 800367c:	74fb      	strb	r3, [r7, #19]
 800367e:	e000      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8003680:	bf00      	nop
 8003682:	7cfb      	ldrb	r3, [r7, #19]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10b      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8003688:	4b76      	ldr	r3, [pc, #472]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003696:	4973      	ldr	r1, [pc, #460]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800369e:	e001      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	74bb      	strb	r3, [r7, #18]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d041      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036b8:	d02a      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036be:	d824      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036c4:	d008      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036ca:	d81e      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036d4:	d010      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036d6:	e018      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036d8:	4b62      	ldr	r3, [pc, #392]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a61      	ldr	r2, [pc, #388]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e2:	60d3      	str	r3, [r2, #12]
 80036e4:	e015      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2100      	movs	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 fa85 	bl	8003bfc <RCCEx_PLLSAI1_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	74fb      	strb	r3, [r7, #19]
 80036f6:	e00c      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3320      	adds	r3, #32
 80036fc:	2100      	movs	r1, #0
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fb6e 	bl	8003de0 <RCCEx_PLLSAI2_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	74fb      	strb	r3, [r7, #19]
 8003708:	e003      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800370a:	2301      	movs	r3, #1
 800370c:	74fb      	strb	r3, [r7, #19]
 800370e:	e000      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8003710:	bf00      	nop
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10b      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8003718:	4b52      	ldr	r3, [pc, #328]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003726:	494f      	ldr	r1, [pc, #316]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800372e:	e001      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	74bb      	strb	r3, [r7, #18]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80a0 	beq.w	8003882 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8003742:	2300      	movs	r3, #0
 8003744:	747b      	strb	r3, [r7, #17]
 8003746:	4b47      	ldr	r3, [pc, #284]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003756:	2300      	movs	r3, #0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00d      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800375c:	4b41      	ldr	r3, [pc, #260]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800375e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003760:	4a40      	ldr	r2, [pc, #256]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003766:	6593      	str	r3, [r2, #88]	@ 0x58
 8003768:	4b3e      	ldr	r3, [pc, #248]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003770:	60bb      	str	r3, [r7, #8]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2301      	movs	r3, #1
 8003776:	747b      	strb	r3, [r7, #17]
 8003778:	4b3b      	ldr	r3, [pc, #236]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a3a      	ldr	r2, [pc, #232]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800377e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	f7fd fc9e 	bl	80010c4 <HAL_GetTick>
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	e009      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800378c:	f7fd fc9a 	bl	80010c4 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d902      	bls.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800379a:	2303      	movs	r3, #3
 800379c:	74fb      	strb	r3, [r7, #19]
 800379e:	e005      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80037a0:	4b31      	ldr	r3, [pc, #196]	@ (8003868 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ef      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x188>
 80037ac:	7cfb      	ldrb	r3, [r7, #19]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d15c      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x268>
 80037b2:	4b2c      	ldr	r3, [pc, #176]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01f      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d019      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037d0:	4b24      	ldr	r3, [pc, #144]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	4b21      	ldr	r3, [pc, #132]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e2:	4a20      	ldr	r2, [pc, #128]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037fc:	4a19      	ldr	r2, [pc, #100]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d016      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800380e:	f7fd fc59 	bl	80010c4 <HAL_GetTick>
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	e00b      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003816:	f7fd fc55 	bl	80010c4 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d902      	bls.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003828:	2303      	movs	r3, #3
 800382a:	74fb      	strb	r3, [r7, #19]
 800382c:	e006      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800382e:	4b0d      	ldr	r3, [pc, #52]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0ec      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800383c:	7cfb      	ldrb	r3, [r7, #19]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10c      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x258>
 8003842:	4b08      	ldr	r3, [pc, #32]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003848:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003852:	4904      	ldr	r1, [pc, #16]	@ (8003864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800385a:	e009      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800385c:	7cfb      	ldrb	r3, [r7, #19]
 800385e:	74bb      	strb	r3, [r7, #18]
 8003860:	e006      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	40007000 	.word	0x40007000
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	74bb      	strb	r3, [r7, #18]
 8003870:	7c7b      	ldrb	r3, [r7, #17]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d105      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8003876:	4ba6      	ldr	r3, [pc, #664]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387a:	4aa5      	ldr	r2, [pc, #660]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800387c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003880:	6593      	str	r3, [r2, #88]	@ 0x58
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 800388e:	4ba0      	ldr	r3, [pc, #640]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003894:	f023 0203 	bic.w	r2, r3, #3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800389c:	499c      	ldr	r1, [pc, #624]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80038b0:	4b97      	ldr	r3, [pc, #604]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b6:	f023 020c 	bic.w	r2, r3, #12
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038be:	4994      	ldr	r1, [pc, #592]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80038d2:	4b8f      	ldr	r3, [pc, #572]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	498b      	ldr	r1, [pc, #556]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x306>
 80038f4:	4b86      	ldr	r3, [pc, #536]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	4983      	ldr	r1, [pc, #524]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003916:	4b7e      	ldr	r3, [pc, #504]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003924:	497a      	ldr	r1, [pc, #488]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003938:	4b75      	ldr	r3, [pc, #468]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800393a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800393e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003946:	4972      	ldr	r1, [pc, #456]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800395a:	4b6d      	ldr	r3, [pc, #436]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003960:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003968:	4969      	ldr	r1, [pc, #420]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800397c:	4b64      	ldr	r3, [pc, #400]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003982:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800398a:	4961      	ldr	r1, [pc, #388]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800399e:	4b5c      	ldr	r3, [pc, #368]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ac:	4958      	ldr	r1, [pc, #352]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80039c0:	4b53      	ldr	r3, [pc, #332]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ce:	4950      	ldr	r1, [pc, #320]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80039e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f0:	4947      	ldr	r1, [pc, #284]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003a04:	4b42      	ldr	r3, [pc, #264]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a0a:	f023 0203 	bic.w	r2, r3, #3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a12:	493f      	ldr	r1, [pc, #252]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d028      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8003a26:	4b3a      	ldr	r3, [pc, #232]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a2c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a34:	4936      	ldr	r1, [pc, #216]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a44:	d106      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8003a46:	4b32      	ldr	r3, [pc, #200]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	4a31      	ldr	r2, [pc, #196]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a50:	60d3      	str	r3, [r2, #12]
 8003a52:	e011      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3304      	adds	r3, #4
 8003a62:	2101      	movs	r1, #1
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 f8c9 	bl	8003bfc <RCCEx_PLLSAI1_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	74fb      	strb	r3, [r7, #19]
 8003a6e:	7cfb      	ldrb	r3, [r7, #19]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	74bb      	strb	r3, [r7, #18]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d028      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a84:	4b22      	ldr	r3, [pc, #136]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a92:	491f      	ldr	r1, [pc, #124]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aa2:	d106      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	4a19      	ldr	r2, [pc, #100]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aae:	60d3      	str	r3, [r2, #12]
 8003ab0:	e011      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003aba:	d10c      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f89a 	bl	8003bfc <RCCEx_PLLSAI1_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	74fb      	strb	r3, [r7, #19]
 8003acc:	7cfb      	ldrb	r3, [r7, #19]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ad2:	7cfb      	ldrb	r3, [r7, #19]
 8003ad4:	74bb      	strb	r3, [r7, #18]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d02a      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003af0:	4907      	ldr	r1, [pc, #28]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003afc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b00:	d108      	bne.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003b02:	4b03      	ldr	r3, [pc, #12]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	4a02      	ldr	r2, [pc, #8]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b0c:	60d3      	str	r3, [r2, #12]
 8003b0e:	e013      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003b10:	40021000 	.word	0x40021000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b1c:	d10c      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3304      	adds	r3, #4
 8003b22:	2101      	movs	r1, #1
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 f869 	bl	8003bfc <RCCEx_PLLSAI1_Config>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	74fb      	strb	r3, [r7, #19]
 8003b2e:	7cfb      	ldrb	r3, [r7, #19]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003b34:	7cfb      	ldrb	r3, [r7, #19]
 8003b36:	74bb      	strb	r3, [r7, #18]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d02f      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 8003b44:	4b2c      	ldr	r3, [pc, #176]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b52:	4929      	ldr	r1, [pc, #164]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b62:	d10d      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3304      	adds	r3, #4
 8003b68:	2102      	movs	r1, #2
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 f846 	bl	8003bfc <RCCEx_PLLSAI1_Config>
 8003b70:	4603      	mov	r3, r0
 8003b72:	74fb      	strb	r3, [r7, #19]
 8003b74:	7cfb      	ldrb	r3, [r7, #19]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d014      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 8003b7a:	7cfb      	ldrb	r3, [r7, #19]
 8003b7c:	74bb      	strb	r3, [r7, #18]
 8003b7e:	e011      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3320      	adds	r3, #32
 8003b8e:	2102      	movs	r1, #2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 f925 	bl	8003de0 <RCCEx_PLLSAI2_Config>
 8003b96:	4603      	mov	r3, r0
 8003b98:	74fb      	strb	r3, [r7, #19]
 8003b9a:	7cfb      	ldrb	r3, [r7, #19]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 8003ba0:	7cfb      	ldrb	r3, [r7, #19]
 8003ba2:	74bb      	strb	r3, [r7, #18]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00b      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003bb0:	4b11      	ldr	r3, [pc, #68]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bc0:	490d      	ldr	r1, [pc, #52]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00b      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8003bd4:	4b08      	ldr	r3, [pc, #32]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bda:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003be4:	4904      	ldr	r1, [pc, #16]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003bec:	7cbb      	ldrb	r3, [r7, #18]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000

08003bfc <RCCEx_PLLSAI1_Config>:
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
 8003c06:	2300      	movs	r3, #0
 8003c08:	73fb      	strb	r3, [r7, #15]
 8003c0a:	4b74      	ldr	r3, [pc, #464]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d018      	beq.n	8003c48 <RCCEx_PLLSAI1_Config+0x4c>
 8003c16:	4b71      	ldr	r3, [pc, #452]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0203 	and.w	r2, r3, #3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d10d      	bne.n	8003c42 <RCCEx_PLLSAI1_Config+0x46>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <RCCEx_PLLSAI1_Config+0x46>
 8003c2e:	4b6b      	ldr	r3, [pc, #428]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	091b      	lsrs	r3, r3, #4
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d047      	beq.n	8003cd2 <RCCEx_PLLSAI1_Config+0xd6>
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
 8003c46:	e044      	b.n	8003cd2 <RCCEx_PLLSAI1_Config+0xd6>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d018      	beq.n	8003c82 <RCCEx_PLLSAI1_Config+0x86>
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d825      	bhi.n	8003ca0 <RCCEx_PLLSAI1_Config+0xa4>
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d002      	beq.n	8003c5e <RCCEx_PLLSAI1_Config+0x62>
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d009      	beq.n	8003c70 <RCCEx_PLLSAI1_Config+0x74>
 8003c5c:	e020      	b.n	8003ca0 <RCCEx_PLLSAI1_Config+0xa4>
 8003c5e:	4b5f      	ldr	r3, [pc, #380]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d11d      	bne.n	8003ca6 <RCCEx_PLLSAI1_Config+0xaa>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	73fb      	strb	r3, [r7, #15]
 8003c6e:	e01a      	b.n	8003ca6 <RCCEx_PLLSAI1_Config+0xaa>
 8003c70:	4b5a      	ldr	r3, [pc, #360]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d116      	bne.n	8003caa <RCCEx_PLLSAI1_Config+0xae>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	73fb      	strb	r3, [r7, #15]
 8003c80:	e013      	b.n	8003caa <RCCEx_PLLSAI1_Config+0xae>
 8003c82:	4b56      	ldr	r3, [pc, #344]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10f      	bne.n	8003cae <RCCEx_PLLSAI1_Config+0xb2>
 8003c8e:	4b53      	ldr	r3, [pc, #332]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <RCCEx_PLLSAI1_Config+0xb2>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
 8003c9e:	e006      	b.n	8003cae <RCCEx_PLLSAI1_Config+0xb2>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
 8003ca4:	e004      	b.n	8003cb0 <RCCEx_PLLSAI1_Config+0xb4>
 8003ca6:	bf00      	nop
 8003ca8:	e002      	b.n	8003cb0 <RCCEx_PLLSAI1_Config+0xb4>
 8003caa:	bf00      	nop
 8003cac:	e000      	b.n	8003cb0 <RCCEx_PLLSAI1_Config+0xb4>
 8003cae:	bf00      	nop
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10d      	bne.n	8003cd2 <RCCEx_PLLSAI1_Config+0xd6>
 8003cb6:	4b49      	ldr	r3, [pc, #292]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6819      	ldr	r1, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	4943      	ldr	r1, [pc, #268]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60cb      	str	r3, [r1, #12]
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d17c      	bne.n	8003dd2 <RCCEx_PLLSAI1_Config+0x1d6>
 8003cd8:	4b40      	ldr	r3, [pc, #256]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cde:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	f7fd f9ee 	bl	80010c4 <HAL_GetTick>
 8003ce8:	60b8      	str	r0, [r7, #8]
 8003cea:	e009      	b.n	8003d00 <RCCEx_PLLSAI1_Config+0x104>
 8003cec:	f7fd f9ea 	bl	80010c4 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d902      	bls.n	8003d00 <RCCEx_PLLSAI1_Config+0x104>
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	73fb      	strb	r3, [r7, #15]
 8003cfe:	e005      	b.n	8003d0c <RCCEx_PLLSAI1_Config+0x110>
 8003d00:	4b36      	ldr	r3, [pc, #216]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1ef      	bne.n	8003cec <RCCEx_PLLSAI1_Config+0xf0>
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d15f      	bne.n	8003dd2 <RCCEx_PLLSAI1_Config+0x1d6>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d110      	bne.n	8003d3a <RCCEx_PLLSAI1_Config+0x13e>
 8003d18:	4b30      	ldr	r3, [pc, #192]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003d20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6892      	ldr	r2, [r2, #8]
 8003d28:	0211      	lsls	r1, r2, #8
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	68d2      	ldr	r2, [r2, #12]
 8003d2e:	06d2      	lsls	r2, r2, #27
 8003d30:	430a      	orrs	r2, r1
 8003d32:	492a      	ldr	r1, [pc, #168]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	610b      	str	r3, [r1, #16]
 8003d38:	e027      	b.n	8003d8a <RCCEx_PLLSAI1_Config+0x18e>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d112      	bne.n	8003d66 <RCCEx_PLLSAI1_Config+0x16a>
 8003d40:	4b26      	ldr	r3, [pc, #152]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003d48:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6892      	ldr	r2, [r2, #8]
 8003d50:	0211      	lsls	r1, r2, #8
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6912      	ldr	r2, [r2, #16]
 8003d56:	0852      	lsrs	r2, r2, #1
 8003d58:	3a01      	subs	r2, #1
 8003d5a:	0552      	lsls	r2, r2, #21
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	491f      	ldr	r1, [pc, #124]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	610b      	str	r3, [r1, #16]
 8003d64:	e011      	b.n	8003d8a <RCCEx_PLLSAI1_Config+0x18e>
 8003d66:	4b1d      	ldr	r3, [pc, #116]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003d6e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6892      	ldr	r2, [r2, #8]
 8003d76:	0211      	lsls	r1, r2, #8
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6952      	ldr	r2, [r2, #20]
 8003d7c:	0852      	lsrs	r2, r2, #1
 8003d7e:	3a01      	subs	r2, #1
 8003d80:	0652      	lsls	r2, r2, #25
 8003d82:	430a      	orrs	r2, r1
 8003d84:	4915      	ldr	r1, [pc, #84]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	610b      	str	r3, [r1, #16]
 8003d8a:	4b14      	ldr	r3, [pc, #80]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a13      	ldr	r2, [pc, #76]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	f7fd f995 	bl	80010c4 <HAL_GetTick>
 8003d9a:	60b8      	str	r0, [r7, #8]
 8003d9c:	e009      	b.n	8003db2 <RCCEx_PLLSAI1_Config+0x1b6>
 8003d9e:	f7fd f991 	bl	80010c4 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d902      	bls.n	8003db2 <RCCEx_PLLSAI1_Config+0x1b6>
 8003dac:	2303      	movs	r3, #3
 8003dae:	73fb      	strb	r3, [r7, #15]
 8003db0:	e005      	b.n	8003dbe <RCCEx_PLLSAI1_Config+0x1c2>
 8003db2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0ef      	beq.n	8003d9e <RCCEx_PLLSAI1_Config+0x1a2>
 8003dbe:	7bfb      	ldrb	r3, [r7, #15]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <RCCEx_PLLSAI1_Config+0x1d6>
 8003dc4:	4b05      	ldr	r3, [pc, #20]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	4903      	ldr	r1, [pc, #12]	@ (8003ddc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	610b      	str	r3, [r1, #16]
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40021000 	.word	0x40021000

08003de0 <RCCEx_PLLSAI2_Config>:
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
 8003dea:	2300      	movs	r3, #0
 8003dec:	73fb      	strb	r3, [r7, #15]
 8003dee:	4b69      	ldr	r3, [pc, #420]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d018      	beq.n	8003e2c <RCCEx_PLLSAI2_Config+0x4c>
 8003dfa:	4b66      	ldr	r3, [pc, #408]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f003 0203 	and.w	r2, r3, #3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d10d      	bne.n	8003e26 <RCCEx_PLLSAI2_Config+0x46>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d009      	beq.n	8003e26 <RCCEx_PLLSAI2_Config+0x46>
 8003e12:	4b60      	ldr	r3, [pc, #384]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	091b      	lsrs	r3, r3, #4
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d047      	beq.n	8003eb6 <RCCEx_PLLSAI2_Config+0xd6>
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
 8003e2a:	e044      	b.n	8003eb6 <RCCEx_PLLSAI2_Config+0xd6>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d018      	beq.n	8003e66 <RCCEx_PLLSAI2_Config+0x86>
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d825      	bhi.n	8003e84 <RCCEx_PLLSAI2_Config+0xa4>
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d002      	beq.n	8003e42 <RCCEx_PLLSAI2_Config+0x62>
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d009      	beq.n	8003e54 <RCCEx_PLLSAI2_Config+0x74>
 8003e40:	e020      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0xa4>
 8003e42:	4b54      	ldr	r3, [pc, #336]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d11d      	bne.n	8003e8a <RCCEx_PLLSAI2_Config+0xaa>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
 8003e52:	e01a      	b.n	8003e8a <RCCEx_PLLSAI2_Config+0xaa>
 8003e54:	4b4f      	ldr	r3, [pc, #316]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d116      	bne.n	8003e8e <RCCEx_PLLSAI2_Config+0xae>
 8003e60:	2301      	movs	r3, #1
 8003e62:	73fb      	strb	r3, [r7, #15]
 8003e64:	e013      	b.n	8003e8e <RCCEx_PLLSAI2_Config+0xae>
 8003e66:	4b4b      	ldr	r3, [pc, #300]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10f      	bne.n	8003e92 <RCCEx_PLLSAI2_Config+0xb2>
 8003e72:	4b48      	ldr	r3, [pc, #288]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <RCCEx_PLLSAI2_Config+0xb2>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	73fb      	strb	r3, [r7, #15]
 8003e82:	e006      	b.n	8003e92 <RCCEx_PLLSAI2_Config+0xb2>
 8003e84:	2301      	movs	r3, #1
 8003e86:	73fb      	strb	r3, [r7, #15]
 8003e88:	e004      	b.n	8003e94 <RCCEx_PLLSAI2_Config+0xb4>
 8003e8a:	bf00      	nop
 8003e8c:	e002      	b.n	8003e94 <RCCEx_PLLSAI2_Config+0xb4>
 8003e8e:	bf00      	nop
 8003e90:	e000      	b.n	8003e94 <RCCEx_PLLSAI2_Config+0xb4>
 8003e92:	bf00      	nop
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10d      	bne.n	8003eb6 <RCCEx_PLLSAI2_Config+0xd6>
 8003e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6819      	ldr	r1, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	430b      	orrs	r3, r1
 8003eb0:	4938      	ldr	r1, [pc, #224]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60cb      	str	r3, [r1, #12]
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d166      	bne.n	8003f8a <RCCEx_PLLSAI2_Config+0x1aa>
 8003ebc:	4b35      	ldr	r3, [pc, #212]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a34      	ldr	r2, [pc, #208]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ec2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ec6:	6013      	str	r3, [r2, #0]
 8003ec8:	f7fd f8fc 	bl	80010c4 <HAL_GetTick>
 8003ecc:	60b8      	str	r0, [r7, #8]
 8003ece:	e009      	b.n	8003ee4 <RCCEx_PLLSAI2_Config+0x104>
 8003ed0:	f7fd f8f8 	bl	80010c4 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d902      	bls.n	8003ee4 <RCCEx_PLLSAI2_Config+0x104>
 8003ede:	2303      	movs	r3, #3
 8003ee0:	73fb      	strb	r3, [r7, #15]
 8003ee2:	e005      	b.n	8003ef0 <RCCEx_PLLSAI2_Config+0x110>
 8003ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1ef      	bne.n	8003ed0 <RCCEx_PLLSAI2_Config+0xf0>
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d149      	bne.n	8003f8a <RCCEx_PLLSAI2_Config+0x1aa>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d110      	bne.n	8003f1e <RCCEx_PLLSAI2_Config+0x13e>
 8003efc:	4b25      	ldr	r3, [pc, #148]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003f04:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6892      	ldr	r2, [r2, #8]
 8003f0c:	0211      	lsls	r1, r2, #8
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68d2      	ldr	r2, [r2, #12]
 8003f12:	06d2      	lsls	r2, r2, #27
 8003f14:	430a      	orrs	r2, r1
 8003f16:	491f      	ldr	r1, [pc, #124]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	614b      	str	r3, [r1, #20]
 8003f1c:	e011      	b.n	8003f42 <RCCEx_PLLSAI2_Config+0x162>
 8003f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f26:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6892      	ldr	r2, [r2, #8]
 8003f2e:	0211      	lsls	r1, r2, #8
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6912      	ldr	r2, [r2, #16]
 8003f34:	0852      	lsrs	r2, r2, #1
 8003f36:	3a01      	subs	r2, #1
 8003f38:	0652      	lsls	r2, r2, #25
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	4915      	ldr	r1, [pc, #84]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	614b      	str	r3, [r1, #20]
 8003f42:	4b14      	ldr	r3, [pc, #80]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a13      	ldr	r2, [pc, #76]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	f7fd f8b9 	bl	80010c4 <HAL_GetTick>
 8003f52:	60b8      	str	r0, [r7, #8]
 8003f54:	e009      	b.n	8003f6a <RCCEx_PLLSAI2_Config+0x18a>
 8003f56:	f7fd f8b5 	bl	80010c4 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d902      	bls.n	8003f6a <RCCEx_PLLSAI2_Config+0x18a>
 8003f64:	2303      	movs	r3, #3
 8003f66:	73fb      	strb	r3, [r7, #15]
 8003f68:	e005      	b.n	8003f76 <RCCEx_PLLSAI2_Config+0x196>
 8003f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0ef      	beq.n	8003f56 <RCCEx_PLLSAI2_Config+0x176>
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d106      	bne.n	8003f8a <RCCEx_PLLSAI2_Config+0x1aa>
 8003f7c:	4b05      	ldr	r3, [pc, #20]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f7e:	695a      	ldr	r2, [r3, #20]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	4903      	ldr	r1, [pc, #12]	@ (8003f94 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	614b      	str	r3, [r1, #20]
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40021000 	.word	0x40021000

08003f98 <HAL_TIM_Base_Init>:
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_TIM_Base_Init+0x12>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e049      	b.n	800403e <HAL_TIM_Base_Init+0xa6>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_TIM_Base_Init+0x2c>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f841 	bl	8004046 <HAL_TIM_Base_MspInit>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	f000 f9e0 	bl	800439c <TIM_Base_SetConfig>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800403c:	2300      	movs	r3, #0
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_TIM_Base_MspInit>:
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <HAL_TIM_Base_Start_IT>:
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b01      	cmp	r3, #1
 800406e:	d001      	beq.n	8004074 <HAL_TIM_Base_Start_IT+0x18>
 8004070:	2301      	movs	r3, #1
 8004072:	e04f      	b.n	8004114 <HAL_TIM_Base_Start_IT+0xb8>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0201 	orr.w	r2, r2, #1
 800408a:	60da      	str	r2, [r3, #12]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a23      	ldr	r2, [pc, #140]	@ (8004120 <HAL_TIM_Base_Start_IT+0xc4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d01d      	beq.n	80040d2 <HAL_TIM_Base_Start_IT+0x76>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800409e:	d018      	beq.n	80040d2 <HAL_TIM_Base_Start_IT+0x76>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004124 <HAL_TIM_Base_Start_IT+0xc8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d013      	beq.n	80040d2 <HAL_TIM_Base_Start_IT+0x76>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004128 <HAL_TIM_Base_Start_IT+0xcc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d00e      	beq.n	80040d2 <HAL_TIM_Base_Start_IT+0x76>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1c      	ldr	r2, [pc, #112]	@ (800412c <HAL_TIM_Base_Start_IT+0xd0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d009      	beq.n	80040d2 <HAL_TIM_Base_Start_IT+0x76>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004130 <HAL_TIM_Base_Start_IT+0xd4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d004      	beq.n	80040d2 <HAL_TIM_Base_Start_IT+0x76>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a19      	ldr	r2, [pc, #100]	@ (8004134 <HAL_TIM_Base_Start_IT+0xd8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d115      	bne.n	80040fe <HAL_TIM_Base_Start_IT+0xa2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	4b17      	ldr	r3, [pc, #92]	@ (8004138 <HAL_TIM_Base_Start_IT+0xdc>)
 80040da:	4013      	ands	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b06      	cmp	r3, #6
 80040e2:	d015      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0xb4>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ea:	d011      	beq.n	8004110 <HAL_TIM_Base_Start_IT+0xb4>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	e008      	b.n	8004110 <HAL_TIM_Base_Start_IT+0xb4>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f042 0201 	orr.w	r2, r2, #1
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	e000      	b.n	8004112 <HAL_TIM_Base_Start_IT+0xb6>
 8004110:	bf00      	nop
 8004112:	2300      	movs	r3, #0
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	40012c00 	.word	0x40012c00
 8004124:	40000400 	.word	0x40000400
 8004128:	40000800 	.word	0x40000800
 800412c:	40000c00 	.word	0x40000c00
 8004130:	40013400 	.word	0x40013400
 8004134:	40014000 	.word	0x40014000
 8004138:	00010007 	.word	0x00010007

0800413c <HAL_TIM_IRQHandler>:
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d020      	beq.n	80041a0 <HAL_TIM_IRQHandler+0x64>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01b      	beq.n	80041a0 <HAL_TIM_IRQHandler+0x64>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f06f 0202 	mvn.w	r2, #2
 8004170:	611a      	str	r2, [r3, #16]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	771a      	strb	r2, [r3, #28]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_TIM_IRQHandler+0x52>
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f8e9 	bl	800435e <HAL_TIM_IC_CaptureCallback>
 800418c:	e005      	b.n	800419a <HAL_TIM_IRQHandler+0x5e>
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f8db 	bl	800434a <HAL_TIM_OC_DelayElapsedCallback>
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f8ec 	bl	8004372 <HAL_TIM_PWM_PulseFinishedCallback>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	771a      	strb	r2, [r3, #28]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d020      	beq.n	80041ec <HAL_TIM_IRQHandler+0xb0>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01b      	beq.n	80041ec <HAL_TIM_IRQHandler+0xb0>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0204 	mvn.w	r2, #4
 80041bc:	611a      	str	r2, [r3, #16]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	771a      	strb	r2, [r3, #28]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_TIM_IRQHandler+0x9e>
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f8c3 	bl	800435e <HAL_TIM_IC_CaptureCallback>
 80041d8:	e005      	b.n	80041e6 <HAL_TIM_IRQHandler+0xaa>
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f8b5 	bl	800434a <HAL_TIM_OC_DelayElapsedCallback>
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f8c6 	bl	8004372 <HAL_TIM_PWM_PulseFinishedCallback>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	771a      	strb	r2, [r3, #28]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d020      	beq.n	8004238 <HAL_TIM_IRQHandler+0xfc>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f003 0308 	and.w	r3, r3, #8
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01b      	beq.n	8004238 <HAL_TIM_IRQHandler+0xfc>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0208 	mvn.w	r2, #8
 8004208:	611a      	str	r2, [r3, #16]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2204      	movs	r2, #4
 800420e:	771a      	strb	r2, [r3, #28]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_TIM_IRQHandler+0xea>
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f89d 	bl	800435e <HAL_TIM_IC_CaptureCallback>
 8004224:	e005      	b.n	8004232 <HAL_TIM_IRQHandler+0xf6>
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f88f 	bl	800434a <HAL_TIM_OC_DelayElapsedCallback>
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f8a0 	bl	8004372 <HAL_TIM_PWM_PulseFinishedCallback>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	771a      	strb	r2, [r3, #28]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 0310 	and.w	r3, r3, #16
 800423e:	2b00      	cmp	r3, #0
 8004240:	d020      	beq.n	8004284 <HAL_TIM_IRQHandler+0x148>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01b      	beq.n	8004284 <HAL_TIM_IRQHandler+0x148>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0210 	mvn.w	r2, #16
 8004254:	611a      	str	r2, [r3, #16]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2208      	movs	r2, #8
 800425a:	771a      	strb	r2, [r3, #28]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_TIM_IRQHandler+0x136>
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f877 	bl	800435e <HAL_TIM_IC_CaptureCallback>
 8004270:	e005      	b.n	800427e <HAL_TIM_IRQHandler+0x142>
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f869 	bl	800434a <HAL_TIM_OC_DelayElapsedCallback>
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f87a 	bl	8004372 <HAL_TIM_PWM_PulseFinishedCallback>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	771a      	strb	r2, [r3, #28]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00c      	beq.n	80042a8 <HAL_TIM_IRQHandler+0x16c>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <HAL_TIM_IRQHandler+0x16c>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0201 	mvn.w	r2, #1
 80042a0:	611a      	str	r2, [r3, #16]
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fc fc3c 	bl	8000b20 <HAL_TIM_PeriodElapsedCallback>
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d104      	bne.n	80042bc <HAL_TIM_IRQHandler+0x180>
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00c      	beq.n	80042d6 <HAL_TIM_IRQHandler+0x19a>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d007      	beq.n	80042d6 <HAL_TIM_IRQHandler+0x19a>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80042ce:	611a      	str	r2, [r3, #16]
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f913 	bl	80044fc <HAL_TIMEx_BreakCallback>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00c      	beq.n	80042fa <HAL_TIM_IRQHandler+0x1be>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d007      	beq.n	80042fa <HAL_TIM_IRQHandler+0x1be>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80042f2:	611a      	str	r2, [r3, #16]
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f90b 	bl	8004510 <HAL_TIMEx_Break2Callback>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00c      	beq.n	800431e <HAL_TIM_IRQHandler+0x1e2>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <HAL_TIM_IRQHandler+0x1e2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004316:	611a      	str	r2, [r3, #16]
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f834 	bl	8004386 <HAL_TIM_TriggerCallback>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f003 0320 	and.w	r3, r3, #32
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00c      	beq.n	8004342 <HAL_TIM_IRQHandler+0x206>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <HAL_TIM_IRQHandler+0x206>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f06f 0220 	mvn.w	r2, #32
 800433a:	611a      	str	r2, [r3, #16]
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f8d3 	bl	80044e8 <HAL_TIMEx_CommutCallback>
 8004342:	bf00      	nop
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_TIM_OC_DelayElapsedCallback>:
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_TIM_IC_CaptureCallback>:
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <HAL_TIM_TriggerCallback>:
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <TIM_Base_SetConfig>:
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a46      	ldr	r2, [pc, #280]	@ (80044c8 <TIM_Base_SetConfig+0x12c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d013      	beq.n	80043dc <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ba:	d00f      	beq.n	80043dc <TIM_Base_SetConfig+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a43      	ldr	r2, [pc, #268]	@ (80044cc <TIM_Base_SetConfig+0x130>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00b      	beq.n	80043dc <TIM_Base_SetConfig+0x40>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a42      	ldr	r2, [pc, #264]	@ (80044d0 <TIM_Base_SetConfig+0x134>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d007      	beq.n	80043dc <TIM_Base_SetConfig+0x40>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a41      	ldr	r2, [pc, #260]	@ (80044d4 <TIM_Base_SetConfig+0x138>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d003      	beq.n	80043dc <TIM_Base_SetConfig+0x40>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a40      	ldr	r2, [pc, #256]	@ (80044d8 <TIM_Base_SetConfig+0x13c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d108      	bne.n	80043ee <TIM_Base_SetConfig+0x52>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a35      	ldr	r2, [pc, #212]	@ (80044c8 <TIM_Base_SetConfig+0x12c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d01f      	beq.n	8004436 <TIM_Base_SetConfig+0x9a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043fc:	d01b      	beq.n	8004436 <TIM_Base_SetConfig+0x9a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a32      	ldr	r2, [pc, #200]	@ (80044cc <TIM_Base_SetConfig+0x130>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d017      	beq.n	8004436 <TIM_Base_SetConfig+0x9a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a31      	ldr	r2, [pc, #196]	@ (80044d0 <TIM_Base_SetConfig+0x134>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <TIM_Base_SetConfig+0x9a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a30      	ldr	r2, [pc, #192]	@ (80044d4 <TIM_Base_SetConfig+0x138>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00f      	beq.n	8004436 <TIM_Base_SetConfig+0x9a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a2f      	ldr	r2, [pc, #188]	@ (80044d8 <TIM_Base_SetConfig+0x13c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00b      	beq.n	8004436 <TIM_Base_SetConfig+0x9a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a2e      	ldr	r2, [pc, #184]	@ (80044dc <TIM_Base_SetConfig+0x140>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d007      	beq.n	8004436 <TIM_Base_SetConfig+0x9a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a2d      	ldr	r2, [pc, #180]	@ (80044e0 <TIM_Base_SetConfig+0x144>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d003      	beq.n	8004436 <TIM_Base_SetConfig+0x9a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a2c      	ldr	r2, [pc, #176]	@ (80044e4 <TIM_Base_SetConfig+0x148>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d108      	bne.n	8004448 <TIM_Base_SetConfig+0xac>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	629a      	str	r2, [r3, #40]	@ 0x28
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a16      	ldr	r2, [pc, #88]	@ (80044c8 <TIM_Base_SetConfig+0x12c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d00f      	beq.n	8004494 <TIM_Base_SetConfig+0xf8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a18      	ldr	r2, [pc, #96]	@ (80044d8 <TIM_Base_SetConfig+0x13c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d00b      	beq.n	8004494 <TIM_Base_SetConfig+0xf8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a17      	ldr	r2, [pc, #92]	@ (80044dc <TIM_Base_SetConfig+0x140>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d007      	beq.n	8004494 <TIM_Base_SetConfig+0xf8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a16      	ldr	r2, [pc, #88]	@ (80044e0 <TIM_Base_SetConfig+0x144>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d003      	beq.n	8004494 <TIM_Base_SetConfig+0xf8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a15      	ldr	r2, [pc, #84]	@ (80044e4 <TIM_Base_SetConfig+0x148>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d103      	bne.n	800449c <TIM_Base_SetConfig+0x100>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	631a      	str	r2, [r3, #48]	@ 0x30
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	615a      	str	r2, [r3, #20]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d105      	bne.n	80044ba <TIM_Base_SetConfig+0x11e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f023 0201 	bic.w	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	611a      	str	r2, [r3, #16]
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40012c00 	.word	0x40012c00
 80044cc:	40000400 	.word	0x40000400
 80044d0:	40000800 	.word	0x40000800
 80044d4:	40000c00 	.word	0x40000c00
 80044d8:	40013400 	.word	0x40013400
 80044dc:	40014000 	.word	0x40014000
 80044e0:	40014400 	.word	0x40014400
 80044e4:	40014800 	.word	0x40014800

080044e8 <HAL_TIMEx_CommutCallback>:
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_TIMEx_BreakCallback>:
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_TIMEx_Break2Callback>:
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <__NVIC_SetPriority>:
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	6039      	str	r1, [r7, #0]
 800452e:	71fb      	strb	r3, [r7, #7]
 8004530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004534:	2b00      	cmp	r3, #0
 8004536:	db0a      	blt.n	800454e <__NVIC_SetPriority+0x2a>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	b2da      	uxtb	r2, r3
 800453c:	490c      	ldr	r1, [pc, #48]	@ (8004570 <__NVIC_SetPriority+0x4c>)
 800453e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004542:	0112      	lsls	r2, r2, #4
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	440b      	add	r3, r1
 8004548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 800454c:	e00a      	b.n	8004564 <__NVIC_SetPriority+0x40>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	4908      	ldr	r1, [pc, #32]	@ (8004574 <__NVIC_SetPriority+0x50>)
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	3b04      	subs	r3, #4
 800455c:	0112      	lsls	r2, r2, #4
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	440b      	add	r3, r1
 8004562:	761a      	strb	r2, [r3, #24]
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	e000e100 	.word	0xe000e100
 8004574:	e000ed00 	.word	0xe000ed00

08004578 <SysTick_Handler>:
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
 800457c:	4b05      	ldr	r3, [pc, #20]	@ (8004594 <SysTick_Handler+0x1c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f001 fd46 	bl	8006010 <xTaskGetSchedulerState>
 8004584:	4603      	mov	r3, r0
 8004586:	2b01      	cmp	r3, #1
 8004588:	d001      	beq.n	800458e <SysTick_Handler+0x16>
 800458a:	f002 fb3d 	bl	8006c08 <xPortSysTickHandler>
 800458e:	bf00      	nop
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	e000e010 	.word	0xe000e010

08004598 <SVC_Setup>:
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
 800459c:	2100      	movs	r1, #0
 800459e:	f06f 0004 	mvn.w	r0, #4
 80045a2:	f7ff ffbf 	bl	8004524 <__NVIC_SetPriority>
 80045a6:	bf00      	nop
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <osKernelInitialize>:
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	f3ef 8305 	mrs	r3, IPSR
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <osKernelInitialize+0x1a>
 80045be:	f06f 0305 	mvn.w	r3, #5
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	e00c      	b.n	80045e0 <osKernelInitialize+0x34>
 80045c6:	4b0a      	ldr	r3, [pc, #40]	@ (80045f0 <osKernelInitialize+0x44>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d105      	bne.n	80045da <osKernelInitialize+0x2e>
 80045ce:	4b08      	ldr	r3, [pc, #32]	@ (80045f0 <osKernelInitialize+0x44>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	2300      	movs	r3, #0
 80045d6:	607b      	str	r3, [r7, #4]
 80045d8:	e002      	b.n	80045e0 <osKernelInitialize+0x34>
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
 80045de:	607b      	str	r3, [r7, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4618      	mov	r0, r3
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	200001ec 	.word	0x200001ec

080045f4 <osKernelStart>:
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	f3ef 8305 	mrs	r3, IPSR
 80045fe:	603b      	str	r3, [r7, #0]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <osKernelStart+0x1a>
 8004606:	f06f 0305 	mvn.w	r3, #5
 800460a:	607b      	str	r3, [r7, #4]
 800460c:	e010      	b.n	8004630 <osKernelStart+0x3c>
 800460e:	4b0b      	ldr	r3, [pc, #44]	@ (800463c <osKernelStart+0x48>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d109      	bne.n	800462a <osKernelStart+0x36>
 8004616:	f7ff ffbf 	bl	8004598 <SVC_Setup>
 800461a:	4b08      	ldr	r3, [pc, #32]	@ (800463c <osKernelStart+0x48>)
 800461c:	2202      	movs	r2, #2
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	f001 f892 	bl	8005748 <vTaskStartScheduler>
 8004624:	2300      	movs	r3, #0
 8004626:	607b      	str	r3, [r7, #4]
 8004628:	e002      	b.n	8004630 <osKernelStart+0x3c>
 800462a:	f04f 33ff 	mov.w	r3, #4294967295
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	200001ec 	.word	0x200001ec

08004640 <osThreadNew>:
 8004640:	b580      	push	{r7, lr}
 8004642:	b08e      	sub	sp, #56	@ 0x38
 8004644:	af04      	add	r7, sp, #16
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	2300      	movs	r3, #0
 800464e:	613b      	str	r3, [r7, #16]
 8004650:	f3ef 8305 	mrs	r3, IPSR
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d17e      	bne.n	800475a <osThreadNew+0x11a>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d07b      	beq.n	800475a <osThreadNew+0x11a>
 8004662:	2380      	movs	r3, #128	@ 0x80
 8004664:	623b      	str	r3, [r7, #32]
 8004666:	2318      	movs	r3, #24
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	2300      	movs	r3, #0
 800466c:	627b      	str	r3, [r7, #36]	@ 0x24
 800466e:	f04f 33ff 	mov.w	r3, #4294967295
 8004672:	61bb      	str	r3, [r7, #24]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d045      	beq.n	8004706 <osThreadNew+0xc6>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <osThreadNew+0x48>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <osThreadNew+0x56>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	61fb      	str	r3, [r7, #28]
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <osThreadNew+0x6e>
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	2b38      	cmp	r3, #56	@ 0x38
 80046a0:	d805      	bhi.n	80046ae <osThreadNew+0x6e>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <osThreadNew+0x72>
 80046ae:	2300      	movs	r3, #0
 80046b0:	e054      	b.n	800475c <osThreadNew+0x11c>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <osThreadNew+0x82>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	089b      	lsrs	r3, r3, #2
 80046c0:	623b      	str	r3, [r7, #32]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00e      	beq.n	80046e8 <osThreadNew+0xa8>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	2ba7      	cmp	r3, #167	@ 0xa7
 80046d0:	d90a      	bls.n	80046e8 <osThreadNew+0xa8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d006      	beq.n	80046e8 <osThreadNew+0xa8>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <osThreadNew+0xa8>
 80046e2:	2301      	movs	r3, #1
 80046e4:	61bb      	str	r3, [r7, #24]
 80046e6:	e010      	b.n	800470a <osThreadNew+0xca>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10c      	bne.n	800470a <osThreadNew+0xca>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d108      	bne.n	800470a <osThreadNew+0xca>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d104      	bne.n	800470a <osThreadNew+0xca>
 8004700:	2300      	movs	r3, #0
 8004702:	61bb      	str	r3, [r7, #24]
 8004704:	e001      	b.n	800470a <osThreadNew+0xca>
 8004706:	2300      	movs	r3, #0
 8004708:	61bb      	str	r3, [r7, #24]
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d110      	bne.n	8004732 <osThreadNew+0xf2>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6892      	ldr	r2, [r2, #8]
 8004718:	9202      	str	r2, [sp, #8]
 800471a:	9301      	str	r3, [sp, #4]
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	6a3a      	ldr	r2, [r7, #32]
 8004724:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 fe1a 	bl	8005360 <xTaskCreateStatic>
 800472c:	4603      	mov	r3, r0
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	e013      	b.n	800475a <osThreadNew+0x11a>
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d110      	bne.n	800475a <osThreadNew+0x11a>
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	b29a      	uxth	r2, r3
 800473c:	f107 0310 	add.w	r3, r7, #16
 8004740:	9301      	str	r3, [sp, #4]
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fe68 	bl	8005420 <xTaskCreate>
 8004750:	4603      	mov	r3, r0
 8004752:	2b01      	cmp	r3, #1
 8004754:	d001      	beq.n	800475a <osThreadNew+0x11a>
 8004756:	2300      	movs	r3, #0
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	4618      	mov	r0, r3
 800475e:	3728      	adds	r7, #40	@ 0x28
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <osDelay>:
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	f3ef 8305 	mrs	r3, IPSR
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <osDelay+0x1c>
 8004778:	f06f 0305 	mvn.w	r3, #5
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	e007      	b.n	8004790 <osDelay+0x2c>
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <osDelay+0x2c>
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 ffa6 	bl	80056dc <vTaskDelay>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <vApplicationGetIdleTaskMemory>:
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4a07      	ldr	r2, [pc, #28]	@ (80047c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	4a06      	ldr	r2, [pc, #24]	@ (80047cc <vApplicationGetIdleTaskMemory+0x30>)
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2280      	movs	r2, #128	@ 0x80
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	bf00      	nop
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	200001f0 	.word	0x200001f0
 80047cc:	20000298 	.word	0x20000298

080047d0 <vApplicationGetTimerTaskMemory>:
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4a07      	ldr	r2, [pc, #28]	@ (80047fc <vApplicationGetTimerTaskMemory+0x2c>)
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4a06      	ldr	r2, [pc, #24]	@ (8004800 <vApplicationGetTimerTaskMemory+0x30>)
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	bf00      	nop
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	20000498 	.word	0x20000498
 8004800:	20000540 	.word	0x20000540

08004804 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f103 0208 	add.w	r2, r3, #8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f04f 32ff 	mov.w	r2, #4294967295
 800481c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f103 0208 	add.w	r2, r3, #8
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f103 0208 	add.w	r2, r3, #8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800485e:	b480      	push	{r7}
 8004860:	b085      	sub	sp, #20
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	601a      	str	r2, [r3, #0]
}
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d103      	bne.n	80048c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	e00c      	b.n	80048e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3308      	adds	r3, #8
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	e002      	b.n	80048d4 <vListInsert+0x2e>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d2f6      	bcs.n	80048ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	601a      	str	r2, [r3, #0]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6892      	ldr	r2, [r2, #8]
 800492e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6852      	ldr	r2, [r2, #4]
 8004938:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	d103      	bne.n	800494c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	1e5a      	subs	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d10b      	bne.n	8004998 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004984:	f383 8811 	msr	BASEPRI, r3
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004992:	bf00      	nop
 8004994:	bf00      	nop
 8004996:	e7fd      	b.n	8004994 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004998:	f002 f8a6 	bl	8006ae8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a4:	68f9      	ldr	r1, [r7, #12]
 80049a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049a8:	fb01 f303 	mul.w	r3, r1, r3
 80049ac:	441a      	add	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c8:	3b01      	subs	r3, #1
 80049ca:	68f9      	ldr	r1, [r7, #12]
 80049cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049ce:	fb01 f303 	mul.w	r3, r1, r3
 80049d2:	441a      	add	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	22ff      	movs	r2, #255	@ 0xff
 80049dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	22ff      	movs	r2, #255	@ 0xff
 80049e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d114      	bne.n	8004a18 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d01a      	beq.n	8004a2c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	3310      	adds	r3, #16
 80049fa:	4618      	mov	r0, r3
 80049fc:	f001 f942 	bl	8005c84 <xTaskRemoveFromEventList>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d012      	beq.n	8004a2c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a06:	4b0d      	ldr	r3, [pc, #52]	@ (8004a3c <xQueueGenericReset+0xd0>)
 8004a08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	e009      	b.n	8004a2c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3310      	adds	r3, #16
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fef1 	bl	8004804 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3324      	adds	r3, #36	@ 0x24
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff feec 	bl	8004804 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a2c:	f002 f88e 	bl	8006b4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a30:	2301      	movs	r3, #1
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	e000ed04 	.word	0xe000ed04

08004a40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08e      	sub	sp, #56	@ 0x38
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10b      	bne.n	8004a6c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a66:	bf00      	nop
 8004a68:	bf00      	nop
 8004a6a:	e7fd      	b.n	8004a68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10b      	bne.n	8004a8a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a84:	bf00      	nop
 8004a86:	bf00      	nop
 8004a88:	e7fd      	b.n	8004a86 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <xQueueGenericCreateStatic+0x56>
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <xQueueGenericCreateStatic+0x5a>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <xQueueGenericCreateStatic+0x5c>
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	623b      	str	r3, [r7, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	bf00      	nop
 8004ab6:	e7fd      	b.n	8004ab4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d102      	bne.n	8004ac4 <xQueueGenericCreateStatic+0x84>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <xQueueGenericCreateStatic+0x88>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <xQueueGenericCreateStatic+0x8a>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10b      	bne.n	8004ae6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	61fb      	str	r3, [r7, #28]
}
 8004ae0:	bf00      	nop
 8004ae2:	bf00      	nop
 8004ae4:	e7fd      	b.n	8004ae2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ae6:	2350      	movs	r3, #80	@ 0x50
 8004ae8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b50      	cmp	r3, #80	@ 0x50
 8004aee:	d00b      	beq.n	8004b08 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	61bb      	str	r3, [r7, #24]
}
 8004b02:	bf00      	nop
 8004b04:	bf00      	nop
 8004b06:	e7fd      	b.n	8004b04 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b08:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00d      	beq.n	8004b30 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b1c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	4613      	mov	r3, r2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 f805 	bl	8004b3a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3730      	adds	r7, #48	@ 0x30
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	607a      	str	r2, [r7, #4]
 8004b46:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d103      	bne.n	8004b56 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	e002      	b.n	8004b5c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b68:	2101      	movs	r1, #1
 8004b6a:	69b8      	ldr	r0, [r7, #24]
 8004b6c:	f7ff fefe 	bl	800496c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	78fa      	ldrb	r2, [r7, #3]
 8004b74:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b78:	bf00      	nop
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08e      	sub	sp, #56	@ 0x38
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10b      	bne.n	8004bb4 <xQueueGenericSend+0x34>
	__asm volatile
 8004b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba0:	f383 8811 	msr	BASEPRI, r3
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004bae:	bf00      	nop
 8004bb0:	bf00      	nop
 8004bb2:	e7fd      	b.n	8004bb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d103      	bne.n	8004bc2 <xQueueGenericSend+0x42>
 8004bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <xQueueGenericSend+0x46>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <xQueueGenericSend+0x48>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10b      	bne.n	8004be4 <xQueueGenericSend+0x64>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004bde:	bf00      	nop
 8004be0:	bf00      	nop
 8004be2:	e7fd      	b.n	8004be0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d103      	bne.n	8004bf2 <xQueueGenericSend+0x72>
 8004bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <xQueueGenericSend+0x76>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <xQueueGenericSend+0x78>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10b      	bne.n	8004c14 <xQueueGenericSend+0x94>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	623b      	str	r3, [r7, #32]
}
 8004c0e:	bf00      	nop
 8004c10:	bf00      	nop
 8004c12:	e7fd      	b.n	8004c10 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c14:	f001 f9fc 	bl	8006010 <xTaskGetSchedulerState>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d102      	bne.n	8004c24 <xQueueGenericSend+0xa4>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <xQueueGenericSend+0xa8>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <xQueueGenericSend+0xaa>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10b      	bne.n	8004c46 <xQueueGenericSend+0xc6>
	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	61fb      	str	r3, [r7, #28]
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	e7fd      	b.n	8004c42 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c46:	f001 ff4f 	bl	8006ae8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <xQueueGenericSend+0xdc>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d129      	bne.n	8004cb0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	68b9      	ldr	r1, [r7, #8]
 8004c60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c62:	f000 fa0f 	bl	8005084 <prvCopyDataToQueue>
 8004c66:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d010      	beq.n	8004c92 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c72:	3324      	adds	r3, #36	@ 0x24
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 f805 	bl	8005c84 <xTaskRemoveFromEventList>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d013      	beq.n	8004ca8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c80:	4b3f      	ldr	r3, [pc, #252]	@ (8004d80 <xQueueGenericSend+0x200>)
 8004c82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	e00a      	b.n	8004ca8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d007      	beq.n	8004ca8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c98:	4b39      	ldr	r3, [pc, #228]	@ (8004d80 <xQueueGenericSend+0x200>)
 8004c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ca8:	f001 ff50 	bl	8006b4c <vPortExitCritical>
				return pdPASS;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e063      	b.n	8004d78 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d103      	bne.n	8004cbe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cb6:	f001 ff49 	bl	8006b4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	e05c      	b.n	8004d78 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d106      	bne.n	8004cd2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cc4:	f107 0314 	add.w	r3, r7, #20
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 f83f 	bl	8005d4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cd2:	f001 ff3b 	bl	8006b4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cd6:	f000 fda7 	bl	8005828 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cda:	f001 ff05 	bl	8006ae8 <vPortEnterCritical>
 8004cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ce4:	b25b      	sxtb	r3, r3
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cea:	d103      	bne.n	8004cf4 <xQueueGenericSend+0x174>
 8004cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cfa:	b25b      	sxtb	r3, r3
 8004cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d00:	d103      	bne.n	8004d0a <xQueueGenericSend+0x18a>
 8004d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d0a:	f001 ff1f 	bl	8006b4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d0e:	1d3a      	adds	r2, r7, #4
 8004d10:	f107 0314 	add.w	r3, r7, #20
 8004d14:	4611      	mov	r1, r2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f001 f82e 	bl	8005d78 <xTaskCheckForTimeOut>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d124      	bne.n	8004d6c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d24:	f000 faa6 	bl	8005274 <prvIsQueueFull>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d018      	beq.n	8004d60 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d30:	3310      	adds	r3, #16
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	4611      	mov	r1, r2
 8004d36:	4618      	mov	r0, r3
 8004d38:	f000 ff52 	bl	8005be0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d3e:	f000 fa31 	bl	80051a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d42:	f000 fd7f 	bl	8005844 <xTaskResumeAll>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f47f af7c 	bne.w	8004c46 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d80 <xQueueGenericSend+0x200>)
 8004d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	f3bf 8f6f 	isb	sy
 8004d5e:	e772      	b.n	8004c46 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d62:	f000 fa1f 	bl	80051a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d66:	f000 fd6d 	bl	8005844 <xTaskResumeAll>
 8004d6a:	e76c      	b.n	8004c46 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d6e:	f000 fa19 	bl	80051a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d72:	f000 fd67 	bl	8005844 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3738      	adds	r7, #56	@ 0x38
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	e000ed04 	.word	0xe000ed04

08004d84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b090      	sub	sp, #64	@ 0x40
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10b      	bne.n	8004db4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004dae:	bf00      	nop
 8004db0:	bf00      	nop
 8004db2:	e7fd      	b.n	8004db0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d103      	bne.n	8004dc2 <xQueueGenericSendFromISR+0x3e>
 8004dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <xQueueGenericSendFromISR+0x42>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <xQueueGenericSendFromISR+0x44>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10b      	bne.n	8004de4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004dde:	bf00      	nop
 8004de0:	bf00      	nop
 8004de2:	e7fd      	b.n	8004de0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d103      	bne.n	8004df2 <xQueueGenericSendFromISR+0x6e>
 8004dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d101      	bne.n	8004df6 <xQueueGenericSendFromISR+0x72>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <xQueueGenericSendFromISR+0x74>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10b      	bne.n	8004e14 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	623b      	str	r3, [r7, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	bf00      	nop
 8004e12:	e7fd      	b.n	8004e10 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e14:	f001 ff48 	bl	8006ca8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e18:	f3ef 8211 	mrs	r2, BASEPRI
 8004e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	61fa      	str	r2, [r7, #28]
 8004e2e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e30:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e32:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d302      	bcc.n	8004e46 <xQueueGenericSendFromISR+0xc2>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d12f      	bne.n	8004ea6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004e5c:	f000 f912 	bl	8005084 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e60:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e68:	d112      	bne.n	8004e90 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d016      	beq.n	8004ea0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e74:	3324      	adds	r3, #36	@ 0x24
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 ff04 	bl	8005c84 <xTaskRemoveFromEventList>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00e      	beq.n	8004ea0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00b      	beq.n	8004ea0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	e007      	b.n	8004ea0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004e94:	3301      	adds	r3, #1
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	b25a      	sxtb	r2, r3
 8004e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004ea4:	e001      	b.n	8004eaa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004eb4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3740      	adds	r7, #64	@ 0x40
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08c      	sub	sp, #48	@ 0x30
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10b      	bne.n	8004ef2 <xQueueReceive+0x32>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	623b      	str	r3, [r7, #32]
}
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	e7fd      	b.n	8004eee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d103      	bne.n	8004f00 <xQueueReceive+0x40>
 8004ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <xQueueReceive+0x44>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e000      	b.n	8004f06 <xQueueReceive+0x46>
 8004f04:	2300      	movs	r3, #0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10b      	bne.n	8004f22 <xQueueReceive+0x62>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	61fb      	str	r3, [r7, #28]
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	e7fd      	b.n	8004f1e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f22:	f001 f875 	bl	8006010 <xTaskGetSchedulerState>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <xQueueReceive+0x72>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <xQueueReceive+0x76>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <xQueueReceive+0x78>
 8004f36:	2300      	movs	r3, #0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10b      	bne.n	8004f54 <xQueueReceive+0x94>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	61bb      	str	r3, [r7, #24]
}
 8004f4e:	bf00      	nop
 8004f50:	bf00      	nop
 8004f52:	e7fd      	b.n	8004f50 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f54:	f001 fdc8 	bl	8006ae8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01f      	beq.n	8004fa4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f68:	f000 f8f6 	bl	8005158 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	1e5a      	subs	r2, r3, #1
 8004f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f72:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00f      	beq.n	8004f9c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7e:	3310      	adds	r3, #16
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fe7f 	bl	8005c84 <xTaskRemoveFromEventList>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d007      	beq.n	8004f9c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f8c:	4b3c      	ldr	r3, [pc, #240]	@ (8005080 <xQueueReceive+0x1c0>)
 8004f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f9c:	f001 fdd6 	bl	8006b4c <vPortExitCritical>
				return pdPASS;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e069      	b.n	8005078 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d103      	bne.n	8004fb2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004faa:	f001 fdcf 	bl	8006b4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e062      	b.n	8005078 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d106      	bne.n	8004fc6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fb8:	f107 0310 	add.w	r3, r7, #16
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fec5 	bl	8005d4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fc6:	f001 fdc1 	bl	8006b4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fca:	f000 fc2d 	bl	8005828 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fce:	f001 fd8b 	bl	8006ae8 <vPortEnterCritical>
 8004fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fd8:	b25b      	sxtb	r3, r3
 8004fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fde:	d103      	bne.n	8004fe8 <xQueueReceive+0x128>
 8004fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fee:	b25b      	sxtb	r3, r3
 8004ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff4:	d103      	bne.n	8004ffe <xQueueReceive+0x13e>
 8004ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ffe:	f001 fda5 	bl	8006b4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005002:	1d3a      	adds	r2, r7, #4
 8005004:	f107 0310 	add.w	r3, r7, #16
 8005008:	4611      	mov	r1, r2
 800500a:	4618      	mov	r0, r3
 800500c:	f000 feb4 	bl	8005d78 <xTaskCheckForTimeOut>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d123      	bne.n	800505e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005016:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005018:	f000 f916 	bl	8005248 <prvIsQueueEmpty>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d017      	beq.n	8005052 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005024:	3324      	adds	r3, #36	@ 0x24
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	4611      	mov	r1, r2
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fdd8 	bl	8005be0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005030:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005032:	f000 f8b7 	bl	80051a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005036:	f000 fc05 	bl	8005844 <xTaskResumeAll>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d189      	bne.n	8004f54 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005040:	4b0f      	ldr	r3, [pc, #60]	@ (8005080 <xQueueReceive+0x1c0>)
 8005042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	e780      	b.n	8004f54 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005054:	f000 f8a6 	bl	80051a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005058:	f000 fbf4 	bl	8005844 <xTaskResumeAll>
 800505c:	e77a      	b.n	8004f54 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800505e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005060:	f000 f8a0 	bl	80051a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005064:	f000 fbee 	bl	8005844 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005068:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800506a:	f000 f8ed 	bl	8005248 <prvIsQueueEmpty>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	f43f af6f 	beq.w	8004f54 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005076:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005078:	4618      	mov	r0, r3
 800507a:	3730      	adds	r7, #48	@ 0x30
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	e000ed04 	.word	0xe000ed04

08005084 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005098:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10d      	bne.n	80050be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d14d      	bne.n	8005146 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 ffcc 	bl	800604c <xTaskPriorityDisinherit>
 80050b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	609a      	str	r2, [r3, #8]
 80050bc:	e043      	b.n	8005146 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d119      	bne.n	80050f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6858      	ldr	r0, [r3, #4]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050cc:	461a      	mov	r2, r3
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	f002 f89e 	bl	8007210 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050dc:	441a      	add	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d32b      	bcc.n	8005146 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	e026      	b.n	8005146 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68d8      	ldr	r0, [r3, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005100:	461a      	mov	r2, r3
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	f002 f884 	bl	8007210 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005110:	425b      	negs	r3, r3
 8005112:	441a      	add	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	429a      	cmp	r2, r3
 8005122:	d207      	bcs.n	8005134 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512c:	425b      	negs	r3, r3
 800512e:	441a      	add	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b02      	cmp	r3, #2
 8005138:	d105      	bne.n	8005146 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	3b01      	subs	r3, #1
 8005144:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800514e:	697b      	ldr	r3, [r7, #20]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d018      	beq.n	800519c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005172:	441a      	add	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	429a      	cmp	r2, r3
 8005182:	d303      	bcc.n	800518c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68d9      	ldr	r1, [r3, #12]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005194:	461a      	mov	r2, r3
 8005196:	6838      	ldr	r0, [r7, #0]
 8005198:	f002 f83a 	bl	8007210 <memcpy>
	}
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051ac:	f001 fc9c 	bl	8006ae8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051b8:	e011      	b.n	80051de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d012      	beq.n	80051e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3324      	adds	r3, #36	@ 0x24
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fd5c 	bl	8005c84 <xTaskRemoveFromEventList>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051d2:	f000 fe35 	bl	8005e40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	3b01      	subs	r3, #1
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	dce9      	bgt.n	80051ba <prvUnlockQueue+0x16>
 80051e6:	e000      	b.n	80051ea <prvUnlockQueue+0x46>
					break;
 80051e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	22ff      	movs	r2, #255	@ 0xff
 80051ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80051f2:	f001 fcab 	bl	8006b4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051f6:	f001 fc77 	bl	8006ae8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005200:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005202:	e011      	b.n	8005228 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d012      	beq.n	8005232 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3310      	adds	r3, #16
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fd37 	bl	8005c84 <xTaskRemoveFromEventList>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800521c:	f000 fe10 	bl	8005e40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005220:	7bbb      	ldrb	r3, [r7, #14]
 8005222:	3b01      	subs	r3, #1
 8005224:	b2db      	uxtb	r3, r3
 8005226:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005228:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800522c:	2b00      	cmp	r3, #0
 800522e:	dce9      	bgt.n	8005204 <prvUnlockQueue+0x60>
 8005230:	e000      	b.n	8005234 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005232:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	22ff      	movs	r2, #255	@ 0xff
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800523c:	f001 fc86 	bl	8006b4c <vPortExitCritical>
}
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005250:	f001 fc4a 	bl	8006ae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005258:	2b00      	cmp	r3, #0
 800525a:	d102      	bne.n	8005262 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800525c:	2301      	movs	r3, #1
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	e001      	b.n	8005266 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005266:	f001 fc71 	bl	8006b4c <vPortExitCritical>

	return xReturn;
 800526a:	68fb      	ldr	r3, [r7, #12]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800527c:	f001 fc34 	bl	8006ae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005288:	429a      	cmp	r2, r3
 800528a:	d102      	bne.n	8005292 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800528c:	2301      	movs	r3, #1
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	e001      	b.n	8005296 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005296:	f001 fc59 	bl	8006b4c <vPortExitCritical>

	return xReturn;
 800529a:	68fb      	ldr	r3, [r7, #12]
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052ae:	2300      	movs	r3, #0
 80052b0:	60fb      	str	r3, [r7, #12]
 80052b2:	e014      	b.n	80052de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052b4:	4a0f      	ldr	r2, [pc, #60]	@ (80052f4 <vQueueAddToRegistry+0x50>)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10b      	bne.n	80052d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052c0:	490c      	ldr	r1, [pc, #48]	@ (80052f4 <vQueueAddToRegistry+0x50>)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052ca:	4a0a      	ldr	r2, [pc, #40]	@ (80052f4 <vQueueAddToRegistry+0x50>)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	4413      	add	r3, r2
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052d6:	e006      	b.n	80052e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3301      	adds	r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b07      	cmp	r3, #7
 80052e2:	d9e7      	bls.n	80052b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	20000940 	.word	0x20000940

080052f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005308:	f001 fbee 	bl	8006ae8 <vPortEnterCritical>
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005312:	b25b      	sxtb	r3, r3
 8005314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005318:	d103      	bne.n	8005322 <vQueueWaitForMessageRestricted+0x2a>
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005328:	b25b      	sxtb	r3, r3
 800532a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532e:	d103      	bne.n	8005338 <vQueueWaitForMessageRestricted+0x40>
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005338:	f001 fc08 	bl	8006b4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005340:	2b00      	cmp	r3, #0
 8005342:	d106      	bne.n	8005352 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	3324      	adds	r3, #36	@ 0x24
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	68b9      	ldr	r1, [r7, #8]
 800534c:	4618      	mov	r0, r3
 800534e:	f000 fc6d 	bl	8005c2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005352:	6978      	ldr	r0, [r7, #20]
 8005354:	f7ff ff26 	bl	80051a4 <prvUnlockQueue>
	}
 8005358:	bf00      	nop
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08e      	sub	sp, #56	@ 0x38
 8005364:	af04      	add	r7, sp, #16
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800536e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10b      	bne.n	800538c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	623b      	str	r3, [r7, #32]
}
 8005386:	bf00      	nop
 8005388:	bf00      	nop
 800538a:	e7fd      	b.n	8005388 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800538c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10b      	bne.n	80053aa <xTaskCreateStatic+0x4a>
	__asm volatile
 8005392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	61fb      	str	r3, [r7, #28]
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop
 80053a8:	e7fd      	b.n	80053a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053aa:	23a8      	movs	r3, #168	@ 0xa8
 80053ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2ba8      	cmp	r3, #168	@ 0xa8
 80053b2:	d00b      	beq.n	80053cc <xTaskCreateStatic+0x6c>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	61bb      	str	r3, [r7, #24]
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	e7fd      	b.n	80053c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01e      	beq.n	8005412 <xTaskCreateStatic+0xb2>
 80053d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d01b      	beq.n	8005412 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053ec:	2300      	movs	r3, #0
 80053ee:	9303      	str	r3, [sp, #12]
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	9302      	str	r3, [sp, #8]
 80053f4:	f107 0314 	add.w	r3, r7, #20
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f851 	bl	80054ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800540a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800540c:	f000 f8f6 	bl	80055fc <prvAddNewTaskToReadyList>
 8005410:	e001      	b.n	8005416 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005416:	697b      	ldr	r3, [r7, #20]
	}
 8005418:	4618      	mov	r0, r3
 800541a:	3728      	adds	r7, #40	@ 0x28
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08c      	sub	sp, #48	@ 0x30
 8005424:	af04      	add	r7, sp, #16
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4618      	mov	r0, r3
 8005436:	f001 fc79 	bl	8006d2c <pvPortMalloc>
 800543a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00e      	beq.n	8005460 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005442:	20a8      	movs	r0, #168	@ 0xa8
 8005444:	f001 fc72 	bl	8006d2c <pvPortMalloc>
 8005448:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	631a      	str	r2, [r3, #48]	@ 0x30
 8005456:	e005      	b.n	8005464 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005458:	6978      	ldr	r0, [r7, #20]
 800545a:	f001 fd35 	bl	8006ec8 <vPortFree>
 800545e:	e001      	b.n	8005464 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005460:	2300      	movs	r3, #0
 8005462:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d017      	beq.n	800549a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005472:	88fa      	ldrh	r2, [r7, #6]
 8005474:	2300      	movs	r3, #0
 8005476:	9303      	str	r3, [sp, #12]
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	9302      	str	r3, [sp, #8]
 800547c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f80f 	bl	80054ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800548e:	69f8      	ldr	r0, [r7, #28]
 8005490:	f000 f8b4 	bl	80055fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005494:	2301      	movs	r3, #1
 8005496:	61bb      	str	r3, [r7, #24]
 8005498:	e002      	b.n	80054a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800549a:	f04f 33ff 	mov.w	r3, #4294967295
 800549e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054a0:	69bb      	ldr	r3, [r7, #24]
	}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	461a      	mov	r2, r3
 80054c4:	21a5      	movs	r1, #165	@ 0xa5
 80054c6:	f001 fe1f 	bl	8007108 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054d4:	3b01      	subs	r3, #1
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f023 0307 	bic.w	r3, r3, #7
 80054e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	617b      	str	r3, [r7, #20]
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01f      	beq.n	800554c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800550c:	2300      	movs	r3, #0
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	e012      	b.n	8005538 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	4413      	add	r3, r2
 8005518:	7819      	ldrb	r1, [r3, #0]
 800551a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	3334      	adds	r3, #52	@ 0x34
 8005522:	460a      	mov	r2, r1
 8005524:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	4413      	add	r3, r2
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d006      	beq.n	8005540 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	3301      	adds	r3, #1
 8005536:	61fb      	str	r3, [r7, #28]
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	2b0f      	cmp	r3, #15
 800553c:	d9e9      	bls.n	8005512 <prvInitialiseNewTask+0x66>
 800553e:	e000      	b.n	8005542 <prvInitialiseNewTask+0x96>
			{
				break;
 8005540:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800554a:	e003      	b.n	8005554 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800554c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005556:	2b37      	cmp	r3, #55	@ 0x37
 8005558:	d901      	bls.n	800555e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800555a:	2337      	movs	r3, #55	@ 0x37
 800555c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005560:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005562:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005566:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005568:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800556a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556c:	2200      	movs	r2, #0
 800556e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005572:	3304      	adds	r3, #4
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff f965 	bl	8004844 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800557a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557c:	3318      	adds	r3, #24
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff f960 	bl	8004844 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005588:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800558a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005592:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005598:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800559a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559c:	2200      	movs	r2, #0
 800559e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	3354      	adds	r3, #84	@ 0x54
 80055ae:	224c      	movs	r2, #76	@ 0x4c
 80055b0:	2100      	movs	r1, #0
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 fda8 	bl	8007108 <memset>
 80055b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ba:	4a0d      	ldr	r2, [pc, #52]	@ (80055f0 <prvInitialiseNewTask+0x144>)
 80055bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	4a0c      	ldr	r2, [pc, #48]	@ (80055f4 <prvInitialiseNewTask+0x148>)
 80055c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80055c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c6:	4a0c      	ldr	r2, [pc, #48]	@ (80055f8 <prvInitialiseNewTask+0x14c>)
 80055c8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	68f9      	ldr	r1, [r7, #12]
 80055ce:	69b8      	ldr	r0, [r7, #24]
 80055d0:	f001 f95a 	bl	8006888 <pxPortInitialiseStack>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055e6:	bf00      	nop
 80055e8:	3720      	adds	r7, #32
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20001b8c 	.word	0x20001b8c
 80055f4:	20001bf4 	.word	0x20001bf4
 80055f8:	20001c5c 	.word	0x20001c5c

080055fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005604:	f001 fa70 	bl	8006ae8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005608:	4b2d      	ldr	r3, [pc, #180]	@ (80056c0 <prvAddNewTaskToReadyList+0xc4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	4a2c      	ldr	r2, [pc, #176]	@ (80056c0 <prvAddNewTaskToReadyList+0xc4>)
 8005610:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005612:	4b2c      	ldr	r3, [pc, #176]	@ (80056c4 <prvAddNewTaskToReadyList+0xc8>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800561a:	4a2a      	ldr	r2, [pc, #168]	@ (80056c4 <prvAddNewTaskToReadyList+0xc8>)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005620:	4b27      	ldr	r3, [pc, #156]	@ (80056c0 <prvAddNewTaskToReadyList+0xc4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d110      	bne.n	800564a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005628:	f000 fc2e 	bl	8005e88 <prvInitialiseTaskLists>
 800562c:	e00d      	b.n	800564a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800562e:	4b26      	ldr	r3, [pc, #152]	@ (80056c8 <prvAddNewTaskToReadyList+0xcc>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005636:	4b23      	ldr	r3, [pc, #140]	@ (80056c4 <prvAddNewTaskToReadyList+0xc8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005640:	429a      	cmp	r2, r3
 8005642:	d802      	bhi.n	800564a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005644:	4a1f      	ldr	r2, [pc, #124]	@ (80056c4 <prvAddNewTaskToReadyList+0xc8>)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800564a:	4b20      	ldr	r3, [pc, #128]	@ (80056cc <prvAddNewTaskToReadyList+0xd0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3301      	adds	r3, #1
 8005650:	4a1e      	ldr	r2, [pc, #120]	@ (80056cc <prvAddNewTaskToReadyList+0xd0>)
 8005652:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005654:	4b1d      	ldr	r3, [pc, #116]	@ (80056cc <prvAddNewTaskToReadyList+0xd0>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005660:	4b1b      	ldr	r3, [pc, #108]	@ (80056d0 <prvAddNewTaskToReadyList+0xd4>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d903      	bls.n	8005670 <prvAddNewTaskToReadyList+0x74>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800566c:	4a18      	ldr	r2, [pc, #96]	@ (80056d0 <prvAddNewTaskToReadyList+0xd4>)
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4a15      	ldr	r2, [pc, #84]	@ (80056d4 <prvAddNewTaskToReadyList+0xd8>)
 800567e:	441a      	add	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3304      	adds	r3, #4
 8005684:	4619      	mov	r1, r3
 8005686:	4610      	mov	r0, r2
 8005688:	f7ff f8e9 	bl	800485e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800568c:	f001 fa5e 	bl	8006b4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005690:	4b0d      	ldr	r3, [pc, #52]	@ (80056c8 <prvAddNewTaskToReadyList+0xcc>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00e      	beq.n	80056b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005698:	4b0a      	ldr	r3, [pc, #40]	@ (80056c4 <prvAddNewTaskToReadyList+0xc8>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d207      	bcs.n	80056b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056a6:	4b0c      	ldr	r3, [pc, #48]	@ (80056d8 <prvAddNewTaskToReadyList+0xdc>)
 80056a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056b6:	bf00      	nop
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000e54 	.word	0x20000e54
 80056c4:	20000980 	.word	0x20000980
 80056c8:	20000e60 	.word	0x20000e60
 80056cc:	20000e70 	.word	0x20000e70
 80056d0:	20000e5c 	.word	0x20000e5c
 80056d4:	20000984 	.word	0x20000984
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d018      	beq.n	8005720 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056ee:	4b14      	ldr	r3, [pc, #80]	@ (8005740 <vTaskDelay+0x64>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <vTaskDelay+0x32>
	__asm volatile
 80056f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	60bb      	str	r3, [r7, #8]
}
 8005708:	bf00      	nop
 800570a:	bf00      	nop
 800570c:	e7fd      	b.n	800570a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800570e:	f000 f88b 	bl	8005828 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005712:	2100      	movs	r1, #0
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fd09 	bl	800612c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800571a:	f000 f893 	bl	8005844 <xTaskResumeAll>
 800571e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d107      	bne.n	8005736 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005726:	4b07      	ldr	r3, [pc, #28]	@ (8005744 <vTaskDelay+0x68>)
 8005728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005736:	bf00      	nop
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	20000e7c 	.word	0x20000e7c
 8005744:	e000ed04 	.word	0xe000ed04

08005748 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08a      	sub	sp, #40	@ 0x28
 800574c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800574e:	2300      	movs	r3, #0
 8005750:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005756:	463a      	mov	r2, r7
 8005758:	1d39      	adds	r1, r7, #4
 800575a:	f107 0308 	add.w	r3, r7, #8
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff f81c 	bl	800479c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005764:	6839      	ldr	r1, [r7, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	9202      	str	r2, [sp, #8]
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	2300      	movs	r3, #0
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	2300      	movs	r3, #0
 8005774:	460a      	mov	r2, r1
 8005776:	4924      	ldr	r1, [pc, #144]	@ (8005808 <vTaskStartScheduler+0xc0>)
 8005778:	4824      	ldr	r0, [pc, #144]	@ (800580c <vTaskStartScheduler+0xc4>)
 800577a:	f7ff fdf1 	bl	8005360 <xTaskCreateStatic>
 800577e:	4603      	mov	r3, r0
 8005780:	4a23      	ldr	r2, [pc, #140]	@ (8005810 <vTaskStartScheduler+0xc8>)
 8005782:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005784:	4b22      	ldr	r3, [pc, #136]	@ (8005810 <vTaskStartScheduler+0xc8>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800578c:	2301      	movs	r3, #1
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	e001      	b.n	8005796 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d102      	bne.n	80057a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800579c:	f000 fd1a 	bl	80061d4 <xTimerCreateTimerTask>
 80057a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d11b      	bne.n	80057e0 <vTaskStartScheduler+0x98>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	613b      	str	r3, [r7, #16]
}
 80057ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057bc:	4b15      	ldr	r3, [pc, #84]	@ (8005814 <vTaskStartScheduler+0xcc>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3354      	adds	r3, #84	@ 0x54
 80057c2:	4a15      	ldr	r2, [pc, #84]	@ (8005818 <vTaskStartScheduler+0xd0>)
 80057c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057c6:	4b15      	ldr	r3, [pc, #84]	@ (800581c <vTaskStartScheduler+0xd4>)
 80057c8:	f04f 32ff 	mov.w	r2, #4294967295
 80057cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057ce:	4b14      	ldr	r3, [pc, #80]	@ (8005820 <vTaskStartScheduler+0xd8>)
 80057d0:	2201      	movs	r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057d4:	4b13      	ldr	r3, [pc, #76]	@ (8005824 <vTaskStartScheduler+0xdc>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057da:	f001 f8e1 	bl	80069a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057de:	e00f      	b.n	8005800 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e6:	d10b      	bne.n	8005800 <vTaskStartScheduler+0xb8>
	__asm volatile
 80057e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	60fb      	str	r3, [r7, #12]
}
 80057fa:	bf00      	nop
 80057fc:	bf00      	nop
 80057fe:	e7fd      	b.n	80057fc <vTaskStartScheduler+0xb4>
}
 8005800:	bf00      	nop
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	08007328 	.word	0x08007328
 800580c:	08005e59 	.word	0x08005e59
 8005810:	20000e78 	.word	0x20000e78
 8005814:	20000980 	.word	0x20000980
 8005818:	20000010 	.word	0x20000010
 800581c:	20000e74 	.word	0x20000e74
 8005820:	20000e60 	.word	0x20000e60
 8005824:	20000e58 	.word	0x20000e58

08005828 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800582c:	4b04      	ldr	r3, [pc, #16]	@ (8005840 <vTaskSuspendAll+0x18>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3301      	adds	r3, #1
 8005832:	4a03      	ldr	r2, [pc, #12]	@ (8005840 <vTaskSuspendAll+0x18>)
 8005834:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005836:	bf00      	nop
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	20000e7c 	.word	0x20000e7c

08005844 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800584e:	2300      	movs	r3, #0
 8005850:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005852:	4b42      	ldr	r3, [pc, #264]	@ (800595c <xTaskResumeAll+0x118>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10b      	bne.n	8005872 <xTaskResumeAll+0x2e>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	603b      	str	r3, [r7, #0]
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	e7fd      	b.n	800586e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005872:	f001 f939 	bl	8006ae8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005876:	4b39      	ldr	r3, [pc, #228]	@ (800595c <xTaskResumeAll+0x118>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3b01      	subs	r3, #1
 800587c:	4a37      	ldr	r2, [pc, #220]	@ (800595c <xTaskResumeAll+0x118>)
 800587e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005880:	4b36      	ldr	r3, [pc, #216]	@ (800595c <xTaskResumeAll+0x118>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d162      	bne.n	800594e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005888:	4b35      	ldr	r3, [pc, #212]	@ (8005960 <xTaskResumeAll+0x11c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d05e      	beq.n	800594e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005890:	e02f      	b.n	80058f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005892:	4b34      	ldr	r3, [pc, #208]	@ (8005964 <xTaskResumeAll+0x120>)
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3318      	adds	r3, #24
 800589e:	4618      	mov	r0, r3
 80058a0:	f7ff f83a 	bl	8004918 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff f835 	bl	8004918 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005968 <xTaskResumeAll+0x124>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d903      	bls.n	80058c2 <xTaskResumeAll+0x7e>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058be:	4a2a      	ldr	r2, [pc, #168]	@ (8005968 <xTaskResumeAll+0x124>)
 80058c0:	6013      	str	r3, [r2, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4a27      	ldr	r2, [pc, #156]	@ (800596c <xTaskResumeAll+0x128>)
 80058d0:	441a      	add	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3304      	adds	r3, #4
 80058d6:	4619      	mov	r1, r3
 80058d8:	4610      	mov	r0, r2
 80058da:	f7fe ffc0 	bl	800485e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e2:	4b23      	ldr	r3, [pc, #140]	@ (8005970 <xTaskResumeAll+0x12c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d302      	bcc.n	80058f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80058ec:	4b21      	ldr	r3, [pc, #132]	@ (8005974 <xTaskResumeAll+0x130>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005964 <xTaskResumeAll+0x120>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1cb      	bne.n	8005892 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d001      	beq.n	8005904 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005900:	f000 fb66 	bl	8005fd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005904:	4b1c      	ldr	r3, [pc, #112]	@ (8005978 <xTaskResumeAll+0x134>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d010      	beq.n	8005932 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005910:	f000 f846 	bl	80059a0 <xTaskIncrementTick>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800591a:	4b16      	ldr	r3, [pc, #88]	@ (8005974 <xTaskResumeAll+0x130>)
 800591c:	2201      	movs	r2, #1
 800591e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3b01      	subs	r3, #1
 8005924:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1f1      	bne.n	8005910 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800592c:	4b12      	ldr	r3, [pc, #72]	@ (8005978 <xTaskResumeAll+0x134>)
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005932:	4b10      	ldr	r3, [pc, #64]	@ (8005974 <xTaskResumeAll+0x130>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800593a:	2301      	movs	r3, #1
 800593c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800593e:	4b0f      	ldr	r3, [pc, #60]	@ (800597c <xTaskResumeAll+0x138>)
 8005940:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800594e:	f001 f8fd 	bl	8006b4c <vPortExitCritical>

	return xAlreadyYielded;
 8005952:	68bb      	ldr	r3, [r7, #8]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	20000e7c 	.word	0x20000e7c
 8005960:	20000e54 	.word	0x20000e54
 8005964:	20000e14 	.word	0x20000e14
 8005968:	20000e5c 	.word	0x20000e5c
 800596c:	20000984 	.word	0x20000984
 8005970:	20000980 	.word	0x20000980
 8005974:	20000e68 	.word	0x20000e68
 8005978:	20000e64 	.word	0x20000e64
 800597c:	e000ed04 	.word	0xe000ed04

08005980 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005986:	4b05      	ldr	r3, [pc, #20]	@ (800599c <xTaskGetTickCount+0x1c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800598c:	687b      	ldr	r3, [r7, #4]
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	20000e58 	.word	0x20000e58

080059a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059a6:	2300      	movs	r3, #0
 80059a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059aa:	4b4f      	ldr	r3, [pc, #316]	@ (8005ae8 <xTaskIncrementTick+0x148>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f040 8090 	bne.w	8005ad4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059b4:	4b4d      	ldr	r3, [pc, #308]	@ (8005aec <xTaskIncrementTick+0x14c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	3301      	adds	r3, #1
 80059ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059bc:	4a4b      	ldr	r2, [pc, #300]	@ (8005aec <xTaskIncrementTick+0x14c>)
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d121      	bne.n	8005a0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80059c8:	4b49      	ldr	r3, [pc, #292]	@ (8005af0 <xTaskIncrementTick+0x150>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d6:	f383 8811 	msr	BASEPRI, r3
 80059da:	f3bf 8f6f 	isb	sy
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	603b      	str	r3, [r7, #0]
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	e7fd      	b.n	80059e6 <xTaskIncrementTick+0x46>
 80059ea:	4b41      	ldr	r3, [pc, #260]	@ (8005af0 <xTaskIncrementTick+0x150>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	4b40      	ldr	r3, [pc, #256]	@ (8005af4 <xTaskIncrementTick+0x154>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a3e      	ldr	r2, [pc, #248]	@ (8005af0 <xTaskIncrementTick+0x150>)
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	4a3e      	ldr	r2, [pc, #248]	@ (8005af4 <xTaskIncrementTick+0x154>)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6013      	str	r3, [r2, #0]
 80059fe:	4b3e      	ldr	r3, [pc, #248]	@ (8005af8 <xTaskIncrementTick+0x158>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3301      	adds	r3, #1
 8005a04:	4a3c      	ldr	r2, [pc, #240]	@ (8005af8 <xTaskIncrementTick+0x158>)
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	f000 fae2 	bl	8005fd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8005afc <xTaskIncrementTick+0x15c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d349      	bcc.n	8005aaa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a16:	4b36      	ldr	r3, [pc, #216]	@ (8005af0 <xTaskIncrementTick+0x150>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d104      	bne.n	8005a2a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a20:	4b36      	ldr	r3, [pc, #216]	@ (8005afc <xTaskIncrementTick+0x15c>)
 8005a22:	f04f 32ff 	mov.w	r2, #4294967295
 8005a26:	601a      	str	r2, [r3, #0]
					break;
 8005a28:	e03f      	b.n	8005aaa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a2a:	4b31      	ldr	r3, [pc, #196]	@ (8005af0 <xTaskIncrementTick+0x150>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d203      	bcs.n	8005a4a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a42:	4a2e      	ldr	r2, [pc, #184]	@ (8005afc <xTaskIncrementTick+0x15c>)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a48:	e02f      	b.n	8005aaa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fe ff62 	bl	8004918 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d004      	beq.n	8005a66 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	3318      	adds	r3, #24
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fe ff59 	bl	8004918 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a6a:	4b25      	ldr	r3, [pc, #148]	@ (8005b00 <xTaskIncrementTick+0x160>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d903      	bls.n	8005a7a <xTaskIncrementTick+0xda>
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a76:	4a22      	ldr	r2, [pc, #136]	@ (8005b00 <xTaskIncrementTick+0x160>)
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4a1f      	ldr	r2, [pc, #124]	@ (8005b04 <xTaskIncrementTick+0x164>)
 8005a88:	441a      	add	r2, r3
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4610      	mov	r0, r2
 8005a92:	f7fe fee4 	bl	800485e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8005b08 <xTaskIncrementTick+0x168>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d3b8      	bcc.n	8005a16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aa8:	e7b5      	b.n	8005a16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005aaa:	4b17      	ldr	r3, [pc, #92]	@ (8005b08 <xTaskIncrementTick+0x168>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab0:	4914      	ldr	r1, [pc, #80]	@ (8005b04 <xTaskIncrementTick+0x164>)
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d901      	bls.n	8005ac6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ac6:	4b11      	ldr	r3, [pc, #68]	@ (8005b0c <xTaskIncrementTick+0x16c>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d007      	beq.n	8005ade <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	e004      	b.n	8005ade <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8005b10 <xTaskIncrementTick+0x170>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	4a0d      	ldr	r2, [pc, #52]	@ (8005b10 <xTaskIncrementTick+0x170>)
 8005adc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005ade:	697b      	ldr	r3, [r7, #20]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	20000e7c 	.word	0x20000e7c
 8005aec:	20000e58 	.word	0x20000e58
 8005af0:	20000e0c 	.word	0x20000e0c
 8005af4:	20000e10 	.word	0x20000e10
 8005af8:	20000e6c 	.word	0x20000e6c
 8005afc:	20000e74 	.word	0x20000e74
 8005b00:	20000e5c 	.word	0x20000e5c
 8005b04:	20000984 	.word	0x20000984
 8005b08:	20000980 	.word	0x20000980
 8005b0c:	20000e68 	.word	0x20000e68
 8005b10:	20000e64 	.word	0x20000e64

08005b14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8005bc8 <vTaskSwitchContext+0xb4>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b22:	4b2a      	ldr	r3, [pc, #168]	@ (8005bcc <vTaskSwitchContext+0xb8>)
 8005b24:	2201      	movs	r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b28:	e047      	b.n	8005bba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005b2a:	4b28      	ldr	r3, [pc, #160]	@ (8005bcc <vTaskSwitchContext+0xb8>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b30:	4b27      	ldr	r3, [pc, #156]	@ (8005bd0 <vTaskSwitchContext+0xbc>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	e011      	b.n	8005b5c <vTaskSwitchContext+0x48>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10b      	bne.n	8005b56 <vTaskSwitchContext+0x42>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	607b      	str	r3, [r7, #4]
}
 8005b50:	bf00      	nop
 8005b52:	bf00      	nop
 8005b54:	e7fd      	b.n	8005b52 <vTaskSwitchContext+0x3e>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	491d      	ldr	r1, [pc, #116]	@ (8005bd4 <vTaskSwitchContext+0xc0>)
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d0e3      	beq.n	8005b38 <vTaskSwitchContext+0x24>
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4a16      	ldr	r2, [pc, #88]	@ (8005bd4 <vTaskSwitchContext+0xc0>)
 8005b7c:	4413      	add	r3, r2
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	605a      	str	r2, [r3, #4]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	3308      	adds	r3, #8
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d104      	bne.n	8005ba0 <vTaskSwitchContext+0x8c>
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	605a      	str	r2, [r3, #4]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8005bd8 <vTaskSwitchContext+0xc4>)
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	4a09      	ldr	r2, [pc, #36]	@ (8005bd0 <vTaskSwitchContext+0xbc>)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bb0:	4b09      	ldr	r3, [pc, #36]	@ (8005bd8 <vTaskSwitchContext+0xc4>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3354      	adds	r3, #84	@ 0x54
 8005bb6:	4a09      	ldr	r2, [pc, #36]	@ (8005bdc <vTaskSwitchContext+0xc8>)
 8005bb8:	6013      	str	r3, [r2, #0]
}
 8005bba:	bf00      	nop
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20000e7c 	.word	0x20000e7c
 8005bcc:	20000e68 	.word	0x20000e68
 8005bd0:	20000e5c 	.word	0x20000e5c
 8005bd4:	20000984 	.word	0x20000984
 8005bd8:	20000980 	.word	0x20000980
 8005bdc:	20000010 	.word	0x20000010

08005be0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10b      	bne.n	8005c08 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	60fb      	str	r3, [r7, #12]
}
 8005c02:	bf00      	nop
 8005c04:	bf00      	nop
 8005c06:	e7fd      	b.n	8005c04 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c08:	4b07      	ldr	r3, [pc, #28]	@ (8005c28 <vTaskPlaceOnEventList+0x48>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3318      	adds	r3, #24
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f7fe fe48 	bl	80048a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c16:	2101      	movs	r1, #1
 8005c18:	6838      	ldr	r0, [r7, #0]
 8005c1a:	f000 fa87 	bl	800612c <prvAddCurrentTaskToDelayedList>
}
 8005c1e:	bf00      	nop
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000980 	.word	0x20000980

08005c2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10b      	bne.n	8005c56 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	617b      	str	r3, [r7, #20]
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	e7fd      	b.n	8005c52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c56:	4b0a      	ldr	r3, [pc, #40]	@ (8005c80 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3318      	adds	r3, #24
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f7fe fdfd 	bl	800485e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c6e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c70:	6879      	ldr	r1, [r7, #4]
 8005c72:	68b8      	ldr	r0, [r7, #8]
 8005c74:	f000 fa5a 	bl	800612c <prvAddCurrentTaskToDelayedList>
	}
 8005c78:	bf00      	nop
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20000980 	.word	0x20000980

08005c84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10b      	bne.n	8005cb2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	60fb      	str	r3, [r7, #12]
}
 8005cac:	bf00      	nop
 8005cae:	bf00      	nop
 8005cb0:	e7fd      	b.n	8005cae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	3318      	adds	r3, #24
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fe fe2e 	bl	8004918 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8005d34 <xTaskRemoveFromEventList+0xb0>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d11d      	bne.n	8005d00 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	3304      	adds	r3, #4
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fe fe25 	bl	8004918 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd2:	4b19      	ldr	r3, [pc, #100]	@ (8005d38 <xTaskRemoveFromEventList+0xb4>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d903      	bls.n	8005ce2 <xTaskRemoveFromEventList+0x5e>
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cde:	4a16      	ldr	r2, [pc, #88]	@ (8005d38 <xTaskRemoveFromEventList+0xb4>)
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4a13      	ldr	r2, [pc, #76]	@ (8005d3c <xTaskRemoveFromEventList+0xb8>)
 8005cf0:	441a      	add	r2, r3
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	f7fe fdb0 	bl	800485e <vListInsertEnd>
 8005cfe:	e005      	b.n	8005d0c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	3318      	adds	r3, #24
 8005d04:	4619      	mov	r1, r3
 8005d06:	480e      	ldr	r0, [pc, #56]	@ (8005d40 <xTaskRemoveFromEventList+0xbc>)
 8005d08:	f7fe fda9 	bl	800485e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d10:	4b0c      	ldr	r3, [pc, #48]	@ (8005d44 <xTaskRemoveFromEventList+0xc0>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d905      	bls.n	8005d26 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005d48 <xTaskRemoveFromEventList+0xc4>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	e001      	b.n	8005d2a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d2a:	697b      	ldr	r3, [r7, #20]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	20000e7c 	.word	0x20000e7c
 8005d38:	20000e5c 	.word	0x20000e5c
 8005d3c:	20000984 	.word	0x20000984
 8005d40:	20000e14 	.word	0x20000e14
 8005d44:	20000980 	.word	0x20000980
 8005d48:	20000e68 	.word	0x20000e68

08005d4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d54:	4b06      	ldr	r3, [pc, #24]	@ (8005d70 <vTaskInternalSetTimeOutState+0x24>)
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d5c:	4b05      	ldr	r3, [pc, #20]	@ (8005d74 <vTaskInternalSetTimeOutState+0x28>)
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	605a      	str	r2, [r3, #4]
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	20000e6c 	.word	0x20000e6c
 8005d74:	20000e58 	.word	0x20000e58

08005d78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10b      	bne.n	8005da0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	613b      	str	r3, [r7, #16]
}
 8005d9a:	bf00      	nop
 8005d9c:	bf00      	nop
 8005d9e:	e7fd      	b.n	8005d9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10b      	bne.n	8005dbe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	60fb      	str	r3, [r7, #12]
}
 8005db8:	bf00      	nop
 8005dba:	bf00      	nop
 8005dbc:	e7fd      	b.n	8005dba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005dbe:	f000 fe93 	bl	8006ae8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8005e38 <xTaskCheckForTimeOut+0xc0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dda:	d102      	bne.n	8005de2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	61fb      	str	r3, [r7, #28]
 8005de0:	e023      	b.n	8005e2a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	4b15      	ldr	r3, [pc, #84]	@ (8005e3c <xTaskCheckForTimeOut+0xc4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d007      	beq.n	8005dfe <xTaskCheckForTimeOut+0x86>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d302      	bcc.n	8005dfe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	61fb      	str	r3, [r7, #28]
 8005dfc:	e015      	b.n	8005e2a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d20b      	bcs.n	8005e20 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	1ad2      	subs	r2, r2, r3
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff ff99 	bl	8005d4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	e004      	b.n	8005e2a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e26:	2301      	movs	r3, #1
 8005e28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e2a:	f000 fe8f 	bl	8006b4c <vPortExitCritical>

	return xReturn;
 8005e2e:	69fb      	ldr	r3, [r7, #28]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3720      	adds	r7, #32
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20000e58 	.word	0x20000e58
 8005e3c:	20000e6c 	.word	0x20000e6c

08005e40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e44:	4b03      	ldr	r3, [pc, #12]	@ (8005e54 <vTaskMissedYield+0x14>)
 8005e46:	2201      	movs	r2, #1
 8005e48:	601a      	str	r2, [r3, #0]
}
 8005e4a:	bf00      	nop
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	20000e68 	.word	0x20000e68

08005e58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e60:	f000 f852 	bl	8005f08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e64:	4b06      	ldr	r3, [pc, #24]	@ (8005e80 <prvIdleTask+0x28>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d9f9      	bls.n	8005e60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e6c:	4b05      	ldr	r3, [pc, #20]	@ (8005e84 <prvIdleTask+0x2c>)
 8005e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e7c:	e7f0      	b.n	8005e60 <prvIdleTask+0x8>
 8005e7e:	bf00      	nop
 8005e80:	20000984 	.word	0x20000984
 8005e84:	e000ed04 	.word	0xe000ed04

08005e88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e8e:	2300      	movs	r3, #0
 8005e90:	607b      	str	r3, [r7, #4]
 8005e92:	e00c      	b.n	8005eae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4a12      	ldr	r2, [pc, #72]	@ (8005ee8 <prvInitialiseTaskLists+0x60>)
 8005ea0:	4413      	add	r3, r2
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fe fcae 	bl	8004804 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	607b      	str	r3, [r7, #4]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2b37      	cmp	r3, #55	@ 0x37
 8005eb2:	d9ef      	bls.n	8005e94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005eb4:	480d      	ldr	r0, [pc, #52]	@ (8005eec <prvInitialiseTaskLists+0x64>)
 8005eb6:	f7fe fca5 	bl	8004804 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005eba:	480d      	ldr	r0, [pc, #52]	@ (8005ef0 <prvInitialiseTaskLists+0x68>)
 8005ebc:	f7fe fca2 	bl	8004804 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ec0:	480c      	ldr	r0, [pc, #48]	@ (8005ef4 <prvInitialiseTaskLists+0x6c>)
 8005ec2:	f7fe fc9f 	bl	8004804 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ec6:	480c      	ldr	r0, [pc, #48]	@ (8005ef8 <prvInitialiseTaskLists+0x70>)
 8005ec8:	f7fe fc9c 	bl	8004804 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ecc:	480b      	ldr	r0, [pc, #44]	@ (8005efc <prvInitialiseTaskLists+0x74>)
 8005ece:	f7fe fc99 	bl	8004804 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8005f00 <prvInitialiseTaskLists+0x78>)
 8005ed4:	4a05      	ldr	r2, [pc, #20]	@ (8005eec <prvInitialiseTaskLists+0x64>)
 8005ed6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8005f04 <prvInitialiseTaskLists+0x7c>)
 8005eda:	4a05      	ldr	r2, [pc, #20]	@ (8005ef0 <prvInitialiseTaskLists+0x68>)
 8005edc:	601a      	str	r2, [r3, #0]
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20000984 	.word	0x20000984
 8005eec:	20000de4 	.word	0x20000de4
 8005ef0:	20000df8 	.word	0x20000df8
 8005ef4:	20000e14 	.word	0x20000e14
 8005ef8:	20000e28 	.word	0x20000e28
 8005efc:	20000e40 	.word	0x20000e40
 8005f00:	20000e0c 	.word	0x20000e0c
 8005f04:	20000e10 	.word	0x20000e10

08005f08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f0e:	e019      	b.n	8005f44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f10:	f000 fdea 	bl	8006ae8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f14:	4b10      	ldr	r3, [pc, #64]	@ (8005f58 <prvCheckTasksWaitingTermination+0x50>)
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fe fcf9 	bl	8004918 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f26:	4b0d      	ldr	r3, [pc, #52]	@ (8005f5c <prvCheckTasksWaitingTermination+0x54>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	4a0b      	ldr	r2, [pc, #44]	@ (8005f5c <prvCheckTasksWaitingTermination+0x54>)
 8005f2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f30:	4b0b      	ldr	r3, [pc, #44]	@ (8005f60 <prvCheckTasksWaitingTermination+0x58>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3b01      	subs	r3, #1
 8005f36:	4a0a      	ldr	r2, [pc, #40]	@ (8005f60 <prvCheckTasksWaitingTermination+0x58>)
 8005f38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f3a:	f000 fe07 	bl	8006b4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f810 	bl	8005f64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f44:	4b06      	ldr	r3, [pc, #24]	@ (8005f60 <prvCheckTasksWaitingTermination+0x58>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e1      	bne.n	8005f10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	3708      	adds	r7, #8
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	20000e28 	.word	0x20000e28
 8005f5c:	20000e54 	.word	0x20000e54
 8005f60:	20000e3c 	.word	0x20000e3c

08005f64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	3354      	adds	r3, #84	@ 0x54
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 f8d1 	bl	8007118 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d108      	bne.n	8005f92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 ff9f 	bl	8006ec8 <vPortFree>
				vPortFree( pxTCB );
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 ff9c 	bl	8006ec8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f90:	e019      	b.n	8005fc6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d103      	bne.n	8005fa4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 ff93 	bl	8006ec8 <vPortFree>
	}
 8005fa2:	e010      	b.n	8005fc6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d00b      	beq.n	8005fc6 <prvDeleteTCB+0x62>
	__asm volatile
 8005fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	60fb      	str	r3, [r7, #12]
}
 8005fc0:	bf00      	nop
 8005fc2:	bf00      	nop
 8005fc4:	e7fd      	b.n	8005fc2 <prvDeleteTCB+0x5e>
	}
 8005fc6:	bf00      	nop
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8006008 <prvResetNextTaskUnblockTime+0x38>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d104      	bne.n	8005fea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800600c <prvResetNextTaskUnblockTime+0x3c>)
 8005fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fe6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fe8:	e008      	b.n	8005ffc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fea:	4b07      	ldr	r3, [pc, #28]	@ (8006008 <prvResetNextTaskUnblockTime+0x38>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	4a04      	ldr	r2, [pc, #16]	@ (800600c <prvResetNextTaskUnblockTime+0x3c>)
 8005ffa:	6013      	str	r3, [r2, #0]
}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	20000e0c 	.word	0x20000e0c
 800600c:	20000e74 	.word	0x20000e74

08006010 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006016:	4b0b      	ldr	r3, [pc, #44]	@ (8006044 <xTaskGetSchedulerState+0x34>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d102      	bne.n	8006024 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800601e:	2301      	movs	r3, #1
 8006020:	607b      	str	r3, [r7, #4]
 8006022:	e008      	b.n	8006036 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006024:	4b08      	ldr	r3, [pc, #32]	@ (8006048 <xTaskGetSchedulerState+0x38>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d102      	bne.n	8006032 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800602c:	2302      	movs	r3, #2
 800602e:	607b      	str	r3, [r7, #4]
 8006030:	e001      	b.n	8006036 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006032:	2300      	movs	r3, #0
 8006034:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006036:	687b      	ldr	r3, [r7, #4]
	}
 8006038:	4618      	mov	r0, r3
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	20000e60 	.word	0x20000e60
 8006048:	20000e7c 	.word	0x20000e7c

0800604c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006058:	2300      	movs	r3, #0
 800605a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d058      	beq.n	8006114 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006062:	4b2f      	ldr	r3, [pc, #188]	@ (8006120 <xTaskPriorityDisinherit+0xd4>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	429a      	cmp	r2, r3
 800606a:	d00b      	beq.n	8006084 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	60fb      	str	r3, [r7, #12]
}
 800607e:	bf00      	nop
 8006080:	bf00      	nop
 8006082:	e7fd      	b.n	8006080 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10b      	bne.n	80060a4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	60bb      	str	r3, [r7, #8]
}
 800609e:	bf00      	nop
 80060a0:	bf00      	nop
 80060a2:	e7fd      	b.n	80060a0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060a8:	1e5a      	subs	r2, r3, #1
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d02c      	beq.n	8006114 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d128      	bne.n	8006114 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	3304      	adds	r3, #4
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe fc26 	bl	8004918 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006124 <xTaskPriorityDisinherit+0xd8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d903      	bls.n	80060f4 <xTaskPriorityDisinherit+0xa8>
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f0:	4a0c      	ldr	r2, [pc, #48]	@ (8006124 <xTaskPriorityDisinherit+0xd8>)
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f8:	4613      	mov	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4a09      	ldr	r2, [pc, #36]	@ (8006128 <xTaskPriorityDisinherit+0xdc>)
 8006102:	441a      	add	r2, r3
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	3304      	adds	r3, #4
 8006108:	4619      	mov	r1, r3
 800610a:	4610      	mov	r0, r2
 800610c:	f7fe fba7 	bl	800485e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006110:	2301      	movs	r3, #1
 8006112:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006114:	697b      	ldr	r3, [r7, #20]
	}
 8006116:	4618      	mov	r0, r3
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20000980 	.word	0x20000980
 8006124:	20000e5c 	.word	0x20000e5c
 8006128:	20000984 	.word	0x20000984

0800612c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006136:	4b21      	ldr	r3, [pc, #132]	@ (80061bc <prvAddCurrentTaskToDelayedList+0x90>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800613c:	4b20      	ldr	r3, [pc, #128]	@ (80061c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3304      	adds	r3, #4
 8006142:	4618      	mov	r0, r3
 8006144:	f7fe fbe8 	bl	8004918 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d10a      	bne.n	8006166 <prvAddCurrentTaskToDelayedList+0x3a>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d007      	beq.n	8006166 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006156:	4b1a      	ldr	r3, [pc, #104]	@ (80061c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3304      	adds	r3, #4
 800615c:	4619      	mov	r1, r3
 800615e:	4819      	ldr	r0, [pc, #100]	@ (80061c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006160:	f7fe fb7d 	bl	800485e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006164:	e026      	b.n	80061b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4413      	add	r3, r2
 800616c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800616e:	4b14      	ldr	r3, [pc, #80]	@ (80061c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	429a      	cmp	r2, r3
 800617c:	d209      	bcs.n	8006192 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800617e:	4b12      	ldr	r3, [pc, #72]	@ (80061c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	4b0f      	ldr	r3, [pc, #60]	@ (80061c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3304      	adds	r3, #4
 8006188:	4619      	mov	r1, r3
 800618a:	4610      	mov	r0, r2
 800618c:	f7fe fb8b 	bl	80048a6 <vListInsert>
}
 8006190:	e010      	b.n	80061b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006192:	4b0e      	ldr	r3, [pc, #56]	@ (80061cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	4b0a      	ldr	r3, [pc, #40]	@ (80061c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3304      	adds	r3, #4
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f7fe fb81 	bl	80048a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061a4:	4b0a      	ldr	r3, [pc, #40]	@ (80061d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d202      	bcs.n	80061b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80061ae:	4a08      	ldr	r2, [pc, #32]	@ (80061d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	6013      	str	r3, [r2, #0]
}
 80061b4:	bf00      	nop
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	20000e58 	.word	0x20000e58
 80061c0:	20000980 	.word	0x20000980
 80061c4:	20000e40 	.word	0x20000e40
 80061c8:	20000e10 	.word	0x20000e10
 80061cc:	20000e0c 	.word	0x20000e0c
 80061d0:	20000e74 	.word	0x20000e74

080061d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08a      	sub	sp, #40	@ 0x28
 80061d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061de:	f000 fb13 	bl	8006808 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061e2:	4b1d      	ldr	r3, [pc, #116]	@ (8006258 <xTimerCreateTimerTask+0x84>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d021      	beq.n	800622e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061f2:	1d3a      	adds	r2, r7, #4
 80061f4:	f107 0108 	add.w	r1, r7, #8
 80061f8:	f107 030c 	add.w	r3, r7, #12
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fe fae7 	bl	80047d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006202:	6879      	ldr	r1, [r7, #4]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	9202      	str	r2, [sp, #8]
 800620a:	9301      	str	r3, [sp, #4]
 800620c:	2302      	movs	r3, #2
 800620e:	9300      	str	r3, [sp, #0]
 8006210:	2300      	movs	r3, #0
 8006212:	460a      	mov	r2, r1
 8006214:	4911      	ldr	r1, [pc, #68]	@ (800625c <xTimerCreateTimerTask+0x88>)
 8006216:	4812      	ldr	r0, [pc, #72]	@ (8006260 <xTimerCreateTimerTask+0x8c>)
 8006218:	f7ff f8a2 	bl	8005360 <xTaskCreateStatic>
 800621c:	4603      	mov	r3, r0
 800621e:	4a11      	ldr	r2, [pc, #68]	@ (8006264 <xTimerCreateTimerTask+0x90>)
 8006220:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006222:	4b10      	ldr	r3, [pc, #64]	@ (8006264 <xTimerCreateTimerTask+0x90>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800622a:	2301      	movs	r3, #1
 800622c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10b      	bne.n	800624c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	613b      	str	r3, [r7, #16]
}
 8006246:	bf00      	nop
 8006248:	bf00      	nop
 800624a:	e7fd      	b.n	8006248 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800624c:	697b      	ldr	r3, [r7, #20]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20000eb0 	.word	0x20000eb0
 800625c:	08007330 	.word	0x08007330
 8006260:	080063a1 	.word	0x080063a1
 8006264:	20000eb4 	.word	0x20000eb4

08006268 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b08a      	sub	sp, #40	@ 0x28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006276:	2300      	movs	r3, #0
 8006278:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10b      	bne.n	8006298 <xTimerGenericCommand+0x30>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	623b      	str	r3, [r7, #32]
}
 8006292:	bf00      	nop
 8006294:	bf00      	nop
 8006296:	e7fd      	b.n	8006294 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006298:	4b19      	ldr	r3, [pc, #100]	@ (8006300 <xTimerGenericCommand+0x98>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d02a      	beq.n	80062f6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b05      	cmp	r3, #5
 80062b0:	dc18      	bgt.n	80062e4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062b2:	f7ff fead 	bl	8006010 <xTaskGetSchedulerState>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d109      	bne.n	80062d0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062bc:	4b10      	ldr	r3, [pc, #64]	@ (8006300 <xTimerGenericCommand+0x98>)
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	f107 0110 	add.w	r1, r7, #16
 80062c4:	2300      	movs	r3, #0
 80062c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062c8:	f7fe fc5a 	bl	8004b80 <xQueueGenericSend>
 80062cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80062ce:	e012      	b.n	80062f6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006300 <xTimerGenericCommand+0x98>)
 80062d2:	6818      	ldr	r0, [r3, #0]
 80062d4:	f107 0110 	add.w	r1, r7, #16
 80062d8:	2300      	movs	r3, #0
 80062da:	2200      	movs	r2, #0
 80062dc:	f7fe fc50 	bl	8004b80 <xQueueGenericSend>
 80062e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80062e2:	e008      	b.n	80062f6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062e4:	4b06      	ldr	r3, [pc, #24]	@ (8006300 <xTimerGenericCommand+0x98>)
 80062e6:	6818      	ldr	r0, [r3, #0]
 80062e8:	f107 0110 	add.w	r1, r7, #16
 80062ec:	2300      	movs	r3, #0
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	f7fe fd48 	bl	8004d84 <xQueueGenericSendFromISR>
 80062f4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3728      	adds	r7, #40	@ 0x28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20000eb0 	.word	0x20000eb0

08006304 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b088      	sub	sp, #32
 8006308:	af02      	add	r7, sp, #8
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800630e:	4b23      	ldr	r3, [pc, #140]	@ (800639c <prvProcessExpiredTimer+0x98>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	3304      	adds	r3, #4
 800631c:	4618      	mov	r0, r3
 800631e:	f7fe fafb 	bl	8004918 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006328:	f003 0304 	and.w	r3, r3, #4
 800632c:	2b00      	cmp	r3, #0
 800632e:	d023      	beq.n	8006378 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	699a      	ldr	r2, [r3, #24]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	18d1      	adds	r1, r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	6978      	ldr	r0, [r7, #20]
 800633e:	f000 f8d5 	bl	80064ec <prvInsertTimerInActiveList>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d020      	beq.n	800638a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006348:	2300      	movs	r3, #0
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	2300      	movs	r3, #0
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	2100      	movs	r1, #0
 8006352:	6978      	ldr	r0, [r7, #20]
 8006354:	f7ff ff88 	bl	8006268 <xTimerGenericCommand>
 8006358:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d114      	bne.n	800638a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	60fb      	str	r3, [r7, #12]
}
 8006372:	bf00      	nop
 8006374:	bf00      	nop
 8006376:	e7fd      	b.n	8006374 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800637e:	f023 0301 	bic.w	r3, r3, #1
 8006382:	b2da      	uxtb	r2, r3
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	6978      	ldr	r0, [r7, #20]
 8006390:	4798      	blx	r3
}
 8006392:	bf00      	nop
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
 800639a:	bf00      	nop
 800639c:	20000ea8 	.word	0x20000ea8

080063a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063a8:	f107 0308 	add.w	r3, r7, #8
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 f859 	bl	8006464 <prvGetNextExpireTime>
 80063b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4619      	mov	r1, r3
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 f805 	bl	80063c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063be:	f000 f8d7 	bl	8006570 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063c2:	bf00      	nop
 80063c4:	e7f0      	b.n	80063a8 <prvTimerTask+0x8>
	...

080063c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063d2:	f7ff fa29 	bl	8005828 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063d6:	f107 0308 	add.w	r3, r7, #8
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 f866 	bl	80064ac <prvSampleTimeNow>
 80063e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d130      	bne.n	800644a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10a      	bne.n	8006404 <prvProcessTimerOrBlockTask+0x3c>
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d806      	bhi.n	8006404 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063f6:	f7ff fa25 	bl	8005844 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063fa:	68f9      	ldr	r1, [r7, #12]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7ff ff81 	bl	8006304 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006402:	e024      	b.n	800644e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d008      	beq.n	800641c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800640a:	4b13      	ldr	r3, [pc, #76]	@ (8006458 <prvProcessTimerOrBlockTask+0x90>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <prvProcessTimerOrBlockTask+0x50>
 8006414:	2301      	movs	r3, #1
 8006416:	e000      	b.n	800641a <prvProcessTimerOrBlockTask+0x52>
 8006418:	2300      	movs	r3, #0
 800641a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800641c:	4b0f      	ldr	r3, [pc, #60]	@ (800645c <prvProcessTimerOrBlockTask+0x94>)
 800641e:	6818      	ldr	r0, [r3, #0]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	4619      	mov	r1, r3
 800642a:	f7fe ff65 	bl	80052f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800642e:	f7ff fa09 	bl	8005844 <xTaskResumeAll>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10a      	bne.n	800644e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006438:	4b09      	ldr	r3, [pc, #36]	@ (8006460 <prvProcessTimerOrBlockTask+0x98>)
 800643a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	f3bf 8f6f 	isb	sy
}
 8006448:	e001      	b.n	800644e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800644a:	f7ff f9fb 	bl	8005844 <xTaskResumeAll>
}
 800644e:	bf00      	nop
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000eac 	.word	0x20000eac
 800645c:	20000eb0 	.word	0x20000eb0
 8006460:	e000ed04 	.word	0xe000ed04

08006464 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800646c:	4b0e      	ldr	r3, [pc, #56]	@ (80064a8 <prvGetNextExpireTime+0x44>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <prvGetNextExpireTime+0x16>
 8006476:	2201      	movs	r2, #1
 8006478:	e000      	b.n	800647c <prvGetNextExpireTime+0x18>
 800647a:	2200      	movs	r2, #0
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d105      	bne.n	8006494 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006488:	4b07      	ldr	r3, [pc, #28]	@ (80064a8 <prvGetNextExpireTime+0x44>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	60fb      	str	r3, [r7, #12]
 8006492:	e001      	b.n	8006498 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006498:	68fb      	ldr	r3, [r7, #12]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	20000ea8 	.word	0x20000ea8

080064ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064b4:	f7ff fa64 	bl	8005980 <xTaskGetTickCount>
 80064b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064ba:	4b0b      	ldr	r3, [pc, #44]	@ (80064e8 <prvSampleTimeNow+0x3c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d205      	bcs.n	80064d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064c4:	f000 f93a 	bl	800673c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	e002      	b.n	80064d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064d6:	4a04      	ldr	r2, [pc, #16]	@ (80064e8 <prvSampleTimeNow+0x3c>)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064dc:	68fb      	ldr	r3, [r7, #12]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20000eb8 	.word	0x20000eb8

080064ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064fa:	2300      	movs	r3, #0
 80064fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	429a      	cmp	r2, r3
 8006510:	d812      	bhi.n	8006538 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	1ad2      	subs	r2, r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	429a      	cmp	r2, r3
 800651e:	d302      	bcc.n	8006526 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006520:	2301      	movs	r3, #1
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	e01b      	b.n	800655e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006526:	4b10      	ldr	r3, [pc, #64]	@ (8006568 <prvInsertTimerInActiveList+0x7c>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3304      	adds	r3, #4
 800652e:	4619      	mov	r1, r3
 8006530:	4610      	mov	r0, r2
 8006532:	f7fe f9b8 	bl	80048a6 <vListInsert>
 8006536:	e012      	b.n	800655e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	429a      	cmp	r2, r3
 800653e:	d206      	bcs.n	800654e <prvInsertTimerInActiveList+0x62>
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	429a      	cmp	r2, r3
 8006546:	d302      	bcc.n	800654e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006548:	2301      	movs	r3, #1
 800654a:	617b      	str	r3, [r7, #20]
 800654c:	e007      	b.n	800655e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800654e:	4b07      	ldr	r3, [pc, #28]	@ (800656c <prvInsertTimerInActiveList+0x80>)
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	3304      	adds	r3, #4
 8006556:	4619      	mov	r1, r3
 8006558:	4610      	mov	r0, r2
 800655a:	f7fe f9a4 	bl	80048a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800655e:	697b      	ldr	r3, [r7, #20]
}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	20000eac 	.word	0x20000eac
 800656c:	20000ea8 	.word	0x20000ea8

08006570 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08e      	sub	sp, #56	@ 0x38
 8006574:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006576:	e0ce      	b.n	8006716 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	da19      	bge.n	80065b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800657e:	1d3b      	adds	r3, r7, #4
 8006580:	3304      	adds	r3, #4
 8006582:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10b      	bne.n	80065a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	61fb      	str	r3, [r7, #28]
}
 800659c:	bf00      	nop
 800659e:	bf00      	nop
 80065a0:	e7fd      	b.n	800659e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80065a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065a8:	6850      	ldr	r0, [r2, #4]
 80065aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065ac:	6892      	ldr	r2, [r2, #8]
 80065ae:	4611      	mov	r1, r2
 80065b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f2c0 80ae 	blt.w	8006716 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c8:	3304      	adds	r3, #4
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fe f9a4 	bl	8004918 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065d0:	463b      	mov	r3, r7
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7ff ff6a 	bl	80064ac <prvSampleTimeNow>
 80065d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b09      	cmp	r3, #9
 80065de:	f200 8097 	bhi.w	8006710 <prvProcessReceivedCommands+0x1a0>
 80065e2:	a201      	add	r2, pc, #4	@ (adr r2, 80065e8 <prvProcessReceivedCommands+0x78>)
 80065e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e8:	08006611 	.word	0x08006611
 80065ec:	08006611 	.word	0x08006611
 80065f0:	08006611 	.word	0x08006611
 80065f4:	08006687 	.word	0x08006687
 80065f8:	0800669b 	.word	0x0800669b
 80065fc:	080066e7 	.word	0x080066e7
 8006600:	08006611 	.word	0x08006611
 8006604:	08006611 	.word	0x08006611
 8006608:	08006687 	.word	0x08006687
 800660c:	0800669b 	.word	0x0800669b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006612:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006616:	f043 0301 	orr.w	r3, r3, #1
 800661a:	b2da      	uxtb	r2, r3
 800661c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	18d1      	adds	r1, r2, r3
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800662e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006630:	f7ff ff5c 	bl	80064ec <prvInsertTimerInActiveList>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d06c      	beq.n	8006714 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800663a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006640:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006644:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b00      	cmp	r3, #0
 800664e:	d061      	beq.n	8006714 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	441a      	add	r2, r3
 8006658:	2300      	movs	r3, #0
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	2300      	movs	r3, #0
 800665e:	2100      	movs	r1, #0
 8006660:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006662:	f7ff fe01 	bl	8006268 <xTimerGenericCommand>
 8006666:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d152      	bne.n	8006714 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	61bb      	str	r3, [r7, #24]
}
 8006680:	bf00      	nop
 8006682:	bf00      	nop
 8006684:	e7fd      	b.n	8006682 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006688:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800668c:	f023 0301 	bic.w	r3, r3, #1
 8006690:	b2da      	uxtb	r2, r3
 8006692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006694:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006698:	e03d      	b.n	8006716 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800669a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066a0:	f043 0301 	orr.w	r3, r3, #1
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066ac:	68ba      	ldr	r2, [r7, #8]
 80066ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80066b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10b      	bne.n	80066d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	617b      	str	r3, [r7, #20]
}
 80066cc:	bf00      	nop
 80066ce:	bf00      	nop
 80066d0:	e7fd      	b.n	80066ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d4:	699a      	ldr	r2, [r3, #24]
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	18d1      	adds	r1, r2, r3
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066e0:	f7ff ff04 	bl	80064ec <prvInsertTimerInActiveList>
					break;
 80066e4:	e017      	b.n	8006716 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80066e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d103      	bne.n	80066fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80066f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066f6:	f000 fbe7 	bl	8006ec8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066fa:	e00c      	b.n	8006716 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006702:	f023 0301 	bic.w	r3, r3, #1
 8006706:	b2da      	uxtb	r2, r3
 8006708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800670e:	e002      	b.n	8006716 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006710:	bf00      	nop
 8006712:	e000      	b.n	8006716 <prvProcessReceivedCommands+0x1a6>
					break;
 8006714:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006716:	4b08      	ldr	r3, [pc, #32]	@ (8006738 <prvProcessReceivedCommands+0x1c8>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	1d39      	adds	r1, r7, #4
 800671c:	2200      	movs	r2, #0
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe fbce 	bl	8004ec0 <xQueueReceive>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	f47f af26 	bne.w	8006578 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800672c:	bf00      	nop
 800672e:	bf00      	nop
 8006730:	3730      	adds	r7, #48	@ 0x30
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000eb0 	.word	0x20000eb0

0800673c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b088      	sub	sp, #32
 8006740:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006742:	e049      	b.n	80067d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006744:	4b2e      	ldr	r3, [pc, #184]	@ (8006800 <prvSwitchTimerLists+0xc4>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800674e:	4b2c      	ldr	r3, [pc, #176]	@ (8006800 <prvSwitchTimerLists+0xc4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3304      	adds	r3, #4
 800675c:	4618      	mov	r0, r3
 800675e:	f7fe f8db 	bl	8004918 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b00      	cmp	r3, #0
 8006776:	d02f      	beq.n	80067d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4413      	add	r3, r2
 8006780:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	429a      	cmp	r2, r3
 8006788:	d90e      	bls.n	80067a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006796:	4b1a      	ldr	r3, [pc, #104]	@ (8006800 <prvSwitchTimerLists+0xc4>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3304      	adds	r3, #4
 800679e:	4619      	mov	r1, r3
 80067a0:	4610      	mov	r0, r2
 80067a2:	f7fe f880 	bl	80048a6 <vListInsert>
 80067a6:	e017      	b.n	80067d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067a8:	2300      	movs	r3, #0
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	2300      	movs	r3, #0
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	2100      	movs	r1, #0
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f7ff fd58 	bl	8006268 <xTimerGenericCommand>
 80067b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10b      	bne.n	80067d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	603b      	str	r3, [r7, #0]
}
 80067d2:	bf00      	nop
 80067d4:	bf00      	nop
 80067d6:	e7fd      	b.n	80067d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067d8:	4b09      	ldr	r3, [pc, #36]	@ (8006800 <prvSwitchTimerLists+0xc4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1b0      	bne.n	8006744 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067e2:	4b07      	ldr	r3, [pc, #28]	@ (8006800 <prvSwitchTimerLists+0xc4>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80067e8:	4b06      	ldr	r3, [pc, #24]	@ (8006804 <prvSwitchTimerLists+0xc8>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a04      	ldr	r2, [pc, #16]	@ (8006800 <prvSwitchTimerLists+0xc4>)
 80067ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067f0:	4a04      	ldr	r2, [pc, #16]	@ (8006804 <prvSwitchTimerLists+0xc8>)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	6013      	str	r3, [r2, #0]
}
 80067f6:	bf00      	nop
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000ea8 	.word	0x20000ea8
 8006804:	20000eac 	.word	0x20000eac

08006808 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800680e:	f000 f96b 	bl	8006ae8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006812:	4b15      	ldr	r3, [pc, #84]	@ (8006868 <prvCheckForValidListAndQueue+0x60>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d120      	bne.n	800685c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800681a:	4814      	ldr	r0, [pc, #80]	@ (800686c <prvCheckForValidListAndQueue+0x64>)
 800681c:	f7fd fff2 	bl	8004804 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006820:	4813      	ldr	r0, [pc, #76]	@ (8006870 <prvCheckForValidListAndQueue+0x68>)
 8006822:	f7fd ffef 	bl	8004804 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006826:	4b13      	ldr	r3, [pc, #76]	@ (8006874 <prvCheckForValidListAndQueue+0x6c>)
 8006828:	4a10      	ldr	r2, [pc, #64]	@ (800686c <prvCheckForValidListAndQueue+0x64>)
 800682a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800682c:	4b12      	ldr	r3, [pc, #72]	@ (8006878 <prvCheckForValidListAndQueue+0x70>)
 800682e:	4a10      	ldr	r2, [pc, #64]	@ (8006870 <prvCheckForValidListAndQueue+0x68>)
 8006830:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006832:	2300      	movs	r3, #0
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	4b11      	ldr	r3, [pc, #68]	@ (800687c <prvCheckForValidListAndQueue+0x74>)
 8006838:	4a11      	ldr	r2, [pc, #68]	@ (8006880 <prvCheckForValidListAndQueue+0x78>)
 800683a:	2110      	movs	r1, #16
 800683c:	200a      	movs	r0, #10
 800683e:	f7fe f8ff 	bl	8004a40 <xQueueGenericCreateStatic>
 8006842:	4603      	mov	r3, r0
 8006844:	4a08      	ldr	r2, [pc, #32]	@ (8006868 <prvCheckForValidListAndQueue+0x60>)
 8006846:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006848:	4b07      	ldr	r3, [pc, #28]	@ (8006868 <prvCheckForValidListAndQueue+0x60>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006850:	4b05      	ldr	r3, [pc, #20]	@ (8006868 <prvCheckForValidListAndQueue+0x60>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	490b      	ldr	r1, [pc, #44]	@ (8006884 <prvCheckForValidListAndQueue+0x7c>)
 8006856:	4618      	mov	r0, r3
 8006858:	f7fe fd24 	bl	80052a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800685c:	f000 f976 	bl	8006b4c <vPortExitCritical>
}
 8006860:	bf00      	nop
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20000eb0 	.word	0x20000eb0
 800686c:	20000e80 	.word	0x20000e80
 8006870:	20000e94 	.word	0x20000e94
 8006874:	20000ea8 	.word	0x20000ea8
 8006878:	20000eac 	.word	0x20000eac
 800687c:	20000f5c 	.word	0x20000f5c
 8006880:	20000ebc 	.word	0x20000ebc
 8006884:	08007338 	.word	0x08007338

08006888 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3b04      	subs	r3, #4
 8006898:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	3b04      	subs	r3, #4
 80068a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f023 0201 	bic.w	r2, r3, #1
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3b04      	subs	r3, #4
 80068b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068b8:	4a0c      	ldr	r2, [pc, #48]	@ (80068ec <pxPortInitialiseStack+0x64>)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3b14      	subs	r3, #20
 80068c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3b04      	subs	r3, #4
 80068ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f06f 0202 	mvn.w	r2, #2
 80068d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	3b20      	subs	r3, #32
 80068dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068de:	68fb      	ldr	r3, [r7, #12]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	080068f1 	.word	0x080068f1

080068f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068fa:	4b13      	ldr	r3, [pc, #76]	@ (8006948 <prvTaskExitError+0x58>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006902:	d00b      	beq.n	800691c <prvTaskExitError+0x2c>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	60fb      	str	r3, [r7, #12]
}
 8006916:	bf00      	nop
 8006918:	bf00      	nop
 800691a:	e7fd      	b.n	8006918 <prvTaskExitError+0x28>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	60bb      	str	r3, [r7, #8]
}
 800692e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006930:	bf00      	nop
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0fc      	beq.n	8006932 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006938:	bf00      	nop
 800693a:	bf00      	nop
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	2000000c 	.word	0x2000000c
 800694c:	00000000 	.word	0x00000000

08006950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006950:	4b07      	ldr	r3, [pc, #28]	@ (8006970 <pxCurrentTCBConst2>)
 8006952:	6819      	ldr	r1, [r3, #0]
 8006954:	6808      	ldr	r0, [r1, #0]
 8006956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695a:	f380 8809 	msr	PSP, r0
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f04f 0000 	mov.w	r0, #0
 8006966:	f380 8811 	msr	BASEPRI, r0
 800696a:	4770      	bx	lr
 800696c:	f3af 8000 	nop.w

08006970 <pxCurrentTCBConst2>:
 8006970:	20000980 	.word	0x20000980
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop

08006978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006978:	4808      	ldr	r0, [pc, #32]	@ (800699c <prvPortStartFirstTask+0x24>)
 800697a:	6800      	ldr	r0, [r0, #0]
 800697c:	6800      	ldr	r0, [r0, #0]
 800697e:	f380 8808 	msr	MSP, r0
 8006982:	f04f 0000 	mov.w	r0, #0
 8006986:	f380 8814 	msr	CONTROL, r0
 800698a:	b662      	cpsie	i
 800698c:	b661      	cpsie	f
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	df00      	svc	0
 8006998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800699a:	bf00      	nop
 800699c:	e000ed08 	.word	0xe000ed08

080069a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80069a6:	4b47      	ldr	r3, [pc, #284]	@ (8006ac4 <xPortStartScheduler+0x124>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a47      	ldr	r2, [pc, #284]	@ (8006ac8 <xPortStartScheduler+0x128>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d10b      	bne.n	80069c8 <xPortStartScheduler+0x28>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	613b      	str	r3, [r7, #16]
}
 80069c2:	bf00      	nop
 80069c4:	bf00      	nop
 80069c6:	e7fd      	b.n	80069c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069c8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ac4 <xPortStartScheduler+0x124>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a3f      	ldr	r2, [pc, #252]	@ (8006acc <xPortStartScheduler+0x12c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d10b      	bne.n	80069ea <xPortStartScheduler+0x4a>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	60fb      	str	r3, [r7, #12]
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	e7fd      	b.n	80069e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069ea:	4b39      	ldr	r3, [pc, #228]	@ (8006ad0 <xPortStartScheduler+0x130>)
 80069ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	22ff      	movs	r2, #255	@ 0xff
 80069fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	4b31      	ldr	r3, [pc, #196]	@ (8006ad4 <xPortStartScheduler+0x134>)
 8006a10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a12:	4b31      	ldr	r3, [pc, #196]	@ (8006ad8 <xPortStartScheduler+0x138>)
 8006a14:	2207      	movs	r2, #7
 8006a16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a18:	e009      	b.n	8006a2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006ad8 <xPortStartScheduler+0x138>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	4a2d      	ldr	r2, [pc, #180]	@ (8006ad8 <xPortStartScheduler+0x138>)
 8006a22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a24:	78fb      	ldrb	r3, [r7, #3]
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a2e:	78fb      	ldrb	r3, [r7, #3]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a36:	2b80      	cmp	r3, #128	@ 0x80
 8006a38:	d0ef      	beq.n	8006a1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a3a:	4b27      	ldr	r3, [pc, #156]	@ (8006ad8 <xPortStartScheduler+0x138>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f1c3 0307 	rsb	r3, r3, #7
 8006a42:	2b04      	cmp	r3, #4
 8006a44:	d00b      	beq.n	8006a5e <xPortStartScheduler+0xbe>
	__asm volatile
 8006a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	60bb      	str	r3, [r7, #8]
}
 8006a58:	bf00      	nop
 8006a5a:	bf00      	nop
 8006a5c:	e7fd      	b.n	8006a5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ad8 <xPortStartScheduler+0x138>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	021b      	lsls	r3, r3, #8
 8006a64:	4a1c      	ldr	r2, [pc, #112]	@ (8006ad8 <xPortStartScheduler+0x138>)
 8006a66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a68:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad8 <xPortStartScheduler+0x138>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a70:	4a19      	ldr	r2, [pc, #100]	@ (8006ad8 <xPortStartScheduler+0x138>)
 8006a72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a7c:	4b17      	ldr	r3, [pc, #92]	@ (8006adc <xPortStartScheduler+0x13c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a16      	ldr	r2, [pc, #88]	@ (8006adc <xPortStartScheduler+0x13c>)
 8006a82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006a86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a88:	4b14      	ldr	r3, [pc, #80]	@ (8006adc <xPortStartScheduler+0x13c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a13      	ldr	r2, [pc, #76]	@ (8006adc <xPortStartScheduler+0x13c>)
 8006a8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006a92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a94:	f000 f8da 	bl	8006c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a98:	4b11      	ldr	r3, [pc, #68]	@ (8006ae0 <xPortStartScheduler+0x140>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a9e:	f000 f8f9 	bl	8006c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006aa2:	4b10      	ldr	r3, [pc, #64]	@ (8006ae4 <xPortStartScheduler+0x144>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8006ae4 <xPortStartScheduler+0x144>)
 8006aa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006aac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006aae:	f7ff ff63 	bl	8006978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ab2:	f7ff f82f 	bl	8005b14 <vTaskSwitchContext>
	prvTaskExitError();
 8006ab6:	f7ff ff1b 	bl	80068f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	e000ed00 	.word	0xe000ed00
 8006ac8:	410fc271 	.word	0x410fc271
 8006acc:	410fc270 	.word	0x410fc270
 8006ad0:	e000e400 	.word	0xe000e400
 8006ad4:	20000fac 	.word	0x20000fac
 8006ad8:	20000fb0 	.word	0x20000fb0
 8006adc:	e000ed20 	.word	0xe000ed20
 8006ae0:	2000000c 	.word	0x2000000c
 8006ae4:	e000ef34 	.word	0xe000ef34

08006ae8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	607b      	str	r3, [r7, #4]
}
 8006b00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b02:	4b10      	ldr	r3, [pc, #64]	@ (8006b44 <vPortEnterCritical+0x5c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3301      	adds	r3, #1
 8006b08:	4a0e      	ldr	r2, [pc, #56]	@ (8006b44 <vPortEnterCritical+0x5c>)
 8006b0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b44 <vPortEnterCritical+0x5c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d110      	bne.n	8006b36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b14:	4b0c      	ldr	r3, [pc, #48]	@ (8006b48 <vPortEnterCritical+0x60>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00b      	beq.n	8006b36 <vPortEnterCritical+0x4e>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	603b      	str	r3, [r7, #0]
}
 8006b30:	bf00      	nop
 8006b32:	bf00      	nop
 8006b34:	e7fd      	b.n	8006b32 <vPortEnterCritical+0x4a>
	}
}
 8006b36:	bf00      	nop
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	2000000c 	.word	0x2000000c
 8006b48:	e000ed04 	.word	0xe000ed04

08006b4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b52:	4b12      	ldr	r3, [pc, #72]	@ (8006b9c <vPortExitCritical+0x50>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10b      	bne.n	8006b72 <vPortExitCritical+0x26>
	__asm volatile
 8006b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	607b      	str	r3, [r7, #4]
}
 8006b6c:	bf00      	nop
 8006b6e:	bf00      	nop
 8006b70:	e7fd      	b.n	8006b6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b72:	4b0a      	ldr	r3, [pc, #40]	@ (8006b9c <vPortExitCritical+0x50>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	4a08      	ldr	r2, [pc, #32]	@ (8006b9c <vPortExitCritical+0x50>)
 8006b7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b7c:	4b07      	ldr	r3, [pc, #28]	@ (8006b9c <vPortExitCritical+0x50>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d105      	bne.n	8006b90 <vPortExitCritical+0x44>
 8006b84:	2300      	movs	r3, #0
 8006b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	f383 8811 	msr	BASEPRI, r3
}
 8006b8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	2000000c 	.word	0x2000000c

08006ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ba0:	f3ef 8009 	mrs	r0, PSP
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	4b15      	ldr	r3, [pc, #84]	@ (8006c00 <pxCurrentTCBConst>)
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	f01e 0f10 	tst.w	lr, #16
 8006bb0:	bf08      	it	eq
 8006bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bba:	6010      	str	r0, [r2, #0]
 8006bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006bc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006bc4:	f380 8811 	msr	BASEPRI, r0
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f7fe ffa0 	bl	8005b14 <vTaskSwitchContext>
 8006bd4:	f04f 0000 	mov.w	r0, #0
 8006bd8:	f380 8811 	msr	BASEPRI, r0
 8006bdc:	bc09      	pop	{r0, r3}
 8006bde:	6819      	ldr	r1, [r3, #0]
 8006be0:	6808      	ldr	r0, [r1, #0]
 8006be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be6:	f01e 0f10 	tst.w	lr, #16
 8006bea:	bf08      	it	eq
 8006bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006bf0:	f380 8809 	msr	PSP, r0
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	f3af 8000 	nop.w

08006c00 <pxCurrentTCBConst>:
 8006c00:	20000980 	.word	0x20000980
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c04:	bf00      	nop
 8006c06:	bf00      	nop

08006c08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	607b      	str	r3, [r7, #4]
}
 8006c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c22:	f7fe febd 	bl	80059a0 <xTaskIncrementTick>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c2c:	4b06      	ldr	r3, [pc, #24]	@ (8006c48 <xPortSysTickHandler+0x40>)
 8006c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	2300      	movs	r3, #0
 8006c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	f383 8811 	msr	BASEPRI, r3
}
 8006c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c40:	bf00      	nop
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	e000ed04 	.word	0xe000ed04

08006c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c50:	4b0b      	ldr	r3, [pc, #44]	@ (8006c80 <vPortSetupTimerInterrupt+0x34>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c56:	4b0b      	ldr	r3, [pc, #44]	@ (8006c84 <vPortSetupTimerInterrupt+0x38>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c88 <vPortSetupTimerInterrupt+0x3c>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a0a      	ldr	r2, [pc, #40]	@ (8006c8c <vPortSetupTimerInterrupt+0x40>)
 8006c62:	fba2 2303 	umull	r2, r3, r2, r3
 8006c66:	099b      	lsrs	r3, r3, #6
 8006c68:	4a09      	ldr	r2, [pc, #36]	@ (8006c90 <vPortSetupTimerInterrupt+0x44>)
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c6e:	4b04      	ldr	r3, [pc, #16]	@ (8006c80 <vPortSetupTimerInterrupt+0x34>)
 8006c70:	2207      	movs	r2, #7
 8006c72:	601a      	str	r2, [r3, #0]
}
 8006c74:	bf00      	nop
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	e000e010 	.word	0xe000e010
 8006c84:	e000e018 	.word	0xe000e018
 8006c88:	20000000 	.word	0x20000000
 8006c8c:	10624dd3 	.word	0x10624dd3
 8006c90:	e000e014 	.word	0xe000e014

08006c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006ca4 <vPortEnableVFP+0x10>
 8006c98:	6801      	ldr	r1, [r0, #0]
 8006c9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006c9e:	6001      	str	r1, [r0, #0]
 8006ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ca2:	bf00      	nop
 8006ca4:	e000ed88 	.word	0xe000ed88

08006ca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006cae:	f3ef 8305 	mrs	r3, IPSR
 8006cb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2b0f      	cmp	r3, #15
 8006cb8:	d915      	bls.n	8006ce6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006cba:	4a18      	ldr	r2, [pc, #96]	@ (8006d1c <vPortValidateInterruptPriority+0x74>)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006cc4:	4b16      	ldr	r3, [pc, #88]	@ (8006d20 <vPortValidateInterruptPriority+0x78>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	7afa      	ldrb	r2, [r7, #11]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d20b      	bcs.n	8006ce6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	607b      	str	r3, [r7, #4]
}
 8006ce0:	bf00      	nop
 8006ce2:	bf00      	nop
 8006ce4:	e7fd      	b.n	8006ce2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d24 <vPortValidateInterruptPriority+0x7c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006cee:	4b0e      	ldr	r3, [pc, #56]	@ (8006d28 <vPortValidateInterruptPriority+0x80>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d90b      	bls.n	8006d0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	603b      	str	r3, [r7, #0]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <vPortValidateInterruptPriority+0x62>
	}
 8006d0e:	bf00      	nop
 8006d10:	3714      	adds	r7, #20
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	e000e3f0 	.word	0xe000e3f0
 8006d20:	20000fac 	.word	0x20000fac
 8006d24:	e000ed0c 	.word	0xe000ed0c
 8006d28:	20000fb0 	.word	0x20000fb0

08006d2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	@ 0x28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d38:	f7fe fd76 	bl	8005828 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8006eb0 <pvPortMalloc+0x184>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d44:	f000 f924 	bl	8006f90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d48:	4b5a      	ldr	r3, [pc, #360]	@ (8006eb4 <pvPortMalloc+0x188>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4013      	ands	r3, r2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f040 8095 	bne.w	8006e80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01e      	beq.n	8006d9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006d5c:	2208      	movs	r2, #8
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4413      	add	r3, r2
 8006d62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d015      	beq.n	8006d9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f023 0307 	bic.w	r3, r3, #7
 8006d74:	3308      	adds	r3, #8
 8006d76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00b      	beq.n	8006d9a <pvPortMalloc+0x6e>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d86:	f383 8811 	msr	BASEPRI, r3
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	f3bf 8f4f 	dsb	sy
 8006d92:	617b      	str	r3, [r7, #20]
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop
 8006d98:	e7fd      	b.n	8006d96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d06f      	beq.n	8006e80 <pvPortMalloc+0x154>
 8006da0:	4b45      	ldr	r3, [pc, #276]	@ (8006eb8 <pvPortMalloc+0x18c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d86a      	bhi.n	8006e80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006daa:	4b44      	ldr	r3, [pc, #272]	@ (8006ebc <pvPortMalloc+0x190>)
 8006dac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006dae:	4b43      	ldr	r3, [pc, #268]	@ (8006ebc <pvPortMalloc+0x190>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006db4:	e004      	b.n	8006dc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d903      	bls.n	8006dd2 <pvPortMalloc+0xa6>
 8006dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1f1      	bne.n	8006db6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006dd2:	4b37      	ldr	r3, [pc, #220]	@ (8006eb0 <pvPortMalloc+0x184>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d051      	beq.n	8006e80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2208      	movs	r2, #8
 8006de2:	4413      	add	r3, r2
 8006de4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	1ad2      	subs	r2, r2, r3
 8006df6:	2308      	movs	r3, #8
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d920      	bls.n	8006e40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4413      	add	r3, r2
 8006e04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00b      	beq.n	8006e28 <pvPortMalloc+0xfc>
	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	613b      	str	r3, [r7, #16]
}
 8006e22:	bf00      	nop
 8006e24:	bf00      	nop
 8006e26:	e7fd      	b.n	8006e24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	1ad2      	subs	r2, r2, r3
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e3a:	69b8      	ldr	r0, [r7, #24]
 8006e3c:	f000 f90a 	bl	8007054 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e40:	4b1d      	ldr	r3, [pc, #116]	@ (8006eb8 <pvPortMalloc+0x18c>)
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006eb8 <pvPortMalloc+0x18c>)
 8006e4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006eb8 <pvPortMalloc+0x18c>)
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	4b1b      	ldr	r3, [pc, #108]	@ (8006ec0 <pvPortMalloc+0x194>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d203      	bcs.n	8006e62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e5a:	4b17      	ldr	r3, [pc, #92]	@ (8006eb8 <pvPortMalloc+0x18c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a18      	ldr	r2, [pc, #96]	@ (8006ec0 <pvPortMalloc+0x194>)
 8006e60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	685a      	ldr	r2, [r3, #4]
 8006e66:	4b13      	ldr	r3, [pc, #76]	@ (8006eb4 <pvPortMalloc+0x188>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e76:	4b13      	ldr	r3, [pc, #76]	@ (8006ec4 <pvPortMalloc+0x198>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	4a11      	ldr	r2, [pc, #68]	@ (8006ec4 <pvPortMalloc+0x198>)
 8006e7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e80:	f7fe fce0 	bl	8005844 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	f003 0307 	and.w	r3, r3, #7
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00b      	beq.n	8006ea6 <pvPortMalloc+0x17a>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	60fb      	str	r3, [r7, #12]
}
 8006ea0:	bf00      	nop
 8006ea2:	bf00      	nop
 8006ea4:	e7fd      	b.n	8006ea2 <pvPortMalloc+0x176>
	return pvReturn;
 8006ea6:	69fb      	ldr	r3, [r7, #28]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3728      	adds	r7, #40	@ 0x28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	20001b74 	.word	0x20001b74
 8006eb4:	20001b88 	.word	0x20001b88
 8006eb8:	20001b78 	.word	0x20001b78
 8006ebc:	20001b6c 	.word	0x20001b6c
 8006ec0:	20001b7c 	.word	0x20001b7c
 8006ec4:	20001b80 	.word	0x20001b80

08006ec8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b086      	sub	sp, #24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d04f      	beq.n	8006f7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006eda:	2308      	movs	r3, #8
 8006edc:	425b      	negs	r3, r3
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	4b25      	ldr	r3, [pc, #148]	@ (8006f84 <vPortFree+0xbc>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10b      	bne.n	8006f0e <vPortFree+0x46>
	__asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	60fb      	str	r3, [r7, #12]
}
 8006f08:	bf00      	nop
 8006f0a:	bf00      	nop
 8006f0c:	e7fd      	b.n	8006f0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00b      	beq.n	8006f2e <vPortFree+0x66>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	60bb      	str	r3, [r7, #8]
}
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	e7fd      	b.n	8006f2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	685a      	ldr	r2, [r3, #4]
 8006f32:	4b14      	ldr	r3, [pc, #80]	@ (8006f84 <vPortFree+0xbc>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4013      	ands	r3, r2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d01e      	beq.n	8006f7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d11a      	bne.n	8006f7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	4b0e      	ldr	r3, [pc, #56]	@ (8006f84 <vPortFree+0xbc>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	401a      	ands	r2, r3
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f54:	f7fe fc68 	bl	8005828 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f88 <vPortFree+0xc0>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4413      	add	r3, r2
 8006f62:	4a09      	ldr	r2, [pc, #36]	@ (8006f88 <vPortFree+0xc0>)
 8006f64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f66:	6938      	ldr	r0, [r7, #16]
 8006f68:	f000 f874 	bl	8007054 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f6c:	4b07      	ldr	r3, [pc, #28]	@ (8006f8c <vPortFree+0xc4>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3301      	adds	r3, #1
 8006f72:	4a06      	ldr	r2, [pc, #24]	@ (8006f8c <vPortFree+0xc4>)
 8006f74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f76:	f7fe fc65 	bl	8005844 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f7a:	bf00      	nop
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20001b88 	.word	0x20001b88
 8006f88:	20001b78 	.word	0x20001b78
 8006f8c:	20001b84 	.word	0x20001b84

08006f90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f96:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006f9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f9c:	4b27      	ldr	r3, [pc, #156]	@ (800703c <prvHeapInit+0xac>)
 8006f9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00c      	beq.n	8006fc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3307      	adds	r3, #7
 8006fae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 0307 	bic.w	r3, r3, #7
 8006fb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800703c <prvHeapInit+0xac>)
 8006fc0:	4413      	add	r3, r2
 8006fc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8007040 <prvHeapInit+0xb0>)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fce:	4b1c      	ldr	r3, [pc, #112]	@ (8007040 <prvHeapInit+0xb0>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	4413      	add	r3, r2
 8006fda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fdc:	2208      	movs	r2, #8
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	1a9b      	subs	r3, r3, r2
 8006fe2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 0307 	bic.w	r3, r3, #7
 8006fea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4a15      	ldr	r2, [pc, #84]	@ (8007044 <prvHeapInit+0xb4>)
 8006ff0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ff2:	4b14      	ldr	r3, [pc, #80]	@ (8007044 <prvHeapInit+0xb4>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006ffa:	4b12      	ldr	r3, [pc, #72]	@ (8007044 <prvHeapInit+0xb4>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2200      	movs	r2, #0
 8007000:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	1ad2      	subs	r2, r2, r3
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007010:	4b0c      	ldr	r3, [pc, #48]	@ (8007044 <prvHeapInit+0xb4>)
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	4a0a      	ldr	r2, [pc, #40]	@ (8007048 <prvHeapInit+0xb8>)
 800701e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	4a09      	ldr	r2, [pc, #36]	@ (800704c <prvHeapInit+0xbc>)
 8007026:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007028:	4b09      	ldr	r3, [pc, #36]	@ (8007050 <prvHeapInit+0xc0>)
 800702a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800702e:	601a      	str	r2, [r3, #0]
}
 8007030:	bf00      	nop
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	20000fb4 	.word	0x20000fb4
 8007040:	20001b6c 	.word	0x20001b6c
 8007044:	20001b74 	.word	0x20001b74
 8007048:	20001b7c 	.word	0x20001b7c
 800704c:	20001b78 	.word	0x20001b78
 8007050:	20001b88 	.word	0x20001b88

08007054 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800705c:	4b28      	ldr	r3, [pc, #160]	@ (8007100 <prvInsertBlockIntoFreeList+0xac>)
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	e002      	b.n	8007068 <prvInsertBlockIntoFreeList+0x14>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	429a      	cmp	r2, r3
 8007070:	d8f7      	bhi.n	8007062 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	4413      	add	r3, r2
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	429a      	cmp	r2, r3
 8007082:	d108      	bne.n	8007096 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	441a      	add	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	441a      	add	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d118      	bne.n	80070dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	4b15      	ldr	r3, [pc, #84]	@ (8007104 <prvInsertBlockIntoFreeList+0xb0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d00d      	beq.n	80070d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	441a      	add	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	e008      	b.n	80070e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007104 <prvInsertBlockIntoFreeList+0xb0>)
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	e003      	b.n	80070e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d002      	beq.n	80070f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070f2:	bf00      	nop
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	20001b6c 	.word	0x20001b6c
 8007104:	20001b74 	.word	0x20001b74

08007108 <memset>:
 8007108:	4402      	add	r2, r0
 800710a:	4603      	mov	r3, r0
 800710c:	4293      	cmp	r3, r2
 800710e:	d100      	bne.n	8007112 <memset+0xa>
 8007110:	4770      	bx	lr
 8007112:	f803 1b01 	strb.w	r1, [r3], #1
 8007116:	e7f9      	b.n	800710c <memset+0x4>

08007118 <_reclaim_reent>:
 8007118:	4b29      	ldr	r3, [pc, #164]	@ (80071c0 <_reclaim_reent+0xa8>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4283      	cmp	r3, r0
 800711e:	b570      	push	{r4, r5, r6, lr}
 8007120:	4604      	mov	r4, r0
 8007122:	d04b      	beq.n	80071bc <_reclaim_reent+0xa4>
 8007124:	69c3      	ldr	r3, [r0, #28]
 8007126:	b1ab      	cbz	r3, 8007154 <_reclaim_reent+0x3c>
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	b16b      	cbz	r3, 8007148 <_reclaim_reent+0x30>
 800712c:	2500      	movs	r5, #0
 800712e:	69e3      	ldr	r3, [r4, #28]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	5959      	ldr	r1, [r3, r5]
 8007134:	2900      	cmp	r1, #0
 8007136:	d13b      	bne.n	80071b0 <_reclaim_reent+0x98>
 8007138:	3504      	adds	r5, #4
 800713a:	2d80      	cmp	r5, #128	@ 0x80
 800713c:	d1f7      	bne.n	800712e <_reclaim_reent+0x16>
 800713e:	69e3      	ldr	r3, [r4, #28]
 8007140:	4620      	mov	r0, r4
 8007142:	68d9      	ldr	r1, [r3, #12]
 8007144:	f000 f872 	bl	800722c <_free_r>
 8007148:	69e3      	ldr	r3, [r4, #28]
 800714a:	6819      	ldr	r1, [r3, #0]
 800714c:	b111      	cbz	r1, 8007154 <_reclaim_reent+0x3c>
 800714e:	4620      	mov	r0, r4
 8007150:	f000 f86c 	bl	800722c <_free_r>
 8007154:	6961      	ldr	r1, [r4, #20]
 8007156:	b111      	cbz	r1, 800715e <_reclaim_reent+0x46>
 8007158:	4620      	mov	r0, r4
 800715a:	f000 f867 	bl	800722c <_free_r>
 800715e:	69e1      	ldr	r1, [r4, #28]
 8007160:	b111      	cbz	r1, 8007168 <_reclaim_reent+0x50>
 8007162:	4620      	mov	r0, r4
 8007164:	f000 f862 	bl	800722c <_free_r>
 8007168:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800716a:	b111      	cbz	r1, 8007172 <_reclaim_reent+0x5a>
 800716c:	4620      	mov	r0, r4
 800716e:	f000 f85d 	bl	800722c <_free_r>
 8007172:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007174:	b111      	cbz	r1, 800717c <_reclaim_reent+0x64>
 8007176:	4620      	mov	r0, r4
 8007178:	f000 f858 	bl	800722c <_free_r>
 800717c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800717e:	b111      	cbz	r1, 8007186 <_reclaim_reent+0x6e>
 8007180:	4620      	mov	r0, r4
 8007182:	f000 f853 	bl	800722c <_free_r>
 8007186:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007188:	b111      	cbz	r1, 8007190 <_reclaim_reent+0x78>
 800718a:	4620      	mov	r0, r4
 800718c:	f000 f84e 	bl	800722c <_free_r>
 8007190:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007192:	b111      	cbz	r1, 800719a <_reclaim_reent+0x82>
 8007194:	4620      	mov	r0, r4
 8007196:	f000 f849 	bl	800722c <_free_r>
 800719a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800719c:	b111      	cbz	r1, 80071a4 <_reclaim_reent+0x8c>
 800719e:	4620      	mov	r0, r4
 80071a0:	f000 f844 	bl	800722c <_free_r>
 80071a4:	6a23      	ldr	r3, [r4, #32]
 80071a6:	b14b      	cbz	r3, 80071bc <_reclaim_reent+0xa4>
 80071a8:	4620      	mov	r0, r4
 80071aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80071ae:	4718      	bx	r3
 80071b0:	680e      	ldr	r6, [r1, #0]
 80071b2:	4620      	mov	r0, r4
 80071b4:	f000 f83a 	bl	800722c <_free_r>
 80071b8:	4631      	mov	r1, r6
 80071ba:	e7bb      	b.n	8007134 <_reclaim_reent+0x1c>
 80071bc:	bd70      	pop	{r4, r5, r6, pc}
 80071be:	bf00      	nop
 80071c0:	20000010 	.word	0x20000010

080071c4 <__libc_init_array>:
 80071c4:	b570      	push	{r4, r5, r6, lr}
 80071c6:	4d0d      	ldr	r5, [pc, #52]	@ (80071fc <__libc_init_array+0x38>)
 80071c8:	4c0d      	ldr	r4, [pc, #52]	@ (8007200 <__libc_init_array+0x3c>)
 80071ca:	1b64      	subs	r4, r4, r5
 80071cc:	10a4      	asrs	r4, r4, #2
 80071ce:	2600      	movs	r6, #0
 80071d0:	42a6      	cmp	r6, r4
 80071d2:	d109      	bne.n	80071e8 <__libc_init_array+0x24>
 80071d4:	4d0b      	ldr	r5, [pc, #44]	@ (8007204 <__libc_init_array+0x40>)
 80071d6:	4c0c      	ldr	r4, [pc, #48]	@ (8007208 <__libc_init_array+0x44>)
 80071d8:	f000 f87e 	bl	80072d8 <_init>
 80071dc:	1b64      	subs	r4, r4, r5
 80071de:	10a4      	asrs	r4, r4, #2
 80071e0:	2600      	movs	r6, #0
 80071e2:	42a6      	cmp	r6, r4
 80071e4:	d105      	bne.n	80071f2 <__libc_init_array+0x2e>
 80071e6:	bd70      	pop	{r4, r5, r6, pc}
 80071e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ec:	4798      	blx	r3
 80071ee:	3601      	adds	r6, #1
 80071f0:	e7ee      	b.n	80071d0 <__libc_init_array+0xc>
 80071f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071f6:	4798      	blx	r3
 80071f8:	3601      	adds	r6, #1
 80071fa:	e7f2      	b.n	80071e2 <__libc_init_array+0x1e>
 80071fc:	08007418 	.word	0x08007418
 8007200:	08007418 	.word	0x08007418
 8007204:	08007418 	.word	0x08007418
 8007208:	0800741c 	.word	0x0800741c

0800720c <__retarget_lock_acquire_recursive>:
 800720c:	4770      	bx	lr

0800720e <__retarget_lock_release_recursive>:
 800720e:	4770      	bx	lr

08007210 <memcpy>:
 8007210:	440a      	add	r2, r1
 8007212:	4291      	cmp	r1, r2
 8007214:	f100 33ff 	add.w	r3, r0, #4294967295
 8007218:	d100      	bne.n	800721c <memcpy+0xc>
 800721a:	4770      	bx	lr
 800721c:	b510      	push	{r4, lr}
 800721e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007222:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007226:	4291      	cmp	r1, r2
 8007228:	d1f9      	bne.n	800721e <memcpy+0xe>
 800722a:	bd10      	pop	{r4, pc}

0800722c <_free_r>:
 800722c:	b538      	push	{r3, r4, r5, lr}
 800722e:	4605      	mov	r5, r0
 8007230:	2900      	cmp	r1, #0
 8007232:	d041      	beq.n	80072b8 <_free_r+0x8c>
 8007234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007238:	1f0c      	subs	r4, r1, #4
 800723a:	2b00      	cmp	r3, #0
 800723c:	bfb8      	it	lt
 800723e:	18e4      	addlt	r4, r4, r3
 8007240:	f000 f83e 	bl	80072c0 <__malloc_lock>
 8007244:	4a1d      	ldr	r2, [pc, #116]	@ (80072bc <_free_r+0x90>)
 8007246:	6813      	ldr	r3, [r2, #0]
 8007248:	b933      	cbnz	r3, 8007258 <_free_r+0x2c>
 800724a:	6063      	str	r3, [r4, #4]
 800724c:	6014      	str	r4, [r2, #0]
 800724e:	4628      	mov	r0, r5
 8007250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007254:	f000 b83a 	b.w	80072cc <__malloc_unlock>
 8007258:	42a3      	cmp	r3, r4
 800725a:	d908      	bls.n	800726e <_free_r+0x42>
 800725c:	6820      	ldr	r0, [r4, #0]
 800725e:	1821      	adds	r1, r4, r0
 8007260:	428b      	cmp	r3, r1
 8007262:	bf01      	itttt	eq
 8007264:	6819      	ldreq	r1, [r3, #0]
 8007266:	685b      	ldreq	r3, [r3, #4]
 8007268:	1809      	addeq	r1, r1, r0
 800726a:	6021      	streq	r1, [r4, #0]
 800726c:	e7ed      	b.n	800724a <_free_r+0x1e>
 800726e:	461a      	mov	r2, r3
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	b10b      	cbz	r3, 8007278 <_free_r+0x4c>
 8007274:	42a3      	cmp	r3, r4
 8007276:	d9fa      	bls.n	800726e <_free_r+0x42>
 8007278:	6811      	ldr	r1, [r2, #0]
 800727a:	1850      	adds	r0, r2, r1
 800727c:	42a0      	cmp	r0, r4
 800727e:	d10b      	bne.n	8007298 <_free_r+0x6c>
 8007280:	6820      	ldr	r0, [r4, #0]
 8007282:	4401      	add	r1, r0
 8007284:	1850      	adds	r0, r2, r1
 8007286:	4283      	cmp	r3, r0
 8007288:	6011      	str	r1, [r2, #0]
 800728a:	d1e0      	bne.n	800724e <_free_r+0x22>
 800728c:	6818      	ldr	r0, [r3, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	6053      	str	r3, [r2, #4]
 8007292:	4408      	add	r0, r1
 8007294:	6010      	str	r0, [r2, #0]
 8007296:	e7da      	b.n	800724e <_free_r+0x22>
 8007298:	d902      	bls.n	80072a0 <_free_r+0x74>
 800729a:	230c      	movs	r3, #12
 800729c:	602b      	str	r3, [r5, #0]
 800729e:	e7d6      	b.n	800724e <_free_r+0x22>
 80072a0:	6820      	ldr	r0, [r4, #0]
 80072a2:	1821      	adds	r1, r4, r0
 80072a4:	428b      	cmp	r3, r1
 80072a6:	bf04      	itt	eq
 80072a8:	6819      	ldreq	r1, [r3, #0]
 80072aa:	685b      	ldreq	r3, [r3, #4]
 80072ac:	6063      	str	r3, [r4, #4]
 80072ae:	bf04      	itt	eq
 80072b0:	1809      	addeq	r1, r1, r0
 80072b2:	6021      	streq	r1, [r4, #0]
 80072b4:	6054      	str	r4, [r2, #4]
 80072b6:	e7ca      	b.n	800724e <_free_r+0x22>
 80072b8:	bd38      	pop	{r3, r4, r5, pc}
 80072ba:	bf00      	nop
 80072bc:	20001cc8 	.word	0x20001cc8

080072c0 <__malloc_lock>:
 80072c0:	4801      	ldr	r0, [pc, #4]	@ (80072c8 <__malloc_lock+0x8>)
 80072c2:	f7ff bfa3 	b.w	800720c <__retarget_lock_acquire_recursive>
 80072c6:	bf00      	nop
 80072c8:	20001cc4 	.word	0x20001cc4

080072cc <__malloc_unlock>:
 80072cc:	4801      	ldr	r0, [pc, #4]	@ (80072d4 <__malloc_unlock+0x8>)
 80072ce:	f7ff bf9e 	b.w	800720e <__retarget_lock_release_recursive>
 80072d2:	bf00      	nop
 80072d4:	20001cc4 	.word	0x20001cc4

080072d8 <_init>:
 80072d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072da:	bf00      	nop
 80072dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072de:	bc08      	pop	{r3}
 80072e0:	469e      	mov	lr, r3
 80072e2:	4770      	bx	lr

080072e4 <_fini>:
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	bf00      	nop
 80072e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ea:	bc08      	pop	{r3}
 80072ec:	469e      	mov	lr, r3
 80072ee:	4770      	bx	lr
