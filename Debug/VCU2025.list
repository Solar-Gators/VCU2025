
VCU2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007120  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080072d0  080072d0  000082d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073f8  080073f8  00009060  2**0
                  CONTENTS
  4 .ARM          00000000  080073f8  080073f8  00009060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073f8  080073f8  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073f8  080073f8  000083f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073fc  080073fc  000083fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007400  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c6c  20000060  08007460  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ccc  08007460  00009ccc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc7c  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ec2  00000000  00000000  00026d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  0002abd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001451  00000000  00000000  0002c610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d6b  00000000  00000000  0002da61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d696  00000000  00000000  000317cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d1f6  00000000  00000000  0004ee62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015c058  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000722c  00000000  00000000  0015c09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001632c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080072b8 	.word	0x080072b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	080072b8 	.word	0x080072b8

080001f0 <HAL_GPIO_EXTI_Callback>:
uint8_t RxData[8];  // Array to store the received data

//CAN transmission

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == GPIO_PIN_13) {
//		kill_sw = 0;
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, kill_sw);
	}
}
 80001fa:	bf00      	nop
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
	...

08000208 <HAL_CAN_RxFifo0MsgPendingCallback>:

// Can reception
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000210:	4b55      	ldr	r3, [pc, #340]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8000212:	4a56      	ldr	r2, [pc, #344]	@ (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 8000214:	2100      	movs	r1, #0
 8000216:	6878      	ldr	r0, [r7, #4]
 8000218:	f001 f994 	bl	8001544 <HAL_CAN_GetRxMessage>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8000222:	f000 fc7f 	bl	8000b24 <Error_Handler>
  }
  if (RxHeader.StdId == 0x000)
 8000226:	4b51      	ldr	r3, [pc, #324]	@ (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d10f      	bne.n	800024e <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
  {
	  if (RxData[0] == 0) {
 800022e:	4b4e      	ldr	r3, [pc, #312]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d10b      	bne.n	800024e <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
		throttle = (uint16_t)RxData[2]<<8 | RxData[1];
 8000236:	4b4c      	ldr	r3, [pc, #304]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8000238:	789b      	ldrb	r3, [r3, #2]
 800023a:	021b      	lsls	r3, r3, #8
 800023c:	b21a      	sxth	r2, r3
 800023e:	4b4a      	ldr	r3, [pc, #296]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8000240:	785b      	ldrb	r3, [r3, #1]
 8000242:	b21b      	sxth	r3, r3
 8000244:	4313      	orrs	r3, r2
 8000246:	b21b      	sxth	r3, r3
 8000248:	b29a      	uxth	r2, r3
 800024a:	4b49      	ldr	r3, [pc, #292]	@ (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 800024c:	801a      	strh	r2, [r3, #0]
	  }
  }
  if (RxHeader.StdId == 0x7FF){
 800024e:	4b47      	ldr	r3, [pc, #284]	@ (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000256:	4293      	cmp	r3, r2
 8000258:	f040 8081 	bne.w	800035e <HAL_CAN_RxFifo0MsgPendingCallback+0x156>
	  if(RxData[0] == 1){
 800025c:	4b42      	ldr	r3, [pc, #264]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b01      	cmp	r3, #1
 8000262:	d17c      	bne.n	800035e <HAL_CAN_RxFifo0MsgPendingCallback+0x156>
		  //byte 1
		  //ignition switch
		  if((RxData[1] & 0x80) != 0x00){
 8000264:	4b40      	ldr	r3, [pc, #256]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8000266:	785b      	ldrb	r3, [r3, #1]
 8000268:	b25b      	sxtb	r3, r3
 800026a:	2b00      	cmp	r3, #0
 800026c:	da05      	bge.n	800027a <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
			  mppt_pre_contactor_en = false;
 800026e:	4b41      	ldr	r3, [pc, #260]	@ (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8000270:	2200      	movs	r2, #0
 8000272:	701a      	strb	r2, [r3, #0]
			  mppt_contactor_en = false;
 8000274:	4b40      	ldr	r3, [pc, #256]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8000276:	2200      	movs	r2, #0
 8000278:	701a      	strb	r2, [r3, #0]
			  //preform shut down sequence
		  }

		  if((RxData[1] & 0x40) != 0x00){
 800027a:	4b3b      	ldr	r3, [pc, #236]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 800027c:	785b      	ldrb	r3, [r3, #1]
 800027e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000282:	2b00      	cmp	r3, #0
 8000284:	d003      	beq.n	800028e <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
			  brakes_active = true; // turn brakes on
 8000286:	4b3d      	ldr	r3, [pc, #244]	@ (800037c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8000288:	2201      	movs	r2, #1
 800028a:	701a      	strb	r2, [r3, #0]
 800028c:	e002      	b.n	8000294 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>
		  }else{
			  brakes_active = false; // turn breaks off
 800028e:	4b3b      	ldr	r3, [pc, #236]	@ (800037c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x20) != 0x00){
 8000294:	4b34      	ldr	r3, [pc, #208]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8000296:	785b      	ldrb	r3, [r3, #1]
 8000298:	f003 0320 	and.w	r3, r3, #32
 800029c:	2b00      	cmp	r3, #0
 800029e:	d003      	beq.n	80002a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
			  dirrection = true; //Forward
 80002a0:	4b37      	ldr	r3, [pc, #220]	@ (8000380 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	701a      	strb	r2, [r3, #0]
 80002a6:	e002      	b.n	80002ae <HAL_CAN_RxFifo0MsgPendingCallback+0xa6>
		  }else{
			  dirrection = false;
 80002a8:	4b35      	ldr	r3, [pc, #212]	@ (8000380 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x10) != 0x00){
 80002ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80002b0:	785b      	ldrb	r3, [r3, #1]
 80002b2:	f003 0310 	and.w	r3, r3, #16
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d003      	beq.n	80002c2 <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
			  mc_main_ctrl = true;
 80002ba:	4b32      	ldr	r3, [pc, #200]	@ (8000384 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80002bc:	2201      	movs	r2, #1
 80002be:	701a      	strb	r2, [r3, #0]
 80002c0:	e002      	b.n	80002c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>
		  }else{
			  mc_main_ctrl = false;
 80002c2:	4b30      	ldr	r3, [pc, #192]	@ (8000384 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x08) != 0x00){
 80002c8:	4b27      	ldr	r3, [pc, #156]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80002ca:	785b      	ldrb	r3, [r3, #1]
 80002cc:	f003 0308 	and.w	r3, r3, #8
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d003      	beq.n	80002dc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>
			  array = true;
 80002d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	701a      	strb	r2, [r3, #0]
 80002da:	e002      	b.n	80002e2 <HAL_CAN_RxFifo0MsgPendingCallback+0xda>
		  }else{
			  array = false;
 80002dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80002de:	2200      	movs	r2, #0
 80002e0:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x04) != 0x00){
 80002e2:	4b21      	ldr	r3, [pc, #132]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80002e4:	785b      	ldrb	r3, [r3, #1]
 80002e6:	f003 0304 	and.w	r3, r3, #4
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d003      	beq.n	80002f6 <HAL_CAN_RxFifo0MsgPendingCallback+0xee>
			  array_precharge = true;
 80002ee:	4b27      	ldr	r3, [pc, #156]	@ (800038c <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	701a      	strb	r2, [r3, #0]
 80002f4:	e002      	b.n	80002fc <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
		  }else{
			  array_precharge = false;
 80002f6:	4b25      	ldr	r3, [pc, #148]	@ (800038c <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	701a      	strb	r2, [r3, #0]
		  }


		  //byte #2
		  if((RxData[2] & 0x01) != 0x00){
 80002fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80002fe:	789b      	ldrb	r3, [r3, #2]
 8000300:	f003 0301 	and.w	r3, r3, #1
 8000304:	2b00      	cmp	r3, #0
 8000306:	d003      	beq.n	8000310 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>
			  blinkers_active = true; // turn brakes on
 8000308:	4b21      	ldr	r3, [pc, #132]	@ (8000390 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 800030a:	2201      	movs	r2, #1
 800030c:	701a      	strb	r2, [r3, #0]
 800030e:	e002      	b.n	8000316 <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>

		  }else{
			  blinkers_active = false; // turn breaks off
 8000310:	4b1f      	ldr	r3, [pc, #124]	@ (8000390 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8000312:	2200      	movs	r2, #0
 8000314:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[2] & 0x40) != 0x00){
 8000316:	4b14      	ldr	r3, [pc, #80]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8000318:	789b      	ldrb	r3, [r3, #2]
 800031a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800031e:	2b00      	cmp	r3, #0
 8000320:	d003      	beq.n	800032a <HAL_CAN_RxFifo0MsgPendingCallback+0x122>

			  left_turn_active = true; // turn brakes on
 8000322:	4b1c      	ldr	r3, [pc, #112]	@ (8000394 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8000324:	2201      	movs	r2, #1
 8000326:	701a      	strb	r2, [r3, #0]
 8000328:	e002      	b.n	8000330 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>


		  }else{
			  left_turn_active = false; // turn breaks off
 800032a:	4b1a      	ldr	r3, [pc, #104]	@ (8000394 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[2] & 0x04) != 0x00){
 8000330:	4b0d      	ldr	r3, [pc, #52]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 8000332:	789b      	ldrb	r3, [r3, #2]
 8000334:	f003 0304 	and.w	r3, r3, #4
 8000338:	2b00      	cmp	r3, #0
 800033a:	d00d      	beq.n	8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>
			  if(right_turn_active != true){
 800033c:	4b16      	ldr	r3, [pc, #88]	@ (8000398 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	f083 0301 	eor.w	r3, r3, #1
 8000344:	b2db      	uxtb	r3, r3
 8000346:	2b00      	cmp	r3, #0
 8000348:	d009      	beq.n	800035e <HAL_CAN_RxFifo0MsgPendingCallback+0x156>
				  right_turn_active = true; //Forward
 800034a:	4b13      	ldr	r3, [pc, #76]	@ (8000398 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800034c:	2201      	movs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 8000350:	4b12      	ldr	r3, [pc, #72]	@ (800039c <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
		  }


	  }
  }
}
 8000356:	e002      	b.n	800035e <HAL_CAN_RxFifo0MsgPendingCallback+0x156>
			  right_turn_active = false;
 8000358:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000190 	.word	0x20000190
 800036c:	20000174 	.word	0x20000174
 8000370:	20000144 	.word	0x20000144
 8000374:	20000159 	.word	0x20000159
 8000378:	20000158 	.word	0x20000158
 800037c:	20000148 	.word	0x20000148
 8000380:	2000014c 	.word	0x2000014c
 8000384:	2000014d 	.word	0x2000014d
 8000388:	2000014e 	.word	0x2000014e
 800038c:	2000014f 	.word	0x2000014f
 8000390:	20000149 	.word	0x20000149
 8000394:	2000014a 	.word	0x2000014a
 8000398:	2000014b 	.word	0x2000014b
 800039c:	20000154 	.word	0x20000154

080003a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

  brakes_active = false;
 80003a4:	4b33      	ldr	r3, [pc, #204]	@ (8000474 <main+0xd4>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	701a      	strb	r2, [r3, #0]
  blinkers_active = false;
 80003aa:	4b33      	ldr	r3, [pc, #204]	@ (8000478 <main+0xd8>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
  left_turn_active = false;
 80003b0:	4b32      	ldr	r3, [pc, #200]	@ (800047c <main+0xdc>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	701a      	strb	r2, [r3, #0]
  right_turn_active = true;
 80003b6:	4b32      	ldr	r3, [pc, #200]	@ (8000480 <main+0xe0>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	701a      	strb	r2, [r3, #0]


  dirrection = false;
 80003bc:	4b31      	ldr	r3, [pc, #196]	@ (8000484 <main+0xe4>)
 80003be:	2200      	movs	r2, #0
 80003c0:	701a      	strb	r2, [r3, #0]
  mc_pwreco_ctrl = false;
 80003c2:	4b31      	ldr	r3, [pc, #196]	@ (8000488 <main+0xe8>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	701a      	strb	r2, [r3, #0]
  mc_main_ctrl = false;
 80003c8:	4b30      	ldr	r3, [pc, #192]	@ (800048c <main+0xec>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	701a      	strb	r2, [r3, #0]
  array = false;
 80003ce:	4b30      	ldr	r3, [pc, #192]	@ (8000490 <main+0xf0>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	701a      	strb	r2, [r3, #0]
  array_precharge = false;
 80003d4:	4b2f      	ldr	r3, [pc, #188]	@ (8000494 <main+0xf4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003da:	f000 fe36 	bl	800104a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003de:	f000 f877 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e2:	f000 f9bf 	bl	8000764 <MX_GPIO_Init>
  MX_DAC1_Init();
 80003e6:	f000 f941 	bl	800066c <MX_DAC1_Init>
  MX_CAN1_Init();
 80003ea:	f000 f8b7 	bl	800055c <MX_CAN1_Init>
  MX_CAN2_Init();
 80003ee:	f000 f907 	bl	8000600 <MX_CAN2_Init>
  MX_I2C2_Init();
 80003f2:	f000 f977 	bl	80006e4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80003f6:	4828      	ldr	r0, [pc, #160]	@ (8000498 <main+0xf8>)
 80003f8:	f001 f860 	bl	80014bc <HAL_CAN_Start>

  //intalize can RX interupt
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80003fc:	2102      	movs	r1, #2
 80003fe:	4826      	ldr	r0, [pc, #152]	@ (8000498 <main+0xf8>)
 8000400:	f001 f9c2 	bl	8001788 <HAL_CAN_ActivateNotification>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <main+0x6e>
  {
	  Error_Handler();
 800040a:	f000 fb8b 	bl	8000b24 <Error_Handler>
  }



  //hdac1.State = HAL_DAC_STATE_RESET;
  TxHeader.IDE = CAN_ID_STD;
 800040e:	4b23      	ldr	r3, [pc, #140]	@ (800049c <main+0xfc>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x446;
 8000414:	4b21      	ldr	r3, [pc, #132]	@ (800049c <main+0xfc>)
 8000416:	f240 4246 	movw	r2, #1094	@ 0x446
 800041a:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 800041c:	4b1f      	ldr	r3, [pc, #124]	@ (800049c <main+0xfc>)
 800041e:	2200      	movs	r2, #0
 8000420:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 2;
 8000422:	4b1e      	ldr	r3, [pc, #120]	@ (800049c <main+0xfc>)
 8000424:	2202      	movs	r2, #2
 8000426:	611a      	str	r2, [r3, #16]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000428:	f004 f8b0 	bl	800458c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(Heart_Beat, NULL, &HeartBeat_attributes);
 800042c:	4a1c      	ldr	r2, [pc, #112]	@ (80004a0 <main+0x100>)
 800042e:	2100      	movs	r1, #0
 8000430:	481c      	ldr	r0, [pc, #112]	@ (80004a4 <main+0x104>)
 8000432:	f004 f8f5 	bl	8004620 <osThreadNew>
 8000436:	4603      	mov	r3, r0
 8000438:	4a1b      	ldr	r2, [pc, #108]	@ (80004a8 <main+0x108>)
 800043a:	6013      	str	r3, [r2, #0]

  /* creation of UpdateThrottle */
  UpdateThrottleHandle = osThreadNew(Update_Throttle, NULL, &UpdateThrottle_attributes);
 800043c:	4a1b      	ldr	r2, [pc, #108]	@ (80004ac <main+0x10c>)
 800043e:	2100      	movs	r1, #0
 8000440:	481b      	ldr	r0, [pc, #108]	@ (80004b0 <main+0x110>)
 8000442:	f004 f8ed 	bl	8004620 <osThreadNew>
 8000446:	4603      	mov	r3, r0
 8000448:	4a1a      	ldr	r2, [pc, #104]	@ (80004b4 <main+0x114>)
 800044a:	6013      	str	r3, [r2, #0]

  /* creation of LightsControl */
  LightsControlHandle = osThreadNew(Lights_Control, NULL, &LightsControl_attributes);
 800044c:	4a1a      	ldr	r2, [pc, #104]	@ (80004b8 <main+0x118>)
 800044e:	2100      	movs	r1, #0
 8000450:	481a      	ldr	r0, [pc, #104]	@ (80004bc <main+0x11c>)
 8000452:	f004 f8e5 	bl	8004620 <osThreadNew>
 8000456:	4603      	mov	r3, r0
 8000458:	4a19      	ldr	r2, [pc, #100]	@ (80004c0 <main+0x120>)
 800045a:	6013      	str	r3, [r2, #0]

  /* creation of ReadSensors */
  ReadSensorsHandle = osThreadNew(Read_Sensors, NULL, &ReadSensors_attributes);
 800045c:	4a19      	ldr	r2, [pc, #100]	@ (80004c4 <main+0x124>)
 800045e:	2100      	movs	r1, #0
 8000460:	4819      	ldr	r0, [pc, #100]	@ (80004c8 <main+0x128>)
 8000462:	f004 f8dd 	bl	8004620 <osThreadNew>
 8000466:	4603      	mov	r3, r0
 8000468:	4a18      	ldr	r2, [pc, #96]	@ (80004cc <main+0x12c>)
 800046a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800046c:	f004 f8b2 	bl	80045d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <main+0xd0>
 8000474:	20000148 	.word	0x20000148
 8000478:	20000149 	.word	0x20000149
 800047c:	2000014a 	.word	0x2000014a
 8000480:	2000014b 	.word	0x2000014b
 8000484:	2000014c 	.word	0x2000014c
 8000488:	20000150 	.word	0x20000150
 800048c:	2000014d 	.word	0x2000014d
 8000490:	2000014e 	.word	0x2000014e
 8000494:	2000014f 	.word	0x2000014f
 8000498:	2000007c 	.word	0x2000007c
 800049c:	2000015c 	.word	0x2000015c
 80004a0:	08007320 	.word	0x08007320
 80004a4:	0800088d 	.word	0x0800088d
 80004a8:	20000134 	.word	0x20000134
 80004ac:	08007344 	.word	0x08007344
 80004b0:	080008c1 	.word	0x080008c1
 80004b4:	20000138 	.word	0x20000138
 80004b8:	08007368 	.word	0x08007368
 80004bc:	080009e5 	.word	0x080009e5
 80004c0:	2000013c 	.word	0x2000013c
 80004c4:	0800738c 	.word	0x0800738c
 80004c8:	08000af1 	.word	0x08000af1
 80004cc:	20000140 	.word	0x20000140

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b096      	sub	sp, #88	@ 0x58
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2244      	movs	r2, #68	@ 0x44
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f006 fe02 	bl	80070e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	463b      	mov	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004f6:	f002 f9c5 	bl	8002884 <HAL_PWREx_ControlVoltageScaling>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000500:	f000 fb10 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000504:	2310      	movs	r3, #16
 8000506:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000508:	2301      	movs	r3, #1
 800050a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000510:	2360      	movs	r3, #96	@ 0x60
 8000512:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000514:	2300      	movs	r3, #0
 8000516:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	4618      	mov	r0, r3
 800051e:	f002 fa07 	bl	8002930 <HAL_RCC_OscConfig>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000528:	f000 fafc 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800052c:	230f      	movs	r3, #15
 800052e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800053c:	2300      	movs	r3, #0
 800053e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000540:	463b      	mov	r3, r7
 8000542:	2100      	movs	r1, #0
 8000544:	4618      	mov	r0, r3
 8000546:	f002 fe0d 	bl	8003164 <HAL_RCC_ClockConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000550:	f000 fae8 	bl	8000b24 <Error_Handler>
  }
}
 8000554:	bf00      	nop
 8000556:	3758      	adds	r7, #88	@ 0x58
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000562:	4b25      	ldr	r3, [pc, #148]	@ (80005f8 <MX_CAN1_Init+0x9c>)
 8000564:	4a25      	ldr	r2, [pc, #148]	@ (80005fc <MX_CAN1_Init+0xa0>)
 8000566:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000568:	4b23      	ldr	r3, [pc, #140]	@ (80005f8 <MX_CAN1_Init+0x9c>)
 800056a:	2202      	movs	r2, #2
 800056c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800056e:	4b22      	ldr	r3, [pc, #136]	@ (80005f8 <MX_CAN1_Init+0x9c>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000574:	4b20      	ldr	r3, [pc, #128]	@ (80005f8 <MX_CAN1_Init+0x9c>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800057a:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <MX_CAN1_Init+0x9c>)
 800057c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000580:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000582:	4b1d      	ldr	r3, [pc, #116]	@ (80005f8 <MX_CAN1_Init+0x9c>)
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000588:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <MX_CAN1_Init+0x9c>)
 800058a:	2200      	movs	r2, #0
 800058c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800058e:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <MX_CAN1_Init+0x9c>)
 8000590:	2200      	movs	r2, #0
 8000592:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000594:	4b18      	ldr	r3, [pc, #96]	@ (80005f8 <MX_CAN1_Init+0x9c>)
 8000596:	2200      	movs	r2, #0
 8000598:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800059a:	4b17      	ldr	r3, [pc, #92]	@ (80005f8 <MX_CAN1_Init+0x9c>)
 800059c:	2200      	movs	r2, #0
 800059e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005a0:	4b15      	ldr	r3, [pc, #84]	@ (80005f8 <MX_CAN1_Init+0x9c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005a6:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <MX_CAN1_Init+0x9c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005ac:	4812      	ldr	r0, [pc, #72]	@ (80005f8 <MX_CAN1_Init+0x9c>)
 80005ae:	f000 fda9 	bl	8001104 <HAL_CAN_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005b8:	f000 fab4 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80005bc:	2301      	movs	r3, #1
 80005be:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80005c0:	2312      	movs	r3, #18
 80005c2:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x000<<5;
 80005c8:	2300      	movs	r3, #0
 80005ca:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x000<<5;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005d8:	2300      	movs	r3, #0
 80005da:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005dc:	2301      	movs	r3, #1
 80005de:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80005e0:	2314      	movs	r3, #20
 80005e2:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80005e4:	463b      	mov	r3, r7
 80005e6:	4619      	mov	r1, r3
 80005e8:	4803      	ldr	r0, [pc, #12]	@ (80005f8 <MX_CAN1_Init+0x9c>)
 80005ea:	f000 fe87 	bl	80012fc <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	3728      	adds	r7, #40	@ 0x28
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000007c 	.word	0x2000007c
 80005fc:	40006400 	.word	0x40006400

08000600 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000604:	4b17      	ldr	r3, [pc, #92]	@ (8000664 <MX_CAN2_Init+0x64>)
 8000606:	4a18      	ldr	r2, [pc, #96]	@ (8000668 <MX_CAN2_Init+0x68>)
 8000608:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 800060a:	4b16      	ldr	r3, [pc, #88]	@ (8000664 <MX_CAN2_Init+0x64>)
 800060c:	2202      	movs	r2, #2
 800060e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000610:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <MX_CAN2_Init+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000616:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <MX_CAN2_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800061c:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <MX_CAN2_Init+0x64>)
 800061e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000622:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <MX_CAN2_Init+0x64>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800062a:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_CAN2_Init+0x64>)
 800062c:	2200      	movs	r2, #0
 800062e:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <MX_CAN2_Init+0x64>)
 8000632:	2200      	movs	r2, #0
 8000634:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <MX_CAN2_Init+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800063c:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_CAN2_Init+0x64>)
 800063e:	2200      	movs	r2, #0
 8000640:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000642:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <MX_CAN2_Init+0x64>)
 8000644:	2200      	movs	r2, #0
 8000646:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <MX_CAN2_Init+0x64>)
 800064a:	2200      	movs	r2, #0
 800064c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	@ (8000664 <MX_CAN2_Init+0x64>)
 8000650:	f000 fd58 	bl	8001104 <HAL_CAN_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 800065a:	f000 fa63 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200000a4 	.word	0x200000a4
 8000668:	40006800 	.word	0x40006800

0800066c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08a      	sub	sp, #40	@ 0x28
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2224      	movs	r2, #36	@ 0x24
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f006 fd35 	bl	80070e8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_DAC1_Init+0x70>)
 8000680:	4a17      	ldr	r2, [pc, #92]	@ (80006e0 <MX_DAC1_Init+0x74>)
 8000682:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000684:	4815      	ldr	r0, [pc, #84]	@ (80006dc <MX_DAC1_Init+0x70>)
 8000686:	f001 fbb7 	bl	8001df8 <HAL_DAC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000690:	f000 fa48 	bl	8000b24 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	4619      	mov	r1, r3
 80006ae:	480b      	ldr	r0, [pc, #44]	@ (80006dc <MX_DAC1_Init+0x70>)
 80006b0:	f001 fc9a 	bl	8001fe8 <HAL_DAC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80006ba:	f000 fa33 	bl	8000b24 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2210      	movs	r2, #16
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_DAC1_Init+0x70>)
 80006c6:	f001 fc8f 	bl	8001fe8 <HAL_DAC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80006d0:	f000 fa28 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	3728      	adds	r7, #40	@ 0x28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200000cc 	.word	0x200000cc
 80006e0:	40007400 	.word	0x40007400

080006e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <MX_I2C2_Init+0x74>)
 80006ea:	4a1c      	ldr	r2, [pc, #112]	@ (800075c <MX_I2C2_Init+0x78>)
 80006ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 80006ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000758 <MX_I2C2_Init+0x74>)
 80006f0:	4a1b      	ldr	r2, [pc, #108]	@ (8000760 <MX_I2C2_Init+0x7c>)
 80006f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006f4:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MX_I2C2_Init+0x74>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006fa:	4b17      	ldr	r3, [pc, #92]	@ (8000758 <MX_I2C2_Init+0x74>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000700:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MX_I2C2_Init+0x74>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000706:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <MX_I2C2_Init+0x74>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800070c:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <MX_I2C2_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000712:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_I2C2_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000718:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MX_I2C2_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800071e:	480e      	ldr	r0, [pc, #56]	@ (8000758 <MX_I2C2_Init+0x74>)
 8000720:	f001 ff70 	bl	8002604 <HAL_I2C_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800072a:	f000 f9fb 	bl	8000b24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800072e:	2100      	movs	r1, #0
 8000730:	4809      	ldr	r0, [pc, #36]	@ (8000758 <MX_I2C2_Init+0x74>)
 8000732:	f002 f802 	bl	800273a <HAL_I2CEx_ConfigAnalogFilter>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800073c:	f000 f9f2 	bl	8000b24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000740:	2100      	movs	r1, #0
 8000742:	4805      	ldr	r0, [pc, #20]	@ (8000758 <MX_I2C2_Init+0x74>)
 8000744:	f002 f844 	bl	80027d0 <HAL_I2CEx_ConfigDigitalFilter>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800074e:	f000 f9e9 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	200000e0 	.word	0x200000e0
 800075c:	40005800 	.word	0x40005800
 8000760:	00100d14 	.word	0x00100d14

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	4b41      	ldr	r3, [pc, #260]	@ (8000880 <MX_GPIO_Init+0x11c>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077e:	4a40      	ldr	r2, [pc, #256]	@ (8000880 <MX_GPIO_Init+0x11c>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000786:	4b3e      	ldr	r3, [pc, #248]	@ (8000880 <MX_GPIO_Init+0x11c>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	4b3b      	ldr	r3, [pc, #236]	@ (8000880 <MX_GPIO_Init+0x11c>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000796:	4a3a      	ldr	r2, [pc, #232]	@ (8000880 <MX_GPIO_Init+0x11c>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079e:	4b38      	ldr	r3, [pc, #224]	@ (8000880 <MX_GPIO_Init+0x11c>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	4b35      	ldr	r3, [pc, #212]	@ (8000880 <MX_GPIO_Init+0x11c>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ae:	4a34      	ldr	r2, [pc, #208]	@ (8000880 <MX_GPIO_Init+0x11c>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b6:	4b32      	ldr	r3, [pc, #200]	@ (8000880 <MX_GPIO_Init+0x11c>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80007c2:	2200      	movs	r2, #0
 80007c4:	f24c 010f 	movw	r1, #49167	@ 0xc00f
 80007c8:	482e      	ldr	r0, [pc, #184]	@ (8000884 <MX_GPIO_Init+0x120>)
 80007ca:	f001 fed1 	bl	8002570 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2107      	movs	r1, #7
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007d6:	f001 fecb 	bl	8002570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f242 0102 	movw	r1, #8194	@ 0x2002
 80007e0:	4829      	ldr	r0, [pc, #164]	@ (8000888 <MX_GPIO_Init+0x124>)
 80007e2:	f001 fec5 	bl	8002570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	4619      	mov	r1, r3
 80007fc:	4821      	ldr	r0, [pc, #132]	@ (8000884 <MX_GPIO_Init+0x120>)
 80007fe:	f001 fd25 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8000802:	f24c 030f 	movw	r3, #49167	@ 0xc00f
 8000806:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	4619      	mov	r1, r3
 800081a:	481a      	ldr	r0, [pc, #104]	@ (8000884 <MX_GPIO_Init+0x120>)
 800081c:	f001 fd16 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : MC_Main_Pin PA1 PA2 */
  GPIO_InitStruct.Pin = MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2;
 8000820:	2307      	movs	r3, #7
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4619      	mov	r1, r3
 8000836:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083a:	f001 fd07 	bl	800224c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 800083e:	f242 0302 	movw	r3, #8194	@ 0x2002
 8000842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	4619      	mov	r1, r3
 8000856:	480c      	ldr	r0, [pc, #48]	@ (8000888 <MX_GPIO_Init+0x124>)
 8000858:	f001 fcf8 	bl	800224c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2105      	movs	r1, #5
 8000860:	2028      	movs	r0, #40	@ 0x28
 8000862:	f001 fa9f 	bl	8001da4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000866:	2028      	movs	r0, #40	@ 0x28
 8000868:	f001 fab8 	bl	8001ddc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 800086c:	2201      	movs	r2, #1
 800086e:	2101      	movs	r1, #1
 8000870:	4804      	ldr	r0, [pc, #16]	@ (8000884 <MX_GPIO_Init+0x120>)
 8000872:	f001 fe7d 	bl	8002570 <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_2 */
}
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40021000 	.word	0x40021000
 8000884:	48000800 	.word	0x48000800
 8000888:	48000400 	.word	0x48000400

0800088c <Heart_Beat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Heart_Beat */
void Heart_Beat(void *argument)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800089a:	4807      	ldr	r0, [pc, #28]	@ (80008b8 <Heart_Beat+0x2c>)
 800089c:	f001 fe68 	bl	8002570 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80008a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008a4:	4805      	ldr	r0, [pc, #20]	@ (80008bc <Heart_Beat+0x30>)
 80008a6:	f001 fe7b 	bl	80025a0 <HAL_GPIO_TogglePin>
    osDelay(500);
 80008aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008ae:	f003 ff49 	bl	8004744 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80008b2:	bf00      	nop
 80008b4:	e7ee      	b.n	8000894 <Heart_Beat+0x8>
 80008b6:	bf00      	nop
 80008b8:	48000800 	.word	0x48000800
 80008bc:	48000400 	.word	0x48000400

080008c0 <Update_Throttle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Update_Throttle */
void Update_Throttle(void *argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Update_Throttle */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2104      	movs	r1, #4
 80008cc:	483c      	ldr	r0, [pc, #240]	@ (80009c0 <Update_Throttle+0x100>)
 80008ce:	f001 fe4f 	bl	8002570 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2104      	movs	r1, #4
 80008d6:	483a      	ldr	r0, [pc, #232]	@ (80009c0 <Update_Throttle+0x100>)
 80008d8:	f001 fe4a 	bl	8002570 <HAL_GPIO_WritePin>



  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1); //Start DAC 1 and 2
 80008dc:	2100      	movs	r1, #0
 80008de:	4839      	ldr	r0, [pc, #228]	@ (80009c4 <Update_Throttle+0x104>)
 80008e0:	f001 faac 	bl	8001e3c <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 80008e4:	2110      	movs	r1, #16
 80008e6:	4837      	ldr	r0, [pc, #220]	@ (80009c4 <Update_Throttle+0x104>)
 80008e8:	f001 faa8 	bl	8001e3c <HAL_DAC_Start>
  array = 1;
 80008ec:	4b36      	ldr	r3, [pc, #216]	@ (80009c8 <Update_Throttle+0x108>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
  array_precharge = 1;
 80008f2:	4b36      	ldr	r3, [pc, #216]	@ (80009cc <Update_Throttle+0x10c>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	701a      	strb	r2, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, throttle);
 80008f8:	4b35      	ldr	r3, [pc, #212]	@ (80009d0 <Update_Throttle+0x110>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	2200      	movs	r2, #0
 80008fe:	2110      	movs	r1, #16
 8000900:	4830      	ldr	r0, [pc, #192]	@ (80009c4 <Update_Throttle+0x104>)
 8000902:	f001 fb42 	bl	8001f8a <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, regen);
 8000906:	4b33      	ldr	r3, [pc, #204]	@ (80009d4 <Update_Throttle+0x114>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	482d      	ldr	r0, [pc, #180]	@ (80009c4 <Update_Throttle+0x104>)
 8000910:	f001 fb3b 	bl	8001f8a <HAL_DAC_SetValue>
	  //updates gpio pins with states from global variables

	  //change for bistable relay
	  //gonna have to think about this section

	  if(mc_main_ctrl){
 8000914:	4b30      	ldr	r3, [pc, #192]	@ (80009d8 <Update_Throttle+0x118>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d006      	beq.n	800092a <Update_Throttle+0x6a>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	2101      	movs	r1, #1
 8000920:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000924:	f001 fe24 	bl	8002570 <HAL_GPIO_WritePin>
 8000928:	e005      	b.n	8000936 <Update_Throttle+0x76>
	  }else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2101      	movs	r1, #1
 800092e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000932:	f001 fe1d 	bl	8002570 <HAL_GPIO_WritePin>
	  }

	  if(mc_pwreco_ctrl){
 8000936:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <Update_Throttle+0x11c>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d006      	beq.n	800094c <Update_Throttle+0x8c>
		  //closed power
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800093e:	2201      	movs	r2, #1
 8000940:	2102      	movs	r1, #2
 8000942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000946:	f001 fe13 	bl	8002570 <HAL_GPIO_WritePin>
 800094a:	e005      	b.n	8000958 <Update_Throttle+0x98>
	  }else{
		  //open eco
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2102      	movs	r1, #2
 8000950:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000954:	f001 fe0c 	bl	8002570 <HAL_GPIO_WritePin>
	  }


	  if(dirrection == true){
 8000958:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <Update_Throttle+0x120>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d006      	beq.n	800096e <Update_Throttle+0xae>
		  //closed forward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2104      	movs	r1, #4
 8000964:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000968:	f001 fe02 	bl	8002570 <HAL_GPIO_WritePin>
 800096c:	e005      	b.n	800097a <Update_Throttle+0xba>
	  }else{
		  //open backward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2104      	movs	r1, #4
 8000972:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000976:	f001 fdfb 	bl	8002570 <HAL_GPIO_WritePin>
	  }

	  if(array_precharge == true){
 800097a:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <Update_Throttle+0x10c>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d005      	beq.n	800098e <Update_Throttle+0xce>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2104      	movs	r1, #4
 8000986:	480e      	ldr	r0, [pc, #56]	@ (80009c0 <Update_Throttle+0x100>)
 8000988:	f001 fdf2 	bl	8002570 <HAL_GPIO_WritePin>
 800098c:	e004      	b.n	8000998 <Update_Throttle+0xd8>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 800098e:	2201      	movs	r2, #1
 8000990:	2104      	movs	r1, #4
 8000992:	480b      	ldr	r0, [pc, #44]	@ (80009c0 <Update_Throttle+0x100>)
 8000994:	f001 fdec 	bl	8002570 <HAL_GPIO_WritePin>
	  }

	  if(array == true){
 8000998:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <Update_Throttle+0x108>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d005      	beq.n	80009ac <Update_Throttle+0xec>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2108      	movs	r1, #8
 80009a4:	4806      	ldr	r0, [pc, #24]	@ (80009c0 <Update_Throttle+0x100>)
 80009a6:	f001 fde3 	bl	8002570 <HAL_GPIO_WritePin>
 80009aa:	e004      	b.n	80009b6 <Update_Throttle+0xf6>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2108      	movs	r1, #8
 80009b0:	4803      	ldr	r0, [pc, #12]	@ (80009c0 <Update_Throttle+0x100>)
 80009b2:	f001 fddd 	bl	8002570 <HAL_GPIO_WritePin>
	  }


	  osDelay(20);
 80009b6:	2014      	movs	r0, #20
 80009b8:	f003 fec4 	bl	8004744 <osDelay>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, throttle);
 80009bc:	e79c      	b.n	80008f8 <Update_Throttle+0x38>
 80009be:	bf00      	nop
 80009c0:	48000800 	.word	0x48000800
 80009c4:	200000cc 	.word	0x200000cc
 80009c8:	2000014e 	.word	0x2000014e
 80009cc:	2000014f 	.word	0x2000014f
 80009d0:	20000144 	.word	0x20000144
 80009d4:	20000146 	.word	0x20000146
 80009d8:	2000014d 	.word	0x2000014d
 80009dc:	20000150 	.word	0x20000150
 80009e0:	2000014c 	.word	0x2000014c

080009e4 <Lights_Control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Lights_Control */
void Lights_Control(void *argument)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  if(left_turn_active){
 80009ec:	4b3a      	ldr	r3, [pc, #232]	@ (8000ad8 <Lights_Control+0xf4>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d016      	beq.n	8000a22 <Lights_Control+0x3e>
		  if(signal_counter < 5){
 80009f4:	4b39      	ldr	r3, [pc, #228]	@ (8000adc <Lights_Control+0xf8>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b04      	cmp	r3, #4
 80009fa:	dc06      	bgt.n	8000a0a <Lights_Control+0x26>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a02:	4837      	ldr	r0, [pc, #220]	@ (8000ae0 <Lights_Control+0xfc>)
 8000a04:	f001 fdb4 	bl	8002570 <HAL_GPIO_WritePin>
 8000a08:	e005      	b.n	8000a16 <Lights_Control+0x32>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a10:	4833      	ldr	r0, [pc, #204]	@ (8000ae0 <Lights_Control+0xfc>)
 8000a12:	f001 fdad 	bl	8002570 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 8000a16:	4b31      	ldr	r3, [pc, #196]	@ (8000adc <Lights_Control+0xf8>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4a2f      	ldr	r2, [pc, #188]	@ (8000adc <Lights_Control+0xf8>)
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	e010      	b.n	8000a44 <Lights_Control+0x60>

	  }else{
		  if(brakes_active){
 8000a22:	4b30      	ldr	r3, [pc, #192]	@ (8000ae4 <Lights_Control+0x100>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d006      	beq.n	8000a38 <Lights_Control+0x54>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a30:	482b      	ldr	r0, [pc, #172]	@ (8000ae0 <Lights_Control+0xfc>)
 8000a32:	f001 fd9d 	bl	8002570 <HAL_GPIO_WritePin>
 8000a36:	e005      	b.n	8000a44 <Lights_Control+0x60>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a3e:	4828      	ldr	r0, [pc, #160]	@ (8000ae0 <Lights_Control+0xfc>)
 8000a40:	f001 fd96 	bl	8002570 <HAL_GPIO_WritePin>
		  }
	  }

	  if(right_turn_active){
 8000a44:	4b28      	ldr	r3, [pc, #160]	@ (8000ae8 <Lights_Control+0x104>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d014      	beq.n	8000a76 <Lights_Control+0x92>
		  if(signal_counter < 5){
 8000a4c:	4b23      	ldr	r3, [pc, #140]	@ (8000adc <Lights_Control+0xf8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b04      	cmp	r3, #4
 8000a52:	dc05      	bgt.n	8000a60 <Lights_Control+0x7c>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2102      	movs	r1, #2
 8000a58:	4821      	ldr	r0, [pc, #132]	@ (8000ae0 <Lights_Control+0xfc>)
 8000a5a:	f001 fd89 	bl	8002570 <HAL_GPIO_WritePin>
 8000a5e:	e004      	b.n	8000a6a <Lights_Control+0x86>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2102      	movs	r1, #2
 8000a64:	481e      	ldr	r0, [pc, #120]	@ (8000ae0 <Lights_Control+0xfc>)
 8000a66:	f001 fd83 	bl	8002570 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <Lights_Control+0xf8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	4a1a      	ldr	r2, [pc, #104]	@ (8000adc <Lights_Control+0xf8>)
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	e00e      	b.n	8000a94 <Lights_Control+0xb0>

	  }else{
		  if(brakes_active){
 8000a76:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae4 <Lights_Control+0x100>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d005      	beq.n	8000a8a <Lights_Control+0xa6>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2102      	movs	r1, #2
 8000a82:	4817      	ldr	r0, [pc, #92]	@ (8000ae0 <Lights_Control+0xfc>)
 8000a84:	f001 fd74 	bl	8002570 <HAL_GPIO_WritePin>
 8000a88:	e004      	b.n	8000a94 <Lights_Control+0xb0>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	4814      	ldr	r0, [pc, #80]	@ (8000ae0 <Lights_Control+0xfc>)
 8000a90:	f001 fd6e 	bl	8002570 <HAL_GPIO_WritePin>
		  }
	  }

	  if(brakes_active){
 8000a94:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <Lights_Control+0x100>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d005      	beq.n	8000aa8 <Lights_Control+0xc4>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET); //sets center rear light (brake light)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	480f      	ldr	r0, [pc, #60]	@ (8000ae0 <Lights_Control+0xfc>)
 8000aa2:	f001 fd65 	bl	8002570 <HAL_GPIO_WritePin>
 8000aa6:	e004      	b.n	8000ab2 <Lights_Control+0xce>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2101      	movs	r1, #1
 8000aac:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <Lights_Control+0xfc>)
 8000aae:	f001 fd5f 	bl	8002570 <HAL_GPIO_WritePin>
	  }
	  signal_counter = signal_counter%10;
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8000adc <Lights_Control+0xf8>)
 8000ab4:	6819      	ldr	r1, [r3, #0]
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <Lights_Control+0x108>)
 8000ab8:	fb83 2301 	smull	r2, r3, r3, r1
 8000abc:	109a      	asrs	r2, r3, #2
 8000abe:	17cb      	asrs	r3, r1, #31
 8000ac0:	1ad2      	subs	r2, r2, r3
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	4413      	add	r3, r2
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	1aca      	subs	r2, r1, r3
 8000acc:	4b03      	ldr	r3, [pc, #12]	@ (8000adc <Lights_Control+0xf8>)
 8000ace:	601a      	str	r2, [r3, #0]
	  osDelay(100);
 8000ad0:	2064      	movs	r0, #100	@ 0x64
 8000ad2:	f003 fe37 	bl	8004744 <osDelay>
	  if(left_turn_active){
 8000ad6:	e789      	b.n	80009ec <Lights_Control+0x8>
 8000ad8:	2000014a 	.word	0x2000014a
 8000adc:	20000154 	.word	0x20000154
 8000ae0:	48000800 	.word	0x48000800
 8000ae4:	20000148 	.word	0x20000148
 8000ae8:	2000014b 	.word	0x2000014b
 8000aec:	66666667 	.word	0x66666667

08000af0 <Read_Sensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Read_Sensors */
void Read_Sensors(void *argument)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	//send CAN message
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
		Error_Handler();
	}
	*/
	  osDelay(100);
 8000af8:	2064      	movs	r0, #100	@ 0x64
 8000afa:	f003 fe23 	bl	8004744 <osDelay>
 8000afe:	e7fb      	b.n	8000af8 <Read_Sensors+0x8>

08000b00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	@ (8000b20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d101      	bne.n	8000b16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b12:	f000 fab3 	bl	800107c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40001000 	.word	0x40001000

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <Error_Handler+0x8>

08000b30 <HAL_MspInit>:
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b3a:	4a10      	ldr	r2, [pc, #64]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b5a:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2200      	movs	r2, #0
 8000b68:	210f      	movs	r1, #15
 8000b6a:	f06f 0001 	mvn.w	r0, #1
 8000b6e:	f001 f919 	bl	8001da4 <HAL_NVIC_SetPriority>
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40021000 	.word	0x40021000

08000b80 <HAL_CAN_MspInit>:
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08c      	sub	sp, #48	@ 0x30
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a56      	ldr	r2, [pc, #344]	@ (8000cf8 <HAL_CAN_MspInit+0x178>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d14b      	bne.n	8000c3a <HAL_CAN_MspInit+0xba>
 8000ba2:	4b56      	ldr	r3, [pc, #344]	@ (8000cfc <HAL_CAN_MspInit+0x17c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	4a54      	ldr	r2, [pc, #336]	@ (8000cfc <HAL_CAN_MspInit+0x17c>)
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	4b53      	ldr	r3, [pc, #332]	@ (8000cfc <HAL_CAN_MspInit+0x17c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d10b      	bne.n	8000bcc <HAL_CAN_MspInit+0x4c>
 8000bb4:	4b52      	ldr	r3, [pc, #328]	@ (8000d00 <HAL_CAN_MspInit+0x180>)
 8000bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb8:	4a51      	ldr	r2, [pc, #324]	@ (8000d00 <HAL_CAN_MspInit+0x180>)
 8000bba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bbe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bc0:	4b4f      	ldr	r3, [pc, #316]	@ (8000d00 <HAL_CAN_MspInit+0x180>)
 8000bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	4b4c      	ldr	r3, [pc, #304]	@ (8000d00 <HAL_CAN_MspInit+0x180>)
 8000bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd0:	4a4b      	ldr	r2, [pc, #300]	@ (8000d00 <HAL_CAN_MspInit+0x180>)
 8000bd2:	f043 0302 	orr.w	r3, r3, #2
 8000bd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bd8:	4b49      	ldr	r3, [pc, #292]	@ (8000d00 <HAL_CAN_MspInit+0x180>)
 8000bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bdc:	f003 0302 	and.w	r3, r3, #2
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000be8:	61fb      	str	r3, [r7, #28]
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
 8000bee:	2301      	movs	r3, #1
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bf6:	2309      	movs	r3, #9
 8000bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4840      	ldr	r0, [pc, #256]	@ (8000d04 <HAL_CAN_MspInit+0x184>)
 8000c02:	f001 fb23 	bl	800224c <HAL_GPIO_Init>
 8000c06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c0a:	61fb      	str	r3, [r7, #28]
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	623b      	str	r3, [r7, #32]
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c14:	2303      	movs	r3, #3
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c18:	2309      	movs	r3, #9
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	4838      	ldr	r0, [pc, #224]	@ (8000d04 <HAL_CAN_MspInit+0x184>)
 8000c24:	f001 fb12 	bl	800224c <HAL_GPIO_Init>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2105      	movs	r1, #5
 8000c2c:	2014      	movs	r0, #20
 8000c2e:	f001 f8b9 	bl	8001da4 <HAL_NVIC_SetPriority>
 8000c32:	2014      	movs	r0, #20
 8000c34:	f001 f8d2 	bl	8001ddc <HAL_NVIC_EnableIRQ>
 8000c38:	e059      	b.n	8000cee <HAL_CAN_MspInit+0x16e>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a32      	ldr	r2, [pc, #200]	@ (8000d08 <HAL_CAN_MspInit+0x188>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d154      	bne.n	8000cee <HAL_CAN_MspInit+0x16e>
 8000c44:	4b2e      	ldr	r3, [pc, #184]	@ (8000d00 <HAL_CAN_MspInit+0x180>)
 8000c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c48:	4a2d      	ldr	r2, [pc, #180]	@ (8000d00 <HAL_CAN_MspInit+0x180>)
 8000c4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c50:	4b2b      	ldr	r3, [pc, #172]	@ (8000d00 <HAL_CAN_MspInit+0x180>)
 8000c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	4b27      	ldr	r3, [pc, #156]	@ (8000cfc <HAL_CAN_MspInit+0x17c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	4a26      	ldr	r2, [pc, #152]	@ (8000cfc <HAL_CAN_MspInit+0x17c>)
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	4b25      	ldr	r3, [pc, #148]	@ (8000cfc <HAL_CAN_MspInit+0x17c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d10b      	bne.n	8000c86 <HAL_CAN_MspInit+0x106>
 8000c6e:	4b24      	ldr	r3, [pc, #144]	@ (8000d00 <HAL_CAN_MspInit+0x180>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c72:	4a23      	ldr	r2, [pc, #140]	@ (8000d00 <HAL_CAN_MspInit+0x180>)
 8000c74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c7a:	4b21      	ldr	r3, [pc, #132]	@ (8000d00 <HAL_CAN_MspInit+0x180>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4b1e      	ldr	r3, [pc, #120]	@ (8000d00 <HAL_CAN_MspInit+0x180>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8000d00 <HAL_CAN_MspInit+0x180>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c92:	4b1b      	ldr	r3, [pc, #108]	@ (8000d00 <HAL_CAN_MspInit+0x180>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	2320      	movs	r3, #32
 8000ca0:	61fb      	str	r3, [r7, #28]
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	623b      	str	r3, [r7, #32]
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000caa:	2303      	movs	r3, #3
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cae:	2303      	movs	r3, #3
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4812      	ldr	r0, [pc, #72]	@ (8000d04 <HAL_CAN_MspInit+0x184>)
 8000cba:	f001 fac7 	bl	800224c <HAL_GPIO_Init>
 8000cbe:	2340      	movs	r3, #64	@ 0x40
 8000cc0:	61fb      	str	r3, [r7, #28]
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	623b      	str	r3, [r7, #32]
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000cca:	2303      	movs	r3, #3
 8000ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000cce:	2308      	movs	r3, #8
 8000cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	480a      	ldr	r0, [pc, #40]	@ (8000d04 <HAL_CAN_MspInit+0x184>)
 8000cda:	f001 fab7 	bl	800224c <HAL_GPIO_Init>
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2105      	movs	r1, #5
 8000ce2:	2057      	movs	r0, #87	@ 0x57
 8000ce4:	f001 f85e 	bl	8001da4 <HAL_NVIC_SetPriority>
 8000ce8:	2057      	movs	r0, #87	@ 0x57
 8000cea:	f001 f877 	bl	8001ddc <HAL_NVIC_EnableIRQ>
 8000cee:	bf00      	nop
 8000cf0:	3730      	adds	r7, #48	@ 0x30
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40006400 	.word	0x40006400
 8000cfc:	20000198 	.word	0x20000198
 8000d00:	40021000 	.word	0x40021000
 8000d04:	48000400 	.word	0x48000400
 8000d08:	40006800 	.word	0x40006800

08000d0c <HAL_DAC_MspInit>:
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a19      	ldr	r2, [pc, #100]	@ (8000d90 <HAL_DAC_MspInit+0x84>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d12c      	bne.n	8000d88 <HAL_DAC_MspInit+0x7c>
 8000d2e:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <HAL_DAC_MspInit+0x88>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d32:	4a18      	ldr	r2, [pc, #96]	@ (8000d94 <HAL_DAC_MspInit+0x88>)
 8000d34:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d3a:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <HAL_DAC_MspInit+0x88>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <HAL_DAC_MspInit+0x88>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <HAL_DAC_MspInit+0x88>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d52:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <HAL_DAC_MspInit+0x88>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2330      	movs	r3, #48	@ 0x30
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	2303      	movs	r3, #3
 8000d64:	61bb      	str	r3, [r7, #24]
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d74:	f001 fa6a 	bl	800224c <HAL_GPIO_Init>
 8000d78:	2200      	movs	r2, #0
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	2036      	movs	r0, #54	@ 0x36
 8000d7e:	f001 f811 	bl	8001da4 <HAL_NVIC_SetPriority>
 8000d82:	2036      	movs	r0, #54	@ 0x36
 8000d84:	f001 f82a 	bl	8001ddc <HAL_NVIC_EnableIRQ>
 8000d88:	bf00      	nop
 8000d8a:	3728      	adds	r7, #40	@ 0x28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40007400 	.word	0x40007400
 8000d94:	40021000 	.word	0x40021000

08000d98 <HAL_I2C_MspInit>:
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0ac      	sub	sp, #176	@ 0xb0
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	228c      	movs	r2, #140	@ 0x8c
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f006 f995 	bl	80070e8 <memset>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a21      	ldr	r2, [pc, #132]	@ (8000e48 <HAL_I2C_MspInit+0xb0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d13b      	bne.n	8000e40 <HAL_I2C_MspInit+0xa8>
 8000dc8:	2380      	movs	r3, #128	@ 0x80
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	667b      	str	r3, [r7, #100]	@ 0x64
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f002 fc05 	bl	80035e4 <HAL_RCCEx_PeriphCLKConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_I2C_MspInit+0x4c>
 8000de0:	f7ff fea0 	bl	8000b24 <Error_Handler>
 8000de4:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <HAL_I2C_MspInit+0xb4>)
 8000de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de8:	4a18      	ldr	r2, [pc, #96]	@ (8000e4c <HAL_I2C_MspInit+0xb4>)
 8000dea:	f043 0302 	orr.w	r3, r3, #2
 8000dee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df0:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <HAL_I2C_MspInit+0xb4>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000e04:	2312      	movs	r3, #18
 8000e06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000e10:	2303      	movs	r3, #3
 8000e12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000e16:	2304      	movs	r3, #4
 8000e18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000e1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e20:	4619      	mov	r1, r3
 8000e22:	480b      	ldr	r0, [pc, #44]	@ (8000e50 <HAL_I2C_MspInit+0xb8>)
 8000e24:	f001 fa12 	bl	800224c <HAL_GPIO_Init>
 8000e28:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <HAL_I2C_MspInit+0xb4>)
 8000e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2c:	4a07      	ldr	r2, [pc, #28]	@ (8000e4c <HAL_I2C_MspInit+0xb4>)
 8000e2e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e32:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e34:	4b05      	ldr	r3, [pc, #20]	@ (8000e4c <HAL_I2C_MspInit+0xb4>)
 8000e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	bf00      	nop
 8000e42:	37b0      	adds	r7, #176	@ 0xb0
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40005800 	.word	0x40005800
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	48000400 	.word	0x48000400

08000e54 <HAL_InitTick>:
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08e      	sub	sp, #56	@ 0x38
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000e62:	4b34      	ldr	r3, [pc, #208]	@ (8000f34 <HAL_InitTick+0xe0>)
 8000e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e66:	4a33      	ldr	r2, [pc, #204]	@ (8000f34 <HAL_InitTick+0xe0>)
 8000e68:	f043 0310 	orr.w	r3, r3, #16
 8000e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e6e:	4b31      	ldr	r3, [pc, #196]	@ (8000f34 <HAL_InitTick+0xe0>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e72:	f003 0310 	and.w	r3, r3, #16
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f107 0210 	add.w	r2, r7, #16
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f002 fb1b 	bl	80034c0 <HAL_RCC_GetClockConfig>
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
 8000e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d103      	bne.n	8000e9c <HAL_InitTick+0x48>
 8000e94:	f002 fafe 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 8000e98:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e9a:	e004      	b.n	8000ea6 <HAL_InitTick+0x52>
 8000e9c:	f002 fafa 	bl	8003494 <HAL_RCC_GetPCLK1Freq>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ea8:	4a23      	ldr	r2, [pc, #140]	@ (8000f38 <HAL_InitTick+0xe4>)
 8000eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000eae:	0c9b      	lsrs	r3, r3, #18
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eb4:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <HAL_InitTick+0xe8>)
 8000eb6:	4a22      	ldr	r2, [pc, #136]	@ (8000f40 <HAL_InitTick+0xec>)
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <HAL_InitTick+0xe8>)
 8000ebc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f3c <HAL_InitTick+0xe8>)
 8000ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ec6:	6053      	str	r3, [r2, #4]
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <HAL_InitTick+0xe8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
 8000ece:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <HAL_InitTick+0xe8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	4b19      	ldr	r3, [pc, #100]	@ (8000f3c <HAL_InitTick+0xe8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
 8000eda:	4818      	ldr	r0, [pc, #96]	@ (8000f3c <HAL_InitTick+0xe8>)
 8000edc:	f003 f84c 	bl	8003f78 <HAL_TIM_Base_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000ee6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d11b      	bne.n	8000f26 <HAL_InitTick+0xd2>
 8000eee:	4813      	ldr	r0, [pc, #76]	@ (8000f3c <HAL_InitTick+0xe8>)
 8000ef0:	f003 f8a4 	bl	800403c <HAL_TIM_Base_Start_IT>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000efa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d111      	bne.n	8000f26 <HAL_InitTick+0xd2>
 8000f02:	2036      	movs	r0, #54	@ 0x36
 8000f04:	f000 ff6a 	bl	8001ddc <HAL_NVIC_EnableIRQ>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	d808      	bhi.n	8000f20 <HAL_InitTick+0xcc>
 8000f0e:	2200      	movs	r2, #0
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	2036      	movs	r0, #54	@ 0x36
 8000f14:	f000 ff46 	bl	8001da4 <HAL_NVIC_SetPriority>
 8000f18:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <HAL_InitTick+0xf0>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e002      	b.n	8000f26 <HAL_InitTick+0xd2>
 8000f20:	2301      	movs	r3, #1
 8000f22:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8000f26:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3738      	adds	r7, #56	@ 0x38
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	431bde83 	.word	0x431bde83
 8000f3c:	2000019c 	.word	0x2000019c
 8000f40:	40001000 	.word	0x40001000
 8000f44:	20000004 	.word	0x20000004

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <NMI_Handler+0x4>

08000f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <MemManage_Handler+0x4>

08000f60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000f84:	4802      	ldr	r0, [pc, #8]	@ (8000f90 <CAN1_RX0_IRQHandler+0x10>)
 8000f86:	f000 fc25 	bl	80017d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000007c 	.word	0x2000007c

08000f94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f98:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f9c:	f001 fb1a 	bl	80025d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fa8:	4803      	ldr	r0, [pc, #12]	@ (8000fb8 <TIM6_DAC_IRQHandler+0x14>)
 8000faa:	f003 f8b7 	bl	800411c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8000fae:	4803      	ldr	r0, [pc, #12]	@ (8000fbc <TIM6_DAC_IRQHandler+0x18>)
 8000fb0:	f000 ff91 	bl	8001ed6 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000019c 	.word	0x2000019c
 8000fbc:	200000cc 	.word	0x200000cc

08000fc0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000fc4:	4802      	ldr	r0, [pc, #8]	@ (8000fd0 <CAN2_RX0_IRQHandler+0x10>)
 8000fc6:	f000 fc05 	bl	80017d4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200000a4 	.word	0x200000a4

08000fd4 <SystemInit>:
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <SystemInit+0x20>)
 8000fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fde:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <SystemInit+0x20>)
 8000fe0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fe4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001030 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ffc:	f7ff ffea 	bl	8000fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001000:	480c      	ldr	r0, [pc, #48]	@ (8001034 <LoopForever+0x6>)
  ldr r1, =_edata
 8001002:	490d      	ldr	r1, [pc, #52]	@ (8001038 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001004:	4a0d      	ldr	r2, [pc, #52]	@ (800103c <LoopForever+0xe>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0a      	ldr	r2, [pc, #40]	@ (8001040 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001018:	4c0a      	ldr	r4, [pc, #40]	@ (8001044 <LoopForever+0x16>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001026:	f006 f8bd 	bl	80071a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800102a:	f7ff f9b9 	bl	80003a0 <main>

0800102e <LoopForever>:

LoopForever:
    b LoopForever
 800102e:	e7fe      	b.n	800102e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001030:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001034:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001038:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800103c:	08007400 	.word	0x08007400
  ldr r2, =_sbss
 8001040:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001044:	20001ccc 	.word	0x20001ccc

08001048 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001048:	e7fe      	b.n	8001048 <ADC1_2_IRQHandler>

0800104a <HAL_Init>:
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	2300      	movs	r3, #0
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	2003      	movs	r0, #3
 8001056:	f000 fe9a 	bl	8001d8e <HAL_NVIC_SetPriorityGrouping>
 800105a:	200f      	movs	r0, #15
 800105c:	f7ff fefa 	bl	8000e54 <HAL_InitTick>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <HAL_Init+0x22>
 8001066:	2301      	movs	r3, #1
 8001068:	71fb      	strb	r3, [r7, #7]
 800106a:	e001      	b.n	8001070 <HAL_Init+0x26>
 800106c:	f7ff fd60 	bl	8000b30 <HAL_MspInit>
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_IncTick>:
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_IncTick+0x20>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_IncTick+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <HAL_IncTick+0x24>)
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000008 	.word	0x20000008
 80010a0:	200001e8 	.word	0x200001e8

080010a4 <HAL_GetTick>:
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	200001e8 	.word	0x200001e8

080010bc <HAL_Delay>:
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	f7ff ffee 	bl	80010a4 <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d4:	d005      	beq.n	80010e2 <HAL_Delay+0x26>
 80010d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <HAL_Delay+0x44>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	bf00      	nop
 80010e4:	f7ff ffde 	bl	80010a4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d8f7      	bhi.n	80010e4 <HAL_Delay+0x28>
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008

08001104 <HAL_CAN_Init>:
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_CAN_Init+0x12>
 8001112:	2301      	movs	r3, #1
 8001114:	e0ed      	b.n	80012f2 <HAL_CAN_Init+0x1ee>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d102      	bne.n	8001128 <HAL_CAN_Init+0x24>
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff fd2c 	bl	8000b80 <HAL_CAN_MspInit>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f042 0201 	orr.w	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	f7ff ffb4 	bl	80010a4 <HAL_GetTick>
 800113c:	60f8      	str	r0, [r7, #12]
 800113e:	e012      	b.n	8001166 <HAL_CAN_Init+0x62>
 8001140:	f7ff ffb0 	bl	80010a4 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b0a      	cmp	r3, #10
 800114c:	d90b      	bls.n	8001166 <HAL_CAN_Init+0x62>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001152:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	625a      	str	r2, [r3, #36]	@ 0x24
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2205      	movs	r2, #5
 800115e:	f883 2020 	strb.w	r2, [r3, #32]
 8001162:	2301      	movs	r3, #1
 8001164:	e0c5      	b.n	80012f2 <HAL_CAN_Init+0x1ee>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0e5      	beq.n	8001140 <HAL_CAN_Init+0x3c>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0202 	bic.w	r2, r2, #2
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	f7ff ff8e 	bl	80010a4 <HAL_GetTick>
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	e012      	b.n	80011b2 <HAL_CAN_Init+0xae>
 800118c:	f7ff ff8a 	bl	80010a4 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b0a      	cmp	r3, #10
 8001198:	d90b      	bls.n	80011b2 <HAL_CAN_Init+0xae>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2205      	movs	r2, #5
 80011aa:	f883 2020 	strb.w	r2, [r3, #32]
 80011ae:	2301      	movs	r3, #1
 80011b0:	e09f      	b.n	80012f2 <HAL_CAN_Init+0x1ee>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1e5      	bne.n	800118c <HAL_CAN_Init+0x88>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7e1b      	ldrb	r3, [r3, #24]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d108      	bne.n	80011da <HAL_CAN_Init+0xd6>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e007      	b.n	80011ea <HAL_CAN_Init+0xe6>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7e5b      	ldrb	r3, [r3, #25]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d108      	bne.n	8001204 <HAL_CAN_Init+0x100>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	e007      	b.n	8001214 <HAL_CAN_Init+0x110>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	7e9b      	ldrb	r3, [r3, #26]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d108      	bne.n	800122e <HAL_CAN_Init+0x12a>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0220 	orr.w	r2, r2, #32
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	e007      	b.n	800123e <HAL_CAN_Init+0x13a>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 0220 	bic.w	r2, r2, #32
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7edb      	ldrb	r3, [r3, #27]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d108      	bne.n	8001258 <HAL_CAN_Init+0x154>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 0210 	bic.w	r2, r2, #16
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	e007      	b.n	8001268 <HAL_CAN_Init+0x164>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0210 	orr.w	r2, r2, #16
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7f1b      	ldrb	r3, [r3, #28]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d108      	bne.n	8001282 <HAL_CAN_Init+0x17e>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 0208 	orr.w	r2, r2, #8
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	e007      	b.n	8001292 <HAL_CAN_Init+0x18e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0208 	bic.w	r2, r2, #8
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7f5b      	ldrb	r3, [r3, #29]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d108      	bne.n	80012ac <HAL_CAN_Init+0x1a8>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f042 0204 	orr.w	r2, r2, #4
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	e007      	b.n	80012bc <HAL_CAN_Init+0x1b8>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0204 	bic.w	r2, r2, #4
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	ea42 0103 	orr.w	r1, r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	1e5a      	subs	r2, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	61da      	str	r2, [r3, #28]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 2020 	strb.w	r2, [r3, #32]
 80012f0:	2300      	movs	r3, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_CAN_ConfigFilter>:
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001312:	74fb      	strb	r3, [r7, #19]
 8001314:	7cfb      	ldrb	r3, [r7, #19]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d003      	beq.n	8001322 <HAL_CAN_ConfigFilter+0x26>
 800131a:	7cfb      	ldrb	r3, [r7, #19]
 800131c:	2b02      	cmp	r3, #2
 800131e:	f040 80be 	bne.w	800149e <HAL_CAN_ConfigFilter+0x1a2>
 8001322:	4b65      	ldr	r3, [pc, #404]	@ (80014b8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800132c:	f043 0201 	orr.w	r2, r3, #1
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800133c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	431a      	orrs	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	f003 031f 	and.w	r3, r3, #31
 8001362:	2201      	movs	r2, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	43db      	mvns	r3, r3
 8001374:	401a      	ands	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d123      	bne.n	80013cc <HAL_CAN_ConfigFilter+0xd0>
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	43db      	mvns	r3, r3
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	0419      	lsls	r1, r3, #16
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	683a      	ldr	r2, [r7, #0]
 80013a4:	6952      	ldr	r2, [r2, #20]
 80013a6:	4319      	orrs	r1, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	3248      	adds	r2, #72	@ 0x48
 80013ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	0419      	lsls	r1, r3, #16
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	430a      	orrs	r2, r1
 80013c2:	6979      	ldr	r1, [r7, #20]
 80013c4:	3348      	adds	r3, #72	@ 0x48
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	440b      	add	r3, r1
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	69db      	ldr	r3, [r3, #28]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d122      	bne.n	800141a <HAL_CAN_ConfigFilter+0x11e>
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	431a      	orrs	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	0419      	lsls	r1, r3, #16
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	6952      	ldr	r2, [r2, #20]
 80013f4:	4319      	orrs	r1, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3248      	adds	r2, #72	@ 0x48
 80013fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	0419      	lsls	r1, r3, #16
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	b29a      	uxth	r2, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	430a      	orrs	r2, r1
 8001410:	6979      	ldr	r1, [r7, #20]
 8001412:	3348      	adds	r3, #72	@ 0x48
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	440b      	add	r3, r1
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d109      	bne.n	8001436 <HAL_CAN_ConfigFilter+0x13a>
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	401a      	ands	r2, r3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001434:	e007      	b.n	8001446 <HAL_CAN_ConfigFilter+0x14a>
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	431a      	orrs	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d109      	bne.n	8001462 <HAL_CAN_ConfigFilter+0x166>
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	43db      	mvns	r3, r3
 8001458:	401a      	ands	r2, r3
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001460:	e007      	b.n	8001472 <HAL_CAN_ConfigFilter+0x176>
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	431a      	orrs	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d107      	bne.n	800148a <HAL_CAN_ConfigFilter+0x18e>
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	431a      	orrs	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001490:	f023 0201 	bic.w	r2, r3, #1
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 800149a:	2300      	movs	r3, #0
 800149c:	e006      	b.n	80014ac <HAL_CAN_ConfigFilter+0x1b0>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80014aa:	2301      	movs	r3, #1
 80014ac:	4618      	mov	r0, r3
 80014ae:	371c      	adds	r7, #28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	40006400 	.word	0x40006400

080014bc <HAL_CAN_Start>:
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d12e      	bne.n	800152e <HAL_CAN_Start+0x72>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2202      	movs	r2, #2
 80014d4:	f883 2020 	strb.w	r2, [r3, #32]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0201 	bic.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	f7ff fddc 	bl	80010a4 <HAL_GetTick>
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	e012      	b.n	8001516 <HAL_CAN_Start+0x5a>
 80014f0:	f7ff fdd8 	bl	80010a4 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b0a      	cmp	r3, #10
 80014fc:	d90b      	bls.n	8001516 <HAL_CAN_Start+0x5a>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001502:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	625a      	str	r2, [r3, #36]	@ 0x24
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2205      	movs	r2, #5
 800150e:	f883 2020 	strb.w	r2, [r3, #32]
 8001512:	2301      	movs	r3, #1
 8001514:	e012      	b.n	800153c <HAL_CAN_Start+0x80>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1e5      	bne.n	80014f0 <HAL_CAN_Start+0x34>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	625a      	str	r2, [r3, #36]	@ 0x24
 800152a:	2300      	movs	r3, #0
 800152c:	e006      	b.n	800153c <HAL_CAN_Start+0x80>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001532:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	625a      	str	r2, [r3, #36]	@ 0x24
 800153a:	2301      	movs	r3, #1
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_CAN_GetRxMessage>:
 8001544:	b480      	push	{r7}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001558:	75fb      	strb	r3, [r7, #23]
 800155a:	7dfb      	ldrb	r3, [r7, #23]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d003      	beq.n	8001568 <HAL_CAN_GetRxMessage+0x24>
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	2b02      	cmp	r3, #2
 8001564:	f040 8103 	bne.w	800176e <HAL_CAN_GetRxMessage+0x22a>
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10e      	bne.n	800158c <HAL_CAN_GetRxMessage+0x48>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b00      	cmp	r3, #0
 800157a:	d116      	bne.n	80015aa <HAL_CAN_GetRxMessage+0x66>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001580:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	625a      	str	r2, [r3, #36]	@ 0x24
 8001588:	2301      	movs	r3, #1
 800158a:	e0f7      	b.n	800177c <HAL_CAN_GetRxMessage+0x238>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d107      	bne.n	80015aa <HAL_CAN_GetRxMessage+0x66>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	625a      	str	r2, [r3, #36]	@ 0x24
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0e8      	b.n	800177c <HAL_CAN_GetRxMessage+0x238>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	331b      	adds	r3, #27
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	4413      	add	r3, r2
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0204 	and.w	r2, r3, #4
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10c      	bne.n	80015e2 <HAL_CAN_GetRxMessage+0x9e>
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	331b      	adds	r3, #27
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	4413      	add	r3, r2
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	0d5b      	lsrs	r3, r3, #21
 80015d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e00b      	b.n	80015fa <HAL_CAN_GetRxMessage+0xb6>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	331b      	adds	r3, #27
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	4413      	add	r3, r2
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	08db      	lsrs	r3, r3, #3
 80015f2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	331b      	adds	r3, #27
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	4413      	add	r3, r2
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0202 	and.w	r2, r3, #2
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	331b      	adds	r3, #27
 8001618:	011b      	lsls	r3, r3, #4
 800161a:	4413      	add	r3, r2
 800161c:	3304      	adds	r3, #4
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0308 	and.w	r3, r3, #8
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_CAN_GetRxMessage+0xec>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2208      	movs	r2, #8
 800162c:	611a      	str	r2, [r3, #16]
 800162e:	e00b      	b.n	8001648 <HAL_CAN_GetRxMessage+0x104>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	331b      	adds	r3, #27
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	4413      	add	r3, r2
 800163c:	3304      	adds	r3, #4
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 020f 	and.w	r2, r3, #15
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	611a      	str	r2, [r3, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	331b      	adds	r3, #27
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	4413      	add	r3, r2
 8001654:	3304      	adds	r3, #4
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	b2da      	uxtb	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	619a      	str	r2, [r3, #24]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	331b      	adds	r3, #27
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	4413      	add	r3, r2
 800166c:	3304      	adds	r3, #4
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0c1b      	lsrs	r3, r3, #16
 8001672:	b29a      	uxth	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	615a      	str	r2, [r3, #20]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	4413      	add	r3, r2
 8001682:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	701a      	strb	r2, [r3, #0]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	4413      	add	r3, r2
 8001698:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	0a1a      	lsrs	r2, r3, #8
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	701a      	strb	r2, [r3, #0]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	011b      	lsls	r3, r3, #4
 80016b0:	4413      	add	r3, r2
 80016b2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	0c1a      	lsrs	r2, r3, #16
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	3302      	adds	r3, #2
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	4413      	add	r3, r2
 80016cc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	0e1a      	lsrs	r2, r3, #24
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	3303      	adds	r3, #3
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	701a      	strb	r2, [r3, #0]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4413      	add	r3, r2
 80016e6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	3304      	adds	r3, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	701a      	strb	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	4413      	add	r3, r2
 80016fe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	0a1a      	lsrs	r2, r3, #8
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	3305      	adds	r3, #5
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	011b      	lsls	r3, r3, #4
 8001716:	4413      	add	r3, r2
 8001718:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	0c1a      	lsrs	r2, r3, #16
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	3306      	adds	r3, #6
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	4413      	add	r3, r2
 8001732:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	0e1a      	lsrs	r2, r3, #24
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	3307      	adds	r3, #7
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	701a      	strb	r2, [r3, #0]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d108      	bne.n	800175a <HAL_CAN_GetRxMessage+0x216>
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f042 0220 	orr.w	r2, r2, #32
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	e007      	b.n	800176a <HAL_CAN_GetRxMessage+0x226>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 0220 	orr.w	r2, r2, #32
 8001768:	611a      	str	r2, [r3, #16]
 800176a:	2300      	movs	r3, #0
 800176c:	e006      	b.n	800177c <HAL_CAN_GetRxMessage+0x238>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001772:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	625a      	str	r2, [r3, #36]	@ 0x24
 800177a:	2301      	movs	r3, #1
 800177c:	4618      	mov	r0, r3
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <HAL_CAN_ActivateNotification>:
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001798:	73fb      	strb	r3, [r7, #15]
 800179a:	7bfb      	ldrb	r3, [r7, #15]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d002      	beq.n	80017a6 <HAL_CAN_ActivateNotification+0x1e>
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d109      	bne.n	80017ba <HAL_CAN_ActivateNotification+0x32>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6959      	ldr	r1, [r3, #20]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	615a      	str	r2, [r3, #20]
 80017b6:	2300      	movs	r3, #0
 80017b8:	e006      	b.n	80017c8 <HAL_CAN_ActivateNotification+0x40>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80017c6:	2301      	movs	r3, #1
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <HAL_CAN_IRQHandler>:
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	@ 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	695b      	ldr	r3, [r3, #20]
 80017e6:	623b      	str	r3, [r7, #32]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	61bb      	str	r3, [r7, #24]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d07c      	beq.n	8001914 <HAL_CAN_IRQHandler+0x140>
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d023      	beq.n	800186c <HAL_CAN_IRQHandler+0x98>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2201      	movs	r2, #1
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_CAN_IRQHandler+0x6a>
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f983 	bl	8001b42 <HAL_CAN_TxMailbox0CompleteCallback>
 800183c:	e016      	b.n	800186c <HAL_CAN_IRQHandler+0x98>
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d004      	beq.n	8001852 <HAL_CAN_IRQHandler+0x7e>
 8001848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001850:	e00c      	b.n	800186c <HAL_CAN_IRQHandler+0x98>
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b00      	cmp	r3, #0
 800185a:	d004      	beq.n	8001866 <HAL_CAN_IRQHandler+0x92>
 800185c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
 8001864:	e002      	b.n	800186c <HAL_CAN_IRQHandler+0x98>
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f989 	bl	8001b7e <HAL_CAN_TxMailbox0AbortCallback>
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d024      	beq.n	80018c0 <HAL_CAN_IRQHandler+0xec>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_CAN_IRQHandler+0xbe>
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f963 	bl	8001b56 <HAL_CAN_TxMailbox1CompleteCallback>
 8001890:	e016      	b.n	80018c0 <HAL_CAN_IRQHandler+0xec>
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <HAL_CAN_IRQHandler+0xd2>
 800189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a4:	e00c      	b.n	80018c0 <HAL_CAN_IRQHandler+0xec>
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <HAL_CAN_IRQHandler+0xe6>
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018b8:	e002      	b.n	80018c0 <HAL_CAN_IRQHandler+0xec>
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f969 	bl	8001b92 <HAL_CAN_TxMailbox1AbortCallback>
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d024      	beq.n	8001914 <HAL_CAN_IRQHandler+0x140>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_CAN_IRQHandler+0x112>
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f943 	bl	8001b6a <HAL_CAN_TxMailbox2CompleteCallback>
 80018e4:	e016      	b.n	8001914 <HAL_CAN_IRQHandler+0x140>
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d004      	beq.n	80018fa <HAL_CAN_IRQHandler+0x126>
 80018f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018f8:	e00c      	b.n	8001914 <HAL_CAN_IRQHandler+0x140>
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d004      	beq.n	800190e <HAL_CAN_IRQHandler+0x13a>
 8001904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
 800190c:	e002      	b.n	8001914 <HAL_CAN_IRQHandler+0x140>
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f949 	bl	8001ba6 <HAL_CAN_TxMailbox2AbortCallback>
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00c      	beq.n	8001938 <HAL_CAN_IRQHandler+0x164>
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f003 0310 	and.w	r3, r3, #16
 8001924:	2b00      	cmp	r3, #0
 8001926:	d007      	beq.n	8001938 <HAL_CAN_IRQHandler+0x164>
 8001928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2210      	movs	r2, #16
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	6a3b      	ldr	r3, [r7, #32]
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00b      	beq.n	800195a <HAL_CAN_IRQHandler+0x186>
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <HAL_CAN_IRQHandler+0x186>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2208      	movs	r2, #8
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f930 	bl	8001bba <HAL_CAN_RxFifo0FullCallback>
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d009      	beq.n	8001978 <HAL_CAN_IRQHandler+0x1a4>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <HAL_CAN_IRQHandler+0x1a4>
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7fe fc48 	bl	8000208 <HAL_CAN_RxFifo0MsgPendingCallback>
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00c      	beq.n	800199c <HAL_CAN_IRQHandler+0x1c8>
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	2b00      	cmp	r3, #0
 800198a:	d007      	beq.n	800199c <HAL_CAN_IRQHandler+0x1c8>
 800198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2210      	movs	r2, #16
 800199a:	611a      	str	r2, [r3, #16]
 800199c:	6a3b      	ldr	r3, [r7, #32]
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00b      	beq.n	80019be <HAL_CAN_IRQHandler+0x1ea>
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <HAL_CAN_IRQHandler+0x1ea>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2208      	movs	r2, #8
 80019b6:	611a      	str	r2, [r3, #16]
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f000 f912 	bl	8001be2 <HAL_CAN_RxFifo1FullCallback>
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d009      	beq.n	80019dc <HAL_CAN_IRQHandler+0x208>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <HAL_CAN_IRQHandler+0x208>
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f8f9 	bl	8001bce <HAL_CAN_RxFifo1MsgPendingCallback>
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00b      	beq.n	80019fe <HAL_CAN_IRQHandler+0x22a>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d006      	beq.n	80019fe <HAL_CAN_IRQHandler+0x22a>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2210      	movs	r2, #16
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f8fc 	bl	8001bf6 <HAL_CAN_SleepCallback>
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00b      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x24c>
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x24c>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2208      	movs	r2, #8
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f8f5 	bl	8001c0a <HAL_CAN_WakeUpFromRxMsgCallback>
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d07b      	beq.n	8001b22 <HAL_CAN_IRQHandler+0x34e>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d072      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x346>
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d008      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x27c>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_CAN_IRQHandler+0x27c>
 8001a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d008      	beq.n	8001a6c <HAL_CAN_IRQHandler+0x298>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_CAN_IRQHandler+0x298>
 8001a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a66:	f043 0302 	orr.w	r3, r3, #2
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d008      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x2b4>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_CAN_IRQHandler+0x2b4>
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	f043 0304 	orr.w	r3, r3, #4
 8001a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d043      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x346>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d03e      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x346>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001aa2:	2b60      	cmp	r3, #96	@ 0x60
 8001aa4:	d02b      	beq.n	8001afe <HAL_CAN_IRQHandler+0x32a>
 8001aa6:	2b60      	cmp	r3, #96	@ 0x60
 8001aa8:	d82e      	bhi.n	8001b08 <HAL_CAN_IRQHandler+0x334>
 8001aaa:	2b50      	cmp	r3, #80	@ 0x50
 8001aac:	d022      	beq.n	8001af4 <HAL_CAN_IRQHandler+0x320>
 8001aae:	2b50      	cmp	r3, #80	@ 0x50
 8001ab0:	d82a      	bhi.n	8001b08 <HAL_CAN_IRQHandler+0x334>
 8001ab2:	2b40      	cmp	r3, #64	@ 0x40
 8001ab4:	d019      	beq.n	8001aea <HAL_CAN_IRQHandler+0x316>
 8001ab6:	2b40      	cmp	r3, #64	@ 0x40
 8001ab8:	d826      	bhi.n	8001b08 <HAL_CAN_IRQHandler+0x334>
 8001aba:	2b30      	cmp	r3, #48	@ 0x30
 8001abc:	d010      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x30c>
 8001abe:	2b30      	cmp	r3, #48	@ 0x30
 8001ac0:	d822      	bhi.n	8001b08 <HAL_CAN_IRQHandler+0x334>
 8001ac2:	2b10      	cmp	r3, #16
 8001ac4:	d002      	beq.n	8001acc <HAL_CAN_IRQHandler+0x2f8>
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	d005      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x302>
 8001aca:	e01d      	b.n	8001b08 <HAL_CAN_IRQHandler+0x334>
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ace:	f043 0308 	orr.w	r3, r3, #8
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad4:	e019      	b.n	8001b0a <HAL_CAN_IRQHandler+0x336>
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	f043 0310 	orr.w	r3, r3, #16
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ade:	e014      	b.n	8001b0a <HAL_CAN_IRQHandler+0x336>
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae2:	f043 0320 	orr.w	r3, r3, #32
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae8:	e00f      	b.n	8001b0a <HAL_CAN_IRQHandler+0x336>
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af2:	e00a      	b.n	8001b0a <HAL_CAN_IRQHandler+0x336>
 8001af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001afc:	e005      	b.n	8001b0a <HAL_CAN_IRQHandler+0x336>
 8001afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b06:	e000      	b.n	8001b0a <HAL_CAN_IRQHandler+0x336>
 8001b08:	bf00      	nop
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699a      	ldr	r2, [r3, #24]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b18:	619a      	str	r2, [r3, #24]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2204      	movs	r2, #4
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <HAL_CAN_IRQHandler+0x366>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f872 	bl	8001c1e <HAL_CAN_ErrorCallback>
 8001b3a:	bf00      	nop
 8001b3c:	3728      	adds	r7, #40	@ 0x28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_CAN_TxMailbox0CompleteCallback>:
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <HAL_CAN_TxMailbox1CompleteCallback>:
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <HAL_CAN_TxMailbox2CompleteCallback>:
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <HAL_CAN_TxMailbox0AbortCallback>:
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <HAL_CAN_TxMailbox1AbortCallback>:
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_CAN_TxMailbox2AbortCallback>:
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <HAL_CAN_RxFifo0FullCallback>:
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_CAN_RxFifo1MsgPendingCallback>:
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <HAL_CAN_RxFifo1FullCallback>:
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_CAN_SleepCallback>:
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_CAN_WakeUpFromRxMsgCallback>:
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_CAN_ErrorCallback>:
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <__NVIC_SetPriorityGrouping>:
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	4b0c      	ldr	r3, [pc, #48]	@ (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c50:	4013      	ands	r3, r2
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	021a      	lsls	r2, r3, #8
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	4a04      	ldr	r2, [pc, #16]	@ (8001c78 <__NVIC_SetPriorityGrouping+0x44>)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	60d3      	str	r3, [r2, #12]
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_GetPriorityGrouping>:
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4b04      	ldr	r3, [pc, #16]	@ (8001c94 <__NVIC_GetPriorityGrouping+0x18>)
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	0a1b      	lsrs	r3, r3, #8
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_EnableIRQ>:
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	db0b      	blt.n	8001cc2 <__NVIC_EnableIRQ+0x2a>
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	f003 021f 	and.w	r2, r3, #31
 8001cb0:	4907      	ldr	r1, [pc, #28]	@ (8001cd0 <__NVIC_EnableIRQ+0x38>)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	095b      	lsrs	r3, r3, #5
 8001cb8:	2001      	movs	r0, #1
 8001cba:	fa00 f202 	lsl.w	r2, r0, r2
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000e100 	.word	0xe000e100

08001cd4 <__NVIC_SetPriority>:
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4603      	mov	r3, r0
 8001cdc:	6039      	str	r1, [r7, #0]
 8001cde:	71fb      	strb	r3, [r7, #7]
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	db0a      	blt.n	8001cfe <__NVIC_SetPriority+0x2a>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	490c      	ldr	r1, [pc, #48]	@ (8001d20 <__NVIC_SetPriority+0x4c>)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	0112      	lsls	r2, r2, #4
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001cfc:	e00a      	b.n	8001d14 <__NVIC_SetPriority+0x40>
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4908      	ldr	r1, [pc, #32]	@ (8001d24 <__NVIC_SetPriority+0x50>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	3b04      	subs	r3, #4
 8001d0c:	0112      	lsls	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	761a      	strb	r2, [r3, #24]
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000e100 	.word	0xe000e100
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <NVIC_EncodePriority>:
 8001d28:	b480      	push	{r7}
 8001d2a:	b089      	sub	sp, #36	@ 0x24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f1c3 0307 	rsb	r3, r3, #7
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	bf28      	it	cs
 8001d46:	2304      	movcs	r3, #4
 8001d48:	61bb      	str	r3, [r7, #24]
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d902      	bls.n	8001d58 <NVIC_EncodePriority+0x30>
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3b03      	subs	r3, #3
 8001d56:	e000      	b.n	8001d5a <NVIC_EncodePriority+0x32>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	401a      	ands	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	f04f 31ff 	mov.w	r1, #4294967295
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43d9      	mvns	r1, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	400b      	ands	r3, r1
 8001d80:	4313      	orrs	r3, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	3724      	adds	r7, #36	@ 0x24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <HAL_NVIC_SetPriorityGrouping>:
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ff4c 	bl	8001c34 <__NVIC_SetPriorityGrouping>
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_NVIC_SetPriority>:
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	f7ff ff61 	bl	8001c7c <__NVIC_GetPriorityGrouping>
 8001dba:	6178      	str	r0, [r7, #20]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	68b9      	ldr	r1, [r7, #8]
 8001dc0:	6978      	ldr	r0, [r7, #20]
 8001dc2:	f7ff ffb1 	bl	8001d28 <NVIC_EncodePriority>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff ff80 	bl	8001cd4 <__NVIC_SetPriority>
 8001dd4:	bf00      	nop
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <HAL_NVIC_EnableIRQ>:
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff ff54 	bl	8001c98 <__NVIC_EnableIRQ>
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_DAC_Init>:
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_DAC_Init+0x12>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e014      	b.n	8001e34 <HAL_DAC_Init+0x3c>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	791b      	ldrb	r3, [r3, #4]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d105      	bne.n	8001e20 <HAL_DAC_Init+0x28>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	715a      	strb	r2, [r3, #5]
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7fe ff76 	bl	8000d0c <HAL_DAC_MspInit>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	711a      	strb	r2, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	711a      	strb	r2, [r3, #4]
 8001e32:	2300      	movs	r3, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_DAC_Start>:
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	795b      	ldrb	r3, [r3, #5]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_DAC_Start+0x16>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e03b      	b.n	8001eca <HAL_DAC_Start+0x8e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	715a      	strb	r2, [r3, #5]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	711a      	strb	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6819      	ldr	r1, [r3, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	f003 0310 	and.w	r3, r3, #16
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10f      	bne.n	8001e9c <HAL_DAC_Start+0x60>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d118      	bne.n	8001ebc <HAL_DAC_Start+0x80>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0201 	orr.w	r2, r2, #1
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	e00f      	b.n	8001ebc <HAL_DAC_Start+0x80>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001ea6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001eaa:	d107      	bne.n	8001ebc <HAL_DAC_Start+0x80>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0202 	orr.w	r2, r2, #2
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	711a      	strb	r2, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	715a      	strb	r2, [r3, #5]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_DAC_IRQHandler>:
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ee8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001eec:	d120      	bne.n	8001f30 <HAL_DAC_IRQHandler+0x5a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ef8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001efc:	d118      	bne.n	8001f30 <HAL_DAC_IRQHandler+0x5a>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2204      	movs	r2, #4
 8001f02:	711a      	strb	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	611a      	str	r2, [r3, #16]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f18:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f852 	bl	8001fd4 <HAL_DAC_DMAUnderrunCallbackCh1>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f3e:	d120      	bne.n	8001f82 <HAL_DAC_IRQHandler+0xac>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f4e:	d118      	bne.n	8001f82 <HAL_DAC_IRQHandler+0xac>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2204      	movs	r2, #4
 8001f54:	711a      	strb	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f043 0202 	orr.w	r2, r3, #2
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	611a      	str	r2, [r3, #16]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001f6a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f95a 	bl	8002236 <HAL_DACEx_DMAUnderrunCallbackCh2>
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_DAC_SetValue>:
 8001f8a:	b480      	push	{r7}
 8001f8c:	b087      	sub	sp, #28
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <HAL_DAC_SetValue+0x2a>
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	3308      	adds	r3, #8
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	e004      	b.n	8001fbe <HAL_DAC_SetValue+0x34>
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	3314      	adds	r3, #20
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	371c      	adds	r7, #28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_DAC_ConfigChannel>:
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	795b      	ldrb	r3, [r3, #5]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_DAC_ConfigChannel+0x1c>
 8002000:	2302      	movs	r3, #2
 8002002:	e114      	b.n	800222e <HAL_DAC_ConfigChannel+0x246>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2201      	movs	r2, #1
 8002008:	715a      	strb	r2, [r3, #5]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2202      	movs	r2, #2
 800200e:	711a      	strb	r2, [r3, #4]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b04      	cmp	r3, #4
 8002016:	f040 8081 	bne.w	800211c <HAL_DAC_ConfigChannel+0x134>
 800201a:	f7ff f843 	bl	80010a4 <HAL_GetTick>
 800201e:	61f8      	str	r0, [r7, #28]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d140      	bne.n	80020a8 <HAL_DAC_ConfigChannel+0xc0>
 8002026:	e018      	b.n	800205a <HAL_DAC_ConfigChannel+0x72>
 8002028:	f7ff f83c 	bl	80010a4 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d911      	bls.n	800205a <HAL_DAC_ConfigChannel+0x72>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800203c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00a      	beq.n	800205a <HAL_DAC_ConfigChannel+0x72>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f043 0208 	orr.w	r2, r3, #8
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	611a      	str	r2, [r3, #16]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2203      	movs	r2, #3
 8002054:	711a      	strb	r2, [r3, #4]
 8002056:	2303      	movs	r3, #3
 8002058:	e0e9      	b.n	800222e <HAL_DAC_ConfigChannel+0x246>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002060:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1df      	bne.n	8002028 <HAL_DAC_ConfigChannel+0x40>
 8002068:	2001      	movs	r0, #1
 800206a:	f7ff f827 	bl	80010bc <HAL_Delay>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68ba      	ldr	r2, [r7, #8]
 8002074:	6992      	ldr	r2, [r2, #24]
 8002076:	641a      	str	r2, [r3, #64]	@ 0x40
 8002078:	e023      	b.n	80020c2 <HAL_DAC_ConfigChannel+0xda>
 800207a:	f7ff f813 	bl	80010a4 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b01      	cmp	r3, #1
 8002086:	d90f      	bls.n	80020a8 <HAL_DAC_ConfigChannel+0xc0>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208e:	2b00      	cmp	r3, #0
 8002090:	da0a      	bge.n	80020a8 <HAL_DAC_ConfigChannel+0xc0>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f043 0208 	orr.w	r2, r3, #8
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	611a      	str	r2, [r3, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2203      	movs	r2, #3
 80020a2:	711a      	strb	r2, [r3, #4]
 80020a4:	2303      	movs	r3, #3
 80020a6:	e0c2      	b.n	800222e <HAL_DAC_ConfigChannel+0x246>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	dbe3      	blt.n	800207a <HAL_DAC_ConfigChannel+0x92>
 80020b2:	2001      	movs	r0, #1
 80020b4:	f7ff f802 	bl	80010bc <HAL_Delay>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	6992      	ldr	r2, [r2, #24]
 80020c0:	645a      	str	r2, [r3, #68]	@ 0x44
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	ea02 0103 	and.w	r1, r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	409a      	lsls	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	649a      	str	r2, [r3, #72]	@ 0x48
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	21ff      	movs	r1, #255	@ 0xff
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	ea02 0103 	and.w	r1, r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	6a1a      	ldr	r2, [r3, #32]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	409a      	lsls	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d11d      	bne.n	8002160 <HAL_DAC_ConfigChannel+0x178>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800212a:	61bb      	str	r3, [r7, #24]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	221f      	movs	r2, #31
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002166:	61bb      	str	r3, [r7, #24]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2207      	movs	r2, #7
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	431a      	orrs	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f003 0310 	and.w	r3, r3, #16
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6819      	ldr	r1, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43da      	mvns	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	400a      	ands	r2, r1
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	61bb      	str	r3, [r7, #24]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6819      	ldr	r1, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	22c0      	movs	r2, #192	@ 0xc0
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43da      	mvns	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	400a      	ands	r2, r1
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2201      	movs	r2, #1
 8002224:	711a      	strb	r2, [r3, #4]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	715a      	strb	r2, [r3, #5]
 800222c:	2300      	movs	r3, #0
 800222e:	4618      	mov	r0, r3
 8002230:	3720      	adds	r7, #32
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <HAL_GPIO_Init>:
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	e166      	b.n	800252a <HAL_GPIO_Init+0x2de>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	2101      	movs	r1, #1
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8158 	beq.w	8002524 <HAL_GPIO_Init+0x2d8>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d005      	beq.n	800228c <HAL_GPIO_Init+0x40>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d130      	bne.n	80022ee <HAL_GPIO_Init+0xa2>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	613b      	str	r3, [r7, #16]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	2201      	movs	r2, #1
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	f003 0201 	and.w	r2, r3, #1
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d017      	beq.n	800232a <HAL_GPIO_Init+0xde>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	2203      	movs	r2, #3
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d123      	bne.n	800237e <HAL_GPIO_Init+0x132>
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	08da      	lsrs	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3208      	adds	r2, #8
 800233e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	08da      	lsrs	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3208      	adds	r2, #8
 8002378:	6939      	ldr	r1, [r7, #16]
 800237a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	2203      	movs	r2, #3
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0203 	and.w	r2, r3, #3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 80b2 	beq.w	8002524 <HAL_GPIO_Init+0x2d8>
 80023c0:	4b61      	ldr	r3, [pc, #388]	@ (8002548 <HAL_GPIO_Init+0x2fc>)
 80023c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c4:	4a60      	ldr	r2, [pc, #384]	@ (8002548 <HAL_GPIO_Init+0x2fc>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6613      	str	r3, [r2, #96]	@ 0x60
 80023cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002548 <HAL_GPIO_Init+0x2fc>)
 80023ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	4a5c      	ldr	r2, [pc, #368]	@ (800254c <HAL_GPIO_Init+0x300>)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002402:	d02b      	beq.n	800245c <HAL_GPIO_Init+0x210>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a52      	ldr	r2, [pc, #328]	@ (8002550 <HAL_GPIO_Init+0x304>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d025      	beq.n	8002458 <HAL_GPIO_Init+0x20c>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a51      	ldr	r2, [pc, #324]	@ (8002554 <HAL_GPIO_Init+0x308>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d01f      	beq.n	8002454 <HAL_GPIO_Init+0x208>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a50      	ldr	r2, [pc, #320]	@ (8002558 <HAL_GPIO_Init+0x30c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d019      	beq.n	8002450 <HAL_GPIO_Init+0x204>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a4f      	ldr	r2, [pc, #316]	@ (800255c <HAL_GPIO_Init+0x310>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d013      	beq.n	800244c <HAL_GPIO_Init+0x200>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a4e      	ldr	r2, [pc, #312]	@ (8002560 <HAL_GPIO_Init+0x314>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d00d      	beq.n	8002448 <HAL_GPIO_Init+0x1fc>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a4d      	ldr	r2, [pc, #308]	@ (8002564 <HAL_GPIO_Init+0x318>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d007      	beq.n	8002444 <HAL_GPIO_Init+0x1f8>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4a4c      	ldr	r2, [pc, #304]	@ (8002568 <HAL_GPIO_Init+0x31c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d101      	bne.n	8002440 <HAL_GPIO_Init+0x1f4>
 800243c:	2307      	movs	r3, #7
 800243e:	e00e      	b.n	800245e <HAL_GPIO_Init+0x212>
 8002440:	2308      	movs	r3, #8
 8002442:	e00c      	b.n	800245e <HAL_GPIO_Init+0x212>
 8002444:	2306      	movs	r3, #6
 8002446:	e00a      	b.n	800245e <HAL_GPIO_Init+0x212>
 8002448:	2305      	movs	r3, #5
 800244a:	e008      	b.n	800245e <HAL_GPIO_Init+0x212>
 800244c:	2304      	movs	r3, #4
 800244e:	e006      	b.n	800245e <HAL_GPIO_Init+0x212>
 8002450:	2303      	movs	r3, #3
 8002452:	e004      	b.n	800245e <HAL_GPIO_Init+0x212>
 8002454:	2302      	movs	r3, #2
 8002456:	e002      	b.n	800245e <HAL_GPIO_Init+0x212>
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <HAL_GPIO_Init+0x212>
 800245c:	2300      	movs	r3, #0
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	f002 0203 	and.w	r2, r2, #3
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	4093      	lsls	r3, r2
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	4937      	ldr	r1, [pc, #220]	@ (800254c <HAL_GPIO_Init+0x300>)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	3302      	adds	r3, #2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800247c:	4b3b      	ldr	r3, [pc, #236]	@ (800256c <HAL_GPIO_Init+0x320>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x254>
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	4a32      	ldr	r2, [pc, #200]	@ (800256c <HAL_GPIO_Init+0x320>)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	6093      	str	r3, [r2, #8]
 80024a6:	4b31      	ldr	r3, [pc, #196]	@ (800256c <HAL_GPIO_Init+0x320>)
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_GPIO_Init+0x27e>
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	4a28      	ldr	r2, [pc, #160]	@ (800256c <HAL_GPIO_Init+0x320>)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	60d3      	str	r3, [r2, #12]
 80024d0:	4b26      	ldr	r3, [pc, #152]	@ (800256c <HAL_GPIO_Init+0x320>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_GPIO_Init+0x2a8>
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	4a1d      	ldr	r2, [pc, #116]	@ (800256c <HAL_GPIO_Init+0x320>)
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	6053      	str	r3, [r2, #4]
 80024fa:	4b1c      	ldr	r3, [pc, #112]	@ (800256c <HAL_GPIO_Init+0x320>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43db      	mvns	r3, r3
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_Init+0x2d2>
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	4a13      	ldr	r2, [pc, #76]	@ (800256c <HAL_GPIO_Init+0x320>)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	3301      	adds	r3, #1
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	f47f ae91 	bne.w	800225c <HAL_GPIO_Init+0x10>
 800253a:	bf00      	nop
 800253c:	bf00      	nop
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	40021000 	.word	0x40021000
 800254c:	40010000 	.word	0x40010000
 8002550:	48000400 	.word	0x48000400
 8002554:	48000800 	.word	0x48000800
 8002558:	48000c00 	.word	0x48000c00
 800255c:	48001000 	.word	0x48001000
 8002560:	48001400 	.word	0x48001400
 8002564:	48001800 	.word	0x48001800
 8002568:	48001c00 	.word	0x48001c00
 800256c:	40010400 	.word	0x40010400

08002570 <HAL_GPIO_WritePin>:
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
 800257c:	4613      	mov	r3, r2
 800257e:	707b      	strb	r3, [r7, #1]
 8002580:	787b      	ldrb	r3, [r7, #1]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_WritePin+0x1e>
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	619a      	str	r2, [r3, #24]
 800258c:	e002      	b.n	8002594 <HAL_GPIO_WritePin+0x24>
 800258e:	887a      	ldrh	r2, [r7, #2]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	629a      	str	r2, [r3, #40]	@ 0x28
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_GPIO_TogglePin>:
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	887a      	ldrh	r2, [r7, #2]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4013      	ands	r3, r2
 80025b8:	041a      	lsls	r2, r3, #16
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	43d9      	mvns	r1, r3
 80025be:	887b      	ldrh	r3, [r7, #2]
 80025c0:	400b      	ands	r3, r1
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	619a      	str	r2, [r3, #24]
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_GPIO_EXTI_IRQHandler>:
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	80fb      	strh	r3, [r7, #6]
 80025de:	4b08      	ldr	r3, [pc, #32]	@ (8002600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d006      	beq.n	80025f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
 80025ea:	4a05      	ldr	r2, [pc, #20]	@ (8002600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	6153      	str	r3, [r2, #20]
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fd fdfc 	bl	80001f0 <HAL_GPIO_EXTI_Callback>
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40010400 	.word	0x40010400

08002604 <HAL_I2C_Init>:
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_I2C_Init+0x12>
 8002612:	2301      	movs	r3, #1
 8002614:	e08d      	b.n	8002732 <HAL_I2C_Init+0x12e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_I2C_Init+0x2c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe fbb4 	bl	8000d98 <HAL_I2C_MspInit>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2224      	movs	r2, #36	@ 0x24
 8002634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0201 	bic.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002654:	611a      	str	r2, [r3, #16]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002664:	609a      	str	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d107      	bne.n	800267e <HAL_I2C_Init+0x7a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	e006      	b.n	800268c <HAL_I2C_Init+0x88>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d108      	bne.n	80026a6 <HAL_I2C_Init+0xa2>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	e007      	b.n	80026b6 <HAL_I2C_Init+0xb2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026c8:	6053      	str	r3, [r2, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026d8:	60da      	str	r2, [r3, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	ea42 0103 	orr.w	r1, r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	021a      	lsls	r2, r3, #8
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	60da      	str	r2, [r3, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69d9      	ldr	r1, [r3, #28]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1a      	ldr	r2, [r3, #32]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	645a      	str	r2, [r3, #68]	@ 0x44
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2220      	movs	r2, #32
 800271e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	@ 0x30
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002730:	2300      	movs	r3, #0
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_I2CEx_ConfigAnalogFilter>:
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	6039      	str	r1, [r7, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b20      	cmp	r3, #32
 800274e:	d138      	bne.n	80027c2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800275a:	2302      	movs	r3, #2
 800275c:	e032      	b.n	80027c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2224      	movs	r2, #36	@ 0x24
 800276a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0201 	bic.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6819      	ldr	r1, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0201 	orr.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2220      	movs	r2, #32
 80027b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027c2:	2302      	movs	r3, #2
 80027c4:	4618      	mov	r0, r3
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_I2CEx_ConfigDigitalFilter>:
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d139      	bne.n	800285a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027f0:	2302      	movs	r3, #2
 80027f2:	e033      	b.n	800285c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2224      	movs	r2, #36	@ 0x24
 8002800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	021b      	lsls	r3, r3, #8
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0201 	orr.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002856:	2300      	movs	r3, #0
 8002858:	e000      	b.n	800285c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800285a:	2302      	movs	r3, #2
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_PWREx_GetVoltageRange>:
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
 800286c:	4b04      	ldr	r3, [pc, #16]	@ (8002880 <HAL_PWREx_GetVoltageRange+0x18>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002874:	4618      	mov	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40007000 	.word	0x40007000

08002884 <HAL_PWREx_ControlVoltageScaling>:
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002892:	d130      	bne.n	80028f6 <HAL_PWREx_ControlVoltageScaling+0x72>
 8002894:	4b23      	ldr	r3, [pc, #140]	@ (8002924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800289c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028a0:	d038      	beq.n	8002914 <HAL_PWREx_ControlVoltageScaling+0x90>
 80028a2:	4b20      	ldr	r3, [pc, #128]	@ (8002924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002928 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2232      	movs	r2, #50	@ 0x32
 80028b8:	fb02 f303 	mul.w	r3, r2, r3
 80028bc:	4a1b      	ldr	r2, [pc, #108]	@ (800292c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0c9b      	lsrs	r3, r3, #18
 80028c4:	3301      	adds	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	e002      	b.n	80028d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	4b14      	ldr	r3, [pc, #80]	@ (8002924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d2:	695b      	ldr	r3, [r3, #20]
 80028d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028dc:	d102      	bne.n	80028e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f2      	bne.n	80028ca <HAL_PWREx_ControlVoltageScaling+0x46>
 80028e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028f0:	d110      	bne.n	8002914 <HAL_PWREx_ControlVoltageScaling+0x90>
 80028f2:	2303      	movs	r3, #3
 80028f4:	e00f      	b.n	8002916 <HAL_PWREx_ControlVoltageScaling+0x92>
 80028f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80028fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002902:	d007      	beq.n	8002914 <HAL_PWREx_ControlVoltageScaling+0x90>
 8002904:	4b07      	ldr	r3, [pc, #28]	@ (8002924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800290c:	4a05      	ldr	r2, [pc, #20]	@ (8002924 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800290e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	2300      	movs	r3, #0
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40007000 	.word	0x40007000
 8002928:	20000000 	.word	0x20000000
 800292c:	431bde83 	.word	0x431bde83

08002930 <HAL_RCC_OscConfig>:
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <HAL_RCC_OscConfig+0x14>
 800293e:	2301      	movs	r3, #1
 8002940:	f000 bc08 	b.w	8003154 <HAL_RCC_OscConfig+0x824>
 8002944:	4b96      	ldr	r3, [pc, #600]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 030c 	and.w	r3, r3, #12
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	4b94      	ldr	r3, [pc, #592]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80e4 	beq.w	8002b2e <HAL_RCC_OscConfig+0x1fe>
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d007      	beq.n	800297c <HAL_RCC_OscConfig+0x4c>
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2b0c      	cmp	r3, #12
 8002970:	f040 808b 	bne.w	8002a8a <HAL_RCC_OscConfig+0x15a>
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2b01      	cmp	r3, #1
 8002978:	f040 8087 	bne.w	8002a8a <HAL_RCC_OscConfig+0x15a>
 800297c:	4b88      	ldr	r3, [pc, #544]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_OscConfig+0x64>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_OscConfig+0x64>
 8002990:	2301      	movs	r3, #1
 8002992:	e3df      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1a      	ldr	r2, [r3, #32]
 8002998:	4b81      	ldr	r3, [pc, #516]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d004      	beq.n	80029ae <HAL_RCC_OscConfig+0x7e>
 80029a4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029ac:	e005      	b.n	80029ba <HAL_RCC_OscConfig+0x8a>
 80029ae:	4b7c      	ldr	r3, [pc, #496]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 80029b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d223      	bcs.n	8002a06 <HAL_RCC_OscConfig+0xd6>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fdae 	bl	8003524 <RCC_SetFlashLatencyFromMSIRange>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0xa2>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e3c0      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 80029d2:	4b73      	ldr	r3, [pc, #460]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a72      	ldr	r2, [pc, #456]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 80029d8:	f043 0308 	orr.w	r3, r3, #8
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	4b70      	ldr	r3, [pc, #448]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	496d      	ldr	r1, [pc, #436]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]
 80029f0:	4b6b      	ldr	r3, [pc, #428]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	021b      	lsls	r3, r3, #8
 80029fe:	4968      	ldr	r1, [pc, #416]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
 8002a04:	e025      	b.n	8002a52 <HAL_RCC_OscConfig+0x122>
 8002a06:	4b66      	ldr	r3, [pc, #408]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a65      	ldr	r2, [pc, #404]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	f043 0308 	orr.w	r3, r3, #8
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	4b63      	ldr	r3, [pc, #396]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	4960      	ldr	r1, [pc, #384]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]
 8002a24:	4b5e      	ldr	r3, [pc, #376]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	021b      	lsls	r3, r3, #8
 8002a32:	495b      	ldr	r1, [pc, #364]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_RCC_OscConfig+0x122>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fd6e 	bl	8003524 <RCC_SetFlashLatencyFromMSIRange>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <HAL_RCC_OscConfig+0x122>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e380      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002a52:	f000 fc87 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 8002a56:	4602      	mov	r2, r0
 8002a58:	4b51      	ldr	r3, [pc, #324]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	4950      	ldr	r1, [pc, #320]	@ (8002ba4 <HAL_RCC_OscConfig+0x274>)
 8002a64:	5ccb      	ldrb	r3, [r1, r3]
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6e:	4a4e      	ldr	r2, [pc, #312]	@ (8002ba8 <HAL_RCC_OscConfig+0x278>)
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	4b4e      	ldr	r3, [pc, #312]	@ (8002bac <HAL_RCC_OscConfig+0x27c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe f9ec 	bl	8000e54 <HAL_InitTick>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	73fb      	strb	r3, [r7, #15]
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d052      	beq.n	8002b2c <HAL_RCC_OscConfig+0x1fc>
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	e364      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d032      	beq.n	8002af8 <HAL_RCC_OscConfig+0x1c8>
 8002a92:	4b43      	ldr	r3, [pc, #268]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a42      	ldr	r2, [pc, #264]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	f7fe fb01 	bl	80010a4 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x188>
 8002aa6:	f7fe fafd 	bl	80010a4 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x188>
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e34d      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002ab8:	4b39      	ldr	r3, [pc, #228]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x176>
 8002ac4:	4b36      	ldr	r3, [pc, #216]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a35      	ldr	r2, [pc, #212]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002aca:	f043 0308 	orr.w	r3, r3, #8
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b33      	ldr	r3, [pc, #204]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4930      	ldr	r1, [pc, #192]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]
 8002ae2:	4b2f      	ldr	r3, [pc, #188]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	021b      	lsls	r3, r3, #8
 8002af0:	492b      	ldr	r1, [pc, #172]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	604b      	str	r3, [r1, #4]
 8002af6:	e01a      	b.n	8002b2e <HAL_RCC_OscConfig+0x1fe>
 8002af8:	4b29      	ldr	r3, [pc, #164]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a28      	ldr	r2, [pc, #160]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	f7fe face 	bl	80010a4 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]
 8002b0a:	e008      	b.n	8002b1e <HAL_RCC_OscConfig+0x1ee>
 8002b0c:	f7fe faca 	bl	80010a4 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x1ee>
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e31a      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002b1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f0      	bne.n	8002b0c <HAL_RCC_OscConfig+0x1dc>
 8002b2a:	e000      	b.n	8002b2e <HAL_RCC_OscConfig+0x1fe>
 8002b2c:	bf00      	nop
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d073      	beq.n	8002c22 <HAL_RCC_OscConfig+0x2f2>
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d005      	beq.n	8002b4c <HAL_RCC_OscConfig+0x21c>
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	2b0c      	cmp	r3, #12
 8002b44:	d10e      	bne.n	8002b64 <HAL_RCC_OscConfig+0x234>
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d10b      	bne.n	8002b64 <HAL_RCC_OscConfig+0x234>
 8002b4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d063      	beq.n	8002c20 <HAL_RCC_OscConfig+0x2f0>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d15f      	bne.n	8002c20 <HAL_RCC_OscConfig+0x2f0>
 8002b60:	2301      	movs	r3, #1
 8002b62:	e2f7      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b6c:	d106      	bne.n	8002b7c <HAL_RCC_OscConfig+0x24c>
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a0b      	ldr	r2, [pc, #44]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002b74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e025      	b.n	8002bc8 <HAL_RCC_OscConfig+0x298>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b84:	d114      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x280>
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002b8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	4b03      	ldr	r3, [pc, #12]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a02      	ldr	r2, [pc, #8]	@ (8002ba0 <HAL_RCC_OscConfig+0x270>)
 8002b98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	e013      	b.n	8002bc8 <HAL_RCC_OscConfig+0x298>
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	080073b0 	.word	0x080073b0
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	20000004 	.word	0x20000004
 8002bb0:	4ba0      	ldr	r3, [pc, #640]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a9f      	ldr	r2, [pc, #636]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	4b9d      	ldr	r3, [pc, #628]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a9c      	ldr	r2, [pc, #624]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002bc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d013      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x2c8>
 8002bd0:	f7fe fa68 	bl	80010a4 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x2ba>
 8002bd8:	f7fe fa64 	bl	80010a4 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	@ 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x2ba>
 8002be6:	2303      	movs	r3, #3
 8002be8:	e2b4      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002bea:	4b92      	ldr	r3, [pc, #584]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x2a8>
 8002bf6:	e014      	b.n	8002c22 <HAL_RCC_OscConfig+0x2f2>
 8002bf8:	f7fe fa54 	bl	80010a4 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x2e2>
 8002c00:	f7fe fa50 	bl	80010a4 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b64      	cmp	r3, #100	@ 0x64
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x2e2>
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e2a0      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002c12:	4b88      	ldr	r3, [pc, #544]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x2d0>
 8002c1e:	e000      	b.n	8002c22 <HAL_RCC_OscConfig+0x2f2>
 8002c20:	bf00      	nop
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d060      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x3c0>
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_OscConfig+0x310>
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	2b0c      	cmp	r3, #12
 8002c38:	d119      	bne.n	8002c6e <HAL_RCC_OscConfig+0x33e>
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d116      	bne.n	8002c6e <HAL_RCC_OscConfig+0x33e>
 8002c40:	4b7c      	ldr	r3, [pc, #496]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_RCC_OscConfig+0x328>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_OscConfig+0x328>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e27d      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002c58:	4b76      	ldr	r3, [pc, #472]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	061b      	lsls	r3, r3, #24
 8002c66:	4973      	ldr	r1, [pc, #460]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
 8002c6c:	e040      	b.n	8002cf0 <HAL_RCC_OscConfig+0x3c0>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d023      	beq.n	8002cbe <HAL_RCC_OscConfig+0x38e>
 8002c76:	4b6f      	ldr	r3, [pc, #444]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a6e      	ldr	r2, [pc, #440]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	f7fe fa0f 	bl	80010a4 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x36c>
 8002c8a:	f7fe fa0b 	bl	80010a4 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x36c>
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e25b      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002c9c:	4b65      	ldr	r3, [pc, #404]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x35a>
 8002ca8:	4b62      	ldr	r3, [pc, #392]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	061b      	lsls	r3, r3, #24
 8002cb6:	495f      	ldr	r1, [pc, #380]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
 8002cbc:	e018      	b.n	8002cf0 <HAL_RCC_OscConfig+0x3c0>
 8002cbe:	4b5d      	ldr	r3, [pc, #372]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a5c      	ldr	r2, [pc, #368]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002cc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	f7fe f9eb 	bl	80010a4 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x3b4>
 8002cd2:	f7fe f9e7 	bl	80010a4 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x3b4>
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e237      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002ce4:	4b53      	ldr	r3, [pc, #332]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f0      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x3a2>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d03c      	beq.n	8002d76 <HAL_RCC_OscConfig+0x446>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d01c      	beq.n	8002d3e <HAL_RCC_OscConfig+0x40e>
 8002d04:	4b4b      	ldr	r3, [pc, #300]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d0a:	4a4a      	ldr	r2, [pc, #296]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002d0c:	f043 0301 	orr.w	r3, r3, #1
 8002d10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002d14:	f7fe f9c6 	bl	80010a4 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x3fe>
 8002d1c:	f7fe f9c2 	bl	80010a4 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x3fe>
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e212      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002d2e:	4b41      	ldr	r3, [pc, #260]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0ef      	beq.n	8002d1c <HAL_RCC_OscConfig+0x3ec>
 8002d3c:	e01b      	b.n	8002d76 <HAL_RCC_OscConfig+0x446>
 8002d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d44:	4a3b      	ldr	r2, [pc, #236]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002d4e:	f7fe f9a9 	bl	80010a4 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x438>
 8002d56:	f7fe f9a5 	bl	80010a4 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x438>
 8002d64:	2303      	movs	r3, #3
 8002d66:	e1f5      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002d68:	4b32      	ldr	r3, [pc, #200]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1ef      	bne.n	8002d56 <HAL_RCC_OscConfig+0x426>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	f000 80a6 	beq.w	8002ed0 <HAL_RCC_OscConfig+0x5a0>
 8002d84:	2300      	movs	r3, #0
 8002d86:	77fb      	strb	r3, [r7, #31]
 8002d88:	4b2a      	ldr	r3, [pc, #168]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10d      	bne.n	8002db0 <HAL_RCC_OscConfig+0x480>
 8002d94:	4b27      	ldr	r3, [pc, #156]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d98:	4a26      	ldr	r2, [pc, #152]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002da0:	4b24      	ldr	r3, [pc, #144]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2301      	movs	r3, #1
 8002dae:	77fb      	strb	r3, [r7, #31]
 8002db0:	4b21      	ldr	r3, [pc, #132]	@ (8002e38 <HAL_RCC_OscConfig+0x508>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d118      	bne.n	8002dee <HAL_RCC_OscConfig+0x4be>
 8002dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8002e38 <HAL_RCC_OscConfig+0x508>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e38 <HAL_RCC_OscConfig+0x508>)
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	f7fe f96c 	bl	80010a4 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x4b2>
 8002dd0:	f7fe f968 	bl	80010a4 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x4b2>
 8002dde:	2303      	movs	r3, #3
 8002de0:	e1b8      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002de2:	4b15      	ldr	r3, [pc, #84]	@ (8002e38 <HAL_RCC_OscConfig+0x508>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x4a0>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d108      	bne.n	8002e08 <HAL_RCC_OscConfig+0x4d8>
 8002df6:	4b0f      	ldr	r3, [pc, #60]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e06:	e029      	b.n	8002e5c <HAL_RCC_OscConfig+0x52c>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b05      	cmp	r3, #5
 8002e0e:	d115      	bne.n	8002e3c <HAL_RCC_OscConfig+0x50c>
 8002e10:	4b08      	ldr	r3, [pc, #32]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e16:	4a07      	ldr	r2, [pc, #28]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002e18:	f043 0304 	orr.w	r3, r3, #4
 8002e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e20:	4b04      	ldr	r3, [pc, #16]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e26:	4a03      	ldr	r2, [pc, #12]	@ (8002e34 <HAL_RCC_OscConfig+0x504>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e30:	e014      	b.n	8002e5c <HAL_RCC_OscConfig+0x52c>
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40007000 	.word	0x40007000
 8002e3c:	4b9d      	ldr	r3, [pc, #628]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e42:	4a9c      	ldr	r2, [pc, #624]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002e44:	f023 0301 	bic.w	r3, r3, #1
 8002e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e4c:	4b99      	ldr	r3, [pc, #612]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e52:	4a98      	ldr	r2, [pc, #608]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002e54:	f023 0304 	bic.w	r3, r3, #4
 8002e58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d016      	beq.n	8002e92 <HAL_RCC_OscConfig+0x562>
 8002e64:	f7fe f91e 	bl	80010a4 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_OscConfig+0x552>
 8002e6c:	f7fe f91a 	bl	80010a4 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x552>
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e168      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002e82:	4b8c      	ldr	r3, [pc, #560]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0ed      	beq.n	8002e6c <HAL_RCC_OscConfig+0x53c>
 8002e90:	e015      	b.n	8002ebe <HAL_RCC_OscConfig+0x58e>
 8002e92:	f7fe f907 	bl	80010a4 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x580>
 8002e9a:	f7fe f903 	bl	80010a4 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x580>
 8002eac:	2303      	movs	r3, #3
 8002eae:	e151      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002eb0:	4b80      	ldr	r3, [pc, #512]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1ed      	bne.n	8002e9a <HAL_RCC_OscConfig+0x56a>
 8002ebe:	7ffb      	ldrb	r3, [r7, #31]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d105      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x5a0>
 8002ec4:	4b7b      	ldr	r3, [pc, #492]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec8:	4a7a      	ldr	r2, [pc, #488]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002eca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d03c      	beq.n	8002f56 <HAL_RCC_OscConfig+0x626>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01c      	beq.n	8002f1e <HAL_RCC_OscConfig+0x5ee>
 8002ee4:	4b73      	ldr	r3, [pc, #460]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002eea:	4a72      	ldr	r2, [pc, #456]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8002ef4:	f7fe f8d6 	bl	80010a4 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x5de>
 8002efc:	f7fe f8d2 	bl	80010a4 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x5de>
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e122      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002f0e:	4b69      	ldr	r3, [pc, #420]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0ef      	beq.n	8002efc <HAL_RCC_OscConfig+0x5cc>
 8002f1c:	e01b      	b.n	8002f56 <HAL_RCC_OscConfig+0x626>
 8002f1e:	4b65      	ldr	r3, [pc, #404]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002f20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f24:	4a63      	ldr	r2, [pc, #396]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002f26:	f023 0301 	bic.w	r3, r3, #1
 8002f2a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
 8002f2e:	f7fe f8b9 	bl	80010a4 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x618>
 8002f36:	f7fe f8b5 	bl	80010a4 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x618>
 8002f44:	2303      	movs	r3, #3
 8002f46:	e105      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002f48:	4b5a      	ldr	r3, [pc, #360]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002f4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1ef      	bne.n	8002f36 <HAL_RCC_OscConfig+0x606>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80f9 	beq.w	8003152 <HAL_RCC_OscConfig+0x822>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	f040 80cf 	bne.w	8003108 <HAL_RCC_OscConfig+0x7d8>
 8002f6a:	4b52      	ldr	r3, [pc, #328]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f003 0203 	and.w	r2, r3, #3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d12c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x6a8>
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d123      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x6a8>
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d11b      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x6a8>
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002faa:	06db      	lsls	r3, r3, #27
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d113      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x6a8>
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	055b      	lsls	r3, r3, #21
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d109      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x6a8>
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	065b      	lsls	r3, r3, #25
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d071      	beq.n	80030bc <HAL_RCC_OscConfig+0x78c>
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2b0c      	cmp	r3, #12
 8002fdc:	d068      	beq.n	80030b0 <HAL_RCC_OscConfig+0x780>
 8002fde:	4b35      	ldr	r3, [pc, #212]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d105      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x6c6>
 8002fea:	4b32      	ldr	r3, [pc, #200]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_OscConfig+0x6ca>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0ac      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8002ffa:	4b2e      	ldr	r3, [pc, #184]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a2d      	ldr	r2, [pc, #180]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8003000:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	f7fe f84d 	bl	80010a4 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x6f0>
 800300e:	f7fe f849 	bl	80010a4 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x6f0>
 800301c:	2303      	movs	r3, #3
 800301e:	e099      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8003020:	4b24      	ldr	r3, [pc, #144]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f0      	bne.n	800300e <HAL_RCC_OscConfig+0x6de>
 800302c:	4b21      	ldr	r3, [pc, #132]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	4b21      	ldr	r3, [pc, #132]	@ (80030b8 <HAL_RCC_OscConfig+0x788>)
 8003032:	4013      	ands	r3, r2
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800303c:	3a01      	subs	r2, #1
 800303e:	0112      	lsls	r2, r2, #4
 8003040:	4311      	orrs	r1, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003046:	0212      	lsls	r2, r2, #8
 8003048:	4311      	orrs	r1, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800304e:	0852      	lsrs	r2, r2, #1
 8003050:	3a01      	subs	r2, #1
 8003052:	0552      	lsls	r2, r2, #21
 8003054:	4311      	orrs	r1, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800305a:	0852      	lsrs	r2, r2, #1
 800305c:	3a01      	subs	r2, #1
 800305e:	0652      	lsls	r2, r2, #25
 8003060:	4311      	orrs	r1, r2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003066:	06d2      	lsls	r2, r2, #27
 8003068:	430a      	orrs	r2, r1
 800306a:	4912      	ldr	r1, [pc, #72]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 800306c:	4313      	orrs	r3, r2
 800306e:	60cb      	str	r3, [r1, #12]
 8003070:	4b10      	ldr	r3, [pc, #64]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a0f      	ldr	r2, [pc, #60]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8003076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	4b0d      	ldr	r3, [pc, #52]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4a0c      	ldr	r2, [pc, #48]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 8003082:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003086:	60d3      	str	r3, [r2, #12]
 8003088:	f7fe f80c 	bl	80010a4 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x772>
 8003090:	f7fe f808 	bl	80010a4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x772>
 800309e:	2303      	movs	r3, #3
 80030a0:	e058      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 80030a2:	4b04      	ldr	r3, [pc, #16]	@ (80030b4 <HAL_RCC_OscConfig+0x784>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0f0      	beq.n	8003090 <HAL_RCC_OscConfig+0x760>
 80030ae:	e050      	b.n	8003152 <HAL_RCC_OscConfig+0x822>
 80030b0:	2301      	movs	r3, #1
 80030b2:	e04f      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 80030b4:	40021000 	.word	0x40021000
 80030b8:	019d808c 	.word	0x019d808c
 80030bc:	4b27      	ldr	r3, [pc, #156]	@ (800315c <HAL_RCC_OscConfig+0x82c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d144      	bne.n	8003152 <HAL_RCC_OscConfig+0x822>
 80030c8:	4b24      	ldr	r3, [pc, #144]	@ (800315c <HAL_RCC_OscConfig+0x82c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a23      	ldr	r2, [pc, #140]	@ (800315c <HAL_RCC_OscConfig+0x82c>)
 80030ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b21      	ldr	r3, [pc, #132]	@ (800315c <HAL_RCC_OscConfig+0x82c>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4a20      	ldr	r2, [pc, #128]	@ (800315c <HAL_RCC_OscConfig+0x82c>)
 80030da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030de:	60d3      	str	r3, [r2, #12]
 80030e0:	f7fd ffe0 	bl	80010a4 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x7ca>
 80030e8:	f7fd ffdc 	bl	80010a4 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x7ca>
 80030f6:	2303      	movs	r3, #3
 80030f8:	e02c      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 80030fa:	4b18      	ldr	r3, [pc, #96]	@ (800315c <HAL_RCC_OscConfig+0x82c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0x7b8>
 8003106:	e024      	b.n	8003152 <HAL_RCC_OscConfig+0x822>
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d01f      	beq.n	800314e <HAL_RCC_OscConfig+0x81e>
 800310e:	4b13      	ldr	r3, [pc, #76]	@ (800315c <HAL_RCC_OscConfig+0x82c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a12      	ldr	r2, [pc, #72]	@ (800315c <HAL_RCC_OscConfig+0x82c>)
 8003114:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	f7fd ffc3 	bl	80010a4 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x804>
 8003122:	f7fd ffbf 	bl	80010a4 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x804>
 8003130:	2303      	movs	r3, #3
 8003132:	e00f      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8003134:	4b09      	ldr	r3, [pc, #36]	@ (800315c <HAL_RCC_OscConfig+0x82c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f0      	bne.n	8003122 <HAL_RCC_OscConfig+0x7f2>
 8003140:	4b06      	ldr	r3, [pc, #24]	@ (800315c <HAL_RCC_OscConfig+0x82c>)
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	4905      	ldr	r1, [pc, #20]	@ (800315c <HAL_RCC_OscConfig+0x82c>)
 8003146:	4b06      	ldr	r3, [pc, #24]	@ (8003160 <HAL_RCC_OscConfig+0x830>)
 8003148:	4013      	ands	r3, r2
 800314a:	60cb      	str	r3, [r1, #12]
 800314c:	e001      	b.n	8003152 <HAL_RCC_OscConfig+0x822>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_RCC_OscConfig+0x824>
 8003152:	2300      	movs	r3, #0
 8003154:	4618      	mov	r0, r3
 8003156:	3720      	adds	r7, #32
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40021000 	.word	0x40021000
 8003160:	feeefffc 	.word	0xfeeefffc

08003164 <HAL_RCC_ClockConfig>:
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_ClockConfig+0x14>
 8003174:	2301      	movs	r3, #1
 8003176:	e0e7      	b.n	8003348 <HAL_RCC_ClockConfig+0x1e4>
 8003178:	4b75      	ldr	r3, [pc, #468]	@ (8003350 <HAL_RCC_ClockConfig+0x1ec>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d910      	bls.n	80031a8 <HAL_RCC_ClockConfig+0x44>
 8003186:	4b72      	ldr	r3, [pc, #456]	@ (8003350 <HAL_RCC_ClockConfig+0x1ec>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f023 0207 	bic.w	r2, r3, #7
 800318e:	4970      	ldr	r1, [pc, #448]	@ (8003350 <HAL_RCC_ClockConfig+0x1ec>)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]
 8003196:	4b6e      	ldr	r3, [pc, #440]	@ (8003350 <HAL_RCC_ClockConfig+0x1ec>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x44>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0cf      	b.n	8003348 <HAL_RCC_ClockConfig+0x1e4>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d010      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x72>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	4b66      	ldr	r3, [pc, #408]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d908      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x72>
 80031c4:	4b63      	ldr	r3, [pc, #396]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4960      	ldr	r1, [pc, #384]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d04c      	beq.n	800327c <HAL_RCC_ClockConfig+0x118>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d107      	bne.n	80031fa <HAL_RCC_ClockConfig+0x96>
 80031ea:	4b5a      	ldr	r3, [pc, #360]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d121      	bne.n	800323a <HAL_RCC_ClockConfig+0xd6>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e0a6      	b.n	8003348 <HAL_RCC_ClockConfig+0x1e4>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d107      	bne.n	8003212 <HAL_RCC_ClockConfig+0xae>
 8003202:	4b54      	ldr	r3, [pc, #336]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d115      	bne.n	800323a <HAL_RCC_ClockConfig+0xd6>
 800320e:	2301      	movs	r3, #1
 8003210:	e09a      	b.n	8003348 <HAL_RCC_ClockConfig+0x1e4>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xc6>
 800321a:	4b4e      	ldr	r3, [pc, #312]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <HAL_RCC_ClockConfig+0xd6>
 8003226:	2301      	movs	r3, #1
 8003228:	e08e      	b.n	8003348 <HAL_RCC_ClockConfig+0x1e4>
 800322a:	4b4a      	ldr	r3, [pc, #296]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_ClockConfig+0xd6>
 8003236:	2301      	movs	r3, #1
 8003238:	e086      	b.n	8003348 <HAL_RCC_ClockConfig+0x1e4>
 800323a:	4b46      	ldr	r3, [pc, #280]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f023 0203 	bic.w	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4943      	ldr	r1, [pc, #268]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 8003248:	4313      	orrs	r3, r2
 800324a:	608b      	str	r3, [r1, #8]
 800324c:	f7fd ff2a 	bl	80010a4 <HAL_GetTick>
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	e00a      	b.n	800326a <HAL_RCC_ClockConfig+0x106>
 8003254:	f7fd ff26 	bl	80010a4 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003262:	4293      	cmp	r3, r2
 8003264:	d901      	bls.n	800326a <HAL_RCC_ClockConfig+0x106>
 8003266:	2303      	movs	r3, #3
 8003268:	e06e      	b.n	8003348 <HAL_RCC_ClockConfig+0x1e4>
 800326a:	4b3a      	ldr	r3, [pc, #232]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 020c 	and.w	r2, r3, #12
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	429a      	cmp	r2, r3
 800327a:	d1eb      	bne.n	8003254 <HAL_RCC_ClockConfig+0xf0>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <HAL_RCC_ClockConfig+0x146>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	4b31      	ldr	r3, [pc, #196]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003294:	429a      	cmp	r2, r3
 8003296:	d208      	bcs.n	80032aa <HAL_RCC_ClockConfig+0x146>
 8003298:	4b2e      	ldr	r3, [pc, #184]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	492b      	ldr	r1, [pc, #172]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
 80032aa:	4b29      	ldr	r3, [pc, #164]	@ (8003350 <HAL_RCC_ClockConfig+0x1ec>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d210      	bcs.n	80032da <HAL_RCC_ClockConfig+0x176>
 80032b8:	4b25      	ldr	r3, [pc, #148]	@ (8003350 <HAL_RCC_ClockConfig+0x1ec>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f023 0207 	bic.w	r2, r3, #7
 80032c0:	4923      	ldr	r1, [pc, #140]	@ (8003350 <HAL_RCC_ClockConfig+0x1ec>)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	600b      	str	r3, [r1, #0]
 80032c8:	4b21      	ldr	r3, [pc, #132]	@ (8003350 <HAL_RCC_ClockConfig+0x1ec>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d001      	beq.n	80032da <HAL_RCC_ClockConfig+0x176>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e036      	b.n	8003348 <HAL_RCC_ClockConfig+0x1e4>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0304 	and.w	r3, r3, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x194>
 80032e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	4918      	ldr	r1, [pc, #96]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d009      	beq.n	8003318 <HAL_RCC_ClockConfig+0x1b4>
 8003304:	4b13      	ldr	r3, [pc, #76]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	4910      	ldr	r1, [pc, #64]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 8003314:	4313      	orrs	r3, r2
 8003316:	608b      	str	r3, [r1, #8]
 8003318:	f000 f824 	bl	8003364 <HAL_RCC_GetSysClockFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b0d      	ldr	r3, [pc, #52]	@ (8003354 <HAL_RCC_ClockConfig+0x1f0>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	490b      	ldr	r1, [pc, #44]	@ (8003358 <HAL_RCC_ClockConfig+0x1f4>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
 8003334:	4a09      	ldr	r2, [pc, #36]	@ (800335c <HAL_RCC_ClockConfig+0x1f8>)
 8003336:	6013      	str	r3, [r2, #0]
 8003338:	4b09      	ldr	r3, [pc, #36]	@ (8003360 <HAL_RCC_ClockConfig+0x1fc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7fd fd89 	bl	8000e54 <HAL_InitTick>
 8003342:	4603      	mov	r3, r0
 8003344:	72fb      	strb	r3, [r7, #11]
 8003346:	7afb      	ldrb	r3, [r7, #11]
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40022000 	.word	0x40022000
 8003354:	40021000 	.word	0x40021000
 8003358:	080073b0 	.word	0x080073b0
 800335c:	20000000 	.word	0x20000000
 8003360:	20000004 	.word	0x20000004

08003364 <HAL_RCC_GetSysClockFreq>:
 8003364:	b480      	push	{r7}
 8003366:	b089      	sub	sp, #36	@ 0x24
 8003368:	af00      	add	r7, sp, #0
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	2300      	movs	r3, #0
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	4b3e      	ldr	r3, [pc, #248]	@ (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	4b3b      	ldr	r3, [pc, #236]	@ (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x34>
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	2b0c      	cmp	r3, #12
 8003390:	d121      	bne.n	80033d6 <HAL_RCC_GetSysClockFreq+0x72>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d11e      	bne.n	80033d6 <HAL_RCC_GetSysClockFreq+0x72>
 8003398:	4b34      	ldr	r3, [pc, #208]	@ (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0308 	and.w	r3, r3, #8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d107      	bne.n	80033b4 <HAL_RCC_GetSysClockFreq+0x50>
 80033a4:	4b31      	ldr	r3, [pc, #196]	@ (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 80033a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	e005      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x5c>
 80033b4:	4b2d      	ldr	r3, [pc, #180]	@ (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003470 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10d      	bne.n	80033ec <HAL_RCC_GetSysClockFreq+0x88>
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x88>
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d102      	bne.n	80033e2 <HAL_RCC_GetSysClockFreq+0x7e>
 80033dc:	4b25      	ldr	r3, [pc, #148]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x110>)
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	e004      	b.n	80033ec <HAL_RCC_GetSysClockFreq+0x88>
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_GetSysClockFreq+0x88>
 80033e8:	4b23      	ldr	r3, [pc, #140]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x114>)
 80033ea:	61bb      	str	r3, [r7, #24]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d134      	bne.n	800345c <HAL_RCC_GetSysClockFreq+0xf8>
 80033f2:	4b1e      	ldr	r3, [pc, #120]	@ (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	60bb      	str	r3, [r7, #8]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d003      	beq.n	800340a <HAL_RCC_GetSysClockFreq+0xa6>
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d003      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0xac>
 8003408:	e005      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0xb2>
 800340a:	4b1a      	ldr	r3, [pc, #104]	@ (8003474 <HAL_RCC_GetSysClockFreq+0x110>)
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	e005      	b.n	800341c <HAL_RCC_GetSysClockFreq+0xb8>
 8003410:	4b19      	ldr	r3, [pc, #100]	@ (8003478 <HAL_RCC_GetSysClockFreq+0x114>)
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	e002      	b.n	800341c <HAL_RCC_GetSysClockFreq+0xb8>
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	bf00      	nop
 800341c:	4b13      	ldr	r3, [pc, #76]	@ (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	3301      	adds	r3, #1
 8003428:	607b      	str	r3, [r7, #4]
 800342a:	4b10      	ldr	r3, [pc, #64]	@ (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	fb03 f202 	mul.w	r2, r3, r2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	4b0a      	ldr	r3, [pc, #40]	@ (800346c <HAL_RCC_GetSysClockFreq+0x108>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	0e5b      	lsrs	r3, r3, #25
 8003448:	f003 0303 	and.w	r3, r3, #3
 800344c:	3301      	adds	r3, #1
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	603b      	str	r3, [r7, #0]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	fbb2 f3f3 	udiv	r3, r2, r3
 800345a:	61bb      	str	r3, [r7, #24]
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	4618      	mov	r0, r3
 8003460:	3724      	adds	r7, #36	@ 0x24
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000
 8003470:	080073c8 	.word	0x080073c8
 8003474:	00f42400 	.word	0x00f42400
 8003478:	007a1200 	.word	0x007a1200

0800347c <HAL_RCC_GetHCLKFreq>:
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
 8003480:	4b03      	ldr	r3, [pc, #12]	@ (8003490 <HAL_RCC_GetHCLKFreq+0x14>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	20000000 	.word	0x20000000

08003494 <HAL_RCC_GetPCLK1Freq>:
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
 8003498:	f7ff fff0 	bl	800347c <HAL_RCC_GetHCLKFreq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	4904      	ldr	r1, [pc, #16]	@ (80034bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80034aa:	5ccb      	ldrb	r3, [r1, r3]
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
 80034b4:	4618      	mov	r0, r3
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40021000 	.word	0x40021000
 80034bc:	080073c0 	.word	0x080073c0

080034c0 <HAL_RCC_GetClockConfig>:
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	220f      	movs	r2, #15
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	4b12      	ldr	r3, [pc, #72]	@ (800351c <HAL_RCC_GetClockConfig+0x5c>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 0203 	and.w	r2, r3, #3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	605a      	str	r2, [r3, #4]
 80034dc:	4b0f      	ldr	r3, [pc, #60]	@ (800351c <HAL_RCC_GetClockConfig+0x5c>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	4b0c      	ldr	r3, [pc, #48]	@ (800351c <HAL_RCC_GetClockConfig+0x5c>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	60da      	str	r2, [r3, #12]
 80034f4:	4b09      	ldr	r3, [pc, #36]	@ (800351c <HAL_RCC_GetClockConfig+0x5c>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	08db      	lsrs	r3, r3, #3
 80034fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	611a      	str	r2, [r3, #16]
 8003502:	4b07      	ldr	r3, [pc, #28]	@ (8003520 <HAL_RCC_GetClockConfig+0x60>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0207 	and.w	r2, r3, #7
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	40022000 	.word	0x40022000

08003524 <RCC_SetFlashLatencyFromMSIRange>:
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	2300      	movs	r3, #0
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	4b2a      	ldr	r3, [pc, #168]	@ (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <RCC_SetFlashLatencyFromMSIRange+0x20>
 800353c:	f7ff f994 	bl	8002868 <HAL_PWREx_GetVoltageRange>
 8003540:	6178      	str	r0, [r7, #20]
 8003542:	e014      	b.n	800356e <RCC_SetFlashLatencyFromMSIRange+0x4a>
 8003544:	4b25      	ldr	r3, [pc, #148]	@ (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003548:	4a24      	ldr	r2, [pc, #144]	@ (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800354a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800354e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003550:	4b22      	ldr	r3, [pc, #136]	@ (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f7ff f984 	bl	8002868 <HAL_PWREx_GetVoltageRange>
 8003560:	6178      	str	r0, [r7, #20]
 8003562:	4b1e      	ldr	r3, [pc, #120]	@ (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003566:	4a1d      	ldr	r2, [pc, #116]	@ (80035dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003568:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800356c:	6593      	str	r3, [r2, #88]	@ 0x58
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003574:	d10b      	bne.n	800358e <RCC_SetFlashLatencyFromMSIRange+0x6a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b80      	cmp	r3, #128	@ 0x80
 800357a:	d919      	bls.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003580:	d902      	bls.n	8003588 <RCC_SetFlashLatencyFromMSIRange+0x64>
 8003582:	2302      	movs	r3, #2
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	e013      	b.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8003588:	2301      	movs	r3, #1
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	e010      	b.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b80      	cmp	r3, #128	@ 0x80
 8003592:	d902      	bls.n	800359a <RCC_SetFlashLatencyFromMSIRange+0x76>
 8003594:	2303      	movs	r3, #3
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	e00a      	b.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b80      	cmp	r3, #128	@ 0x80
 800359e:	d102      	bne.n	80035a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
 80035a0:	2302      	movs	r3, #2
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	e004      	b.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b70      	cmp	r3, #112	@ 0x70
 80035aa:	d101      	bne.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80035ac:	2301      	movs	r3, #1
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f023 0207 	bic.w	r2, r3, #7
 80035b8:	4909      	ldr	r1, [pc, #36]	@ (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	600b      	str	r3, [r1, #0]
 80035c0:	4b07      	ldr	r3, [pc, #28]	@ (80035e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d001      	beq.n	80035d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 80035d2:	2300      	movs	r3, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000
 80035e0:	40022000 	.word	0x40022000

080035e4 <HAL_RCCEx_PeriphCLKConfig>:
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	2300      	movs	r3, #0
 80035ee:	74fb      	strb	r3, [r7, #19]
 80035f0:	2300      	movs	r3, #0
 80035f2:	74bb      	strb	r3, [r7, #18]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d041      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003604:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003608:	d02a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800360a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800360e:	d824      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003610:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003614:	d008      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003616:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800361a:	d81e      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003620:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003624:	d010      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003626:	e018      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003628:	4b86      	ldr	r3, [pc, #536]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a85      	ldr	r2, [pc, #532]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003632:	60d3      	str	r3, [r2, #12]
 8003634:	e015      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f000 facd 	bl	8003bdc <RCCEx_PLLSAI1_Config>
 8003642:	4603      	mov	r3, r0
 8003644:	74fb      	strb	r3, [r7, #19]
 8003646:	e00c      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3320      	adds	r3, #32
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fbb6 	bl	8003dc0 <RCCEx_PLLSAI2_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	74fb      	strb	r3, [r7, #19]
 8003658:	e003      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800365a:	2301      	movs	r3, #1
 800365c:	74fb      	strb	r3, [r7, #19]
 800365e:	e000      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8003660:	bf00      	nop
 8003662:	7cfb      	ldrb	r3, [r7, #19]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8003668:	4b76      	ldr	r3, [pc, #472]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800366e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003676:	4973      	ldr	r1, [pc, #460]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003678:	4313      	orrs	r3, r2
 800367a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800367e:	e001      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	74bb      	strb	r3, [r7, #18]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d041      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003694:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003698:	d02a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800369a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800369e:	d824      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036a4:	d008      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036aa:	d81e      	bhi.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00a      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036b4:	d010      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036b6:	e018      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036b8:	4b62      	ldr	r3, [pc, #392]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a61      	ldr	r2, [pc, #388]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c2:	60d3      	str	r3, [r2, #12]
 80036c4:	e015      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fa85 	bl	8003bdc <RCCEx_PLLSAI1_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	74fb      	strb	r3, [r7, #19]
 80036d6:	e00c      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3320      	adds	r3, #32
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fb6e 	bl	8003dc0 <RCCEx_PLLSAI2_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	74fb      	strb	r3, [r7, #19]
 80036e8:	e003      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 80036ea:	2301      	movs	r3, #1
 80036ec:	74fb      	strb	r3, [r7, #19]
 80036ee:	e000      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 80036f0:	bf00      	nop
 80036f2:	7cfb      	ldrb	r3, [r7, #19]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80036f8:	4b52      	ldr	r3, [pc, #328]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003706:	494f      	ldr	r1, [pc, #316]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800370e:	e001      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003710:	7cfb      	ldrb	r3, [r7, #19]
 8003712:	74bb      	strb	r3, [r7, #18]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80a0 	beq.w	8003862 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8003722:	2300      	movs	r3, #0
 8003724:	747b      	strb	r3, [r7, #17]
 8003726:	4b47      	ldr	r3, [pc, #284]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003736:	2300      	movs	r3, #0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00d      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800373c:	4b41      	ldr	r3, [pc, #260]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800373e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003740:	4a40      	ldr	r2, [pc, #256]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003746:	6593      	str	r3, [r2, #88]	@ 0x58
 8003748:	4b3e      	ldr	r3, [pc, #248]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800374a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2301      	movs	r3, #1
 8003756:	747b      	strb	r3, [r7, #17]
 8003758:	4b3b      	ldr	r3, [pc, #236]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a3a      	ldr	r2, [pc, #232]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800375e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	f7fd fc9e 	bl	80010a4 <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	e009      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800376c:	f7fd fc9a 	bl	80010a4 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d902      	bls.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800377a:	2303      	movs	r3, #3
 800377c:	74fb      	strb	r3, [r7, #19]
 800377e:	e005      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003780:	4b31      	ldr	r3, [pc, #196]	@ (8003848 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ef      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x188>
 800378c:	7cfb      	ldrb	r3, [r7, #19]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d15c      	bne.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x268>
 8003792:	4b2c      	ldr	r3, [pc, #176]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003798:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d01f      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d019      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037b0:	4b24      	ldr	r3, [pc, #144]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	4b21      	ldr	r3, [pc, #132]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037c2:	4a20      	ldr	r2, [pc, #128]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037dc:	4a19      	ldr	r2, [pc, #100]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d016      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x238>
 80037ee:	f7fd fc59 	bl	80010a4 <HAL_GetTick>
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	e00b      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037f6:	f7fd fc55 	bl	80010a4 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003804:	4293      	cmp	r3, r2
 8003806:	d902      	bls.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003808:	2303      	movs	r3, #3
 800380a:	74fb      	strb	r3, [r7, #19]
 800380c:	e006      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800380e:	4b0d      	ldr	r3, [pc, #52]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0ec      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800381c:	7cfb      	ldrb	r3, [r7, #19]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10c      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x258>
 8003822:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003828:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003832:	4904      	ldr	r1, [pc, #16]	@ (8003844 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003834:	4313      	orrs	r3, r2
 8003836:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800383a:	e009      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800383c:	7cfb      	ldrb	r3, [r7, #19]
 800383e:	74bb      	strb	r3, [r7, #18]
 8003840:	e006      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000
 8003848:	40007000 	.word	0x40007000
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	74bb      	strb	r3, [r7, #18]
 8003850:	7c7b      	ldrb	r3, [r7, #17]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d105      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8003856:	4ba6      	ldr	r3, [pc, #664]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385a:	4aa5      	ldr	r2, [pc, #660]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800385c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003860:	6593      	str	r3, [r2, #88]	@ 0x58
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 800386e:	4ba0      	ldr	r3, [pc, #640]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003874:	f023 0203 	bic.w	r2, r3, #3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387c:	499c      	ldr	r1, [pc, #624]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00a      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003890:	4b97      	ldr	r3, [pc, #604]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003896:	f023 020c 	bic.w	r2, r3, #12
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389e:	4994      	ldr	r1, [pc, #592]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80038b2:	4b8f      	ldr	r3, [pc, #572]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c0:	498b      	ldr	r1, [pc, #556]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00a      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x306>
 80038d4:	4b86      	ldr	r3, [pc, #536]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e2:	4983      	ldr	r1, [pc, #524]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x328>
 80038f6:	4b7e      	ldr	r3, [pc, #504]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003904:	497a      	ldr	r1, [pc, #488]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00a      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003918:	4b75      	ldr	r3, [pc, #468]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003926:	4972      	ldr	r1, [pc, #456]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003928:	4313      	orrs	r3, r2
 800392a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800393a:	4b6d      	ldr	r3, [pc, #436]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003940:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003948:	4969      	ldr	r1, [pc, #420]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00a      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800395c:	4b64      	ldr	r3, [pc, #400]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003962:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800396a:	4961      	ldr	r1, [pc, #388]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800396c:	4313      	orrs	r3, r2
 800396e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800397e:	4b5c      	ldr	r3, [pc, #368]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003984:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800398c:	4958      	ldr	r1, [pc, #352]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80039a0:	4b53      	ldr	r3, [pc, #332]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ae:	4950      	ldr	r1, [pc, #320]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80039c2:	4b4b      	ldr	r3, [pc, #300]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d0:	4947      	ldr	r1, [pc, #284]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 80039e4:	4b42      	ldr	r3, [pc, #264]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039ea:	f023 0203 	bic.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f2:	493f      	ldr	r1, [pc, #252]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d028      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8003a06:	4b3a      	ldr	r3, [pc, #232]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a14:	4936      	ldr	r1, [pc, #216]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a24:	d106      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x450>
 8003a26:	4b32      	ldr	r3, [pc, #200]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	4a31      	ldr	r2, [pc, #196]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a30:	60d3      	str	r3, [r2, #12]
 8003a32:	e011      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3304      	adds	r3, #4
 8003a42:	2101      	movs	r1, #1
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 f8c9 	bl	8003bdc <RCCEx_PLLSAI1_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	74fb      	strb	r3, [r7, #19]
 8003a4e:	7cfb      	ldrb	r3, [r7, #19]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8003a54:	7cfb      	ldrb	r3, [r7, #19]
 8003a56:	74bb      	strb	r3, [r7, #18]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d028      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a64:	4b22      	ldr	r3, [pc, #136]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a72:	491f      	ldr	r1, [pc, #124]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003a82:	d106      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003a84:	4b1a      	ldr	r3, [pc, #104]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a19      	ldr	r2, [pc, #100]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a8e:	60d3      	str	r3, [r2, #12]
 8003a90:	e011      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a9a:	d10c      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f89a 	bl	8003bdc <RCCEx_PLLSAI1_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	74fb      	strb	r3, [r7, #19]
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ab2:	7cfb      	ldrb	r3, [r7, #19]
 8003ab4:	74bb      	strb	r3, [r7, #18]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d02a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ad0:	4907      	ldr	r1, [pc, #28]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003adc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ae0:	d108      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8003ae2:	4b03      	ldr	r3, [pc, #12]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	4a02      	ldr	r2, [pc, #8]	@ (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ae8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aec:	60d3      	str	r3, [r2, #12]
 8003aee:	e013      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003af0:	40021000 	.word	0x40021000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003af8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3304      	adds	r3, #4
 8003b02:	2101      	movs	r1, #1
 8003b04:	4618      	mov	r0, r3
 8003b06:	f000 f869 	bl	8003bdc <RCCEx_PLLSAI1_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	74fb      	strb	r3, [r7, #19]
 8003b0e:	7cfb      	ldrb	r3, [r7, #19]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003b14:	7cfb      	ldrb	r3, [r7, #19]
 8003b16:	74bb      	strb	r3, [r7, #18]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d02f      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 8003b24:	4b2c      	ldr	r3, [pc, #176]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b32:	4929      	ldr	r1, [pc, #164]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b42:	d10d      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3304      	adds	r3, #4
 8003b48:	2102      	movs	r1, #2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 f846 	bl	8003bdc <RCCEx_PLLSAI1_Config>
 8003b50:	4603      	mov	r3, r0
 8003b52:	74fb      	strb	r3, [r7, #19]
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d014      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 8003b5a:	7cfb      	ldrb	r3, [r7, #19]
 8003b5c:	74bb      	strb	r3, [r7, #18]
 8003b5e:	e011      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b68:	d10c      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3320      	adds	r3, #32
 8003b6e:	2102      	movs	r1, #2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 f925 	bl	8003dc0 <RCCEx_PLLSAI2_Config>
 8003b76:	4603      	mov	r3, r0
 8003b78:	74fb      	strb	r3, [r7, #19]
 8003b7a:	7cfb      	ldrb	r3, [r7, #19]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 8003b80:	7cfb      	ldrb	r3, [r7, #19]
 8003b82:	74bb      	strb	r3, [r7, #18]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00b      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003b90:	4b11      	ldr	r3, [pc, #68]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b96:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ba0:	490d      	ldr	r1, [pc, #52]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00b      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 8003bb4:	4b08      	ldr	r3, [pc, #32]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bc4:	4904      	ldr	r1, [pc, #16]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003bcc:	7cbb      	ldrb	r3, [r7, #18]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40021000 	.word	0x40021000

08003bdc <RCCEx_PLLSAI1_Config>:
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
 8003be6:	2300      	movs	r3, #0
 8003be8:	73fb      	strb	r3, [r7, #15]
 8003bea:	4b74      	ldr	r3, [pc, #464]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d018      	beq.n	8003c28 <RCCEx_PLLSAI1_Config+0x4c>
 8003bf6:	4b71      	ldr	r3, [pc, #452]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f003 0203 	and.w	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d10d      	bne.n	8003c22 <RCCEx_PLLSAI1_Config+0x46>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <RCCEx_PLLSAI1_Config+0x46>
 8003c0e:	4b6b      	ldr	r3, [pc, #428]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	091b      	lsrs	r3, r3, #4
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d047      	beq.n	8003cb2 <RCCEx_PLLSAI1_Config+0xd6>
 8003c22:	2301      	movs	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
 8003c26:	e044      	b.n	8003cb2 <RCCEx_PLLSAI1_Config+0xd6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d018      	beq.n	8003c62 <RCCEx_PLLSAI1_Config+0x86>
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d825      	bhi.n	8003c80 <RCCEx_PLLSAI1_Config+0xa4>
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d002      	beq.n	8003c3e <RCCEx_PLLSAI1_Config+0x62>
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d009      	beq.n	8003c50 <RCCEx_PLLSAI1_Config+0x74>
 8003c3c:	e020      	b.n	8003c80 <RCCEx_PLLSAI1_Config+0xa4>
 8003c3e:	4b5f      	ldr	r3, [pc, #380]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d11d      	bne.n	8003c86 <RCCEx_PLLSAI1_Config+0xaa>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
 8003c4e:	e01a      	b.n	8003c86 <RCCEx_PLLSAI1_Config+0xaa>
 8003c50:	4b5a      	ldr	r3, [pc, #360]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d116      	bne.n	8003c8a <RCCEx_PLLSAI1_Config+0xae>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
 8003c60:	e013      	b.n	8003c8a <RCCEx_PLLSAI1_Config+0xae>
 8003c62:	4b56      	ldr	r3, [pc, #344]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10f      	bne.n	8003c8e <RCCEx_PLLSAI1_Config+0xb2>
 8003c6e:	4b53      	ldr	r3, [pc, #332]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d109      	bne.n	8003c8e <RCCEx_PLLSAI1_Config+0xb2>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	73fb      	strb	r3, [r7, #15]
 8003c7e:	e006      	b.n	8003c8e <RCCEx_PLLSAI1_Config+0xb2>
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
 8003c84:	e004      	b.n	8003c90 <RCCEx_PLLSAI1_Config+0xb4>
 8003c86:	bf00      	nop
 8003c88:	e002      	b.n	8003c90 <RCCEx_PLLSAI1_Config+0xb4>
 8003c8a:	bf00      	nop
 8003c8c:	e000      	b.n	8003c90 <RCCEx_PLLSAI1_Config+0xb4>
 8003c8e:	bf00      	nop
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10d      	bne.n	8003cb2 <RCCEx_PLLSAI1_Config+0xd6>
 8003c96:	4b49      	ldr	r3, [pc, #292]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6819      	ldr	r1, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	430b      	orrs	r3, r1
 8003cac:	4943      	ldr	r1, [pc, #268]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60cb      	str	r3, [r1, #12]
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d17c      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0x1d6>
 8003cb8:	4b40      	ldr	r3, [pc, #256]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a3f      	ldr	r2, [pc, #252]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	f7fd f9ee 	bl	80010a4 <HAL_GetTick>
 8003cc8:	60b8      	str	r0, [r7, #8]
 8003cca:	e009      	b.n	8003ce0 <RCCEx_PLLSAI1_Config+0x104>
 8003ccc:	f7fd f9ea 	bl	80010a4 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d902      	bls.n	8003ce0 <RCCEx_PLLSAI1_Config+0x104>
 8003cda:	2303      	movs	r3, #3
 8003cdc:	73fb      	strb	r3, [r7, #15]
 8003cde:	e005      	b.n	8003cec <RCCEx_PLLSAI1_Config+0x110>
 8003ce0:	4b36      	ldr	r3, [pc, #216]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1ef      	bne.n	8003ccc <RCCEx_PLLSAI1_Config+0xf0>
 8003cec:	7bfb      	ldrb	r3, [r7, #15]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d15f      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0x1d6>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d110      	bne.n	8003d1a <RCCEx_PLLSAI1_Config+0x13e>
 8003cf8:	4b30      	ldr	r3, [pc, #192]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003d00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6892      	ldr	r2, [r2, #8]
 8003d08:	0211      	lsls	r1, r2, #8
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68d2      	ldr	r2, [r2, #12]
 8003d0e:	06d2      	lsls	r2, r2, #27
 8003d10:	430a      	orrs	r2, r1
 8003d12:	492a      	ldr	r1, [pc, #168]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	610b      	str	r3, [r1, #16]
 8003d18:	e027      	b.n	8003d6a <RCCEx_PLLSAI1_Config+0x18e>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d112      	bne.n	8003d46 <RCCEx_PLLSAI1_Config+0x16a>
 8003d20:	4b26      	ldr	r3, [pc, #152]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003d28:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	6892      	ldr	r2, [r2, #8]
 8003d30:	0211      	lsls	r1, r2, #8
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6912      	ldr	r2, [r2, #16]
 8003d36:	0852      	lsrs	r2, r2, #1
 8003d38:	3a01      	subs	r2, #1
 8003d3a:	0552      	lsls	r2, r2, #21
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	491f      	ldr	r1, [pc, #124]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	610b      	str	r3, [r1, #16]
 8003d44:	e011      	b.n	8003d6a <RCCEx_PLLSAI1_Config+0x18e>
 8003d46:	4b1d      	ldr	r3, [pc, #116]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003d4e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6892      	ldr	r2, [r2, #8]
 8003d56:	0211      	lsls	r1, r2, #8
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6952      	ldr	r2, [r2, #20]
 8003d5c:	0852      	lsrs	r2, r2, #1
 8003d5e:	3a01      	subs	r2, #1
 8003d60:	0652      	lsls	r2, r2, #25
 8003d62:	430a      	orrs	r2, r1
 8003d64:	4915      	ldr	r1, [pc, #84]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	610b      	str	r3, [r1, #16]
 8003d6a:	4b14      	ldr	r3, [pc, #80]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a13      	ldr	r2, [pc, #76]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	f7fd f995 	bl	80010a4 <HAL_GetTick>
 8003d7a:	60b8      	str	r0, [r7, #8]
 8003d7c:	e009      	b.n	8003d92 <RCCEx_PLLSAI1_Config+0x1b6>
 8003d7e:	f7fd f991 	bl	80010a4 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d902      	bls.n	8003d92 <RCCEx_PLLSAI1_Config+0x1b6>
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	73fb      	strb	r3, [r7, #15]
 8003d90:	e005      	b.n	8003d9e <RCCEx_PLLSAI1_Config+0x1c2>
 8003d92:	4b0a      	ldr	r3, [pc, #40]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0ef      	beq.n	8003d7e <RCCEx_PLLSAI1_Config+0x1a2>
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d106      	bne.n	8003db2 <RCCEx_PLLSAI1_Config+0x1d6>
 8003da4:	4b05      	ldr	r3, [pc, #20]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	4903      	ldr	r1, [pc, #12]	@ (8003dbc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	610b      	str	r3, [r1, #16]
 8003db2:	7bfb      	ldrb	r3, [r7, #15]
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40021000 	.word	0x40021000

08003dc0 <RCCEx_PLLSAI2_Config>:
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	73fb      	strb	r3, [r7, #15]
 8003dce:	4b69      	ldr	r3, [pc, #420]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d018      	beq.n	8003e0c <RCCEx_PLLSAI2_Config+0x4c>
 8003dda:	4b66      	ldr	r3, [pc, #408]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f003 0203 	and.w	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d10d      	bne.n	8003e06 <RCCEx_PLLSAI2_Config+0x46>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <RCCEx_PLLSAI2_Config+0x46>
 8003df2:	4b60      	ldr	r3, [pc, #384]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	091b      	lsrs	r3, r3, #4
 8003df8:	f003 0307 	and.w	r3, r3, #7
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d047      	beq.n	8003e96 <RCCEx_PLLSAI2_Config+0xd6>
 8003e06:	2301      	movs	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
 8003e0a:	e044      	b.n	8003e96 <RCCEx_PLLSAI2_Config+0xd6>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d018      	beq.n	8003e46 <RCCEx_PLLSAI2_Config+0x86>
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d825      	bhi.n	8003e64 <RCCEx_PLLSAI2_Config+0xa4>
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d002      	beq.n	8003e22 <RCCEx_PLLSAI2_Config+0x62>
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d009      	beq.n	8003e34 <RCCEx_PLLSAI2_Config+0x74>
 8003e20:	e020      	b.n	8003e64 <RCCEx_PLLSAI2_Config+0xa4>
 8003e22:	4b54      	ldr	r3, [pc, #336]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d11d      	bne.n	8003e6a <RCCEx_PLLSAI2_Config+0xaa>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	73fb      	strb	r3, [r7, #15]
 8003e32:	e01a      	b.n	8003e6a <RCCEx_PLLSAI2_Config+0xaa>
 8003e34:	4b4f      	ldr	r3, [pc, #316]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d116      	bne.n	8003e6e <RCCEx_PLLSAI2_Config+0xae>
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
 8003e44:	e013      	b.n	8003e6e <RCCEx_PLLSAI2_Config+0xae>
 8003e46:	4b4b      	ldr	r3, [pc, #300]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10f      	bne.n	8003e72 <RCCEx_PLLSAI2_Config+0xb2>
 8003e52:	4b48      	ldr	r3, [pc, #288]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <RCCEx_PLLSAI2_Config+0xb2>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
 8003e62:	e006      	b.n	8003e72 <RCCEx_PLLSAI2_Config+0xb2>
 8003e64:	2301      	movs	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
 8003e68:	e004      	b.n	8003e74 <RCCEx_PLLSAI2_Config+0xb4>
 8003e6a:	bf00      	nop
 8003e6c:	e002      	b.n	8003e74 <RCCEx_PLLSAI2_Config+0xb4>
 8003e6e:	bf00      	nop
 8003e70:	e000      	b.n	8003e74 <RCCEx_PLLSAI2_Config+0xb4>
 8003e72:	bf00      	nop
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10d      	bne.n	8003e96 <RCCEx_PLLSAI2_Config+0xd6>
 8003e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6819      	ldr	r1, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	4938      	ldr	r1, [pc, #224]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60cb      	str	r3, [r1, #12]
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d166      	bne.n	8003f6a <RCCEx_PLLSAI2_Config+0x1aa>
 8003e9c:	4b35      	ldr	r3, [pc, #212]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a34      	ldr	r2, [pc, #208]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ea2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	f7fd f8fc 	bl	80010a4 <HAL_GetTick>
 8003eac:	60b8      	str	r0, [r7, #8]
 8003eae:	e009      	b.n	8003ec4 <RCCEx_PLLSAI2_Config+0x104>
 8003eb0:	f7fd f8f8 	bl	80010a4 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d902      	bls.n	8003ec4 <RCCEx_PLLSAI2_Config+0x104>
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	73fb      	strb	r3, [r7, #15]
 8003ec2:	e005      	b.n	8003ed0 <RCCEx_PLLSAI2_Config+0x110>
 8003ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1ef      	bne.n	8003eb0 <RCCEx_PLLSAI2_Config+0xf0>
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d149      	bne.n	8003f6a <RCCEx_PLLSAI2_Config+0x1aa>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d110      	bne.n	8003efe <RCCEx_PLLSAI2_Config+0x13e>
 8003edc:	4b25      	ldr	r3, [pc, #148]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003ee4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6892      	ldr	r2, [r2, #8]
 8003eec:	0211      	lsls	r1, r2, #8
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	68d2      	ldr	r2, [r2, #12]
 8003ef2:	06d2      	lsls	r2, r2, #27
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	491f      	ldr	r1, [pc, #124]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	614b      	str	r3, [r1, #20]
 8003efc:	e011      	b.n	8003f22 <RCCEx_PLLSAI2_Config+0x162>
 8003efe:	4b1d      	ldr	r3, [pc, #116]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f06:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6892      	ldr	r2, [r2, #8]
 8003f0e:	0211      	lsls	r1, r2, #8
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6912      	ldr	r2, [r2, #16]
 8003f14:	0852      	lsrs	r2, r2, #1
 8003f16:	3a01      	subs	r2, #1
 8003f18:	0652      	lsls	r2, r2, #25
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	4915      	ldr	r1, [pc, #84]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	614b      	str	r3, [r1, #20]
 8003f22:	4b14      	ldr	r3, [pc, #80]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a13      	ldr	r2, [pc, #76]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	f7fd f8b9 	bl	80010a4 <HAL_GetTick>
 8003f32:	60b8      	str	r0, [r7, #8]
 8003f34:	e009      	b.n	8003f4a <RCCEx_PLLSAI2_Config+0x18a>
 8003f36:	f7fd f8b5 	bl	80010a4 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d902      	bls.n	8003f4a <RCCEx_PLLSAI2_Config+0x18a>
 8003f44:	2303      	movs	r3, #3
 8003f46:	73fb      	strb	r3, [r7, #15]
 8003f48:	e005      	b.n	8003f56 <RCCEx_PLLSAI2_Config+0x196>
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0ef      	beq.n	8003f36 <RCCEx_PLLSAI2_Config+0x176>
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d106      	bne.n	8003f6a <RCCEx_PLLSAI2_Config+0x1aa>
 8003f5c:	4b05      	ldr	r3, [pc, #20]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	4903      	ldr	r1, [pc, #12]	@ (8003f74 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	614b      	str	r3, [r1, #20]
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40021000 	.word	0x40021000

08003f78 <HAL_TIM_Base_Init>:
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_TIM_Base_Init+0x12>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e049      	b.n	800401e <HAL_TIM_Base_Init+0xa6>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_TIM_Base_Init+0x2c>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f841 	bl	8004026 <HAL_TIM_Base_MspInit>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f000 f9e0 	bl	800437c <TIM_Base_SetConfig>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800401c:	2300      	movs	r3, #0
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_TIM_Base_MspInit>:
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <HAL_TIM_Base_Start_IT>:
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	d001      	beq.n	8004054 <HAL_TIM_Base_Start_IT+0x18>
 8004050:	2301      	movs	r3, #1
 8004052:	e04f      	b.n	80040f4 <HAL_TIM_Base_Start_IT+0xb8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	60da      	str	r2, [r3, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a23      	ldr	r2, [pc, #140]	@ (8004100 <HAL_TIM_Base_Start_IT+0xc4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01d      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800407e:	d018      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1f      	ldr	r2, [pc, #124]	@ (8004104 <HAL_TIM_Base_Start_IT+0xc8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1e      	ldr	r2, [pc, #120]	@ (8004108 <HAL_TIM_Base_Start_IT+0xcc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1c      	ldr	r2, [pc, #112]	@ (800410c <HAL_TIM_Base_Start_IT+0xd0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004110 <HAL_TIM_Base_Start_IT+0xd4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_TIM_Base_Start_IT+0x76>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a19      	ldr	r2, [pc, #100]	@ (8004114 <HAL_TIM_Base_Start_IT+0xd8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d115      	bne.n	80040de <HAL_TIM_Base_Start_IT+0xa2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	4b17      	ldr	r3, [pc, #92]	@ (8004118 <HAL_TIM_Base_Start_IT+0xdc>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b06      	cmp	r3, #6
 80040c2:	d015      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0xb4>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ca:	d011      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0xb4>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	e008      	b.n	80040f0 <HAL_TIM_Base_Start_IT+0xb4>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0201 	orr.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e000      	b.n	80040f2 <HAL_TIM_Base_Start_IT+0xb6>
 80040f0:	bf00      	nop
 80040f2:	2300      	movs	r3, #0
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40000400 	.word	0x40000400
 8004108:	40000800 	.word	0x40000800
 800410c:	40000c00 	.word	0x40000c00
 8004110:	40013400 	.word	0x40013400
 8004114:	40014000 	.word	0x40014000
 8004118:	00010007 	.word	0x00010007

0800411c <HAL_TIM_IRQHandler>:
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	60bb      	str	r3, [r7, #8]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d020      	beq.n	8004180 <HAL_TIM_IRQHandler+0x64>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01b      	beq.n	8004180 <HAL_TIM_IRQHandler+0x64>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0202 	mvn.w	r2, #2
 8004150:	611a      	str	r2, [r3, #16]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	771a      	strb	r2, [r3, #28]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_TIM_IRQHandler+0x52>
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f8e9 	bl	800433e <HAL_TIM_IC_CaptureCallback>
 800416c:	e005      	b.n	800417a <HAL_TIM_IRQHandler+0x5e>
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f8db 	bl	800432a <HAL_TIM_OC_DelayElapsedCallback>
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f8ec 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	771a      	strb	r2, [r3, #28]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	d020      	beq.n	80041cc <HAL_TIM_IRQHandler+0xb0>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01b      	beq.n	80041cc <HAL_TIM_IRQHandler+0xb0>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0204 	mvn.w	r2, #4
 800419c:	611a      	str	r2, [r3, #16]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2202      	movs	r2, #2
 80041a2:	771a      	strb	r2, [r3, #28]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_TIM_IRQHandler+0x9e>
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f8c3 	bl	800433e <HAL_TIM_IC_CaptureCallback>
 80041b8:	e005      	b.n	80041c6 <HAL_TIM_IRQHandler+0xaa>
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f8b5 	bl	800432a <HAL_TIM_OC_DelayElapsedCallback>
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f8c6 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	771a      	strb	r2, [r3, #28]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d020      	beq.n	8004218 <HAL_TIM_IRQHandler+0xfc>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01b      	beq.n	8004218 <HAL_TIM_IRQHandler+0xfc>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0208 	mvn.w	r2, #8
 80041e8:	611a      	str	r2, [r3, #16]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2204      	movs	r2, #4
 80041ee:	771a      	strb	r2, [r3, #28]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_TIM_IRQHandler+0xea>
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f89d 	bl	800433e <HAL_TIM_IC_CaptureCallback>
 8004204:	e005      	b.n	8004212 <HAL_TIM_IRQHandler+0xf6>
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f88f 	bl	800432a <HAL_TIM_OC_DelayElapsedCallback>
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f8a0 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	771a      	strb	r2, [r3, #28]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f003 0310 	and.w	r3, r3, #16
 800421e:	2b00      	cmp	r3, #0
 8004220:	d020      	beq.n	8004264 <HAL_TIM_IRQHandler+0x148>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01b      	beq.n	8004264 <HAL_TIM_IRQHandler+0x148>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0210 	mvn.w	r2, #16
 8004234:	611a      	str	r2, [r3, #16]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2208      	movs	r2, #8
 800423a:	771a      	strb	r2, [r3, #28]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_TIM_IRQHandler+0x136>
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f877 	bl	800433e <HAL_TIM_IC_CaptureCallback>
 8004250:	e005      	b.n	800425e <HAL_TIM_IRQHandler+0x142>
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f869 	bl	800432a <HAL_TIM_OC_DelayElapsedCallback>
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 f87a 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	771a      	strb	r2, [r3, #28]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00c      	beq.n	8004288 <HAL_TIM_IRQHandler+0x16c>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	d007      	beq.n	8004288 <HAL_TIM_IRQHandler+0x16c>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0201 	mvn.w	r2, #1
 8004280:	611a      	str	r2, [r3, #16]
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fc fc3c 	bl	8000b00 <HAL_TIM_PeriodElapsedCallback>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428e:	2b00      	cmp	r3, #0
 8004290:	d104      	bne.n	800429c <HAL_TIM_IRQHandler+0x180>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00c      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x19a>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d007      	beq.n	80042b6 <HAL_TIM_IRQHandler+0x19a>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80042ae:	611a      	str	r2, [r3, #16]
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f913 	bl	80044dc <HAL_TIMEx_BreakCallback>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00c      	beq.n	80042da <HAL_TIM_IRQHandler+0x1be>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <HAL_TIM_IRQHandler+0x1be>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80042d2:	611a      	str	r2, [r3, #16]
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f90b 	bl	80044f0 <HAL_TIMEx_Break2Callback>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00c      	beq.n	80042fe <HAL_TIM_IRQHandler+0x1e2>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d007      	beq.n	80042fe <HAL_TIM_IRQHandler+0x1e2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042f6:	611a      	str	r2, [r3, #16]
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f834 	bl	8004366 <HAL_TIM_TriggerCallback>
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00c      	beq.n	8004322 <HAL_TIM_IRQHandler+0x206>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	d007      	beq.n	8004322 <HAL_TIM_IRQHandler+0x206>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f06f 0220 	mvn.w	r2, #32
 800431a:	611a      	str	r2, [r3, #16]
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f8d3 	bl	80044c8 <HAL_TIMEx_CommutCallback>
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_TIM_OC_DelayElapsedCallback>:
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_TIM_IC_CaptureCallback>:
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <HAL_TIM_TriggerCallback>:
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <TIM_Base_SetConfig>:
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a46      	ldr	r2, [pc, #280]	@ (80044a8 <TIM_Base_SetConfig+0x12c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d013      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800439a:	d00f      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a43      	ldr	r2, [pc, #268]	@ (80044ac <TIM_Base_SetConfig+0x130>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00b      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a42      	ldr	r2, [pc, #264]	@ (80044b0 <TIM_Base_SetConfig+0x134>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d007      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a41      	ldr	r2, [pc, #260]	@ (80044b4 <TIM_Base_SetConfig+0x138>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a40      	ldr	r2, [pc, #256]	@ (80044b8 <TIM_Base_SetConfig+0x13c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d108      	bne.n	80043ce <TIM_Base_SetConfig+0x52>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a35      	ldr	r2, [pc, #212]	@ (80044a8 <TIM_Base_SetConfig+0x12c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d01f      	beq.n	8004416 <TIM_Base_SetConfig+0x9a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043dc:	d01b      	beq.n	8004416 <TIM_Base_SetConfig+0x9a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a32      	ldr	r2, [pc, #200]	@ (80044ac <TIM_Base_SetConfig+0x130>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d017      	beq.n	8004416 <TIM_Base_SetConfig+0x9a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a31      	ldr	r2, [pc, #196]	@ (80044b0 <TIM_Base_SetConfig+0x134>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d013      	beq.n	8004416 <TIM_Base_SetConfig+0x9a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a30      	ldr	r2, [pc, #192]	@ (80044b4 <TIM_Base_SetConfig+0x138>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00f      	beq.n	8004416 <TIM_Base_SetConfig+0x9a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a2f      	ldr	r2, [pc, #188]	@ (80044b8 <TIM_Base_SetConfig+0x13c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00b      	beq.n	8004416 <TIM_Base_SetConfig+0x9a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a2e      	ldr	r2, [pc, #184]	@ (80044bc <TIM_Base_SetConfig+0x140>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d007      	beq.n	8004416 <TIM_Base_SetConfig+0x9a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a2d      	ldr	r2, [pc, #180]	@ (80044c0 <TIM_Base_SetConfig+0x144>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d003      	beq.n	8004416 <TIM_Base_SetConfig+0x9a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a2c      	ldr	r2, [pc, #176]	@ (80044c4 <TIM_Base_SetConfig+0x148>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d108      	bne.n	8004428 <TIM_Base_SetConfig+0xac>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	629a      	str	r2, [r3, #40]	@ 0x28
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a16      	ldr	r2, [pc, #88]	@ (80044a8 <TIM_Base_SetConfig+0x12c>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00f      	beq.n	8004474 <TIM_Base_SetConfig+0xf8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a18      	ldr	r2, [pc, #96]	@ (80044b8 <TIM_Base_SetConfig+0x13c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00b      	beq.n	8004474 <TIM_Base_SetConfig+0xf8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a17      	ldr	r2, [pc, #92]	@ (80044bc <TIM_Base_SetConfig+0x140>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d007      	beq.n	8004474 <TIM_Base_SetConfig+0xf8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a16      	ldr	r2, [pc, #88]	@ (80044c0 <TIM_Base_SetConfig+0x144>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_Base_SetConfig+0xf8>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a15      	ldr	r2, [pc, #84]	@ (80044c4 <TIM_Base_SetConfig+0x148>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d103      	bne.n	800447c <TIM_Base_SetConfig+0x100>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	631a      	str	r2, [r3, #48]	@ 0x30
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	615a      	str	r2, [r3, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d105      	bne.n	800449a <TIM_Base_SetConfig+0x11e>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f023 0201 	bic.w	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	611a      	str	r2, [r3, #16]
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40000800 	.word	0x40000800
 80044b4:	40000c00 	.word	0x40000c00
 80044b8:	40013400 	.word	0x40013400
 80044bc:	40014000 	.word	0x40014000
 80044c0:	40014400 	.word	0x40014400
 80044c4:	40014800 	.word	0x40014800

080044c8 <HAL_TIMEx_CommutCallback>:
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_TIMEx_BreakCallback>:
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIMEx_Break2Callback>:
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <__NVIC_SetPriority>:
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	6039      	str	r1, [r7, #0]
 800450e:	71fb      	strb	r3, [r7, #7]
 8004510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004514:	2b00      	cmp	r3, #0
 8004516:	db0a      	blt.n	800452e <__NVIC_SetPriority+0x2a>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	b2da      	uxtb	r2, r3
 800451c:	490c      	ldr	r1, [pc, #48]	@ (8004550 <__NVIC_SetPriority+0x4c>)
 800451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004522:	0112      	lsls	r2, r2, #4
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	440b      	add	r3, r1
 8004528:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 800452c:	e00a      	b.n	8004544 <__NVIC_SetPriority+0x40>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	b2da      	uxtb	r2, r3
 8004532:	4908      	ldr	r1, [pc, #32]	@ (8004554 <__NVIC_SetPriority+0x50>)
 8004534:	79fb      	ldrb	r3, [r7, #7]
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	3b04      	subs	r3, #4
 800453c:	0112      	lsls	r2, r2, #4
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	440b      	add	r3, r1
 8004542:	761a      	strb	r2, [r3, #24]
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	e000e100 	.word	0xe000e100
 8004554:	e000ed00 	.word	0xe000ed00

08004558 <SysTick_Handler>:
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
 800455c:	4b05      	ldr	r3, [pc, #20]	@ (8004574 <SysTick_Handler+0x1c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f001 fd46 	bl	8005ff0 <xTaskGetSchedulerState>
 8004564:	4603      	mov	r3, r0
 8004566:	2b01      	cmp	r3, #1
 8004568:	d001      	beq.n	800456e <SysTick_Handler+0x16>
 800456a:	f002 fb3d 	bl	8006be8 <xPortSysTickHandler>
 800456e:	bf00      	nop
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	e000e010 	.word	0xe000e010

08004578 <SVC_Setup>:
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
 800457c:	2100      	movs	r1, #0
 800457e:	f06f 0004 	mvn.w	r0, #4
 8004582:	f7ff ffbf 	bl	8004504 <__NVIC_SetPriority>
 8004586:	bf00      	nop
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <osKernelInitialize>:
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	f3ef 8305 	mrs	r3, IPSR
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <osKernelInitialize+0x1a>
 800459e:	f06f 0305 	mvn.w	r3, #5
 80045a2:	607b      	str	r3, [r7, #4]
 80045a4:	e00c      	b.n	80045c0 <osKernelInitialize+0x34>
 80045a6:	4b0a      	ldr	r3, [pc, #40]	@ (80045d0 <osKernelInitialize+0x44>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d105      	bne.n	80045ba <osKernelInitialize+0x2e>
 80045ae:	4b08      	ldr	r3, [pc, #32]	@ (80045d0 <osKernelInitialize+0x44>)
 80045b0:	2201      	movs	r2, #1
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	2300      	movs	r3, #0
 80045b6:	607b      	str	r3, [r7, #4]
 80045b8:	e002      	b.n	80045c0 <osKernelInitialize+0x34>
 80045ba:	f04f 33ff 	mov.w	r3, #4294967295
 80045be:	607b      	str	r3, [r7, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4618      	mov	r0, r3
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	200001ec 	.word	0x200001ec

080045d4 <osKernelStart>:
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	f3ef 8305 	mrs	r3, IPSR
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <osKernelStart+0x1a>
 80045e6:	f06f 0305 	mvn.w	r3, #5
 80045ea:	607b      	str	r3, [r7, #4]
 80045ec:	e010      	b.n	8004610 <osKernelStart+0x3c>
 80045ee:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <osKernelStart+0x48>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d109      	bne.n	800460a <osKernelStart+0x36>
 80045f6:	f7ff ffbf 	bl	8004578 <SVC_Setup>
 80045fa:	4b08      	ldr	r3, [pc, #32]	@ (800461c <osKernelStart+0x48>)
 80045fc:	2202      	movs	r2, #2
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	f001 f892 	bl	8005728 <vTaskStartScheduler>
 8004604:	2300      	movs	r3, #0
 8004606:	607b      	str	r3, [r7, #4]
 8004608:	e002      	b.n	8004610 <osKernelStart+0x3c>
 800460a:	f04f 33ff 	mov.w	r3, #4294967295
 800460e:	607b      	str	r3, [r7, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	200001ec 	.word	0x200001ec

08004620 <osThreadNew>:
 8004620:	b580      	push	{r7, lr}
 8004622:	b08e      	sub	sp, #56	@ 0x38
 8004624:	af04      	add	r7, sp, #16
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	2300      	movs	r3, #0
 800462e:	613b      	str	r3, [r7, #16]
 8004630:	f3ef 8305 	mrs	r3, IPSR
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d17e      	bne.n	800473a <osThreadNew+0x11a>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d07b      	beq.n	800473a <osThreadNew+0x11a>
 8004642:	2380      	movs	r3, #128	@ 0x80
 8004644:	623b      	str	r3, [r7, #32]
 8004646:	2318      	movs	r3, #24
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	2300      	movs	r3, #0
 800464c:	627b      	str	r3, [r7, #36]	@ 0x24
 800464e:	f04f 33ff 	mov.w	r3, #4294967295
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d045      	beq.n	80046e6 <osThreadNew+0xc6>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <osThreadNew+0x48>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	627b      	str	r3, [r7, #36]	@ 0x24
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <osThreadNew+0x56>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	61fb      	str	r3, [r7, #28]
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <osThreadNew+0x6e>
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	2b38      	cmp	r3, #56	@ 0x38
 8004680:	d805      	bhi.n	800468e <osThreadNew+0x6e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <osThreadNew+0x72>
 800468e:	2300      	movs	r3, #0
 8004690:	e054      	b.n	800473c <osThreadNew+0x11c>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <osThreadNew+0x82>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	089b      	lsrs	r3, r3, #2
 80046a0:	623b      	str	r3, [r7, #32]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00e      	beq.n	80046c8 <osThreadNew+0xa8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2ba7      	cmp	r3, #167	@ 0xa7
 80046b0:	d90a      	bls.n	80046c8 <osThreadNew+0xa8>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d006      	beq.n	80046c8 <osThreadNew+0xa8>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <osThreadNew+0xa8>
 80046c2:	2301      	movs	r3, #1
 80046c4:	61bb      	str	r3, [r7, #24]
 80046c6:	e010      	b.n	80046ea <osThreadNew+0xca>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10c      	bne.n	80046ea <osThreadNew+0xca>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d108      	bne.n	80046ea <osThreadNew+0xca>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <osThreadNew+0xca>
 80046e0:	2300      	movs	r3, #0
 80046e2:	61bb      	str	r3, [r7, #24]
 80046e4:	e001      	b.n	80046ea <osThreadNew+0xca>
 80046e6:	2300      	movs	r3, #0
 80046e8:	61bb      	str	r3, [r7, #24]
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d110      	bne.n	8004712 <osThreadNew+0xf2>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6892      	ldr	r2, [r2, #8]
 80046f8:	9202      	str	r2, [sp, #8]
 80046fa:	9301      	str	r3, [sp, #4]
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	6a3a      	ldr	r2, [r7, #32]
 8004704:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fe1a 	bl	8005340 <xTaskCreateStatic>
 800470c:	4603      	mov	r3, r0
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	e013      	b.n	800473a <osThreadNew+0x11a>
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d110      	bne.n	800473a <osThreadNew+0x11a>
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	b29a      	uxth	r2, r3
 800471c:	f107 0310 	add.w	r3, r7, #16
 8004720:	9301      	str	r3, [sp, #4]
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 fe68 	bl	8005400 <xTaskCreate>
 8004730:	4603      	mov	r3, r0
 8004732:	2b01      	cmp	r3, #1
 8004734:	d001      	beq.n	800473a <osThreadNew+0x11a>
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4618      	mov	r0, r3
 800473e:	3728      	adds	r7, #40	@ 0x28
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <osDelay>:
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	f3ef 8305 	mrs	r3, IPSR
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <osDelay+0x1c>
 8004758:	f06f 0305 	mvn.w	r3, #5
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	e007      	b.n	8004770 <osDelay+0x2c>
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <osDelay+0x2c>
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 ffa6 	bl	80056bc <vTaskDelay>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <vApplicationGetIdleTaskMemory>:
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a07      	ldr	r2, [pc, #28]	@ (80047a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	4a06      	ldr	r2, [pc, #24]	@ (80047ac <vApplicationGetIdleTaskMemory+0x30>)
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2280      	movs	r2, #128	@ 0x80
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	bf00      	nop
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	200001f0 	.word	0x200001f0
 80047ac:	20000298 	.word	0x20000298

080047b0 <vApplicationGetTimerTaskMemory>:
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	4a07      	ldr	r2, [pc, #28]	@ (80047dc <vApplicationGetTimerTaskMemory+0x2c>)
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	4a06      	ldr	r2, [pc, #24]	@ (80047e0 <vApplicationGetTimerTaskMemory+0x30>)
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	20000498 	.word	0x20000498
 80047e0:	20000540 	.word	0x20000540

080047e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f103 0208 	add.w	r2, r3, #8
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f04f 32ff 	mov.w	r2, #4294967295
 80047fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f103 0208 	add.w	r2, r3, #8
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f103 0208 	add.w	r2, r3, #8
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800483e:	b480      	push	{r7}
 8004840:	b085      	sub	sp, #20
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
 8004846:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489c:	d103      	bne.n	80048a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	e00c      	b.n	80048c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3308      	adds	r3, #8
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e002      	b.n	80048b4 <vListInsert+0x2e>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d2f6      	bcs.n	80048ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	601a      	str	r2, [r3, #0]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6892      	ldr	r2, [r2, #8]
 800490e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6852      	ldr	r2, [r2, #4]
 8004918:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	429a      	cmp	r2, r3
 8004922:	d103      	bne.n	800492c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	1e5a      	subs	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10b      	bne.n	8004978 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004972:	bf00      	nop
 8004974:	bf00      	nop
 8004976:	e7fd      	b.n	8004974 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004978:	f002 f8a6 	bl	8006ac8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004984:	68f9      	ldr	r1, [r7, #12]
 8004986:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	441a      	add	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a8:	3b01      	subs	r3, #1
 80049aa:	68f9      	ldr	r1, [r7, #12]
 80049ac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049ae:	fb01 f303 	mul.w	r3, r1, r3
 80049b2:	441a      	add	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	22ff      	movs	r2, #255	@ 0xff
 80049bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	22ff      	movs	r2, #255	@ 0xff
 80049c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d114      	bne.n	80049f8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01a      	beq.n	8004a0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3310      	adds	r3, #16
 80049da:	4618      	mov	r0, r3
 80049dc:	f001 f942 	bl	8005c64 <xTaskRemoveFromEventList>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d012      	beq.n	8004a0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049e6:	4b0d      	ldr	r3, [pc, #52]	@ (8004a1c <xQueueGenericReset+0xd0>)
 80049e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	e009      	b.n	8004a0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	3310      	adds	r3, #16
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fef1 	bl	80047e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3324      	adds	r3, #36	@ 0x24
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff feec 	bl	80047e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a0c:	f002 f88e 	bl	8006b2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a10:	2301      	movs	r3, #1
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	e000ed04 	.word	0xe000ed04

08004a20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08e      	sub	sp, #56	@ 0x38
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10b      	bne.n	8004a4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a46:	bf00      	nop
 8004a48:	bf00      	nop
 8004a4a:	e7fd      	b.n	8004a48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10b      	bne.n	8004a6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop
 8004a68:	e7fd      	b.n	8004a66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d002      	beq.n	8004a76 <xQueueGenericCreateStatic+0x56>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <xQueueGenericCreateStatic+0x5a>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <xQueueGenericCreateStatic+0x5c>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10b      	bne.n	8004a98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	623b      	str	r3, [r7, #32]
}
 8004a92:	bf00      	nop
 8004a94:	bf00      	nop
 8004a96:	e7fd      	b.n	8004a94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d102      	bne.n	8004aa4 <xQueueGenericCreateStatic+0x84>
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <xQueueGenericCreateStatic+0x88>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <xQueueGenericCreateStatic+0x8a>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10b      	bne.n	8004ac6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	61fb      	str	r3, [r7, #28]
}
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	e7fd      	b.n	8004ac2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ac6:	2350      	movs	r3, #80	@ 0x50
 8004ac8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b50      	cmp	r3, #80	@ 0x50
 8004ace:	d00b      	beq.n	8004ae8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad4:	f383 8811 	msr	BASEPRI, r3
 8004ad8:	f3bf 8f6f 	isb	sy
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	61bb      	str	r3, [r7, #24]
}
 8004ae2:	bf00      	nop
 8004ae4:	bf00      	nop
 8004ae6:	e7fd      	b.n	8004ae4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ae8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00d      	beq.n	8004b10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004afc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	4613      	mov	r3, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f805 	bl	8004b1a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3730      	adds	r7, #48	@ 0x30
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	607a      	str	r2, [r7, #4]
 8004b26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d103      	bne.n	8004b36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	e002      	b.n	8004b3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b48:	2101      	movs	r1, #1
 8004b4a:	69b8      	ldr	r0, [r7, #24]
 8004b4c:	f7ff fefe 	bl	800494c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	78fa      	ldrb	r2, [r7, #3]
 8004b54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b08e      	sub	sp, #56	@ 0x38
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10b      	bne.n	8004b94 <xQueueGenericSend+0x34>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b8e:	bf00      	nop
 8004b90:	bf00      	nop
 8004b92:	e7fd      	b.n	8004b90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d103      	bne.n	8004ba2 <xQueueGenericSend+0x42>
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <xQueueGenericSend+0x46>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <xQueueGenericSend+0x48>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <xQueueGenericSend+0x64>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	e7fd      	b.n	8004bc0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d103      	bne.n	8004bd2 <xQueueGenericSend+0x72>
 8004bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <xQueueGenericSend+0x76>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e000      	b.n	8004bd8 <xQueueGenericSend+0x78>
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10b      	bne.n	8004bf4 <xQueueGenericSend+0x94>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	623b      	str	r3, [r7, #32]
}
 8004bee:	bf00      	nop
 8004bf0:	bf00      	nop
 8004bf2:	e7fd      	b.n	8004bf0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bf4:	f001 f9fc 	bl	8005ff0 <xTaskGetSchedulerState>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d102      	bne.n	8004c04 <xQueueGenericSend+0xa4>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <xQueueGenericSend+0xa8>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <xQueueGenericSend+0xaa>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10b      	bne.n	8004c26 <xQueueGenericSend+0xc6>
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	61fb      	str	r3, [r7, #28]
}
 8004c20:	bf00      	nop
 8004c22:	bf00      	nop
 8004c24:	e7fd      	b.n	8004c22 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c26:	f001 ff4f 	bl	8006ac8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d302      	bcc.n	8004c3c <xQueueGenericSend+0xdc>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d129      	bne.n	8004c90 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c42:	f000 fa0f 	bl	8005064 <prvCopyDataToQueue>
 8004c46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d010      	beq.n	8004c72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c52:	3324      	adds	r3, #36	@ 0x24
 8004c54:	4618      	mov	r0, r3
 8004c56:	f001 f805 	bl	8005c64 <xTaskRemoveFromEventList>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d013      	beq.n	8004c88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c60:	4b3f      	ldr	r3, [pc, #252]	@ (8004d60 <xQueueGenericSend+0x200>)
 8004c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	e00a      	b.n	8004c88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c78:	4b39      	ldr	r3, [pc, #228]	@ (8004d60 <xQueueGenericSend+0x200>)
 8004c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c88:	f001 ff50 	bl	8006b2c <vPortExitCritical>
				return pdPASS;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e063      	b.n	8004d58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d103      	bne.n	8004c9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c96:	f001 ff49 	bl	8006b2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e05c      	b.n	8004d58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d106      	bne.n	8004cb2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ca4:	f107 0314 	add.w	r3, r7, #20
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f001 f83f 	bl	8005d2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cb2:	f001 ff3b 	bl	8006b2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cb6:	f000 fda7 	bl	8005808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cba:	f001 ff05 	bl	8006ac8 <vPortEnterCritical>
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cc4:	b25b      	sxtb	r3, r3
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cca:	d103      	bne.n	8004cd4 <xQueueGenericSend+0x174>
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cda:	b25b      	sxtb	r3, r3
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d103      	bne.n	8004cea <xQueueGenericSend+0x18a>
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cea:	f001 ff1f 	bl	8006b2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cee:	1d3a      	adds	r2, r7, #4
 8004cf0:	f107 0314 	add.w	r3, r7, #20
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f001 f82e 	bl	8005d58 <xTaskCheckForTimeOut>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d124      	bne.n	8004d4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d04:	f000 faa6 	bl	8005254 <prvIsQueueFull>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d018      	beq.n	8004d40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d10:	3310      	adds	r3, #16
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	4611      	mov	r1, r2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 ff52 	bl	8005bc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d1e:	f000 fa31 	bl	8005184 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d22:	f000 fd7f 	bl	8005824 <xTaskResumeAll>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f47f af7c 	bne.w	8004c26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d60 <xQueueGenericSend+0x200>)
 8004d30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	e772      	b.n	8004c26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d42:	f000 fa1f 	bl	8005184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d46:	f000 fd6d 	bl	8005824 <xTaskResumeAll>
 8004d4a:	e76c      	b.n	8004c26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d4e:	f000 fa19 	bl	8005184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d52:	f000 fd67 	bl	8005824 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3738      	adds	r7, #56	@ 0x38
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	e000ed04 	.word	0xe000ed04

08004d64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b090      	sub	sp, #64	@ 0x40
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10b      	bne.n	8004d94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004d8e:	bf00      	nop
 8004d90:	bf00      	nop
 8004d92:	e7fd      	b.n	8004d90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d103      	bne.n	8004da2 <xQueueGenericSendFromISR+0x3e>
 8004d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <xQueueGenericSendFromISR+0x42>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <xQueueGenericSendFromISR+0x44>
 8004da6:	2300      	movs	r3, #0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10b      	bne.n	8004dc4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004dbe:	bf00      	nop
 8004dc0:	bf00      	nop
 8004dc2:	e7fd      	b.n	8004dc0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d103      	bne.n	8004dd2 <xQueueGenericSendFromISR+0x6e>
 8004dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d101      	bne.n	8004dd6 <xQueueGenericSendFromISR+0x72>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <xQueueGenericSendFromISR+0x74>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10b      	bne.n	8004df4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	623b      	str	r3, [r7, #32]
}
 8004dee:	bf00      	nop
 8004df0:	bf00      	nop
 8004df2:	e7fd      	b.n	8004df0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004df4:	f001 ff48 	bl	8006c88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004df8:	f3ef 8211 	mrs	r2, BASEPRI
 8004dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	61fa      	str	r2, [r7, #28]
 8004e0e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d302      	bcc.n	8004e26 <xQueueGenericSendFromISR+0xc2>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d12f      	bne.n	8004e86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004e3c:	f000 f912 	bl	8005064 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e48:	d112      	bne.n	8004e70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d016      	beq.n	8004e80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e54:	3324      	adds	r3, #36	@ 0x24
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 ff04 	bl	8005c64 <xTaskRemoveFromEventList>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00e      	beq.n	8004e80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00b      	beq.n	8004e80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e007      	b.n	8004e80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004e74:	3301      	adds	r3, #1
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	b25a      	sxtb	r2, r3
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004e80:	2301      	movs	r3, #1
 8004e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004e84:	e001      	b.n	8004e8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3740      	adds	r7, #64	@ 0x40
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08c      	sub	sp, #48	@ 0x30
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004eac:	2300      	movs	r3, #0
 8004eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10b      	bne.n	8004ed2 <xQueueReceive+0x32>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	623b      	str	r3, [r7, #32]
}
 8004ecc:	bf00      	nop
 8004ece:	bf00      	nop
 8004ed0:	e7fd      	b.n	8004ece <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d103      	bne.n	8004ee0 <xQueueReceive+0x40>
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d101      	bne.n	8004ee4 <xQueueReceive+0x44>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <xQueueReceive+0x46>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10b      	bne.n	8004f02 <xQueueReceive+0x62>
	__asm volatile
 8004eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	61fb      	str	r3, [r7, #28]
}
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	e7fd      	b.n	8004efe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f02:	f001 f875 	bl	8005ff0 <xTaskGetSchedulerState>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d102      	bne.n	8004f12 <xQueueReceive+0x72>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <xQueueReceive+0x76>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <xQueueReceive+0x78>
 8004f16:	2300      	movs	r3, #0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10b      	bne.n	8004f34 <xQueueReceive+0x94>
	__asm volatile
 8004f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	61bb      	str	r3, [r7, #24]
}
 8004f2e:	bf00      	nop
 8004f30:	bf00      	nop
 8004f32:	e7fd      	b.n	8004f30 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f34:	f001 fdc8 	bl	8006ac8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f3c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d01f      	beq.n	8004f84 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f48:	f000 f8f6 	bl	8005138 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	1e5a      	subs	r2, r3, #1
 8004f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f52:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00f      	beq.n	8004f7c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5e:	3310      	adds	r3, #16
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fe7f 	bl	8005c64 <xTaskRemoveFromEventList>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d007      	beq.n	8004f7c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f6c:	4b3c      	ldr	r3, [pc, #240]	@ (8005060 <xQueueReceive+0x1c0>)
 8004f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f7c:	f001 fdd6 	bl	8006b2c <vPortExitCritical>
				return pdPASS;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e069      	b.n	8005058 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d103      	bne.n	8004f92 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f8a:	f001 fdcf 	bl	8006b2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	e062      	b.n	8005058 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d106      	bne.n	8004fa6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f98:	f107 0310 	add.w	r3, r7, #16
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f000 fec5 	bl	8005d2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fa6:	f001 fdc1 	bl	8006b2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004faa:	f000 fc2d 	bl	8005808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fae:	f001 fd8b 	bl	8006ac8 <vPortEnterCritical>
 8004fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fb8:	b25b      	sxtb	r3, r3
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d103      	bne.n	8004fc8 <xQueueReceive+0x128>
 8004fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fce:	b25b      	sxtb	r3, r3
 8004fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd4:	d103      	bne.n	8004fde <xQueueReceive+0x13e>
 8004fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fde:	f001 fda5 	bl	8006b2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fe2:	1d3a      	adds	r2, r7, #4
 8004fe4:	f107 0310 	add.w	r3, r7, #16
 8004fe8:	4611      	mov	r1, r2
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 feb4 	bl	8005d58 <xTaskCheckForTimeOut>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d123      	bne.n	800503e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ff6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ff8:	f000 f916 	bl	8005228 <prvIsQueueEmpty>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d017      	beq.n	8005032 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005004:	3324      	adds	r3, #36	@ 0x24
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	4611      	mov	r1, r2
 800500a:	4618      	mov	r0, r3
 800500c:	f000 fdd8 	bl	8005bc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005010:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005012:	f000 f8b7 	bl	8005184 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005016:	f000 fc05 	bl	8005824 <xTaskResumeAll>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d189      	bne.n	8004f34 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005020:	4b0f      	ldr	r3, [pc, #60]	@ (8005060 <xQueueReceive+0x1c0>)
 8005022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	e780      	b.n	8004f34 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005034:	f000 f8a6 	bl	8005184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005038:	f000 fbf4 	bl	8005824 <xTaskResumeAll>
 800503c:	e77a      	b.n	8004f34 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800503e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005040:	f000 f8a0 	bl	8005184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005044:	f000 fbee 	bl	8005824 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005048:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800504a:	f000 f8ed 	bl	8005228 <prvIsQueueEmpty>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	f43f af6f 	beq.w	8004f34 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005056:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005058:	4618      	mov	r0, r3
 800505a:	3730      	adds	r7, #48	@ 0x30
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	e000ed04 	.word	0xe000ed04

08005064 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005078:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10d      	bne.n	800509e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d14d      	bne.n	8005126 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	4618      	mov	r0, r3
 8005090:	f000 ffcc 	bl	800602c <xTaskPriorityDisinherit>
 8005094:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	609a      	str	r2, [r3, #8]
 800509c:	e043      	b.n	8005126 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d119      	bne.n	80050d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6858      	ldr	r0, [r3, #4]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ac:	461a      	mov	r2, r3
 80050ae:	68b9      	ldr	r1, [r7, #8]
 80050b0:	f002 f89e 	bl	80071f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050bc:	441a      	add	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d32b      	bcc.n	8005126 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	605a      	str	r2, [r3, #4]
 80050d6:	e026      	b.n	8005126 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	68d8      	ldr	r0, [r3, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e0:	461a      	mov	r2, r3
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	f002 f884 	bl	80071f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f0:	425b      	negs	r3, r3
 80050f2:	441a      	add	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	429a      	cmp	r2, r3
 8005102:	d207      	bcs.n	8005114 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510c:	425b      	negs	r3, r3
 800510e:	441a      	add	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b02      	cmp	r3, #2
 8005118:	d105      	bne.n	8005126 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	3b01      	subs	r3, #1
 8005124:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800512e:	697b      	ldr	r3, [r7, #20]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005146:	2b00      	cmp	r3, #0
 8005148:	d018      	beq.n	800517c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	441a      	add	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	429a      	cmp	r2, r3
 8005162:	d303      	bcc.n	800516c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68d9      	ldr	r1, [r3, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005174:	461a      	mov	r2, r3
 8005176:	6838      	ldr	r0, [r7, #0]
 8005178:	f002 f83a 	bl	80071f0 <memcpy>
	}
}
 800517c:	bf00      	nop
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800518c:	f001 fc9c 	bl	8006ac8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005196:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005198:	e011      	b.n	80051be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d012      	beq.n	80051c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3324      	adds	r3, #36	@ 0x24
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fd5c 	bl	8005c64 <xTaskRemoveFromEventList>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051b2:	f000 fe35 	bl	8005e20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	dce9      	bgt.n	800519a <prvUnlockQueue+0x16>
 80051c6:	e000      	b.n	80051ca <prvUnlockQueue+0x46>
					break;
 80051c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	22ff      	movs	r2, #255	@ 0xff
 80051ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80051d2:	f001 fcab 	bl	8006b2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051d6:	f001 fc77 	bl	8006ac8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051e2:	e011      	b.n	8005208 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d012      	beq.n	8005212 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3310      	adds	r3, #16
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 fd37 	bl	8005c64 <xTaskRemoveFromEventList>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051fc:	f000 fe10 	bl	8005e20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005200:	7bbb      	ldrb	r3, [r7, #14]
 8005202:	3b01      	subs	r3, #1
 8005204:	b2db      	uxtb	r3, r3
 8005206:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800520c:	2b00      	cmp	r3, #0
 800520e:	dce9      	bgt.n	80051e4 <prvUnlockQueue+0x60>
 8005210:	e000      	b.n	8005214 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005212:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	22ff      	movs	r2, #255	@ 0xff
 8005218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800521c:	f001 fc86 	bl	8006b2c <vPortExitCritical>
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005230:	f001 fc4a 	bl	8006ac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005238:	2b00      	cmp	r3, #0
 800523a:	d102      	bne.n	8005242 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800523c:	2301      	movs	r3, #1
 800523e:	60fb      	str	r3, [r7, #12]
 8005240:	e001      	b.n	8005246 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005246:	f001 fc71 	bl	8006b2c <vPortExitCritical>

	return xReturn;
 800524a:	68fb      	ldr	r3, [r7, #12]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800525c:	f001 fc34 	bl	8006ac8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005268:	429a      	cmp	r2, r3
 800526a:	d102      	bne.n	8005272 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800526c:	2301      	movs	r3, #1
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e001      	b.n	8005276 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005276:	f001 fc59 	bl	8006b2c <vPortExitCritical>

	return xReturn;
 800527a:	68fb      	ldr	r3, [r7, #12]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800528e:	2300      	movs	r3, #0
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	e014      	b.n	80052be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005294:	4a0f      	ldr	r2, [pc, #60]	@ (80052d4 <vQueueAddToRegistry+0x50>)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10b      	bne.n	80052b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052a0:	490c      	ldr	r1, [pc, #48]	@ (80052d4 <vQueueAddToRegistry+0x50>)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052aa:	4a0a      	ldr	r2, [pc, #40]	@ (80052d4 <vQueueAddToRegistry+0x50>)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	4413      	add	r3, r2
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052b6:	e006      	b.n	80052c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3301      	adds	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b07      	cmp	r3, #7
 80052c2:	d9e7      	bls.n	8005294 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr
 80052d2:	bf00      	nop
 80052d4:	20000940 	.word	0x20000940

080052d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80052e8:	f001 fbee 	bl	8006ac8 <vPortEnterCritical>
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052f2:	b25b      	sxtb	r3, r3
 80052f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f8:	d103      	bne.n	8005302 <vQueueWaitForMessageRestricted+0x2a>
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005308:	b25b      	sxtb	r3, r3
 800530a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530e:	d103      	bne.n	8005318 <vQueueWaitForMessageRestricted+0x40>
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005318:	f001 fc08 	bl	8006b2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005320:	2b00      	cmp	r3, #0
 8005322:	d106      	bne.n	8005332 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	3324      	adds	r3, #36	@ 0x24
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	68b9      	ldr	r1, [r7, #8]
 800532c:	4618      	mov	r0, r3
 800532e:	f000 fc6d 	bl	8005c0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005332:	6978      	ldr	r0, [r7, #20]
 8005334:	f7ff ff26 	bl	8005184 <prvUnlockQueue>
	}
 8005338:	bf00      	nop
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08e      	sub	sp, #56	@ 0x38
 8005344:	af04      	add	r7, sp, #16
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800534e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10b      	bne.n	800536c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	623b      	str	r3, [r7, #32]
}
 8005366:	bf00      	nop
 8005368:	bf00      	nop
 800536a:	e7fd      	b.n	8005368 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800536c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10b      	bne.n	800538a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	61fb      	str	r3, [r7, #28]
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop
 8005388:	e7fd      	b.n	8005386 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800538a:	23a8      	movs	r3, #168	@ 0xa8
 800538c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	2ba8      	cmp	r3, #168	@ 0xa8
 8005392:	d00b      	beq.n	80053ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	61bb      	str	r3, [r7, #24]
}
 80053a6:	bf00      	nop
 80053a8:	bf00      	nop
 80053aa:	e7fd      	b.n	80053a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01e      	beq.n	80053f2 <xTaskCreateStatic+0xb2>
 80053b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01b      	beq.n	80053f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053cc:	2300      	movs	r3, #0
 80053ce:	9303      	str	r3, [sp, #12]
 80053d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d2:	9302      	str	r3, [sp, #8]
 80053d4:	f107 0314 	add.w	r3, r7, #20
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f851 	bl	800548c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053ec:	f000 f8f6 	bl	80055dc <prvAddNewTaskToReadyList>
 80053f0:	e001      	b.n	80053f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053f6:	697b      	ldr	r3, [r7, #20]
	}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3728      	adds	r7, #40	@ 0x28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08c      	sub	sp, #48	@ 0x30
 8005404:	af04      	add	r7, sp, #16
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	4613      	mov	r3, r2
 800540e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4618      	mov	r0, r3
 8005416:	f001 fc79 	bl	8006d0c <pvPortMalloc>
 800541a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00e      	beq.n	8005440 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005422:	20a8      	movs	r0, #168	@ 0xa8
 8005424:	f001 fc72 	bl	8006d0c <pvPortMalloc>
 8005428:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	631a      	str	r2, [r3, #48]	@ 0x30
 8005436:	e005      	b.n	8005444 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005438:	6978      	ldr	r0, [r7, #20]
 800543a:	f001 fd35 	bl	8006ea8 <vPortFree>
 800543e:	e001      	b.n	8005444 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005440:	2300      	movs	r3, #0
 8005442:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d017      	beq.n	800547a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005452:	88fa      	ldrh	r2, [r7, #6]
 8005454:	2300      	movs	r3, #0
 8005456:	9303      	str	r3, [sp, #12]
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	9302      	str	r3, [sp, #8]
 800545c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68b9      	ldr	r1, [r7, #8]
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 f80f 	bl	800548c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800546e:	69f8      	ldr	r0, [r7, #28]
 8005470:	f000 f8b4 	bl	80055dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005474:	2301      	movs	r3, #1
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	e002      	b.n	8005480 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800547a:	f04f 33ff 	mov.w	r3, #4294967295
 800547e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005480:	69bb      	ldr	r3, [r7, #24]
	}
 8005482:	4618      	mov	r0, r3
 8005484:	3720      	adds	r7, #32
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800549a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	461a      	mov	r2, r3
 80054a4:	21a5      	movs	r1, #165	@ 0xa5
 80054a6:	f001 fe1f 	bl	80070e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054b4:	3b01      	subs	r3, #1
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4413      	add	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	f023 0307 	bic.w	r3, r3, #7
 80054c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	617b      	str	r3, [r7, #20]
}
 80054e0:	bf00      	nop
 80054e2:	bf00      	nop
 80054e4:	e7fd      	b.n	80054e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01f      	beq.n	800552c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054ec:	2300      	movs	r3, #0
 80054ee:	61fb      	str	r3, [r7, #28]
 80054f0:	e012      	b.n	8005518 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	4413      	add	r3, r2
 80054f8:	7819      	ldrb	r1, [r3, #0]
 80054fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	4413      	add	r3, r2
 8005500:	3334      	adds	r3, #52	@ 0x34
 8005502:	460a      	mov	r2, r1
 8005504:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d006      	beq.n	8005520 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	3301      	adds	r3, #1
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	2b0f      	cmp	r3, #15
 800551c:	d9e9      	bls.n	80054f2 <prvInitialiseNewTask+0x66>
 800551e:	e000      	b.n	8005522 <prvInitialiseNewTask+0x96>
			{
				break;
 8005520:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800552a:	e003      	b.n	8005534 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800552c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005536:	2b37      	cmp	r3, #55	@ 0x37
 8005538:	d901      	bls.n	800553e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800553a:	2337      	movs	r3, #55	@ 0x37
 800553c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800553e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005542:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005546:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005548:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554c:	2200      	movs	r2, #0
 800554e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005552:	3304      	adds	r3, #4
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff f965 	bl	8004824 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	3318      	adds	r3, #24
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff f960 	bl	8004824 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005568:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800556a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005572:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005578:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800557a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557c:	2200      	movs	r2, #0
 800557e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005584:	2200      	movs	r2, #0
 8005586:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800558a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558c:	3354      	adds	r3, #84	@ 0x54
 800558e:	224c      	movs	r2, #76	@ 0x4c
 8005590:	2100      	movs	r1, #0
 8005592:	4618      	mov	r0, r3
 8005594:	f001 fda8 	bl	80070e8 <memset>
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	4a0d      	ldr	r2, [pc, #52]	@ (80055d0 <prvInitialiseNewTask+0x144>)
 800559c:	659a      	str	r2, [r3, #88]	@ 0x58
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	4a0c      	ldr	r2, [pc, #48]	@ (80055d4 <prvInitialiseNewTask+0x148>)
 80055a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80055a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a6:	4a0c      	ldr	r2, [pc, #48]	@ (80055d8 <prvInitialiseNewTask+0x14c>)
 80055a8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	68f9      	ldr	r1, [r7, #12]
 80055ae:	69b8      	ldr	r0, [r7, #24]
 80055b0:	f001 f95a 	bl	8006868 <pxPortInitialiseStack>
 80055b4:	4602      	mov	r2, r0
 80055b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055c6:	bf00      	nop
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20001b8c 	.word	0x20001b8c
 80055d4:	20001bf4 	.word	0x20001bf4
 80055d8:	20001c5c 	.word	0x20001c5c

080055dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055e4:	f001 fa70 	bl	8006ac8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055e8:	4b2d      	ldr	r3, [pc, #180]	@ (80056a0 <prvAddNewTaskToReadyList+0xc4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3301      	adds	r3, #1
 80055ee:	4a2c      	ldr	r2, [pc, #176]	@ (80056a0 <prvAddNewTaskToReadyList+0xc4>)
 80055f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055f2:	4b2c      	ldr	r3, [pc, #176]	@ (80056a4 <prvAddNewTaskToReadyList+0xc8>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d109      	bne.n	800560e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055fa:	4a2a      	ldr	r2, [pc, #168]	@ (80056a4 <prvAddNewTaskToReadyList+0xc8>)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005600:	4b27      	ldr	r3, [pc, #156]	@ (80056a0 <prvAddNewTaskToReadyList+0xc4>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d110      	bne.n	800562a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005608:	f000 fc2e 	bl	8005e68 <prvInitialiseTaskLists>
 800560c:	e00d      	b.n	800562a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800560e:	4b26      	ldr	r3, [pc, #152]	@ (80056a8 <prvAddNewTaskToReadyList+0xcc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d109      	bne.n	800562a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005616:	4b23      	ldr	r3, [pc, #140]	@ (80056a4 <prvAddNewTaskToReadyList+0xc8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005620:	429a      	cmp	r2, r3
 8005622:	d802      	bhi.n	800562a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005624:	4a1f      	ldr	r2, [pc, #124]	@ (80056a4 <prvAddNewTaskToReadyList+0xc8>)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800562a:	4b20      	ldr	r3, [pc, #128]	@ (80056ac <prvAddNewTaskToReadyList+0xd0>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3301      	adds	r3, #1
 8005630:	4a1e      	ldr	r2, [pc, #120]	@ (80056ac <prvAddNewTaskToReadyList+0xd0>)
 8005632:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005634:	4b1d      	ldr	r3, [pc, #116]	@ (80056ac <prvAddNewTaskToReadyList+0xd0>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005640:	4b1b      	ldr	r3, [pc, #108]	@ (80056b0 <prvAddNewTaskToReadyList+0xd4>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d903      	bls.n	8005650 <prvAddNewTaskToReadyList+0x74>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564c:	4a18      	ldr	r2, [pc, #96]	@ (80056b0 <prvAddNewTaskToReadyList+0xd4>)
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4a15      	ldr	r2, [pc, #84]	@ (80056b4 <prvAddNewTaskToReadyList+0xd8>)
 800565e:	441a      	add	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3304      	adds	r3, #4
 8005664:	4619      	mov	r1, r3
 8005666:	4610      	mov	r0, r2
 8005668:	f7ff f8e9 	bl	800483e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800566c:	f001 fa5e 	bl	8006b2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005670:	4b0d      	ldr	r3, [pc, #52]	@ (80056a8 <prvAddNewTaskToReadyList+0xcc>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00e      	beq.n	8005696 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005678:	4b0a      	ldr	r3, [pc, #40]	@ (80056a4 <prvAddNewTaskToReadyList+0xc8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005682:	429a      	cmp	r2, r3
 8005684:	d207      	bcs.n	8005696 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005686:	4b0c      	ldr	r3, [pc, #48]	@ (80056b8 <prvAddNewTaskToReadyList+0xdc>)
 8005688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005696:	bf00      	nop
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20000e54 	.word	0x20000e54
 80056a4:	20000980 	.word	0x20000980
 80056a8:	20000e60 	.word	0x20000e60
 80056ac:	20000e70 	.word	0x20000e70
 80056b0:	20000e5c 	.word	0x20000e5c
 80056b4:	20000984 	.word	0x20000984
 80056b8:	e000ed04 	.word	0xe000ed04

080056bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d018      	beq.n	8005700 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056ce:	4b14      	ldr	r3, [pc, #80]	@ (8005720 <vTaskDelay+0x64>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00b      	beq.n	80056ee <vTaskDelay+0x32>
	__asm volatile
 80056d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	60bb      	str	r3, [r7, #8]
}
 80056e8:	bf00      	nop
 80056ea:	bf00      	nop
 80056ec:	e7fd      	b.n	80056ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056ee:	f000 f88b 	bl	8005808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056f2:	2100      	movs	r1, #0
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fd09 	bl	800610c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056fa:	f000 f893 	bl	8005824 <xTaskResumeAll>
 80056fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d107      	bne.n	8005716 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005706:	4b07      	ldr	r3, [pc, #28]	@ (8005724 <vTaskDelay+0x68>)
 8005708:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005716:	bf00      	nop
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000e7c 	.word	0x20000e7c
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08a      	sub	sp, #40	@ 0x28
 800572c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800572e:	2300      	movs	r3, #0
 8005730:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005732:	2300      	movs	r3, #0
 8005734:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005736:	463a      	mov	r2, r7
 8005738:	1d39      	adds	r1, r7, #4
 800573a:	f107 0308 	add.w	r3, r7, #8
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff f81c 	bl	800477c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	9202      	str	r2, [sp, #8]
 800574c:	9301      	str	r3, [sp, #4]
 800574e:	2300      	movs	r3, #0
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	2300      	movs	r3, #0
 8005754:	460a      	mov	r2, r1
 8005756:	4924      	ldr	r1, [pc, #144]	@ (80057e8 <vTaskStartScheduler+0xc0>)
 8005758:	4824      	ldr	r0, [pc, #144]	@ (80057ec <vTaskStartScheduler+0xc4>)
 800575a:	f7ff fdf1 	bl	8005340 <xTaskCreateStatic>
 800575e:	4603      	mov	r3, r0
 8005760:	4a23      	ldr	r2, [pc, #140]	@ (80057f0 <vTaskStartScheduler+0xc8>)
 8005762:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005764:	4b22      	ldr	r3, [pc, #136]	@ (80057f0 <vTaskStartScheduler+0xc8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800576c:	2301      	movs	r3, #1
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e001      	b.n	8005776 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d102      	bne.n	8005782 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800577c:	f000 fd1a 	bl	80061b4 <xTimerCreateTimerTask>
 8005780:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d11b      	bne.n	80057c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	613b      	str	r3, [r7, #16]
}
 800579a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800579c:	4b15      	ldr	r3, [pc, #84]	@ (80057f4 <vTaskStartScheduler+0xcc>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3354      	adds	r3, #84	@ 0x54
 80057a2:	4a15      	ldr	r2, [pc, #84]	@ (80057f8 <vTaskStartScheduler+0xd0>)
 80057a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057a6:	4b15      	ldr	r3, [pc, #84]	@ (80057fc <vTaskStartScheduler+0xd4>)
 80057a8:	f04f 32ff 	mov.w	r2, #4294967295
 80057ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057ae:	4b14      	ldr	r3, [pc, #80]	@ (8005800 <vTaskStartScheduler+0xd8>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057b4:	4b13      	ldr	r3, [pc, #76]	@ (8005804 <vTaskStartScheduler+0xdc>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057ba:	f001 f8e1 	bl	8006980 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057be:	e00f      	b.n	80057e0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c6:	d10b      	bne.n	80057e0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	60fb      	str	r3, [r7, #12]
}
 80057da:	bf00      	nop
 80057dc:	bf00      	nop
 80057de:	e7fd      	b.n	80057dc <vTaskStartScheduler+0xb4>
}
 80057e0:	bf00      	nop
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	08007308 	.word	0x08007308
 80057ec:	08005e39 	.word	0x08005e39
 80057f0:	20000e78 	.word	0x20000e78
 80057f4:	20000980 	.word	0x20000980
 80057f8:	20000010 	.word	0x20000010
 80057fc:	20000e74 	.word	0x20000e74
 8005800:	20000e60 	.word	0x20000e60
 8005804:	20000e58 	.word	0x20000e58

08005808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800580c:	4b04      	ldr	r3, [pc, #16]	@ (8005820 <vTaskSuspendAll+0x18>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	3301      	adds	r3, #1
 8005812:	4a03      	ldr	r2, [pc, #12]	@ (8005820 <vTaskSuspendAll+0x18>)
 8005814:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005816:	bf00      	nop
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	20000e7c 	.word	0x20000e7c

08005824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800582a:	2300      	movs	r3, #0
 800582c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800582e:	2300      	movs	r3, #0
 8005830:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005832:	4b42      	ldr	r3, [pc, #264]	@ (800593c <xTaskResumeAll+0x118>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10b      	bne.n	8005852 <xTaskResumeAll+0x2e>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	603b      	str	r3, [r7, #0]
}
 800584c:	bf00      	nop
 800584e:	bf00      	nop
 8005850:	e7fd      	b.n	800584e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005852:	f001 f939 	bl	8006ac8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005856:	4b39      	ldr	r3, [pc, #228]	@ (800593c <xTaskResumeAll+0x118>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3b01      	subs	r3, #1
 800585c:	4a37      	ldr	r2, [pc, #220]	@ (800593c <xTaskResumeAll+0x118>)
 800585e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005860:	4b36      	ldr	r3, [pc, #216]	@ (800593c <xTaskResumeAll+0x118>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d162      	bne.n	800592e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005868:	4b35      	ldr	r3, [pc, #212]	@ (8005940 <xTaskResumeAll+0x11c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d05e      	beq.n	800592e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005870:	e02f      	b.n	80058d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005872:	4b34      	ldr	r3, [pc, #208]	@ (8005944 <xTaskResumeAll+0x120>)
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3318      	adds	r3, #24
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff f83a 	bl	80048f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3304      	adds	r3, #4
 8005888:	4618      	mov	r0, r3
 800588a:	f7ff f835 	bl	80048f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005892:	4b2d      	ldr	r3, [pc, #180]	@ (8005948 <xTaskResumeAll+0x124>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d903      	bls.n	80058a2 <xTaskResumeAll+0x7e>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589e:	4a2a      	ldr	r2, [pc, #168]	@ (8005948 <xTaskResumeAll+0x124>)
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4a27      	ldr	r2, [pc, #156]	@ (800594c <xTaskResumeAll+0x128>)
 80058b0:	441a      	add	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3304      	adds	r3, #4
 80058b6:	4619      	mov	r1, r3
 80058b8:	4610      	mov	r0, r2
 80058ba:	f7fe ffc0 	bl	800483e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c2:	4b23      	ldr	r3, [pc, #140]	@ (8005950 <xTaskResumeAll+0x12c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d302      	bcc.n	80058d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80058cc:	4b21      	ldr	r3, [pc, #132]	@ (8005954 <xTaskResumeAll+0x130>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058d2:	4b1c      	ldr	r3, [pc, #112]	@ (8005944 <xTaskResumeAll+0x120>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1cb      	bne.n	8005872 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058e0:	f000 fb66 	bl	8005fb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058e4:	4b1c      	ldr	r3, [pc, #112]	@ (8005958 <xTaskResumeAll+0x134>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d010      	beq.n	8005912 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058f0:	f000 f846 	bl	8005980 <xTaskIncrementTick>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80058fa:	4b16      	ldr	r3, [pc, #88]	@ (8005954 <xTaskResumeAll+0x130>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3b01      	subs	r3, #1
 8005904:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f1      	bne.n	80058f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800590c:	4b12      	ldr	r3, [pc, #72]	@ (8005958 <xTaskResumeAll+0x134>)
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005912:	4b10      	ldr	r3, [pc, #64]	@ (8005954 <xTaskResumeAll+0x130>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d009      	beq.n	800592e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800591a:	2301      	movs	r3, #1
 800591c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800591e:	4b0f      	ldr	r3, [pc, #60]	@ (800595c <xTaskResumeAll+0x138>)
 8005920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800592e:	f001 f8fd 	bl	8006b2c <vPortExitCritical>

	return xAlreadyYielded;
 8005932:	68bb      	ldr	r3, [r7, #8]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20000e7c 	.word	0x20000e7c
 8005940:	20000e54 	.word	0x20000e54
 8005944:	20000e14 	.word	0x20000e14
 8005948:	20000e5c 	.word	0x20000e5c
 800594c:	20000984 	.word	0x20000984
 8005950:	20000980 	.word	0x20000980
 8005954:	20000e68 	.word	0x20000e68
 8005958:	20000e64 	.word	0x20000e64
 800595c:	e000ed04 	.word	0xe000ed04

08005960 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005966:	4b05      	ldr	r3, [pc, #20]	@ (800597c <xTaskGetTickCount+0x1c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800596c:	687b      	ldr	r3, [r7, #4]
}
 800596e:	4618      	mov	r0, r3
 8005970:	370c      	adds	r7, #12
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	20000e58 	.word	0x20000e58

08005980 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005986:	2300      	movs	r3, #0
 8005988:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800598a:	4b4f      	ldr	r3, [pc, #316]	@ (8005ac8 <xTaskIncrementTick+0x148>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	f040 8090 	bne.w	8005ab4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005994:	4b4d      	ldr	r3, [pc, #308]	@ (8005acc <xTaskIncrementTick+0x14c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3301      	adds	r3, #1
 800599a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800599c:	4a4b      	ldr	r2, [pc, #300]	@ (8005acc <xTaskIncrementTick+0x14c>)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d121      	bne.n	80059ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80059a8:	4b49      	ldr	r3, [pc, #292]	@ (8005ad0 <xTaskIncrementTick+0x150>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00b      	beq.n	80059ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	603b      	str	r3, [r7, #0]
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop
 80059c8:	e7fd      	b.n	80059c6 <xTaskIncrementTick+0x46>
 80059ca:	4b41      	ldr	r3, [pc, #260]	@ (8005ad0 <xTaskIncrementTick+0x150>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	4b40      	ldr	r3, [pc, #256]	@ (8005ad4 <xTaskIncrementTick+0x154>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a3e      	ldr	r2, [pc, #248]	@ (8005ad0 <xTaskIncrementTick+0x150>)
 80059d6:	6013      	str	r3, [r2, #0]
 80059d8:	4a3e      	ldr	r2, [pc, #248]	@ (8005ad4 <xTaskIncrementTick+0x154>)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	4b3e      	ldr	r3, [pc, #248]	@ (8005ad8 <xTaskIncrementTick+0x158>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3301      	adds	r3, #1
 80059e4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ad8 <xTaskIncrementTick+0x158>)
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	f000 fae2 	bl	8005fb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059ec:	4b3b      	ldr	r3, [pc, #236]	@ (8005adc <xTaskIncrementTick+0x15c>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d349      	bcc.n	8005a8a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059f6:	4b36      	ldr	r3, [pc, #216]	@ (8005ad0 <xTaskIncrementTick+0x150>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d104      	bne.n	8005a0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a00:	4b36      	ldr	r3, [pc, #216]	@ (8005adc <xTaskIncrementTick+0x15c>)
 8005a02:	f04f 32ff 	mov.w	r2, #4294967295
 8005a06:	601a      	str	r2, [r3, #0]
					break;
 8005a08:	e03f      	b.n	8005a8a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a0a:	4b31      	ldr	r3, [pc, #196]	@ (8005ad0 <xTaskIncrementTick+0x150>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d203      	bcs.n	8005a2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a22:	4a2e      	ldr	r2, [pc, #184]	@ (8005adc <xTaskIncrementTick+0x15c>)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a28:	e02f      	b.n	8005a8a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe ff62 	bl	80048f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d004      	beq.n	8005a46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	3318      	adds	r3, #24
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fe ff59 	bl	80048f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a4a:	4b25      	ldr	r3, [pc, #148]	@ (8005ae0 <xTaskIncrementTick+0x160>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d903      	bls.n	8005a5a <xTaskIncrementTick+0xda>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a56:	4a22      	ldr	r2, [pc, #136]	@ (8005ae0 <xTaskIncrementTick+0x160>)
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4a1f      	ldr	r2, [pc, #124]	@ (8005ae4 <xTaskIncrementTick+0x164>)
 8005a68:	441a      	add	r2, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4610      	mov	r0, r2
 8005a72:	f7fe fee4 	bl	800483e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ae8 <xTaskIncrementTick+0x168>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d3b8      	bcc.n	80059f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005a84:	2301      	movs	r3, #1
 8005a86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a88:	e7b5      	b.n	80059f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a8a:	4b17      	ldr	r3, [pc, #92]	@ (8005ae8 <xTaskIncrementTick+0x168>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a90:	4914      	ldr	r1, [pc, #80]	@ (8005ae4 <xTaskIncrementTick+0x164>)
 8005a92:	4613      	mov	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	440b      	add	r3, r1
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d901      	bls.n	8005aa6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005aa6:	4b11      	ldr	r3, [pc, #68]	@ (8005aec <xTaskIncrementTick+0x16c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d007      	beq.n	8005abe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	e004      	b.n	8005abe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8005af0 <xTaskIncrementTick+0x170>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	4a0d      	ldr	r2, [pc, #52]	@ (8005af0 <xTaskIncrementTick+0x170>)
 8005abc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005abe:	697b      	ldr	r3, [r7, #20]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	20000e7c 	.word	0x20000e7c
 8005acc:	20000e58 	.word	0x20000e58
 8005ad0:	20000e0c 	.word	0x20000e0c
 8005ad4:	20000e10 	.word	0x20000e10
 8005ad8:	20000e6c 	.word	0x20000e6c
 8005adc:	20000e74 	.word	0x20000e74
 8005ae0:	20000e5c 	.word	0x20000e5c
 8005ae4:	20000984 	.word	0x20000984
 8005ae8:	20000980 	.word	0x20000980
 8005aec:	20000e68 	.word	0x20000e68
 8005af0:	20000e64 	.word	0x20000e64

08005af4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005afa:	4b2b      	ldr	r3, [pc, #172]	@ (8005ba8 <vTaskSwitchContext+0xb4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b02:	4b2a      	ldr	r3, [pc, #168]	@ (8005bac <vTaskSwitchContext+0xb8>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b08:	e047      	b.n	8005b9a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005b0a:	4b28      	ldr	r3, [pc, #160]	@ (8005bac <vTaskSwitchContext+0xb8>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b10:	4b27      	ldr	r3, [pc, #156]	@ (8005bb0 <vTaskSwitchContext+0xbc>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	e011      	b.n	8005b3c <vTaskSwitchContext+0x48>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10b      	bne.n	8005b36 <vTaskSwitchContext+0x42>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	607b      	str	r3, [r7, #4]
}
 8005b30:	bf00      	nop
 8005b32:	bf00      	nop
 8005b34:	e7fd      	b.n	8005b32 <vTaskSwitchContext+0x3e>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	60fb      	str	r3, [r7, #12]
 8005b3c:	491d      	ldr	r1, [pc, #116]	@ (8005bb4 <vTaskSwitchContext+0xc0>)
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0e3      	beq.n	8005b18 <vTaskSwitchContext+0x24>
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4613      	mov	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4a16      	ldr	r2, [pc, #88]	@ (8005bb4 <vTaskSwitchContext+0xc0>)
 8005b5c:	4413      	add	r3, r2
 8005b5e:	60bb      	str	r3, [r7, #8]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	605a      	str	r2, [r3, #4]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	3308      	adds	r3, #8
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d104      	bne.n	8005b80 <vTaskSwitchContext+0x8c>
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	605a      	str	r2, [r3, #4]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	4a0c      	ldr	r2, [pc, #48]	@ (8005bb8 <vTaskSwitchContext+0xc4>)
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	4a09      	ldr	r2, [pc, #36]	@ (8005bb0 <vTaskSwitchContext+0xbc>)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b90:	4b09      	ldr	r3, [pc, #36]	@ (8005bb8 <vTaskSwitchContext+0xc4>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3354      	adds	r3, #84	@ 0x54
 8005b96:	4a09      	ldr	r2, [pc, #36]	@ (8005bbc <vTaskSwitchContext+0xc8>)
 8005b98:	6013      	str	r3, [r2, #0]
}
 8005b9a:	bf00      	nop
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	20000e7c 	.word	0x20000e7c
 8005bac:	20000e68 	.word	0x20000e68
 8005bb0:	20000e5c 	.word	0x20000e5c
 8005bb4:	20000984 	.word	0x20000984
 8005bb8:	20000980 	.word	0x20000980
 8005bbc:	20000010 	.word	0x20000010

08005bc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10b      	bne.n	8005be8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	60fb      	str	r3, [r7, #12]
}
 8005be2:	bf00      	nop
 8005be4:	bf00      	nop
 8005be6:	e7fd      	b.n	8005be4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005be8:	4b07      	ldr	r3, [pc, #28]	@ (8005c08 <vTaskPlaceOnEventList+0x48>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3318      	adds	r3, #24
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7fe fe48 	bl	8004886 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	6838      	ldr	r0, [r7, #0]
 8005bfa:	f000 fa87 	bl	800610c <prvAddCurrentTaskToDelayedList>
}
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000980 	.word	0x20000980

08005c0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10b      	bne.n	8005c36 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	617b      	str	r3, [r7, #20]
}
 8005c30:	bf00      	nop
 8005c32:	bf00      	nop
 8005c34:	e7fd      	b.n	8005c32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c36:	4b0a      	ldr	r3, [pc, #40]	@ (8005c60 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3318      	adds	r3, #24
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f7fe fdfd 	bl	800483e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	68b8      	ldr	r0, [r7, #8]
 8005c54:	f000 fa5a 	bl	800610c <prvAddCurrentTaskToDelayedList>
	}
 8005c58:	bf00      	nop
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	20000980 	.word	0x20000980

08005c64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10b      	bne.n	8005c92 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	60fb      	str	r3, [r7, #12]
}
 8005c8c:	bf00      	nop
 8005c8e:	bf00      	nop
 8005c90:	e7fd      	b.n	8005c8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	3318      	adds	r3, #24
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe fe2e 	bl	80048f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8005d14 <xTaskRemoveFromEventList+0xb0>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d11d      	bne.n	8005ce0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fe fe25 	bl	80048f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb2:	4b19      	ldr	r3, [pc, #100]	@ (8005d18 <xTaskRemoveFromEventList+0xb4>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d903      	bls.n	8005cc2 <xTaskRemoveFromEventList+0x5e>
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbe:	4a16      	ldr	r2, [pc, #88]	@ (8005d18 <xTaskRemoveFromEventList+0xb4>)
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4a13      	ldr	r2, [pc, #76]	@ (8005d1c <xTaskRemoveFromEventList+0xb8>)
 8005cd0:	441a      	add	r2, r3
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4610      	mov	r0, r2
 8005cda:	f7fe fdb0 	bl	800483e <vListInsertEnd>
 8005cde:	e005      	b.n	8005cec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	3318      	adds	r3, #24
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	480e      	ldr	r0, [pc, #56]	@ (8005d20 <xTaskRemoveFromEventList+0xbc>)
 8005ce8:	f7fe fda9 	bl	800483e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8005d24 <xTaskRemoveFromEventList+0xc0>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d905      	bls.n	8005d06 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8005d28 <xTaskRemoveFromEventList+0xc4>)
 8005d00:	2201      	movs	r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	e001      	b.n	8005d0a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005d06:	2300      	movs	r3, #0
 8005d08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d0a:	697b      	ldr	r3, [r7, #20]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	20000e7c 	.word	0x20000e7c
 8005d18:	20000e5c 	.word	0x20000e5c
 8005d1c:	20000984 	.word	0x20000984
 8005d20:	20000e14 	.word	0x20000e14
 8005d24:	20000980 	.word	0x20000980
 8005d28:	20000e68 	.word	0x20000e68

08005d2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d34:	4b06      	ldr	r3, [pc, #24]	@ (8005d50 <vTaskInternalSetTimeOutState+0x24>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d3c:	4b05      	ldr	r3, [pc, #20]	@ (8005d54 <vTaskInternalSetTimeOutState+0x28>)
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	605a      	str	r2, [r3, #4]
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	20000e6c 	.word	0x20000e6c
 8005d54:	20000e58 	.word	0x20000e58

08005d58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10b      	bne.n	8005d80 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6c:	f383 8811 	msr	BASEPRI, r3
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	613b      	str	r3, [r7, #16]
}
 8005d7a:	bf00      	nop
 8005d7c:	bf00      	nop
 8005d7e:	e7fd      	b.n	8005d7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10b      	bne.n	8005d9e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	60fb      	str	r3, [r7, #12]
}
 8005d98:	bf00      	nop
 8005d9a:	bf00      	nop
 8005d9c:	e7fd      	b.n	8005d9a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005d9e:	f000 fe93 	bl	8006ac8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005da2:	4b1d      	ldr	r3, [pc, #116]	@ (8005e18 <xTaskCheckForTimeOut+0xc0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dba:	d102      	bne.n	8005dc2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	61fb      	str	r3, [r7, #28]
 8005dc0:	e023      	b.n	8005e0a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	4b15      	ldr	r3, [pc, #84]	@ (8005e1c <xTaskCheckForTimeOut+0xc4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d007      	beq.n	8005dde <xTaskCheckForTimeOut+0x86>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d302      	bcc.n	8005dde <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	61fb      	str	r3, [r7, #28]
 8005ddc:	e015      	b.n	8005e0a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d20b      	bcs.n	8005e00 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	1ad2      	subs	r2, r2, r3
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff ff99 	bl	8005d2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61fb      	str	r3, [r7, #28]
 8005dfe:	e004      	b.n	8005e0a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e06:	2301      	movs	r3, #1
 8005e08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e0a:	f000 fe8f 	bl	8006b2c <vPortExitCritical>

	return xReturn;
 8005e0e:	69fb      	ldr	r3, [r7, #28]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3720      	adds	r7, #32
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20000e58 	.word	0x20000e58
 8005e1c:	20000e6c 	.word	0x20000e6c

08005e20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e24:	4b03      	ldr	r3, [pc, #12]	@ (8005e34 <vTaskMissedYield+0x14>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	601a      	str	r2, [r3, #0]
}
 8005e2a:	bf00      	nop
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	20000e68 	.word	0x20000e68

08005e38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e40:	f000 f852 	bl	8005ee8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e44:	4b06      	ldr	r3, [pc, #24]	@ (8005e60 <prvIdleTask+0x28>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d9f9      	bls.n	8005e40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e4c:	4b05      	ldr	r3, [pc, #20]	@ (8005e64 <prvIdleTask+0x2c>)
 8005e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e5c:	e7f0      	b.n	8005e40 <prvIdleTask+0x8>
 8005e5e:	bf00      	nop
 8005e60:	20000984 	.word	0x20000984
 8005e64:	e000ed04 	.word	0xe000ed04

08005e68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e6e:	2300      	movs	r3, #0
 8005e70:	607b      	str	r3, [r7, #4]
 8005e72:	e00c      	b.n	8005e8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	4613      	mov	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4a12      	ldr	r2, [pc, #72]	@ (8005ec8 <prvInitialiseTaskLists+0x60>)
 8005e80:	4413      	add	r3, r2
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe fcae 	bl	80047e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	607b      	str	r3, [r7, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b37      	cmp	r3, #55	@ 0x37
 8005e92:	d9ef      	bls.n	8005e74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e94:	480d      	ldr	r0, [pc, #52]	@ (8005ecc <prvInitialiseTaskLists+0x64>)
 8005e96:	f7fe fca5 	bl	80047e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e9a:	480d      	ldr	r0, [pc, #52]	@ (8005ed0 <prvInitialiseTaskLists+0x68>)
 8005e9c:	f7fe fca2 	bl	80047e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ea0:	480c      	ldr	r0, [pc, #48]	@ (8005ed4 <prvInitialiseTaskLists+0x6c>)
 8005ea2:	f7fe fc9f 	bl	80047e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ea6:	480c      	ldr	r0, [pc, #48]	@ (8005ed8 <prvInitialiseTaskLists+0x70>)
 8005ea8:	f7fe fc9c 	bl	80047e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005eac:	480b      	ldr	r0, [pc, #44]	@ (8005edc <prvInitialiseTaskLists+0x74>)
 8005eae:	f7fe fc99 	bl	80047e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee0 <prvInitialiseTaskLists+0x78>)
 8005eb4:	4a05      	ldr	r2, [pc, #20]	@ (8005ecc <prvInitialiseTaskLists+0x64>)
 8005eb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee4 <prvInitialiseTaskLists+0x7c>)
 8005eba:	4a05      	ldr	r2, [pc, #20]	@ (8005ed0 <prvInitialiseTaskLists+0x68>)
 8005ebc:	601a      	str	r2, [r3, #0]
}
 8005ebe:	bf00      	nop
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	20000984 	.word	0x20000984
 8005ecc:	20000de4 	.word	0x20000de4
 8005ed0:	20000df8 	.word	0x20000df8
 8005ed4:	20000e14 	.word	0x20000e14
 8005ed8:	20000e28 	.word	0x20000e28
 8005edc:	20000e40 	.word	0x20000e40
 8005ee0:	20000e0c 	.word	0x20000e0c
 8005ee4:	20000e10 	.word	0x20000e10

08005ee8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005eee:	e019      	b.n	8005f24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ef0:	f000 fdea 	bl	8006ac8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ef4:	4b10      	ldr	r3, [pc, #64]	@ (8005f38 <prvCheckTasksWaitingTermination+0x50>)
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3304      	adds	r3, #4
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fe fcf9 	bl	80048f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f06:	4b0d      	ldr	r3, [pc, #52]	@ (8005f3c <prvCheckTasksWaitingTermination+0x54>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8005f3c <prvCheckTasksWaitingTermination+0x54>)
 8005f0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f10:	4b0b      	ldr	r3, [pc, #44]	@ (8005f40 <prvCheckTasksWaitingTermination+0x58>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	4a0a      	ldr	r2, [pc, #40]	@ (8005f40 <prvCheckTasksWaitingTermination+0x58>)
 8005f18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f1a:	f000 fe07 	bl	8006b2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f810 	bl	8005f44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f24:	4b06      	ldr	r3, [pc, #24]	@ (8005f40 <prvCheckTasksWaitingTermination+0x58>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1e1      	bne.n	8005ef0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f2c:	bf00      	nop
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20000e28 	.word	0x20000e28
 8005f3c:	20000e54 	.word	0x20000e54
 8005f40:	20000e3c 	.word	0x20000e3c

08005f44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3354      	adds	r3, #84	@ 0x54
 8005f50:	4618      	mov	r0, r3
 8005f52:	f001 f8d1 	bl	80070f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d108      	bne.n	8005f72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f64:	4618      	mov	r0, r3
 8005f66:	f000 ff9f 	bl	8006ea8 <vPortFree>
				vPortFree( pxTCB );
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 ff9c 	bl	8006ea8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f70:	e019      	b.n	8005fa6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d103      	bne.n	8005f84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 ff93 	bl	8006ea8 <vPortFree>
	}
 8005f82:	e010      	b.n	8005fa6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d00b      	beq.n	8005fa6 <prvDeleteTCB+0x62>
	__asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	60fb      	str	r3, [r7, #12]
}
 8005fa0:	bf00      	nop
 8005fa2:	bf00      	nop
 8005fa4:	e7fd      	b.n	8005fa2 <prvDeleteTCB+0x5e>
	}
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8005fe8 <prvResetNextTaskUnblockTime+0x38>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d104      	bne.n	8005fca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8005fec <prvResetNextTaskUnblockTime+0x3c>)
 8005fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fc8:	e008      	b.n	8005fdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fca:	4b07      	ldr	r3, [pc, #28]	@ (8005fe8 <prvResetNextTaskUnblockTime+0x38>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	4a04      	ldr	r2, [pc, #16]	@ (8005fec <prvResetNextTaskUnblockTime+0x3c>)
 8005fda:	6013      	str	r3, [r2, #0]
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	20000e0c 	.word	0x20000e0c
 8005fec:	20000e74 	.word	0x20000e74

08005ff0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8006024 <xTaskGetSchedulerState+0x34>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d102      	bne.n	8006004 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ffe:	2301      	movs	r3, #1
 8006000:	607b      	str	r3, [r7, #4]
 8006002:	e008      	b.n	8006016 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006004:	4b08      	ldr	r3, [pc, #32]	@ (8006028 <xTaskGetSchedulerState+0x38>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d102      	bne.n	8006012 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800600c:	2302      	movs	r3, #2
 800600e:	607b      	str	r3, [r7, #4]
 8006010:	e001      	b.n	8006016 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006012:	2300      	movs	r3, #0
 8006014:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006016:	687b      	ldr	r3, [r7, #4]
	}
 8006018:	4618      	mov	r0, r3
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	20000e60 	.word	0x20000e60
 8006028:	20000e7c 	.word	0x20000e7c

0800602c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006038:	2300      	movs	r3, #0
 800603a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d058      	beq.n	80060f4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006042:	4b2f      	ldr	r3, [pc, #188]	@ (8006100 <xTaskPriorityDisinherit+0xd4>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	429a      	cmp	r2, r3
 800604a:	d00b      	beq.n	8006064 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	60fb      	str	r3, [r7, #12]
}
 800605e:	bf00      	nop
 8006060:	bf00      	nop
 8006062:	e7fd      	b.n	8006060 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10b      	bne.n	8006084 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	60bb      	str	r3, [r7, #8]
}
 800607e:	bf00      	nop
 8006080:	bf00      	nop
 8006082:	e7fd      	b.n	8006080 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006088:	1e5a      	subs	r2, r3, #1
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006096:	429a      	cmp	r2, r3
 8006098:	d02c      	beq.n	80060f4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d128      	bne.n	80060f4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	3304      	adds	r3, #4
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fe fc26 	bl	80048f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060c4:	4b0f      	ldr	r3, [pc, #60]	@ (8006104 <xTaskPriorityDisinherit+0xd8>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d903      	bls.n	80060d4 <xTaskPriorityDisinherit+0xa8>
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d0:	4a0c      	ldr	r2, [pc, #48]	@ (8006104 <xTaskPriorityDisinherit+0xd8>)
 80060d2:	6013      	str	r3, [r2, #0]
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d8:	4613      	mov	r3, r2
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4a09      	ldr	r2, [pc, #36]	@ (8006108 <xTaskPriorityDisinherit+0xdc>)
 80060e2:	441a      	add	r2, r3
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	3304      	adds	r3, #4
 80060e8:	4619      	mov	r1, r3
 80060ea:	4610      	mov	r0, r2
 80060ec:	f7fe fba7 	bl	800483e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060f0:	2301      	movs	r3, #1
 80060f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060f4:	697b      	ldr	r3, [r7, #20]
	}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000980 	.word	0x20000980
 8006104:	20000e5c 	.word	0x20000e5c
 8006108:	20000984 	.word	0x20000984

0800610c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006116:	4b21      	ldr	r3, [pc, #132]	@ (800619c <prvAddCurrentTaskToDelayedList+0x90>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800611c:	4b20      	ldr	r3, [pc, #128]	@ (80061a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3304      	adds	r3, #4
 8006122:	4618      	mov	r0, r3
 8006124:	f7fe fbe8 	bl	80048f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800612e:	d10a      	bne.n	8006146 <prvAddCurrentTaskToDelayedList+0x3a>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d007      	beq.n	8006146 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006136:	4b1a      	ldr	r3, [pc, #104]	@ (80061a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	3304      	adds	r3, #4
 800613c:	4619      	mov	r1, r3
 800613e:	4819      	ldr	r0, [pc, #100]	@ (80061a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006140:	f7fe fb7d 	bl	800483e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006144:	e026      	b.n	8006194 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4413      	add	r3, r2
 800614c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800614e:	4b14      	ldr	r3, [pc, #80]	@ (80061a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	429a      	cmp	r2, r3
 800615c:	d209      	bcs.n	8006172 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800615e:	4b12      	ldr	r3, [pc, #72]	@ (80061a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b0f      	ldr	r3, [pc, #60]	@ (80061a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3304      	adds	r3, #4
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f7fe fb8b 	bl	8004886 <vListInsert>
}
 8006170:	e010      	b.n	8006194 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006172:	4b0e      	ldr	r3, [pc, #56]	@ (80061ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	4b0a      	ldr	r3, [pc, #40]	@ (80061a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3304      	adds	r3, #4
 800617c:	4619      	mov	r1, r3
 800617e:	4610      	mov	r0, r2
 8006180:	f7fe fb81 	bl	8004886 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006184:	4b0a      	ldr	r3, [pc, #40]	@ (80061b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	429a      	cmp	r2, r3
 800618c:	d202      	bcs.n	8006194 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800618e:	4a08      	ldr	r2, [pc, #32]	@ (80061b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	6013      	str	r3, [r2, #0]
}
 8006194:	bf00      	nop
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	20000e58 	.word	0x20000e58
 80061a0:	20000980 	.word	0x20000980
 80061a4:	20000e40 	.word	0x20000e40
 80061a8:	20000e10 	.word	0x20000e10
 80061ac:	20000e0c 	.word	0x20000e0c
 80061b0:	20000e74 	.word	0x20000e74

080061b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b08a      	sub	sp, #40	@ 0x28
 80061b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061be:	f000 fb13 	bl	80067e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006238 <xTimerCreateTimerTask+0x84>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d021      	beq.n	800620e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061ca:	2300      	movs	r3, #0
 80061cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061d2:	1d3a      	adds	r2, r7, #4
 80061d4:	f107 0108 	add.w	r1, r7, #8
 80061d8:	f107 030c 	add.w	r3, r7, #12
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fe fae7 	bl	80047b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	9202      	str	r2, [sp, #8]
 80061ea:	9301      	str	r3, [sp, #4]
 80061ec:	2302      	movs	r3, #2
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	2300      	movs	r3, #0
 80061f2:	460a      	mov	r2, r1
 80061f4:	4911      	ldr	r1, [pc, #68]	@ (800623c <xTimerCreateTimerTask+0x88>)
 80061f6:	4812      	ldr	r0, [pc, #72]	@ (8006240 <xTimerCreateTimerTask+0x8c>)
 80061f8:	f7ff f8a2 	bl	8005340 <xTaskCreateStatic>
 80061fc:	4603      	mov	r3, r0
 80061fe:	4a11      	ldr	r2, [pc, #68]	@ (8006244 <xTimerCreateTimerTask+0x90>)
 8006200:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006202:	4b10      	ldr	r3, [pc, #64]	@ (8006244 <xTimerCreateTimerTask+0x90>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800620a:	2301      	movs	r3, #1
 800620c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10b      	bne.n	800622c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	613b      	str	r3, [r7, #16]
}
 8006226:	bf00      	nop
 8006228:	bf00      	nop
 800622a:	e7fd      	b.n	8006228 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800622c:	697b      	ldr	r3, [r7, #20]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	20000eb0 	.word	0x20000eb0
 800623c:	08007310 	.word	0x08007310
 8006240:	08006381 	.word	0x08006381
 8006244:	20000eb4 	.word	0x20000eb4

08006248 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08a      	sub	sp, #40	@ 0x28
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006256:	2300      	movs	r3, #0
 8006258:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10b      	bne.n	8006278 <xTimerGenericCommand+0x30>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	623b      	str	r3, [r7, #32]
}
 8006272:	bf00      	nop
 8006274:	bf00      	nop
 8006276:	e7fd      	b.n	8006274 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006278:	4b19      	ldr	r3, [pc, #100]	@ (80062e0 <xTimerGenericCommand+0x98>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d02a      	beq.n	80062d6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b05      	cmp	r3, #5
 8006290:	dc18      	bgt.n	80062c4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006292:	f7ff fead 	bl	8005ff0 <xTaskGetSchedulerState>
 8006296:	4603      	mov	r3, r0
 8006298:	2b02      	cmp	r3, #2
 800629a:	d109      	bne.n	80062b0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800629c:	4b10      	ldr	r3, [pc, #64]	@ (80062e0 <xTimerGenericCommand+0x98>)
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	f107 0110 	add.w	r1, r7, #16
 80062a4:	2300      	movs	r3, #0
 80062a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062a8:	f7fe fc5a 	bl	8004b60 <xQueueGenericSend>
 80062ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80062ae:	e012      	b.n	80062d6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062b0:	4b0b      	ldr	r3, [pc, #44]	@ (80062e0 <xTimerGenericCommand+0x98>)
 80062b2:	6818      	ldr	r0, [r3, #0]
 80062b4:	f107 0110 	add.w	r1, r7, #16
 80062b8:	2300      	movs	r3, #0
 80062ba:	2200      	movs	r2, #0
 80062bc:	f7fe fc50 	bl	8004b60 <xQueueGenericSend>
 80062c0:	6278      	str	r0, [r7, #36]	@ 0x24
 80062c2:	e008      	b.n	80062d6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062c4:	4b06      	ldr	r3, [pc, #24]	@ (80062e0 <xTimerGenericCommand+0x98>)
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	f107 0110 	add.w	r1, r7, #16
 80062cc:	2300      	movs	r3, #0
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	f7fe fd48 	bl	8004d64 <xQueueGenericSendFromISR>
 80062d4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3728      	adds	r7, #40	@ 0x28
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20000eb0 	.word	0x20000eb0

080062e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b088      	sub	sp, #32
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062ee:	4b23      	ldr	r3, [pc, #140]	@ (800637c <prvProcessExpiredTimer+0x98>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	3304      	adds	r3, #4
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fe fafb 	bl	80048f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b00      	cmp	r3, #0
 800630e:	d023      	beq.n	8006358 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	699a      	ldr	r2, [r3, #24]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	18d1      	adds	r1, r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	6978      	ldr	r0, [r7, #20]
 800631e:	f000 f8d5 	bl	80064cc <prvInsertTimerInActiveList>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d020      	beq.n	800636a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006328:	2300      	movs	r3, #0
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	2300      	movs	r3, #0
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	2100      	movs	r1, #0
 8006332:	6978      	ldr	r0, [r7, #20]
 8006334:	f7ff ff88 	bl	8006248 <xTimerGenericCommand>
 8006338:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d114      	bne.n	800636a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	60fb      	str	r3, [r7, #12]
}
 8006352:	bf00      	nop
 8006354:	bf00      	nop
 8006356:	e7fd      	b.n	8006354 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800635e:	f023 0301 	bic.w	r3, r3, #1
 8006362:	b2da      	uxtb	r2, r3
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	6978      	ldr	r0, [r7, #20]
 8006370:	4798      	blx	r3
}
 8006372:	bf00      	nop
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20000ea8 	.word	0x20000ea8

08006380 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006388:	f107 0308 	add.w	r3, r7, #8
 800638c:	4618      	mov	r0, r3
 800638e:	f000 f859 	bl	8006444 <prvGetNextExpireTime>
 8006392:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4619      	mov	r1, r3
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f805 	bl	80063a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800639e:	f000 f8d7 	bl	8006550 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063a2:	bf00      	nop
 80063a4:	e7f0      	b.n	8006388 <prvTimerTask+0x8>
	...

080063a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063b2:	f7ff fa29 	bl	8005808 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063b6:	f107 0308 	add.w	r3, r7, #8
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 f866 	bl	800648c <prvSampleTimeNow>
 80063c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d130      	bne.n	800642a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <prvProcessTimerOrBlockTask+0x3c>
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d806      	bhi.n	80063e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063d6:	f7ff fa25 	bl	8005824 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063da:	68f9      	ldr	r1, [r7, #12]
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7ff ff81 	bl	80062e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063e2:	e024      	b.n	800642e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d008      	beq.n	80063fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063ea:	4b13      	ldr	r3, [pc, #76]	@ (8006438 <prvProcessTimerOrBlockTask+0x90>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <prvProcessTimerOrBlockTask+0x50>
 80063f4:	2301      	movs	r3, #1
 80063f6:	e000      	b.n	80063fa <prvProcessTimerOrBlockTask+0x52>
 80063f8:	2300      	movs	r3, #0
 80063fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063fc:	4b0f      	ldr	r3, [pc, #60]	@ (800643c <prvProcessTimerOrBlockTask+0x94>)
 80063fe:	6818      	ldr	r0, [r3, #0]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	4619      	mov	r1, r3
 800640a:	f7fe ff65 	bl	80052d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800640e:	f7ff fa09 	bl	8005824 <xTaskResumeAll>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10a      	bne.n	800642e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006418:	4b09      	ldr	r3, [pc, #36]	@ (8006440 <prvProcessTimerOrBlockTask+0x98>)
 800641a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	f3bf 8f6f 	isb	sy
}
 8006428:	e001      	b.n	800642e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800642a:	f7ff f9fb 	bl	8005824 <xTaskResumeAll>
}
 800642e:	bf00      	nop
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20000eac 	.word	0x20000eac
 800643c:	20000eb0 	.word	0x20000eb0
 8006440:	e000ed04 	.word	0xe000ed04

08006444 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800644c:	4b0e      	ldr	r3, [pc, #56]	@ (8006488 <prvGetNextExpireTime+0x44>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <prvGetNextExpireTime+0x16>
 8006456:	2201      	movs	r2, #1
 8006458:	e000      	b.n	800645c <prvGetNextExpireTime+0x18>
 800645a:	2200      	movs	r2, #0
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d105      	bne.n	8006474 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006468:	4b07      	ldr	r3, [pc, #28]	@ (8006488 <prvGetNextExpireTime+0x44>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	60fb      	str	r3, [r7, #12]
 8006472:	e001      	b.n	8006478 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006478:	68fb      	ldr	r3, [r7, #12]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	20000ea8 	.word	0x20000ea8

0800648c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006494:	f7ff fa64 	bl	8005960 <xTaskGetTickCount>
 8006498:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800649a:	4b0b      	ldr	r3, [pc, #44]	@ (80064c8 <prvSampleTimeNow+0x3c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d205      	bcs.n	80064b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064a4:	f000 f93a 	bl	800671c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	e002      	b.n	80064b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064b6:	4a04      	ldr	r2, [pc, #16]	@ (80064c8 <prvSampleTimeNow+0x3c>)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064bc:	68fb      	ldr	r3, [r7, #12]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20000eb8 	.word	0x20000eb8

080064cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
 80064d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064da:	2300      	movs	r3, #0
 80064dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d812      	bhi.n	8006518 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	1ad2      	subs	r2, r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	699b      	ldr	r3, [r3, #24]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d302      	bcc.n	8006506 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006500:	2301      	movs	r3, #1
 8006502:	617b      	str	r3, [r7, #20]
 8006504:	e01b      	b.n	800653e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006506:	4b10      	ldr	r3, [pc, #64]	@ (8006548 <prvInsertTimerInActiveList+0x7c>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3304      	adds	r3, #4
 800650e:	4619      	mov	r1, r3
 8006510:	4610      	mov	r0, r2
 8006512:	f7fe f9b8 	bl	8004886 <vListInsert>
 8006516:	e012      	b.n	800653e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	429a      	cmp	r2, r3
 800651e:	d206      	bcs.n	800652e <prvInsertTimerInActiveList+0x62>
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d302      	bcc.n	800652e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006528:	2301      	movs	r3, #1
 800652a:	617b      	str	r3, [r7, #20]
 800652c:	e007      	b.n	800653e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800652e:	4b07      	ldr	r3, [pc, #28]	@ (800654c <prvInsertTimerInActiveList+0x80>)
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3304      	adds	r3, #4
 8006536:	4619      	mov	r1, r3
 8006538:	4610      	mov	r0, r2
 800653a:	f7fe f9a4 	bl	8004886 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800653e:	697b      	ldr	r3, [r7, #20]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3718      	adds	r7, #24
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	20000eac 	.word	0x20000eac
 800654c:	20000ea8 	.word	0x20000ea8

08006550 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08e      	sub	sp, #56	@ 0x38
 8006554:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006556:	e0ce      	b.n	80066f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	da19      	bge.n	8006592 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800655e:	1d3b      	adds	r3, r7, #4
 8006560:	3304      	adds	r3, #4
 8006562:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10b      	bne.n	8006582 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	61fb      	str	r3, [r7, #28]
}
 800657c:	bf00      	nop
 800657e:	bf00      	nop
 8006580:	e7fd      	b.n	800657e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006588:	6850      	ldr	r0, [r2, #4]
 800658a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800658c:	6892      	ldr	r2, [r2, #8]
 800658e:	4611      	mov	r1, r2
 8006590:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	f2c0 80ae 	blt.w	80066f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800659e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d004      	beq.n	80065b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a8:	3304      	adds	r3, #4
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fe f9a4 	bl	80048f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065b0:	463b      	mov	r3, r7
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7ff ff6a 	bl	800648c <prvSampleTimeNow>
 80065b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2b09      	cmp	r3, #9
 80065be:	f200 8097 	bhi.w	80066f0 <prvProcessReceivedCommands+0x1a0>
 80065c2:	a201      	add	r2, pc, #4	@ (adr r2, 80065c8 <prvProcessReceivedCommands+0x78>)
 80065c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c8:	080065f1 	.word	0x080065f1
 80065cc:	080065f1 	.word	0x080065f1
 80065d0:	080065f1 	.word	0x080065f1
 80065d4:	08006667 	.word	0x08006667
 80065d8:	0800667b 	.word	0x0800667b
 80065dc:	080066c7 	.word	0x080066c7
 80065e0:	080065f1 	.word	0x080065f1
 80065e4:	080065f1 	.word	0x080065f1
 80065e8:	08006667 	.word	0x08006667
 80065ec:	0800667b 	.word	0x0800667b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80065f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80065f6:	f043 0301 	orr.w	r3, r3, #1
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	18d1      	adds	r1, r2, r3
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800660e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006610:	f7ff ff5c 	bl	80064cc <prvInsertTimerInActiveList>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d06c      	beq.n	80066f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800661a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006620:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006624:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d061      	beq.n	80066f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	441a      	add	r2, r3
 8006638:	2300      	movs	r3, #0
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	2300      	movs	r3, #0
 800663e:	2100      	movs	r1, #0
 8006640:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006642:	f7ff fe01 	bl	8006248 <xTimerGenericCommand>
 8006646:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d152      	bne.n	80066f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800664e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	f3bf 8f6f 	isb	sy
 800665a:	f3bf 8f4f 	dsb	sy
 800665e:	61bb      	str	r3, [r7, #24]
}
 8006660:	bf00      	nop
 8006662:	bf00      	nop
 8006664:	e7fd      	b.n	8006662 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006668:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800666c:	f023 0301 	bic.w	r3, r3, #1
 8006670:	b2da      	uxtb	r2, r3
 8006672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006674:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006678:	e03d      	b.n	80066f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800667a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006680:	f043 0301 	orr.w	r3, r3, #1
 8006684:	b2da      	uxtb	r2, r3
 8006686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006688:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006690:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10b      	bne.n	80066b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	617b      	str	r3, [r7, #20]
}
 80066ac:	bf00      	nop
 80066ae:	bf00      	nop
 80066b0:	e7fd      	b.n	80066ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80066b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b4:	699a      	ldr	r2, [r3, #24]
 80066b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b8:	18d1      	adds	r1, r2, r3
 80066ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066c0:	f7ff ff04 	bl	80064cc <prvInsertTimerInActiveList>
					break;
 80066c4:	e017      	b.n	80066f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80066c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d103      	bne.n	80066dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80066d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066d6:	f000 fbe7 	bl	8006ea8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066da:	e00c      	b.n	80066f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066e2:	f023 0301 	bic.w	r3, r3, #1
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80066ee:	e002      	b.n	80066f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80066f0:	bf00      	nop
 80066f2:	e000      	b.n	80066f6 <prvProcessReceivedCommands+0x1a6>
					break;
 80066f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066f6:	4b08      	ldr	r3, [pc, #32]	@ (8006718 <prvProcessReceivedCommands+0x1c8>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	1d39      	adds	r1, r7, #4
 80066fc:	2200      	movs	r2, #0
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fe fbce 	bl	8004ea0 <xQueueReceive>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	f47f af26 	bne.w	8006558 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800670c:	bf00      	nop
 800670e:	bf00      	nop
 8006710:	3730      	adds	r7, #48	@ 0x30
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20000eb0 	.word	0x20000eb0

0800671c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b088      	sub	sp, #32
 8006720:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006722:	e049      	b.n	80067b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006724:	4b2e      	ldr	r3, [pc, #184]	@ (80067e0 <prvSwitchTimerLists+0xc4>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800672e:	4b2c      	ldr	r3, [pc, #176]	@ (80067e0 <prvSwitchTimerLists+0xc4>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3304      	adds	r3, #4
 800673c:	4618      	mov	r0, r3
 800673e:	f7fe f8db 	bl	80048f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b00      	cmp	r3, #0
 8006756:	d02f      	beq.n	80067b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	4413      	add	r3, r2
 8006760:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	429a      	cmp	r2, r3
 8006768:	d90e      	bls.n	8006788 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006776:	4b1a      	ldr	r3, [pc, #104]	@ (80067e0 <prvSwitchTimerLists+0xc4>)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3304      	adds	r3, #4
 800677e:	4619      	mov	r1, r3
 8006780:	4610      	mov	r0, r2
 8006782:	f7fe f880 	bl	8004886 <vListInsert>
 8006786:	e017      	b.n	80067b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006788:	2300      	movs	r3, #0
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	2300      	movs	r3, #0
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	2100      	movs	r1, #0
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f7ff fd58 	bl	8006248 <xTimerGenericCommand>
 8006798:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10b      	bne.n	80067b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	603b      	str	r3, [r7, #0]
}
 80067b2:	bf00      	nop
 80067b4:	bf00      	nop
 80067b6:	e7fd      	b.n	80067b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067b8:	4b09      	ldr	r3, [pc, #36]	@ (80067e0 <prvSwitchTimerLists+0xc4>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1b0      	bne.n	8006724 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80067c2:	4b07      	ldr	r3, [pc, #28]	@ (80067e0 <prvSwitchTimerLists+0xc4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80067c8:	4b06      	ldr	r3, [pc, #24]	@ (80067e4 <prvSwitchTimerLists+0xc8>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a04      	ldr	r2, [pc, #16]	@ (80067e0 <prvSwitchTimerLists+0xc4>)
 80067ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80067d0:	4a04      	ldr	r2, [pc, #16]	@ (80067e4 <prvSwitchTimerLists+0xc8>)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	6013      	str	r3, [r2, #0]
}
 80067d6:	bf00      	nop
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000ea8 	.word	0x20000ea8
 80067e4:	20000eac 	.word	0x20000eac

080067e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80067ee:	f000 f96b 	bl	8006ac8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80067f2:	4b15      	ldr	r3, [pc, #84]	@ (8006848 <prvCheckForValidListAndQueue+0x60>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d120      	bne.n	800683c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80067fa:	4814      	ldr	r0, [pc, #80]	@ (800684c <prvCheckForValidListAndQueue+0x64>)
 80067fc:	f7fd fff2 	bl	80047e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006800:	4813      	ldr	r0, [pc, #76]	@ (8006850 <prvCheckForValidListAndQueue+0x68>)
 8006802:	f7fd ffef 	bl	80047e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006806:	4b13      	ldr	r3, [pc, #76]	@ (8006854 <prvCheckForValidListAndQueue+0x6c>)
 8006808:	4a10      	ldr	r2, [pc, #64]	@ (800684c <prvCheckForValidListAndQueue+0x64>)
 800680a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800680c:	4b12      	ldr	r3, [pc, #72]	@ (8006858 <prvCheckForValidListAndQueue+0x70>)
 800680e:	4a10      	ldr	r2, [pc, #64]	@ (8006850 <prvCheckForValidListAndQueue+0x68>)
 8006810:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006812:	2300      	movs	r3, #0
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	4b11      	ldr	r3, [pc, #68]	@ (800685c <prvCheckForValidListAndQueue+0x74>)
 8006818:	4a11      	ldr	r2, [pc, #68]	@ (8006860 <prvCheckForValidListAndQueue+0x78>)
 800681a:	2110      	movs	r1, #16
 800681c:	200a      	movs	r0, #10
 800681e:	f7fe f8ff 	bl	8004a20 <xQueueGenericCreateStatic>
 8006822:	4603      	mov	r3, r0
 8006824:	4a08      	ldr	r2, [pc, #32]	@ (8006848 <prvCheckForValidListAndQueue+0x60>)
 8006826:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006828:	4b07      	ldr	r3, [pc, #28]	@ (8006848 <prvCheckForValidListAndQueue+0x60>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d005      	beq.n	800683c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006830:	4b05      	ldr	r3, [pc, #20]	@ (8006848 <prvCheckForValidListAndQueue+0x60>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	490b      	ldr	r1, [pc, #44]	@ (8006864 <prvCheckForValidListAndQueue+0x7c>)
 8006836:	4618      	mov	r0, r3
 8006838:	f7fe fd24 	bl	8005284 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800683c:	f000 f976 	bl	8006b2c <vPortExitCritical>
}
 8006840:	bf00      	nop
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20000eb0 	.word	0x20000eb0
 800684c:	20000e80 	.word	0x20000e80
 8006850:	20000e94 	.word	0x20000e94
 8006854:	20000ea8 	.word	0x20000ea8
 8006858:	20000eac 	.word	0x20000eac
 800685c:	20000f5c 	.word	0x20000f5c
 8006860:	20000ebc 	.word	0x20000ebc
 8006864:	08007318 	.word	0x08007318

08006868 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3b04      	subs	r3, #4
 8006878:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	3b04      	subs	r3, #4
 8006886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f023 0201 	bic.w	r2, r3, #1
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3b04      	subs	r3, #4
 8006896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006898:	4a0c      	ldr	r2, [pc, #48]	@ (80068cc <pxPortInitialiseStack+0x64>)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3b14      	subs	r3, #20
 80068a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3b04      	subs	r3, #4
 80068ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f06f 0202 	mvn.w	r2, #2
 80068b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3b20      	subs	r3, #32
 80068bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068be:	68fb      	ldr	r3, [r7, #12]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	080068d1 	.word	0x080068d1

080068d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80068d6:	2300      	movs	r3, #0
 80068d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068da:	4b13      	ldr	r3, [pc, #76]	@ (8006928 <prvTaskExitError+0x58>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e2:	d00b      	beq.n	80068fc <prvTaskExitError+0x2c>
	__asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	60fb      	str	r3, [r7, #12]
}
 80068f6:	bf00      	nop
 80068f8:	bf00      	nop
 80068fa:	e7fd      	b.n	80068f8 <prvTaskExitError+0x28>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	60bb      	str	r3, [r7, #8]
}
 800690e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006910:	bf00      	nop
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d0fc      	beq.n	8006912 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006918:	bf00      	nop
 800691a:	bf00      	nop
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	2000000c 	.word	0x2000000c
 800692c:	00000000 	.word	0x00000000

08006930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006930:	4b07      	ldr	r3, [pc, #28]	@ (8006950 <pxCurrentTCBConst2>)
 8006932:	6819      	ldr	r1, [r3, #0]
 8006934:	6808      	ldr	r0, [r1, #0]
 8006936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693a:	f380 8809 	msr	PSP, r0
 800693e:	f3bf 8f6f 	isb	sy
 8006942:	f04f 0000 	mov.w	r0, #0
 8006946:	f380 8811 	msr	BASEPRI, r0
 800694a:	4770      	bx	lr
 800694c:	f3af 8000 	nop.w

08006950 <pxCurrentTCBConst2>:
 8006950:	20000980 	.word	0x20000980
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006954:	bf00      	nop
 8006956:	bf00      	nop

08006958 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006958:	4808      	ldr	r0, [pc, #32]	@ (800697c <prvPortStartFirstTask+0x24>)
 800695a:	6800      	ldr	r0, [r0, #0]
 800695c:	6800      	ldr	r0, [r0, #0]
 800695e:	f380 8808 	msr	MSP, r0
 8006962:	f04f 0000 	mov.w	r0, #0
 8006966:	f380 8814 	msr	CONTROL, r0
 800696a:	b662      	cpsie	i
 800696c:	b661      	cpsie	f
 800696e:	f3bf 8f4f 	dsb	sy
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	df00      	svc	0
 8006978:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800697a:	bf00      	nop
 800697c:	e000ed08 	.word	0xe000ed08

08006980 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006986:	4b47      	ldr	r3, [pc, #284]	@ (8006aa4 <xPortStartScheduler+0x124>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a47      	ldr	r2, [pc, #284]	@ (8006aa8 <xPortStartScheduler+0x128>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d10b      	bne.n	80069a8 <xPortStartScheduler+0x28>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	613b      	str	r3, [r7, #16]
}
 80069a2:	bf00      	nop
 80069a4:	bf00      	nop
 80069a6:	e7fd      	b.n	80069a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069a8:	4b3e      	ldr	r3, [pc, #248]	@ (8006aa4 <xPortStartScheduler+0x124>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a3f      	ldr	r2, [pc, #252]	@ (8006aac <xPortStartScheduler+0x12c>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d10b      	bne.n	80069ca <xPortStartScheduler+0x4a>
	__asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	60fb      	str	r3, [r7, #12]
}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop
 80069c8:	e7fd      	b.n	80069c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069ca:	4b39      	ldr	r3, [pc, #228]	@ (8006ab0 <xPortStartScheduler+0x130>)
 80069cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	22ff      	movs	r2, #255	@ 0xff
 80069da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	4b31      	ldr	r3, [pc, #196]	@ (8006ab4 <xPortStartScheduler+0x134>)
 80069f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069f2:	4b31      	ldr	r3, [pc, #196]	@ (8006ab8 <xPortStartScheduler+0x138>)
 80069f4:	2207      	movs	r2, #7
 80069f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069f8:	e009      	b.n	8006a0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80069fa:	4b2f      	ldr	r3, [pc, #188]	@ (8006ab8 <xPortStartScheduler+0x138>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	4a2d      	ldr	r2, [pc, #180]	@ (8006ab8 <xPortStartScheduler+0x138>)
 8006a02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a0e:	78fb      	ldrb	r3, [r7, #3]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a16:	2b80      	cmp	r3, #128	@ 0x80
 8006a18:	d0ef      	beq.n	80069fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a1a:	4b27      	ldr	r3, [pc, #156]	@ (8006ab8 <xPortStartScheduler+0x138>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f1c3 0307 	rsb	r3, r3, #7
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d00b      	beq.n	8006a3e <xPortStartScheduler+0xbe>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	60bb      	str	r3, [r7, #8]
}
 8006a38:	bf00      	nop
 8006a3a:	bf00      	nop
 8006a3c:	e7fd      	b.n	8006a3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ab8 <xPortStartScheduler+0x138>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	021b      	lsls	r3, r3, #8
 8006a44:	4a1c      	ldr	r2, [pc, #112]	@ (8006ab8 <xPortStartScheduler+0x138>)
 8006a46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a48:	4b1b      	ldr	r3, [pc, #108]	@ (8006ab8 <xPortStartScheduler+0x138>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a50:	4a19      	ldr	r2, [pc, #100]	@ (8006ab8 <xPortStartScheduler+0x138>)
 8006a52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a5c:	4b17      	ldr	r3, [pc, #92]	@ (8006abc <xPortStartScheduler+0x13c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a16      	ldr	r2, [pc, #88]	@ (8006abc <xPortStartScheduler+0x13c>)
 8006a62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006a66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a68:	4b14      	ldr	r3, [pc, #80]	@ (8006abc <xPortStartScheduler+0x13c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a13      	ldr	r2, [pc, #76]	@ (8006abc <xPortStartScheduler+0x13c>)
 8006a6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006a72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a74:	f000 f8da 	bl	8006c2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a78:	4b11      	ldr	r3, [pc, #68]	@ (8006ac0 <xPortStartScheduler+0x140>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006a7e:	f000 f8f9 	bl	8006c74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006a82:	4b10      	ldr	r3, [pc, #64]	@ (8006ac4 <xPortStartScheduler+0x144>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a0f      	ldr	r2, [pc, #60]	@ (8006ac4 <xPortStartScheduler+0x144>)
 8006a88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006a8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a8e:	f7ff ff63 	bl	8006958 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a92:	f7ff f82f 	bl	8005af4 <vTaskSwitchContext>
	prvTaskExitError();
 8006a96:	f7ff ff1b 	bl	80068d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	e000ed00 	.word	0xe000ed00
 8006aa8:	410fc271 	.word	0x410fc271
 8006aac:	410fc270 	.word	0x410fc270
 8006ab0:	e000e400 	.word	0xe000e400
 8006ab4:	20000fac 	.word	0x20000fac
 8006ab8:	20000fb0 	.word	0x20000fb0
 8006abc:	e000ed20 	.word	0xe000ed20
 8006ac0:	2000000c 	.word	0x2000000c
 8006ac4:	e000ef34 	.word	0xe000ef34

08006ac8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	607b      	str	r3, [r7, #4]
}
 8006ae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ae2:	4b10      	ldr	r3, [pc, #64]	@ (8006b24 <vPortEnterCritical+0x5c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8006b24 <vPortEnterCritical+0x5c>)
 8006aea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006aec:	4b0d      	ldr	r3, [pc, #52]	@ (8006b24 <vPortEnterCritical+0x5c>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d110      	bne.n	8006b16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006af4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b28 <vPortEnterCritical+0x60>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00b      	beq.n	8006b16 <vPortEnterCritical+0x4e>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	603b      	str	r3, [r7, #0]
}
 8006b10:	bf00      	nop
 8006b12:	bf00      	nop
 8006b14:	e7fd      	b.n	8006b12 <vPortEnterCritical+0x4a>
	}
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	2000000c 	.word	0x2000000c
 8006b28:	e000ed04 	.word	0xe000ed04

08006b2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b32:	4b12      	ldr	r3, [pc, #72]	@ (8006b7c <vPortExitCritical+0x50>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <vPortExitCritical+0x26>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	607b      	str	r3, [r7, #4]
}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	e7fd      	b.n	8006b4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b52:	4b0a      	ldr	r3, [pc, #40]	@ (8006b7c <vPortExitCritical+0x50>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	4a08      	ldr	r2, [pc, #32]	@ (8006b7c <vPortExitCritical+0x50>)
 8006b5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b5c:	4b07      	ldr	r3, [pc, #28]	@ (8006b7c <vPortExitCritical+0x50>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d105      	bne.n	8006b70 <vPortExitCritical+0x44>
 8006b64:	2300      	movs	r3, #0
 8006b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	f383 8811 	msr	BASEPRI, r3
}
 8006b6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	2000000c 	.word	0x2000000c

08006b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b80:	f3ef 8009 	mrs	r0, PSP
 8006b84:	f3bf 8f6f 	isb	sy
 8006b88:	4b15      	ldr	r3, [pc, #84]	@ (8006be0 <pxCurrentTCBConst>)
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	f01e 0f10 	tst.w	lr, #16
 8006b90:	bf08      	it	eq
 8006b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b9a:	6010      	str	r0, [r2, #0]
 8006b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ba0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006ba4:	f380 8811 	msr	BASEPRI, r0
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	f3bf 8f6f 	isb	sy
 8006bb0:	f7fe ffa0 	bl	8005af4 <vTaskSwitchContext>
 8006bb4:	f04f 0000 	mov.w	r0, #0
 8006bb8:	f380 8811 	msr	BASEPRI, r0
 8006bbc:	bc09      	pop	{r0, r3}
 8006bbe:	6819      	ldr	r1, [r3, #0]
 8006bc0:	6808      	ldr	r0, [r1, #0]
 8006bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc6:	f01e 0f10 	tst.w	lr, #16
 8006bca:	bf08      	it	eq
 8006bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006bd0:	f380 8809 	msr	PSP, r0
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	f3af 8000 	nop.w

08006be0 <pxCurrentTCBConst>:
 8006be0:	20000980 	.word	0x20000980
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006be4:	bf00      	nop
 8006be6:	bf00      	nop

08006be8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	607b      	str	r3, [r7, #4]
}
 8006c00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c02:	f7fe febd 	bl	8005980 <xTaskIncrementTick>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c0c:	4b06      	ldr	r3, [pc, #24]	@ (8006c28 <xPortSysTickHandler+0x40>)
 8006c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	2300      	movs	r3, #0
 8006c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	f383 8811 	msr	BASEPRI, r3
}
 8006c1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c20:	bf00      	nop
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	e000ed04 	.word	0xe000ed04

08006c2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c30:	4b0b      	ldr	r3, [pc, #44]	@ (8006c60 <vPortSetupTimerInterrupt+0x34>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c36:	4b0b      	ldr	r3, [pc, #44]	@ (8006c64 <vPortSetupTimerInterrupt+0x38>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c68 <vPortSetupTimerInterrupt+0x3c>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a0a      	ldr	r2, [pc, #40]	@ (8006c6c <vPortSetupTimerInterrupt+0x40>)
 8006c42:	fba2 2303 	umull	r2, r3, r2, r3
 8006c46:	099b      	lsrs	r3, r3, #6
 8006c48:	4a09      	ldr	r2, [pc, #36]	@ (8006c70 <vPortSetupTimerInterrupt+0x44>)
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c4e:	4b04      	ldr	r3, [pc, #16]	@ (8006c60 <vPortSetupTimerInterrupt+0x34>)
 8006c50:	2207      	movs	r2, #7
 8006c52:	601a      	str	r2, [r3, #0]
}
 8006c54:	bf00      	nop
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	e000e010 	.word	0xe000e010
 8006c64:	e000e018 	.word	0xe000e018
 8006c68:	20000000 	.word	0x20000000
 8006c6c:	10624dd3 	.word	0x10624dd3
 8006c70:	e000e014 	.word	0xe000e014

08006c74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006c74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006c84 <vPortEnableVFP+0x10>
 8006c78:	6801      	ldr	r1, [r0, #0]
 8006c7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006c7e:	6001      	str	r1, [r0, #0]
 8006c80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006c82:	bf00      	nop
 8006c84:	e000ed88 	.word	0xe000ed88

08006c88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c8e:	f3ef 8305 	mrs	r3, IPSR
 8006c92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b0f      	cmp	r3, #15
 8006c98:	d915      	bls.n	8006cc6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c9a:	4a18      	ldr	r2, [pc, #96]	@ (8006cfc <vPortValidateInterruptPriority+0x74>)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ca4:	4b16      	ldr	r3, [pc, #88]	@ (8006d00 <vPortValidateInterruptPriority+0x78>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	7afa      	ldrb	r2, [r7, #11]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d20b      	bcs.n	8006cc6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	607b      	str	r3, [r7, #4]
}
 8006cc0:	bf00      	nop
 8006cc2:	bf00      	nop
 8006cc4:	e7fd      	b.n	8006cc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d04 <vPortValidateInterruptPriority+0x7c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006cce:	4b0e      	ldr	r3, [pc, #56]	@ (8006d08 <vPortValidateInterruptPriority+0x80>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d90b      	bls.n	8006cee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	603b      	str	r3, [r7, #0]
}
 8006ce8:	bf00      	nop
 8006cea:	bf00      	nop
 8006cec:	e7fd      	b.n	8006cea <vPortValidateInterruptPriority+0x62>
	}
 8006cee:	bf00      	nop
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	e000e3f0 	.word	0xe000e3f0
 8006d00:	20000fac 	.word	0x20000fac
 8006d04:	e000ed0c 	.word	0xe000ed0c
 8006d08:	20000fb0 	.word	0x20000fb0

08006d0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08a      	sub	sp, #40	@ 0x28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d14:	2300      	movs	r3, #0
 8006d16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d18:	f7fe fd76 	bl	8005808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8006e90 <pvPortMalloc+0x184>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d24:	f000 f924 	bl	8006f70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d28:	4b5a      	ldr	r3, [pc, #360]	@ (8006e94 <pvPortMalloc+0x188>)
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f040 8095 	bne.w	8006e60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01e      	beq.n	8006d7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006d3c:	2208      	movs	r2, #8
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4413      	add	r3, r2
 8006d42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f003 0307 	and.w	r3, r3, #7
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d015      	beq.n	8006d7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f023 0307 	bic.w	r3, r3, #7
 8006d54:	3308      	adds	r3, #8
 8006d56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f003 0307 	and.w	r3, r3, #7
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00b      	beq.n	8006d7a <pvPortMalloc+0x6e>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	617b      	str	r3, [r7, #20]
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	e7fd      	b.n	8006d76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d06f      	beq.n	8006e60 <pvPortMalloc+0x154>
 8006d80:	4b45      	ldr	r3, [pc, #276]	@ (8006e98 <pvPortMalloc+0x18c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d86a      	bhi.n	8006e60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d8a:	4b44      	ldr	r3, [pc, #272]	@ (8006e9c <pvPortMalloc+0x190>)
 8006d8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d8e:	4b43      	ldr	r3, [pc, #268]	@ (8006e9c <pvPortMalloc+0x190>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d94:	e004      	b.n	8006da0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d903      	bls.n	8006db2 <pvPortMalloc+0xa6>
 8006daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1f1      	bne.n	8006d96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006db2:	4b37      	ldr	r3, [pc, #220]	@ (8006e90 <pvPortMalloc+0x184>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d051      	beq.n	8006e60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2208      	movs	r2, #8
 8006dc2:	4413      	add	r3, r2
 8006dc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	1ad2      	subs	r2, r2, r3
 8006dd6:	2308      	movs	r3, #8
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d920      	bls.n	8006e20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4413      	add	r3, r2
 8006de4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00b      	beq.n	8006e08 <pvPortMalloc+0xfc>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	613b      	str	r3, [r7, #16]
}
 8006e02:	bf00      	nop
 8006e04:	bf00      	nop
 8006e06:	e7fd      	b.n	8006e04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	1ad2      	subs	r2, r2, r3
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e1a:	69b8      	ldr	r0, [r7, #24]
 8006e1c:	f000 f90a 	bl	8007034 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e20:	4b1d      	ldr	r3, [pc, #116]	@ (8006e98 <pvPortMalloc+0x18c>)
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8006e98 <pvPortMalloc+0x18c>)
 8006e2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8006e98 <pvPortMalloc+0x18c>)
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	4b1b      	ldr	r3, [pc, #108]	@ (8006ea0 <pvPortMalloc+0x194>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d203      	bcs.n	8006e42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e3a:	4b17      	ldr	r3, [pc, #92]	@ (8006e98 <pvPortMalloc+0x18c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a18      	ldr	r2, [pc, #96]	@ (8006ea0 <pvPortMalloc+0x194>)
 8006e40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	4b13      	ldr	r3, [pc, #76]	@ (8006e94 <pvPortMalloc+0x188>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e52:	2200      	movs	r2, #0
 8006e54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e56:	4b13      	ldr	r3, [pc, #76]	@ (8006ea4 <pvPortMalloc+0x198>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	4a11      	ldr	r2, [pc, #68]	@ (8006ea4 <pvPortMalloc+0x198>)
 8006e5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e60:	f7fe fce0 	bl	8005824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00b      	beq.n	8006e86 <pvPortMalloc+0x17a>
	__asm volatile
 8006e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	60fb      	str	r3, [r7, #12]
}
 8006e80:	bf00      	nop
 8006e82:	bf00      	nop
 8006e84:	e7fd      	b.n	8006e82 <pvPortMalloc+0x176>
	return pvReturn;
 8006e86:	69fb      	ldr	r3, [r7, #28]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3728      	adds	r7, #40	@ 0x28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	20001b74 	.word	0x20001b74
 8006e94:	20001b88 	.word	0x20001b88
 8006e98:	20001b78 	.word	0x20001b78
 8006e9c:	20001b6c 	.word	0x20001b6c
 8006ea0:	20001b7c 	.word	0x20001b7c
 8006ea4:	20001b80 	.word	0x20001b80

08006ea8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d04f      	beq.n	8006f5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006eba:	2308      	movs	r3, #8
 8006ebc:	425b      	negs	r3, r3
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	4b25      	ldr	r3, [pc, #148]	@ (8006f64 <vPortFree+0xbc>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10b      	bne.n	8006eee <vPortFree+0x46>
	__asm volatile
 8006ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	60fb      	str	r3, [r7, #12]
}
 8006ee8:	bf00      	nop
 8006eea:	bf00      	nop
 8006eec:	e7fd      	b.n	8006eea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00b      	beq.n	8006f0e <vPortFree+0x66>
	__asm volatile
 8006ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	60bb      	str	r3, [r7, #8]
}
 8006f08:	bf00      	nop
 8006f0a:	bf00      	nop
 8006f0c:	e7fd      	b.n	8006f0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	4b14      	ldr	r3, [pc, #80]	@ (8006f64 <vPortFree+0xbc>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4013      	ands	r3, r2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d01e      	beq.n	8006f5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d11a      	bne.n	8006f5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	4b0e      	ldr	r3, [pc, #56]	@ (8006f64 <vPortFree+0xbc>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	43db      	mvns	r3, r3
 8006f2e:	401a      	ands	r2, r3
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f34:	f7fe fc68 	bl	8005808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f68 <vPortFree+0xc0>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4413      	add	r3, r2
 8006f42:	4a09      	ldr	r2, [pc, #36]	@ (8006f68 <vPortFree+0xc0>)
 8006f44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f46:	6938      	ldr	r0, [r7, #16]
 8006f48:	f000 f874 	bl	8007034 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f4c:	4b07      	ldr	r3, [pc, #28]	@ (8006f6c <vPortFree+0xc4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3301      	adds	r3, #1
 8006f52:	4a06      	ldr	r2, [pc, #24]	@ (8006f6c <vPortFree+0xc4>)
 8006f54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f56:	f7fe fc65 	bl	8005824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f5a:	bf00      	nop
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	20001b88 	.word	0x20001b88
 8006f68:	20001b78 	.word	0x20001b78
 8006f6c:	20001b84 	.word	0x20001b84

08006f70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f76:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006f7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f7c:	4b27      	ldr	r3, [pc, #156]	@ (800701c <prvHeapInit+0xac>)
 8006f7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f003 0307 	and.w	r3, r3, #7
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00c      	beq.n	8006fa4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3307      	adds	r3, #7
 8006f8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 0307 	bic.w	r3, r3, #7
 8006f96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800701c <prvHeapInit+0xac>)
 8006fa0:	4413      	add	r3, r2
 8006fa2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8007020 <prvHeapInit+0xb0>)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fae:	4b1c      	ldr	r3, [pc, #112]	@ (8007020 <prvHeapInit+0xb0>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	4413      	add	r3, r2
 8006fba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fbc:	2208      	movs	r2, #8
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	1a9b      	subs	r3, r3, r2
 8006fc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0307 	bic.w	r3, r3, #7
 8006fca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4a15      	ldr	r2, [pc, #84]	@ (8007024 <prvHeapInit+0xb4>)
 8006fd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fd2:	4b14      	ldr	r3, [pc, #80]	@ (8007024 <prvHeapInit+0xb4>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006fda:	4b12      	ldr	r3, [pc, #72]	@ (8007024 <prvHeapInit+0xb4>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68fa      	ldr	r2, [r7, #12]
 8006fea:	1ad2      	subs	r2, r2, r3
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8007024 <prvHeapInit+0xb4>)
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8007028 <prvHeapInit+0xb8>)
 8006ffe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	4a09      	ldr	r2, [pc, #36]	@ (800702c <prvHeapInit+0xbc>)
 8007006:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007008:	4b09      	ldr	r3, [pc, #36]	@ (8007030 <prvHeapInit+0xc0>)
 800700a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800700e:	601a      	str	r2, [r3, #0]
}
 8007010:	bf00      	nop
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	20000fb4 	.word	0x20000fb4
 8007020:	20001b6c 	.word	0x20001b6c
 8007024:	20001b74 	.word	0x20001b74
 8007028:	20001b7c 	.word	0x20001b7c
 800702c:	20001b78 	.word	0x20001b78
 8007030:	20001b88 	.word	0x20001b88

08007034 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800703c:	4b28      	ldr	r3, [pc, #160]	@ (80070e0 <prvInsertBlockIntoFreeList+0xac>)
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	e002      	b.n	8007048 <prvInsertBlockIntoFreeList+0x14>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	429a      	cmp	r2, r3
 8007050:	d8f7      	bhi.n	8007042 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	4413      	add	r3, r2
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	429a      	cmp	r2, r3
 8007062:	d108      	bne.n	8007076 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	441a      	add	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	441a      	add	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	429a      	cmp	r2, r3
 8007088:	d118      	bne.n	80070bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	4b15      	ldr	r3, [pc, #84]	@ (80070e4 <prvInsertBlockIntoFreeList+0xb0>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d00d      	beq.n	80070b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	441a      	add	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	e008      	b.n	80070c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070b2:	4b0c      	ldr	r3, [pc, #48]	@ (80070e4 <prvInsertBlockIntoFreeList+0xb0>)
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	e003      	b.n	80070c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d002      	beq.n	80070d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070d2:	bf00      	nop
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	20001b6c 	.word	0x20001b6c
 80070e4:	20001b74 	.word	0x20001b74

080070e8 <memset>:
 80070e8:	4402      	add	r2, r0
 80070ea:	4603      	mov	r3, r0
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d100      	bne.n	80070f2 <memset+0xa>
 80070f0:	4770      	bx	lr
 80070f2:	f803 1b01 	strb.w	r1, [r3], #1
 80070f6:	e7f9      	b.n	80070ec <memset+0x4>

080070f8 <_reclaim_reent>:
 80070f8:	4b29      	ldr	r3, [pc, #164]	@ (80071a0 <_reclaim_reent+0xa8>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4283      	cmp	r3, r0
 80070fe:	b570      	push	{r4, r5, r6, lr}
 8007100:	4604      	mov	r4, r0
 8007102:	d04b      	beq.n	800719c <_reclaim_reent+0xa4>
 8007104:	69c3      	ldr	r3, [r0, #28]
 8007106:	b1ab      	cbz	r3, 8007134 <_reclaim_reent+0x3c>
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	b16b      	cbz	r3, 8007128 <_reclaim_reent+0x30>
 800710c:	2500      	movs	r5, #0
 800710e:	69e3      	ldr	r3, [r4, #28]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	5959      	ldr	r1, [r3, r5]
 8007114:	2900      	cmp	r1, #0
 8007116:	d13b      	bne.n	8007190 <_reclaim_reent+0x98>
 8007118:	3504      	adds	r5, #4
 800711a:	2d80      	cmp	r5, #128	@ 0x80
 800711c:	d1f7      	bne.n	800710e <_reclaim_reent+0x16>
 800711e:	69e3      	ldr	r3, [r4, #28]
 8007120:	4620      	mov	r0, r4
 8007122:	68d9      	ldr	r1, [r3, #12]
 8007124:	f000 f872 	bl	800720c <_free_r>
 8007128:	69e3      	ldr	r3, [r4, #28]
 800712a:	6819      	ldr	r1, [r3, #0]
 800712c:	b111      	cbz	r1, 8007134 <_reclaim_reent+0x3c>
 800712e:	4620      	mov	r0, r4
 8007130:	f000 f86c 	bl	800720c <_free_r>
 8007134:	6961      	ldr	r1, [r4, #20]
 8007136:	b111      	cbz	r1, 800713e <_reclaim_reent+0x46>
 8007138:	4620      	mov	r0, r4
 800713a:	f000 f867 	bl	800720c <_free_r>
 800713e:	69e1      	ldr	r1, [r4, #28]
 8007140:	b111      	cbz	r1, 8007148 <_reclaim_reent+0x50>
 8007142:	4620      	mov	r0, r4
 8007144:	f000 f862 	bl	800720c <_free_r>
 8007148:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800714a:	b111      	cbz	r1, 8007152 <_reclaim_reent+0x5a>
 800714c:	4620      	mov	r0, r4
 800714e:	f000 f85d 	bl	800720c <_free_r>
 8007152:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007154:	b111      	cbz	r1, 800715c <_reclaim_reent+0x64>
 8007156:	4620      	mov	r0, r4
 8007158:	f000 f858 	bl	800720c <_free_r>
 800715c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800715e:	b111      	cbz	r1, 8007166 <_reclaim_reent+0x6e>
 8007160:	4620      	mov	r0, r4
 8007162:	f000 f853 	bl	800720c <_free_r>
 8007166:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007168:	b111      	cbz	r1, 8007170 <_reclaim_reent+0x78>
 800716a:	4620      	mov	r0, r4
 800716c:	f000 f84e 	bl	800720c <_free_r>
 8007170:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007172:	b111      	cbz	r1, 800717a <_reclaim_reent+0x82>
 8007174:	4620      	mov	r0, r4
 8007176:	f000 f849 	bl	800720c <_free_r>
 800717a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800717c:	b111      	cbz	r1, 8007184 <_reclaim_reent+0x8c>
 800717e:	4620      	mov	r0, r4
 8007180:	f000 f844 	bl	800720c <_free_r>
 8007184:	6a23      	ldr	r3, [r4, #32]
 8007186:	b14b      	cbz	r3, 800719c <_reclaim_reent+0xa4>
 8007188:	4620      	mov	r0, r4
 800718a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800718e:	4718      	bx	r3
 8007190:	680e      	ldr	r6, [r1, #0]
 8007192:	4620      	mov	r0, r4
 8007194:	f000 f83a 	bl	800720c <_free_r>
 8007198:	4631      	mov	r1, r6
 800719a:	e7bb      	b.n	8007114 <_reclaim_reent+0x1c>
 800719c:	bd70      	pop	{r4, r5, r6, pc}
 800719e:	bf00      	nop
 80071a0:	20000010 	.word	0x20000010

080071a4 <__libc_init_array>:
 80071a4:	b570      	push	{r4, r5, r6, lr}
 80071a6:	4d0d      	ldr	r5, [pc, #52]	@ (80071dc <__libc_init_array+0x38>)
 80071a8:	4c0d      	ldr	r4, [pc, #52]	@ (80071e0 <__libc_init_array+0x3c>)
 80071aa:	1b64      	subs	r4, r4, r5
 80071ac:	10a4      	asrs	r4, r4, #2
 80071ae:	2600      	movs	r6, #0
 80071b0:	42a6      	cmp	r6, r4
 80071b2:	d109      	bne.n	80071c8 <__libc_init_array+0x24>
 80071b4:	4d0b      	ldr	r5, [pc, #44]	@ (80071e4 <__libc_init_array+0x40>)
 80071b6:	4c0c      	ldr	r4, [pc, #48]	@ (80071e8 <__libc_init_array+0x44>)
 80071b8:	f000 f87e 	bl	80072b8 <_init>
 80071bc:	1b64      	subs	r4, r4, r5
 80071be:	10a4      	asrs	r4, r4, #2
 80071c0:	2600      	movs	r6, #0
 80071c2:	42a6      	cmp	r6, r4
 80071c4:	d105      	bne.n	80071d2 <__libc_init_array+0x2e>
 80071c6:	bd70      	pop	{r4, r5, r6, pc}
 80071c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071cc:	4798      	blx	r3
 80071ce:	3601      	adds	r6, #1
 80071d0:	e7ee      	b.n	80071b0 <__libc_init_array+0xc>
 80071d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d6:	4798      	blx	r3
 80071d8:	3601      	adds	r6, #1
 80071da:	e7f2      	b.n	80071c2 <__libc_init_array+0x1e>
 80071dc:	080073f8 	.word	0x080073f8
 80071e0:	080073f8 	.word	0x080073f8
 80071e4:	080073f8 	.word	0x080073f8
 80071e8:	080073fc 	.word	0x080073fc

080071ec <__retarget_lock_acquire_recursive>:
 80071ec:	4770      	bx	lr

080071ee <__retarget_lock_release_recursive>:
 80071ee:	4770      	bx	lr

080071f0 <memcpy>:
 80071f0:	440a      	add	r2, r1
 80071f2:	4291      	cmp	r1, r2
 80071f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071f8:	d100      	bne.n	80071fc <memcpy+0xc>
 80071fa:	4770      	bx	lr
 80071fc:	b510      	push	{r4, lr}
 80071fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007206:	4291      	cmp	r1, r2
 8007208:	d1f9      	bne.n	80071fe <memcpy+0xe>
 800720a:	bd10      	pop	{r4, pc}

0800720c <_free_r>:
 800720c:	b538      	push	{r3, r4, r5, lr}
 800720e:	4605      	mov	r5, r0
 8007210:	2900      	cmp	r1, #0
 8007212:	d041      	beq.n	8007298 <_free_r+0x8c>
 8007214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007218:	1f0c      	subs	r4, r1, #4
 800721a:	2b00      	cmp	r3, #0
 800721c:	bfb8      	it	lt
 800721e:	18e4      	addlt	r4, r4, r3
 8007220:	f000 f83e 	bl	80072a0 <__malloc_lock>
 8007224:	4a1d      	ldr	r2, [pc, #116]	@ (800729c <_free_r+0x90>)
 8007226:	6813      	ldr	r3, [r2, #0]
 8007228:	b933      	cbnz	r3, 8007238 <_free_r+0x2c>
 800722a:	6063      	str	r3, [r4, #4]
 800722c:	6014      	str	r4, [r2, #0]
 800722e:	4628      	mov	r0, r5
 8007230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007234:	f000 b83a 	b.w	80072ac <__malloc_unlock>
 8007238:	42a3      	cmp	r3, r4
 800723a:	d908      	bls.n	800724e <_free_r+0x42>
 800723c:	6820      	ldr	r0, [r4, #0]
 800723e:	1821      	adds	r1, r4, r0
 8007240:	428b      	cmp	r3, r1
 8007242:	bf01      	itttt	eq
 8007244:	6819      	ldreq	r1, [r3, #0]
 8007246:	685b      	ldreq	r3, [r3, #4]
 8007248:	1809      	addeq	r1, r1, r0
 800724a:	6021      	streq	r1, [r4, #0]
 800724c:	e7ed      	b.n	800722a <_free_r+0x1e>
 800724e:	461a      	mov	r2, r3
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	b10b      	cbz	r3, 8007258 <_free_r+0x4c>
 8007254:	42a3      	cmp	r3, r4
 8007256:	d9fa      	bls.n	800724e <_free_r+0x42>
 8007258:	6811      	ldr	r1, [r2, #0]
 800725a:	1850      	adds	r0, r2, r1
 800725c:	42a0      	cmp	r0, r4
 800725e:	d10b      	bne.n	8007278 <_free_r+0x6c>
 8007260:	6820      	ldr	r0, [r4, #0]
 8007262:	4401      	add	r1, r0
 8007264:	1850      	adds	r0, r2, r1
 8007266:	4283      	cmp	r3, r0
 8007268:	6011      	str	r1, [r2, #0]
 800726a:	d1e0      	bne.n	800722e <_free_r+0x22>
 800726c:	6818      	ldr	r0, [r3, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	6053      	str	r3, [r2, #4]
 8007272:	4408      	add	r0, r1
 8007274:	6010      	str	r0, [r2, #0]
 8007276:	e7da      	b.n	800722e <_free_r+0x22>
 8007278:	d902      	bls.n	8007280 <_free_r+0x74>
 800727a:	230c      	movs	r3, #12
 800727c:	602b      	str	r3, [r5, #0]
 800727e:	e7d6      	b.n	800722e <_free_r+0x22>
 8007280:	6820      	ldr	r0, [r4, #0]
 8007282:	1821      	adds	r1, r4, r0
 8007284:	428b      	cmp	r3, r1
 8007286:	bf04      	itt	eq
 8007288:	6819      	ldreq	r1, [r3, #0]
 800728a:	685b      	ldreq	r3, [r3, #4]
 800728c:	6063      	str	r3, [r4, #4]
 800728e:	bf04      	itt	eq
 8007290:	1809      	addeq	r1, r1, r0
 8007292:	6021      	streq	r1, [r4, #0]
 8007294:	6054      	str	r4, [r2, #4]
 8007296:	e7ca      	b.n	800722e <_free_r+0x22>
 8007298:	bd38      	pop	{r3, r4, r5, pc}
 800729a:	bf00      	nop
 800729c:	20001cc8 	.word	0x20001cc8

080072a0 <__malloc_lock>:
 80072a0:	4801      	ldr	r0, [pc, #4]	@ (80072a8 <__malloc_lock+0x8>)
 80072a2:	f7ff bfa3 	b.w	80071ec <__retarget_lock_acquire_recursive>
 80072a6:	bf00      	nop
 80072a8:	20001cc4 	.word	0x20001cc4

080072ac <__malloc_unlock>:
 80072ac:	4801      	ldr	r0, [pc, #4]	@ (80072b4 <__malloc_unlock+0x8>)
 80072ae:	f7ff bf9e 	b.w	80071ee <__retarget_lock_release_recursive>
 80072b2:	bf00      	nop
 80072b4:	20001cc4 	.word	0x20001cc4

080072b8 <_init>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	bf00      	nop
 80072bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072be:	bc08      	pop	{r3}
 80072c0:	469e      	mov	lr, r3
 80072c2:	4770      	bx	lr

080072c4 <_fini>:
 80072c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c6:	bf00      	nop
 80072c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ca:	bc08      	pop	{r3}
 80072cc:	469e      	mov	lr, r3
 80072ce:	4770      	bx	lr
