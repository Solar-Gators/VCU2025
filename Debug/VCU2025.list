
VCU2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076a0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08007850  08007850  00008850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007978  08007978  00009060  2**0
                  CONTENTS
  4 .ARM          00000000  08007978  08007978  00009060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007978  08007978  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007978  08007978  00008978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800797c  0800797c  0000897c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007980  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c24  20000060  080079e0  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c84  080079e0  00009c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d638  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e86  00000000  00000000  000266c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a30  00000000  00000000  0002a550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001449  00000000  00000000  0002bf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d40  00000000  00000000  0002d3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d7df  00000000  00000000  00031109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d0c9  00000000  00000000  0004e8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b9b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071dc  00000000  00000000  0015b9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00162bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007838 	.word	0x08007838

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08007838 	.word	0x08007838

080001f0 <HAL_CAN_RxFifo0MsgPendingCallback>:

	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]

    // Retrieve the received message from FIFO 0
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80001f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000238 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80001fa:	4a10      	ldr	r2, [pc, #64]	@ (800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80001fc:	2100      	movs	r1, #0
 80001fe:	6878      	ldr	r0, [r7, #4]
 8000200:	f000 fe99 	bl	8000f36 <HAL_CAN_GetRxMessage>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
        // Error handling
        Error_Handler();
 800020a:	f000 fb0b 	bl	8000824 <Error_Handler>
    }

    // Process the received data
    // Example: Check the received ID
    if (RxData[0] == 0) {
 800020e:	4b0a      	ldr	r3, [pc, #40]	@ (8000238 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d10b      	bne.n	800022e <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
        // Process the received data in RxData

    	throttle = (uint16_t)RxData[1]<<8 | RxData[2];
 8000216:	4b08      	ldr	r3, [pc, #32]	@ (8000238 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000218:	785b      	ldrb	r3, [r3, #1]
 800021a:	021b      	lsls	r3, r3, #8
 800021c:	b21a      	sxth	r2, r3
 800021e:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000220:	789b      	ldrb	r3, [r3, #2]
 8000222:	b21b      	sxth	r3, r3
 8000224:	4313      	orrs	r3, r2
 8000226:	b21b      	sxth	r3, r3
 8000228:	b29a      	uxth	r2, r3
 800022a:	4b05      	ldr	r3, [pc, #20]	@ (8000240 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800022c:	801a      	strh	r2, [r3, #0]

    }
}
 800022e:	bf00      	nop
 8000230:	3708      	adds	r7, #8
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	2000014c 	.word	0x2000014c
 800023c:	20000130 	.word	0x20000130
 8000240:	2000011c 	.word	0x2000011c

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b088      	sub	sp, #32
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8];
	uint32_t TxMailbox;

	TxHeader.IDE = CAN_ID_STD;
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]
	TxHeader.StdId = 0x446;
 800024e:	f240 4346 	movw	r3, #1094	@ 0x446
 8000252:	60bb      	str	r3, [r7, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000254:	2300      	movs	r3, #0
 8000256:	617b      	str	r3, [r7, #20]
	TxHeader.DLC = 2;
 8000258:	2302      	movs	r3, #2
 800025a:	61bb      	str	r3, [r7, #24]

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800025c:	2102      	movs	r1, #2
 800025e:	4822      	ldr	r0, [pc, #136]	@ (80002e8 <main+0xa4>)
 8000260:	f000 ff8b 	bl	800117a <HAL_CAN_ActivateNotification>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <main+0x2a>
	{
		  Error_Handler();
 800026a:	f000 fadb 	bl	8000824 <Error_Handler>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026e:	f000 fd0a 	bl	8000c86 <HAL_Init>

  /* USER CODE BEGIN Init */
  hdac1.State = HAL_DAC_STATE_RESET;
 8000272:	4b1e      	ldr	r3, [pc, #120]	@ (80002ec <main+0xa8>)
 8000274:	2200      	movs	r2, #0
 8000276:	711a      	strb	r2, [r3, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f852 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f948 	bl	8000510 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000280:	f000 f8ca 	bl	8000418 <MX_DAC1_Init>
  MX_CAN1_Init();
 8000284:	f000 f892 	bl	80003ac <MX_CAN1_Init>
  MX_I2C1_Init();
 8000288:	f000 f902 	bl	8000490 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1); //Start DAC 1 and 2
 800028c:	2100      	movs	r1, #0
 800028e:	4817      	ldr	r0, [pc, #92]	@ (80002ec <main+0xa8>)
 8000290:	f001 facc 	bl	800182c <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 8000294:	2110      	movs	r1, #16
 8000296:	4815      	ldr	r0, [pc, #84]	@ (80002ec <main+0xa8>)
 8000298:	f001 fac8 	bl	800182c <HAL_DAC_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800029c:	f004 fc34 	bl	8004b08 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(Heart_Beat, NULL, &HeartBeat_attributes);
 80002a0:	4a13      	ldr	r2, [pc, #76]	@ (80002f0 <main+0xac>)
 80002a2:	2100      	movs	r1, #0
 80002a4:	4813      	ldr	r0, [pc, #76]	@ (80002f4 <main+0xb0>)
 80002a6:	f004 fc79 	bl	8004b9c <osThreadNew>
 80002aa:	4603      	mov	r3, r0
 80002ac:	4a12      	ldr	r2, [pc, #72]	@ (80002f8 <main+0xb4>)
 80002ae:	6013      	str	r3, [r2, #0]

  /* creation of UpdateThrottle */
  UpdateThrottleHandle = osThreadNew(Update_Throttle, NULL, &UpdateThrottle_attributes);
 80002b0:	4a12      	ldr	r2, [pc, #72]	@ (80002fc <main+0xb8>)
 80002b2:	2100      	movs	r1, #0
 80002b4:	4812      	ldr	r0, [pc, #72]	@ (8000300 <main+0xbc>)
 80002b6:	f004 fc71 	bl	8004b9c <osThreadNew>
 80002ba:	4603      	mov	r3, r0
 80002bc:	4a11      	ldr	r2, [pc, #68]	@ (8000304 <main+0xc0>)
 80002be:	6013      	str	r3, [r2, #0]

  /* creation of LightsControl */
  LightsControlHandle = osThreadNew(Lights_Control, NULL, &LightsControl_attributes);
 80002c0:	4a11      	ldr	r2, [pc, #68]	@ (8000308 <main+0xc4>)
 80002c2:	2100      	movs	r1, #0
 80002c4:	4811      	ldr	r0, [pc, #68]	@ (800030c <main+0xc8>)
 80002c6:	f004 fc69 	bl	8004b9c <osThreadNew>
 80002ca:	4603      	mov	r3, r0
 80002cc:	4a10      	ldr	r2, [pc, #64]	@ (8000310 <main+0xcc>)
 80002ce:	6013      	str	r3, [r2, #0]

  /* creation of ReadSensors */
  ReadSensorsHandle = osThreadNew(Read_Sensors, NULL, &ReadSensors_attributes);
 80002d0:	4a10      	ldr	r2, [pc, #64]	@ (8000314 <main+0xd0>)
 80002d2:	2100      	movs	r1, #0
 80002d4:	4810      	ldr	r0, [pc, #64]	@ (8000318 <main+0xd4>)
 80002d6:	f004 fc61 	bl	8004b9c <osThreadNew>
 80002da:	4603      	mov	r3, r0
 80002dc:	4a0f      	ldr	r2, [pc, #60]	@ (800031c <main+0xd8>)
 80002de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80002e0:	f004 fc36 	bl	8004b50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e4:	bf00      	nop
 80002e6:	e7fd      	b.n	80002e4 <main+0xa0>
 80002e8:	2000007c 	.word	0x2000007c
 80002ec:	200000a4 	.word	0x200000a4
 80002f0:	080078a0 	.word	0x080078a0
 80002f4:	0800063d 	.word	0x0800063d
 80002f8:	2000010c 	.word	0x2000010c
 80002fc:	080078c4 	.word	0x080078c4
 8000300:	08000661 	.word	0x08000661
 8000304:	20000110 	.word	0x20000110
 8000308:	080078e8 	.word	0x080078e8
 800030c:	08000729 	.word	0x08000729
 8000310:	20000114 	.word	0x20000114
 8000314:	0800790c 	.word	0x0800790c
 8000318:	080007f1 	.word	0x080007f1
 800031c:	20000118 	.word	0x20000118

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b096      	sub	sp, #88	@ 0x58
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0314 	add.w	r3, r7, #20
 800032a:	2244      	movs	r2, #68	@ 0x44
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f007 f99a 	bl	8007668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	463b      	mov	r3, r7
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
 8000340:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000342:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000346:	f002 fd5b 	bl	8002e00 <HAL_PWREx_ControlVoltageScaling>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000350:	f000 fa68 	bl	8000824 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000354:	2310      	movs	r3, #16
 8000356:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000358:	2301      	movs	r3, #1
 800035a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000360:	2360      	movs	r3, #96	@ 0x60
 8000362:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000364:	2300      	movs	r3, #0
 8000366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000368:	f107 0314 	add.w	r3, r7, #20
 800036c:	4618      	mov	r0, r3
 800036e:	f002 fd9d 	bl	8002eac <HAL_RCC_OscConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000378:	f000 fa54 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037c:	230f      	movs	r3, #15
 800037e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000380:	2300      	movs	r3, #0
 8000382:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000390:	463b      	mov	r3, r7
 8000392:	2100      	movs	r1, #0
 8000394:	4618      	mov	r0, r3
 8000396:	f003 f9a3 	bl	80036e0 <HAL_RCC_ClockConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003a0:	f000 fa40 	bl	8000824 <Error_Handler>
  }
}
 80003a4:	bf00      	nop
 80003a6:	3758      	adds	r7, #88	@ 0x58
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80003b0:	4b17      	ldr	r3, [pc, #92]	@ (8000410 <MX_CAN1_Init+0x64>)
 80003b2:	4a18      	ldr	r2, [pc, #96]	@ (8000414 <MX_CAN1_Init+0x68>)
 80003b4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80003b6:	4b16      	ldr	r3, [pc, #88]	@ (8000410 <MX_CAN1_Init+0x64>)
 80003b8:	2202      	movs	r2, #2
 80003ba:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80003bc:	4b14      	ldr	r3, [pc, #80]	@ (8000410 <MX_CAN1_Init+0x64>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003c2:	4b13      	ldr	r3, [pc, #76]	@ (8000410 <MX_CAN1_Init+0x64>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80003c8:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <MX_CAN1_Init+0x64>)
 80003ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80003ce:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000410 <MX_CAN1_Init+0x64>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <MX_CAN1_Init+0x64>)
 80003d8:	2200      	movs	r2, #0
 80003da:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <MX_CAN1_Init+0x64>)
 80003de:	2200      	movs	r2, #0
 80003e0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <MX_CAN1_Init+0x64>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80003e8:	4b09      	ldr	r3, [pc, #36]	@ (8000410 <MX_CAN1_Init+0x64>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80003ee:	4b08      	ldr	r3, [pc, #32]	@ (8000410 <MX_CAN1_Init+0x64>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80003f4:	4b06      	ldr	r3, [pc, #24]	@ (8000410 <MX_CAN1_Init+0x64>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	@ (8000410 <MX_CAN1_Init+0x64>)
 80003fc:	f000 fca0 	bl	8000d40 <HAL_CAN_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000406:	f000 fa0d 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	2000007c 	.word	0x2000007c
 8000414:	40006400 	.word	0x40006400

08000418 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08a      	sub	sp, #40	@ 0x28
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	2224      	movs	r2, #36	@ 0x24
 8000422:	2100      	movs	r1, #0
 8000424:	4618      	mov	r0, r3
 8000426:	f007 f91f 	bl	8007668 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800042a:	4b17      	ldr	r3, [pc, #92]	@ (8000488 <MX_DAC1_Init+0x70>)
 800042c:	4a17      	ldr	r2, [pc, #92]	@ (800048c <MX_DAC1_Init+0x74>)
 800042e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000430:	4815      	ldr	r0, [pc, #84]	@ (8000488 <MX_DAC1_Init+0x70>)
 8000432:	f001 f9d9 	bl	80017e8 <HAL_DAC_Init>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d001      	beq.n	8000440 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800043c:	f000 f9f2 	bl	8000824 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000440:	2300      	movs	r3, #0
 8000442:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000444:	2300      	movs	r3, #0
 8000446:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800044c:	2300      	movs	r3, #0
 800044e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	2200      	movs	r2, #0
 8000458:	4619      	mov	r1, r3
 800045a:	480b      	ldr	r0, [pc, #44]	@ (8000488 <MX_DAC1_Init+0x70>)
 800045c:	f001 fa58 	bl	8001910 <HAL_DAC_ConfigChannel>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000466:	f000 f9dd 	bl	8000824 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2210      	movs	r2, #16
 800046e:	4619      	mov	r1, r3
 8000470:	4805      	ldr	r0, [pc, #20]	@ (8000488 <MX_DAC1_Init+0x70>)
 8000472:	f001 fa4d 	bl	8001910 <HAL_DAC_ConfigChannel>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800047c:	f000 f9d2 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000480:	bf00      	nop
 8000482:	3728      	adds	r7, #40	@ 0x28
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200000a4 	.word	0x200000a4
 800048c:	40007400 	.word	0x40007400

08000490 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000494:	4b1b      	ldr	r3, [pc, #108]	@ (8000504 <MX_I2C1_Init+0x74>)
 8000496:	4a1c      	ldr	r2, [pc, #112]	@ (8000508 <MX_I2C1_Init+0x78>)
 8000498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 800049a:	4b1a      	ldr	r3, [pc, #104]	@ (8000504 <MX_I2C1_Init+0x74>)
 800049c:	4a1b      	ldr	r2, [pc, #108]	@ (800050c <MX_I2C1_Init+0x7c>)
 800049e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004a0:	4b18      	ldr	r3, [pc, #96]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004a6:	4b17      	ldr	r3, [pc, #92]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004ac:	4b15      	ldr	r3, [pc, #84]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004b2:	4b14      	ldr	r3, [pc, #80]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004b8:	4b12      	ldr	r3, [pc, #72]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004be:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ca:	480e      	ldr	r0, [pc, #56]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004cc:	f001 fd5a 	bl	8001f84 <HAL_I2C_Init>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004d6:	f000 f9a5 	bl	8000824 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004da:	2100      	movs	r1, #0
 80004dc:	4809      	ldr	r0, [pc, #36]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004de:	f002 fbea 	bl	8002cb6 <HAL_I2CEx_ConfigAnalogFilter>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004e8:	f000 f99c 	bl	8000824 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004ec:	2100      	movs	r1, #0
 80004ee:	4805      	ldr	r0, [pc, #20]	@ (8000504 <MX_I2C1_Init+0x74>)
 80004f0:	f002 fc2c 	bl	8002d4c <HAL_I2CEx_ConfigDigitalFilter>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004fa:	f000 f993 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	200000b8 	.word	0x200000b8
 8000508:	40005400 	.word	0x40005400
 800050c:	00100d14 	.word	0x00100d14

08000510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000526:	4b42      	ldr	r3, [pc, #264]	@ (8000630 <MX_GPIO_Init+0x120>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052a:	4a41      	ldr	r2, [pc, #260]	@ (8000630 <MX_GPIO_Init+0x120>)
 800052c:	f043 0304 	orr.w	r3, r3, #4
 8000530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000532:	4b3f      	ldr	r3, [pc, #252]	@ (8000630 <MX_GPIO_Init+0x120>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b3c      	ldr	r3, [pc, #240]	@ (8000630 <MX_GPIO_Init+0x120>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000542:	4a3b      	ldr	r2, [pc, #236]	@ (8000630 <MX_GPIO_Init+0x120>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800054a:	4b39      	ldr	r3, [pc, #228]	@ (8000630 <MX_GPIO_Init+0x120>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b36      	ldr	r3, [pc, #216]	@ (8000630 <MX_GPIO_Init+0x120>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055a:	4a35      	ldr	r2, [pc, #212]	@ (8000630 <MX_GPIO_Init+0x120>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000562:	4b33      	ldr	r3, [pc, #204]	@ (8000630 <MX_GPIO_Init+0x120>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800056e:	2200      	movs	r2, #0
 8000570:	210f      	movs	r1, #15
 8000572:	4830      	ldr	r0, [pc, #192]	@ (8000634 <MX_GPIO_Init+0x124>)
 8000574:	f001 fcd4 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2107      	movs	r1, #7
 800057c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000580:	f001 fcce 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f242 0102 	movw	r1, #8194	@ 0x2002
 800058a:	482b      	ldr	r0, [pc, #172]	@ (8000638 <MX_GPIO_Init+0x128>)
 800058c:	f001 fcc8 	bl	8001f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000590:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000594:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000596:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800059a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	4619      	mov	r1, r3
 80005a6:	4823      	ldr	r0, [pc, #140]	@ (8000634 <MX_GPIO_Init+0x124>)
 80005a8:	f001 fb28 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b0:	2301      	movs	r3, #1
 80005b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	4619      	mov	r1, r3
 80005c2:	481c      	ldr	r0, [pc, #112]	@ (8000634 <MX_GPIO_Init+0x124>)
 80005c4:	f001 fb1a 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : MC_Main_Pin PA1 PA2 */
  GPIO_InitStruct.Pin = MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2;
 80005c8:	2307      	movs	r3, #7
 80005ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	4619      	mov	r1, r3
 80005de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e2:	f001 fb0b 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 80005e6:	f242 0302 	movw	r3, #8194	@ 0x2002
 80005ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	2301      	movs	r3, #1
 80005ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	4619      	mov	r1, r3
 80005fe:	480e      	ldr	r0, [pc, #56]	@ (8000638 <MX_GPIO_Init+0x128>)
 8000600:	f001 fafc 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000604:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800060a:	2312      	movs	r3, #18
 800060c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000612:	2303      	movs	r3, #3
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000616:	2304      	movs	r3, #4
 8000618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_GPIO_Init+0x128>)
 8000622:	f001 faeb 	bl	8001bfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000626:	bf00      	nop
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000
 8000634:	48000800 	.word	0x48000800
 8000638:	48000400 	.word	0x48000400

0800063c <Heart_Beat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Heart_Beat */
void Heart_Beat(void *argument)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000644:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000648:	4804      	ldr	r0, [pc, #16]	@ (800065c <Heart_Beat+0x20>)
 800064a:	f001 fc81 	bl	8001f50 <HAL_GPIO_TogglePin>
    osDelay(500);
 800064e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000652:	f004 fb35 	bl	8004cc0 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000656:	bf00      	nop
 8000658:	e7f4      	b.n	8000644 <Heart_Beat+0x8>
 800065a:	bf00      	nop
 800065c:	48000400 	.word	0x48000400

08000660 <Update_Throttle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Update_Throttle */
void Update_Throttle(void *argument)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Update_Throttle */
  /* Infinite loop */
  for(;;)
  {
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, throttle);
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <Update_Throttle+0x98>)
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	2200      	movs	r2, #0
 800066e:	2110      	movs	r1, #16
 8000670:	4822      	ldr	r0, [pc, #136]	@ (80006fc <Update_Throttle+0x9c>)
 8000672:	f001 f928 	bl	80018c6 <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, regen);
 8000676:	4b22      	ldr	r3, [pc, #136]	@ (8000700 <Update_Throttle+0xa0>)
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	481f      	ldr	r0, [pc, #124]	@ (80006fc <Update_Throttle+0x9c>)
 8000680:	f001 f921 	bl	80018c6 <HAL_DAC_SetValue>

	  //updates gpio pins with states from global variables
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, mc_main_ctrl);
 8000684:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <Update_Throttle+0xa4>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	461a      	mov	r2, r3
 800068a:	2101      	movs	r1, #1
 800068c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000690:	f001 fc46 	bl	8001f20 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, mc_pwreco_ctrl);
 8000694:	4b1c      	ldr	r3, [pc, #112]	@ (8000708 <Update_Throttle+0xa8>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	2102      	movs	r1, #2
 800069c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a0:	f001 fc3e 	bl	8001f20 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, mc_fwdrev_ctrl);
 80006a4:	4b19      	ldr	r3, [pc, #100]	@ (800070c <Update_Throttle+0xac>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	2104      	movs	r1, #4
 80006ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b0:	f001 fc36 	bl	8001f20 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, fan_en);
 80006b4:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <Update_Throttle+0xb0>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	2108      	movs	r1, #8
 80006bc:	4815      	ldr	r0, [pc, #84]	@ (8000714 <Update_Throttle+0xb4>)
 80006be:	f001 fc2f 	bl	8001f20 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, horn_en);
 80006c2:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <Update_Throttle+0xb8>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	461a      	mov	r2, r3
 80006c8:	2110      	movs	r1, #16
 80006ca:	4812      	ldr	r0, [pc, #72]	@ (8000714 <Update_Throttle+0xb4>)
 80006cc:	f001 fc28 	bl	8001f20 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, mppt_pre_contactor_en);
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <Update_Throttle+0xbc>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	2104      	movs	r1, #4
 80006d8:	4811      	ldr	r0, [pc, #68]	@ (8000720 <Update_Throttle+0xc0>)
 80006da:	f001 fc21 	bl	8001f20 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, mppt_contactor_en);
 80006de:	4b11      	ldr	r3, [pc, #68]	@ (8000724 <Update_Throttle+0xc4>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	2108      	movs	r1, #8
 80006e6:	480e      	ldr	r0, [pc, #56]	@ (8000720 <Update_Throttle+0xc0>)
 80006e8:	f001 fc1a 	bl	8001f20 <HAL_GPIO_WritePin>

	  osDelay(20);
 80006ec:	2014      	movs	r0, #20
 80006ee:	f004 fae7 	bl	8004cc0 <osDelay>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, throttle);
 80006f2:	bf00      	nop
 80006f4:	e7b8      	b.n	8000668 <Update_Throttle+0x8>
 80006f6:	bf00      	nop
 80006f8:	2000011c 	.word	0x2000011c
 80006fc:	200000a4 	.word	0x200000a4
 8000700:	2000011e 	.word	0x2000011e
 8000704:	20000120 	.word	0x20000120
 8000708:	20000121 	.word	0x20000121
 800070c:	20000122 	.word	0x20000122
 8000710:	20000126 	.word	0x20000126
 8000714:	48000400 	.word	0x48000400
 8000718:	20000127 	.word	0x20000127
 800071c:	20000129 	.word	0x20000129
 8000720:	48000800 	.word	0x48000800
 8000724:	20000128 	.word	0x20000128

08000728 <Lights_Control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Lights_Control */
void Lights_Control(void *argument)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Lights_Control */
  int counter = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, rc_light_en); //sets center rear light (brake light)
 8000734:	4b26      	ldr	r3, [pc, #152]	@ (80007d0 <Lights_Control+0xa8>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	2101      	movs	r1, #1
 800073c:	4825      	ldr	r0, [pc, #148]	@ (80007d4 <Lights_Control+0xac>)
 800073e:	f001 fbef 	bl	8001f20 <HAL_GPIO_WritePin>

	  if (counter == 0) {
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d118      	bne.n	800077a <Lights_Control+0x52>
	     if (rl_turn == 1) {
 8000748:	4b23      	ldr	r3, [pc, #140]	@ (80007d8 <Lights_Control+0xb0>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d103      	bne.n	8000758 <Lights_Control+0x30>
	      	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8000750:	2101      	movs	r1, #1
 8000752:	4820      	ldr	r0, [pc, #128]	@ (80007d4 <Lights_Control+0xac>)
 8000754:	f001 fbfc 	bl	8001f50 <HAL_GPIO_TogglePin>
	     }
	     if (rr_turn == 1) {
 8000758:	4b20      	ldr	r3, [pc, #128]	@ (80007dc <Lights_Control+0xb4>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d103      	bne.n	8000768 <Lights_Control+0x40>
	      	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 8000760:	2102      	movs	r1, #2
 8000762:	481c      	ldr	r0, [pc, #112]	@ (80007d4 <Lights_Control+0xac>)
 8000764:	f001 fbf4 	bl	8001f50 <HAL_GPIO_TogglePin>
	     }
	     if (strb_light_en == 1) {
 8000768:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <Lights_Control+0xb8>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d104      	bne.n	800077a <Lights_Control+0x52>
	      	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 8000770:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000774:	4817      	ldr	r0, [pc, #92]	@ (80007d4 <Lights_Control+0xac>)
 8000776:	f001 fbeb 	bl	8001f50 <HAL_GPIO_TogglePin>
	     }
	  }

	  if (rl_turn == 0) {
 800077a:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <Lights_Control+0xb0>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d107      	bne.n	8000792 <Lights_Control+0x6a>
	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, rl_light_en);
 8000782:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <Lights_Control+0xbc>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800078c:	4811      	ldr	r0, [pc, #68]	@ (80007d4 <Lights_Control+0xac>)
 800078e:	f001 fbc7 	bl	8001f20 <HAL_GPIO_WritePin>
	  }

	  if (rr_turn == 0) {
 8000792:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <Lights_Control+0xb4>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d106      	bne.n	80007a8 <Lights_Control+0x80>
	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, rr_light_en);
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <Lights_Control+0xc0>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	461a      	mov	r2, r3
 80007a0:	2102      	movs	r1, #2
 80007a2:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <Lights_Control+0xac>)
 80007a4:	f001 fbbc 	bl	8001f20 <HAL_GPIO_WritePin>
	  }


	  counter += 100;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	3364      	adds	r3, #100	@ 0x64
 80007ac:	60fb      	str	r3, [r7, #12]
	  counter = counter%500;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	4a0e      	ldr	r2, [pc, #56]	@ (80007ec <Lights_Control+0xc4>)
 80007b2:	fb82 1203 	smull	r1, r2, r2, r3
 80007b6:	1151      	asrs	r1, r2, #5
 80007b8:	17da      	asrs	r2, r3, #31
 80007ba:	1a8a      	subs	r2, r1, r2
 80007bc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80007c0:	fb01 f202 	mul.w	r2, r1, r2
 80007c4:	1a9b      	subs	r3, r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]
	  osDelay(100);
 80007c8:	2064      	movs	r0, #100	@ 0x64
 80007ca:	f004 fa79 	bl	8004cc0 <osDelay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, rc_light_en); //sets center rear light (brake light)
 80007ce:	e7b1      	b.n	8000734 <Lights_Control+0xc>
 80007d0:	20000123 	.word	0x20000123
 80007d4:	48000800 	.word	0x48000800
 80007d8:	2000012a 	.word	0x2000012a
 80007dc:	2000012b 	.word	0x2000012b
 80007e0:	2000012c 	.word	0x2000012c
 80007e4:	20000125 	.word	0x20000125
 80007e8:	20000124 	.word	0x20000124
 80007ec:	10624dd3 	.word	0x10624dd3

080007f0 <Read_Sensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Read_Sensors */
void Read_Sensors(void *argument)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Read_Sensors */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007f8:	2001      	movs	r0, #1
 80007fa:	f004 fa61 	bl	8004cc0 <osDelay>
 80007fe:	e7fb      	b.n	80007f8 <Read_Sensors+0x8>

08000800 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a04      	ldr	r2, [pc, #16]	@ (8000820 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d101      	bne.n	8000816 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000812:	f000 fa51 	bl	8000cb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40000400 	.word	0x40000400

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <Error_Handler+0x8>

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b11      	ldr	r3, [pc, #68]	@ (800087c <HAL_MspInit+0x4c>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800083a:	4a10      	ldr	r2, [pc, #64]	@ (800087c <HAL_MspInit+0x4c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6613      	str	r3, [r2, #96]	@ 0x60
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <HAL_MspInit+0x4c>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <HAL_MspInit+0x4c>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000852:	4a0a      	ldr	r2, [pc, #40]	@ (800087c <HAL_MspInit+0x4c>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000858:	6593      	str	r3, [r2, #88]	@ 0x58
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <HAL_MspInit+0x4c>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800085e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	210f      	movs	r1, #15
 800086a:	f06f 0001 	mvn.w	r0, #1
 800086e:	f000 ff91 	bl	8001794 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08a      	sub	sp, #40	@ 0x28
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a24      	ldr	r2, [pc, #144]	@ (8000930 <HAL_CAN_MspInit+0xb0>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d141      	bne.n	8000926 <HAL_CAN_MspInit+0xa6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008a2:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <HAL_CAN_MspInit+0xb4>)
 80008a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a6:	4a23      	ldr	r2, [pc, #140]	@ (8000934 <HAL_CAN_MspInit+0xb4>)
 80008a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80008ae:	4b21      	ldr	r3, [pc, #132]	@ (8000934 <HAL_CAN_MspInit+0xb4>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000934 <HAL_CAN_MspInit+0xb4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	4a1d      	ldr	r2, [pc, #116]	@ (8000934 <HAL_CAN_MspInit+0xb4>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <HAL_CAN_MspInit+0xb4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008dc:	2301      	movs	r3, #1
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008e4:	2309      	movs	r3, #9
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4812      	ldr	r0, [pc, #72]	@ (8000938 <HAL_CAN_MspInit+0xb8>)
 80008f0:	f001 f984 	bl	8001bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000906:	2309      	movs	r3, #9
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4809      	ldr	r0, [pc, #36]	@ (8000938 <HAL_CAN_MspInit+0xb8>)
 8000912:	f001 f973 	bl	8001bfc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2105      	movs	r1, #5
 800091a:	2014      	movs	r0, #20
 800091c:	f000 ff3a 	bl	8001794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000920:	2014      	movs	r0, #20
 8000922:	f000 ff53 	bl	80017cc <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	@ 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40006400 	.word	0x40006400
 8000934:	40021000 	.word	0x40021000
 8000938:	48000400 	.word	0x48000400

0800093c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	@ 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a15      	ldr	r2, [pc, #84]	@ (80009b0 <HAL_DAC_MspInit+0x74>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d124      	bne.n	80009a8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800095e:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <HAL_DAC_MspInit+0x78>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000962:	4a14      	ldr	r2, [pc, #80]	@ (80009b4 <HAL_DAC_MspInit+0x78>)
 8000964:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000968:	6593      	str	r3, [r2, #88]	@ 0x58
 800096a:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <HAL_DAC_MspInit+0x78>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <HAL_DAC_MspInit+0x78>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	4a0e      	ldr	r2, [pc, #56]	@ (80009b4 <HAL_DAC_MspInit+0x78>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000982:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <HAL_DAC_MspInit+0x78>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800098e:	2330      	movs	r3, #48	@ 0x30
 8000990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000992:	2303      	movs	r3, #3
 8000994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a4:	f001 f92a 	bl	8001bfc <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	@ 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40007400 	.word	0x40007400
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b0ac      	sub	sp, #176	@ 0xb0
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	228c      	movs	r2, #140	@ 0x8c
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f006 fe45 	bl	8007668 <memset>
  if(hi2c->Instance==I2C1)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a29      	ldr	r2, [pc, #164]	@ (8000a88 <HAL_I2C_MspInit+0xd0>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d14a      	bne.n	8000a7e <HAL_I2C_MspInit+0xc6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009e8:	2340      	movs	r3, #64	@ 0x40
 80009ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 f8b3 	bl	8003b60 <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a00:	f7ff ff10 	bl	8000824 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b21      	ldr	r3, [pc, #132]	@ (8000a8c <HAL_I2C_MspInit+0xd4>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a08:	4a20      	ldr	r2, [pc, #128]	@ (8000a8c <HAL_I2C_MspInit+0xd4>)
 8000a0a:	f043 0302 	orr.w	r3, r3, #2
 8000a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a10:	4b1e      	ldr	r3, [pc, #120]	@ (8000a8c <HAL_I2C_MspInit+0xd4>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a1c:	23c0      	movs	r3, #192	@ 0xc0
 8000a1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a22:	2312      	movs	r3, #18
 8000a24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a34:	2304      	movs	r3, #4
 8000a36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4813      	ldr	r0, [pc, #76]	@ (8000a90 <HAL_I2C_MspInit+0xd8>)
 8000a42:	f001 f8db 	bl	8001bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <HAL_I2C_MspInit+0xd4>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4a:	4a10      	ldr	r2, [pc, #64]	@ (8000a8c <HAL_I2C_MspInit+0xd4>)
 8000a4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <HAL_I2C_MspInit+0xd4>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2105      	movs	r1, #5
 8000a62:	201f      	movs	r0, #31
 8000a64:	f000 fe96 	bl	8001794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a68:	201f      	movs	r0, #31
 8000a6a:	f000 feaf 	bl	80017cc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2105      	movs	r1, #5
 8000a72:	2020      	movs	r0, #32
 8000a74:	f000 fe8e 	bl	8001794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a78:	2020      	movs	r0, #32
 8000a7a:	f000 fea7 	bl	80017cc <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a7e:	bf00      	nop
 8000a80:	37b0      	adds	r7, #176	@ 0xb0
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40005400 	.word	0x40005400
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	48000400 	.word	0x48000400

08000a94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08e      	sub	sp, #56	@ 0x38
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000aa2:	4b34      	ldr	r3, [pc, #208]	@ (8000b74 <HAL_InitTick+0xe0>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa6:	4a33      	ldr	r2, [pc, #204]	@ (8000b74 <HAL_InitTick+0xe0>)
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aae:	4b31      	ldr	r3, [pc, #196]	@ (8000b74 <HAL_InitTick+0xe0>)
 8000ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aba:	f107 0210 	add.w	r2, r7, #16
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f002 ffb9 	bl	8003a3c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000aca:	6a3b      	ldr	r3, [r7, #32]
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d103      	bne.n	8000adc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ad4:	f002 ff9c 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8000ad8:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ada:	e004      	b.n	8000ae6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000adc:	f002 ff98 	bl	8003a10 <HAL_RCC_GetPCLK1Freq>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ae8:	4a23      	ldr	r2, [pc, #140]	@ (8000b78 <HAL_InitTick+0xe4>)
 8000aea:	fba2 2303 	umull	r2, r3, r2, r3
 8000aee:	0c9b      	lsrs	r3, r3, #18
 8000af0:	3b01      	subs	r3, #1
 8000af2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000af4:	4b21      	ldr	r3, [pc, #132]	@ (8000b7c <HAL_InitTick+0xe8>)
 8000af6:	4a22      	ldr	r2, [pc, #136]	@ (8000b80 <HAL_InitTick+0xec>)
 8000af8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000afa:	4b20      	ldr	r3, [pc, #128]	@ (8000b7c <HAL_InitTick+0xe8>)
 8000afc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b00:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000b02:	4a1e      	ldr	r2, [pc, #120]	@ (8000b7c <HAL_InitTick+0xe8>)
 8000b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b06:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	@ (8000b7c <HAL_InitTick+0xe8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <HAL_InitTick+0xe8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <HAL_InitTick+0xe8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000b1a:	4818      	ldr	r0, [pc, #96]	@ (8000b7c <HAL_InitTick+0xe8>)
 8000b1c:	f003 fcea 	bl	80044f4 <HAL_TIM_Base_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b26:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d11b      	bne.n	8000b66 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000b2e:	4813      	ldr	r0, [pc, #76]	@ (8000b7c <HAL_InitTick+0xe8>)
 8000b30:	f003 fd42 	bl	80045b8 <HAL_TIM_Base_Start_IT>
 8000b34:	4603      	mov	r3, r0
 8000b36:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b3a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d111      	bne.n	8000b66 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b42:	201d      	movs	r0, #29
 8000b44:	f000 fe42 	bl	80017cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b0f      	cmp	r3, #15
 8000b4c:	d808      	bhi.n	8000b60 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	6879      	ldr	r1, [r7, #4]
 8000b52:	201d      	movs	r0, #29
 8000b54:	f000 fe1e 	bl	8001794 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b58:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <HAL_InitTick+0xf0>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	e002      	b.n	8000b66 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b66:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3738      	adds	r7, #56	@ 0x38
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000
 8000b78:	431bde83 	.word	0x431bde83
 8000b7c:	20000154 	.word	0x20000154
 8000b80:	40000400 	.word	0x40000400
 8000b84:	20000004 	.word	0x20000004

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <NMI_Handler+0x4>

08000b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <MemManage_Handler+0x4>

08000ba0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <UsageFault_Handler+0x4>

08000bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bc4:	4802      	ldr	r0, [pc, #8]	@ (8000bd0 <CAN1_RX0_IRQHandler+0x10>)
 8000bc6:	f000 fafe 	bl	80011c6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000007c 	.word	0x2000007c

08000bd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000bd8:	4802      	ldr	r0, [pc, #8]	@ (8000be4 <TIM3_IRQHandler+0x10>)
 8000bda:	f003 fd5d 	bl	8004698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000154 	.word	0x20000154

08000be8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <I2C1_EV_IRQHandler+0x10>)
 8000bee:	f001 fa64 	bl	80020ba <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200000b8 	.word	0x200000b8

08000bfc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c00:	4802      	ldr	r0, [pc, #8]	@ (8000c0c <I2C1_ER_IRQHandler+0x10>)
 8000c02:	f001 fa74 	bl	80020ee <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	200000b8 	.word	0x200000b8

08000c10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <SystemInit+0x20>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c1a:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <SystemInit+0x20>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c38:	f7ff ffea 	bl	8000c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c3c:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c3e:	490d      	ldr	r1, [pc, #52]	@ (8000c74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c40:	4a0d      	ldr	r2, [pc, #52]	@ (8000c78 <LoopForever+0xe>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c54:	4c0a      	ldr	r4, [pc, #40]	@ (8000c80 <LoopForever+0x16>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c62:	f006 fd5f 	bl	8007724 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c66:	f7ff faed 	bl	8000244 <main>

08000c6a <LoopForever>:

LoopForever:
    b LoopForever
 8000c6a:	e7fe      	b.n	8000c6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c6c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c78:	08007980 	.word	0x08007980
  ldr r2, =_sbss
 8000c7c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c80:	20001c84 	.word	0x20001c84

08000c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC1_2_IRQHandler>

08000c86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 fd74 	bl	800177e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c96:	200f      	movs	r0, #15
 8000c98:	f7ff fefc 	bl	8000a94 <HAL_InitTick>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d002      	beq.n	8000ca8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	71fb      	strb	r3, [r7, #7]
 8000ca6:	e001      	b.n	8000cac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca8:	f7ff fdc2 	bl	8000830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cac:	79fb      	ldrb	r3, [r7, #7]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	200001a0 	.word	0x200001a0

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	@ (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	200001a0 	.word	0x200001a0

08000cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d00:	f7ff ffee 	bl	8000ce0 <HAL_GetTick>
 8000d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d10:	d005      	beq.n	8000d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d12:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <HAL_Delay+0x44>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d1e:	bf00      	nop
 8000d20:	f7ff ffde 	bl	8000ce0 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d8f7      	bhi.n	8000d20 <HAL_Delay+0x28>
  {
  }
}
 8000d30:	bf00      	nop
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008

08000d40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e0ed      	b.n	8000f2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d102      	bne.n	8000d64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff fd8e 	bl	8000880 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 0201 	orr.w	r2, r2, #1
 8000d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d74:	f7ff ffb4 	bl	8000ce0 <HAL_GetTick>
 8000d78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d7a:	e012      	b.n	8000da2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d7c:	f7ff ffb0 	bl	8000ce0 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b0a      	cmp	r3, #10
 8000d88:	d90b      	bls.n	8000da2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2205      	movs	r2, #5
 8000d9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e0c5      	b.n	8000f2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0e5      	beq.n	8000d7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 0202 	bic.w	r2, r2, #2
 8000dbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dc0:	f7ff ff8e 	bl	8000ce0 <HAL_GetTick>
 8000dc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dc6:	e012      	b.n	8000dee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dc8:	f7ff ff8a 	bl	8000ce0 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b0a      	cmp	r3, #10
 8000dd4:	d90b      	bls.n	8000dee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2205      	movs	r2, #5
 8000de6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e09f      	b.n	8000f2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0302 	and.w	r3, r3, #2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1e5      	bne.n	8000dc8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7e1b      	ldrb	r3, [r3, #24]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d108      	bne.n	8000e16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e007      	b.n	8000e26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7e5b      	ldrb	r3, [r3, #25]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d108      	bne.n	8000e40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e007      	b.n	8000e50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7e9b      	ldrb	r3, [r3, #26]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d108      	bne.n	8000e6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0220 	orr.w	r2, r2, #32
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	e007      	b.n	8000e7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0220 	bic.w	r2, r2, #32
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7edb      	ldrb	r3, [r3, #27]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d108      	bne.n	8000e94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0210 	bic.w	r2, r2, #16
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e007      	b.n	8000ea4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0210 	orr.w	r2, r2, #16
 8000ea2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7f1b      	ldrb	r3, [r3, #28]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d108      	bne.n	8000ebe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 0208 	orr.w	r2, r2, #8
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	e007      	b.n	8000ece <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 0208 	bic.w	r2, r2, #8
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7f5b      	ldrb	r3, [r3, #29]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d108      	bne.n	8000ee8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f042 0204 	orr.w	r2, r2, #4
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	e007      	b.n	8000ef8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 0204 	bic.w	r2, r2, #4
 8000ef6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	ea42 0103 	orr.w	r1, r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	1e5a      	subs	r2, r3, #1
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f36:	b480      	push	{r7}
 8000f38:	b087      	sub	sp, #28
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f4a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f4c:	7dfb      	ldrb	r3, [r7, #23]
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d003      	beq.n	8000f5a <HAL_CAN_GetRxMessage+0x24>
 8000f52:	7dfb      	ldrb	r3, [r7, #23]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	f040 8103 	bne.w	8001160 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d10e      	bne.n	8000f7e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d116      	bne.n	8000f9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f72:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e0f7      	b.n	800116e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d107      	bne.n	8000f9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f90:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e0e8      	b.n	800116e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	331b      	adds	r3, #27
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	4413      	add	r3, r2
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0204 	and.w	r2, r3, #4
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	331b      	adds	r3, #27
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	4413      	add	r3, r2
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	0d5b      	lsrs	r3, r3, #21
 8000fca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	e00b      	b.n	8000fec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	331b      	adds	r3, #27
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	4413      	add	r3, r2
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	08db      	lsrs	r3, r3, #3
 8000fe4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	331b      	adds	r3, #27
 8000ff4:	011b      	lsls	r3, r3, #4
 8000ff6:	4413      	add	r3, r2
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0202 	and.w	r2, r3, #2
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	331b      	adds	r3, #27
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	4413      	add	r3, r2
 800100e:	3304      	adds	r3, #4
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0308 	and.w	r3, r3, #8
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2208      	movs	r2, #8
 800101e:	611a      	str	r2, [r3, #16]
 8001020:	e00b      	b.n	800103a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	331b      	adds	r3, #27
 800102a:	011b      	lsls	r3, r3, #4
 800102c:	4413      	add	r3, r2
 800102e:	3304      	adds	r3, #4
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 020f 	and.w	r2, r3, #15
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	331b      	adds	r3, #27
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	4413      	add	r3, r2
 8001046:	3304      	adds	r3, #4
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	0a1b      	lsrs	r3, r3, #8
 800104c:	b2da      	uxtb	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	331b      	adds	r3, #27
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	4413      	add	r3, r2
 800105e:	3304      	adds	r3, #4
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	0c1b      	lsrs	r3, r3, #16
 8001064:	b29a      	uxth	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	4413      	add	r3, r2
 8001074:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	4413      	add	r3, r2
 800108a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	0a1a      	lsrs	r2, r3, #8
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	3301      	adds	r3, #1
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	4413      	add	r3, r2
 80010a4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	0c1a      	lsrs	r2, r3, #16
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	3302      	adds	r3, #2
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	4413      	add	r3, r2
 80010be:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	0e1a      	lsrs	r2, r3, #24
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	3303      	adds	r3, #3
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	4413      	add	r3, r2
 80010d8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3304      	adds	r3, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	0a1a      	lsrs	r2, r3, #8
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	3305      	adds	r3, #5
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	011b      	lsls	r3, r3, #4
 8001108:	4413      	add	r3, r2
 800110a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	0c1a      	lsrs	r2, r3, #16
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	3306      	adds	r3, #6
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	011b      	lsls	r3, r3, #4
 8001122:	4413      	add	r3, r2
 8001124:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	0e1a      	lsrs	r2, r3, #24
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	3307      	adds	r3, #7
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d108      	bne.n	800114c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f042 0220 	orr.w	r2, r2, #32
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	e007      	b.n	800115c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	691a      	ldr	r2, [r3, #16]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0220 	orr.w	r2, r2, #32
 800115a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	e006      	b.n	800116e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001164:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
  }
}
 800116e:	4618      	mov	r0, r3
 8001170:	371c      	adds	r7, #28
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800117a:	b480      	push	{r7}
 800117c:	b085      	sub	sp, #20
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 3020 	ldrb.w	r3, [r3, #32]
 800118a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d002      	beq.n	8001198 <HAL_CAN_ActivateNotification+0x1e>
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d109      	bne.n	80011ac <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6959      	ldr	r1, [r3, #20]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	e006      	b.n	80011ba <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
  }
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b08a      	sub	sp, #40	@ 0x28
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	691b      	ldr	r3, [r3, #16]
 80011f8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	2b00      	cmp	r3, #0
 800120a:	d07c      	beq.n	8001306 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d023      	beq.n	800125e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2201      	movs	r2, #1
 800121c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 f983 	bl	8001534 <HAL_CAN_TxMailbox0CompleteCallback>
 800122e:	e016      	b.n	800125e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	2b00      	cmp	r3, #0
 8001238:	d004      	beq.n	8001244 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800123a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
 8001242:	e00c      	b.n	800125e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	2b00      	cmp	r3, #0
 800124c:	d004      	beq.n	8001258 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001250:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
 8001256:	e002      	b.n	800125e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f000 f989 	bl	8001570 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001264:	2b00      	cmp	r3, #0
 8001266:	d024      	beq.n	80012b2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001270:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f963 	bl	8001548 <HAL_CAN_TxMailbox1CompleteCallback>
 8001282:	e016      	b.n	80012b2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800128a:	2b00      	cmp	r3, #0
 800128c:	d004      	beq.n	8001298 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
 8001296:	e00c      	b.n	80012b2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d004      	beq.n	80012ac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80012a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012aa:	e002      	b.n	80012b2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f969 	bl	8001584 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d024      	beq.n	8001306 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f943 	bl	800155c <HAL_CAN_TxMailbox2CompleteCallback>
 80012d6:	e016      	b.n	8001306 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d004      	beq.n	80012ec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ea:	e00c      	b.n	8001306 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d004      	beq.n	8001300 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80012f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80012fe:	e002      	b.n	8001306 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f949 	bl	8001598 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00c      	beq.n	800132a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2210      	movs	r2, #16
 8001328:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00b      	beq.n	800134c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2208      	movs	r2, #8
 8001344:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f930 	bl	80015ac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d009      	beq.n	800136a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7fe ff43 	bl	80001f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800136a:	6a3b      	ldr	r3, [r7, #32]
 800136c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00c      	beq.n	800138e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	2b00      	cmp	r3, #0
 800137c:	d007      	beq.n	800138e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800137e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001380:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2210      	movs	r2, #16
 800138c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	f003 0320 	and.w	r3, r3, #32
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00b      	beq.n	80013b0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d006      	beq.n	80013b0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2208      	movs	r2, #8
 80013a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 f912 	bl	80015d4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	f003 0310 	and.w	r3, r3, #16
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d009      	beq.n	80013ce <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f8f9 	bl	80015c0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80013ce:	6a3b      	ldr	r3, [r7, #32]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00b      	beq.n	80013f0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d006      	beq.n	80013f0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2210      	movs	r2, #16
 80013e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f8fc 	bl	80015e8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00b      	beq.n	8001412 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d006      	beq.n	8001412 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2208      	movs	r2, #8
 800140a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 f8f5 	bl	80015fc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001412:	6a3b      	ldr	r3, [r7, #32]
 8001414:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d07b      	beq.n	8001514 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	2b00      	cmp	r3, #0
 8001424:	d072      	beq.n	800150c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001426:	6a3b      	ldr	r3, [r7, #32]
 8001428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800142c:	2b00      	cmp	r3, #0
 800142e:	d008      	beq.n	8001442 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001442:	6a3b      	ldr	r3, [r7, #32]
 8001444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001448:	2b00      	cmp	r3, #0
 800144a:	d008      	beq.n	800145e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800145e:	6a3b      	ldr	r3, [r7, #32]
 8001460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001480:	2b00      	cmp	r3, #0
 8001482:	d043      	beq.n	800150c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800148a:	2b00      	cmp	r3, #0
 800148c:	d03e      	beq.n	800150c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001494:	2b60      	cmp	r3, #96	@ 0x60
 8001496:	d02b      	beq.n	80014f0 <HAL_CAN_IRQHandler+0x32a>
 8001498:	2b60      	cmp	r3, #96	@ 0x60
 800149a:	d82e      	bhi.n	80014fa <HAL_CAN_IRQHandler+0x334>
 800149c:	2b50      	cmp	r3, #80	@ 0x50
 800149e:	d022      	beq.n	80014e6 <HAL_CAN_IRQHandler+0x320>
 80014a0:	2b50      	cmp	r3, #80	@ 0x50
 80014a2:	d82a      	bhi.n	80014fa <HAL_CAN_IRQHandler+0x334>
 80014a4:	2b40      	cmp	r3, #64	@ 0x40
 80014a6:	d019      	beq.n	80014dc <HAL_CAN_IRQHandler+0x316>
 80014a8:	2b40      	cmp	r3, #64	@ 0x40
 80014aa:	d826      	bhi.n	80014fa <HAL_CAN_IRQHandler+0x334>
 80014ac:	2b30      	cmp	r3, #48	@ 0x30
 80014ae:	d010      	beq.n	80014d2 <HAL_CAN_IRQHandler+0x30c>
 80014b0:	2b30      	cmp	r3, #48	@ 0x30
 80014b2:	d822      	bhi.n	80014fa <HAL_CAN_IRQHandler+0x334>
 80014b4:	2b10      	cmp	r3, #16
 80014b6:	d002      	beq.n	80014be <HAL_CAN_IRQHandler+0x2f8>
 80014b8:	2b20      	cmp	r3, #32
 80014ba:	d005      	beq.n	80014c8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80014bc:	e01d      	b.n	80014fa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80014be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80014c6:	e019      	b.n	80014fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80014c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ca:	f043 0310 	orr.w	r3, r3, #16
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80014d0:	e014      	b.n	80014fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	f043 0320 	orr.w	r3, r3, #32
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80014da:	e00f      	b.n	80014fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80014dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80014e4:	e00a      	b.n	80014fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80014ee:	e005      	b.n	80014fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80014f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80014f8:	e000      	b.n	80014fc <HAL_CAN_IRQHandler+0x336>
            break;
 80014fa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	699a      	ldr	r2, [r3, #24]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800150a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2204      	movs	r2, #4
 8001512:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001516:	2b00      	cmp	r3, #0
 8001518:	d008      	beq.n	800152c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f872 	bl	8001610 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800152c:	bf00      	nop
 800152e:	3728      	adds	r7, #40	@ 0x28
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	@ (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0b      	blt.n	80016b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4907      	ldr	r1, [pc, #28]	@ (80016c0 <__NVIC_EnableIRQ+0x38>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db0a      	blt.n	80016ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	490c      	ldr	r1, [pc, #48]	@ (8001710 <__NVIC_SetPriority+0x4c>)
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	0112      	lsls	r2, r2, #4
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	440b      	add	r3, r1
 80016e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ec:	e00a      	b.n	8001704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4908      	ldr	r1, [pc, #32]	@ (8001714 <__NVIC_SetPriority+0x50>)
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	3b04      	subs	r3, #4
 80016fc:	0112      	lsls	r2, r2, #4
 80016fe:	b2d2      	uxtb	r2, r2
 8001700:	440b      	add	r3, r1
 8001702:	761a      	strb	r2, [r3, #24]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000e100 	.word	0xe000e100
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001718:	b480      	push	{r7}
 800171a:	b089      	sub	sp, #36	@ 0x24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f1c3 0307 	rsb	r3, r3, #7
 8001732:	2b04      	cmp	r3, #4
 8001734:	bf28      	it	cs
 8001736:	2304      	movcs	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3304      	adds	r3, #4
 800173e:	2b06      	cmp	r3, #6
 8001740:	d902      	bls.n	8001748 <NVIC_EncodePriority+0x30>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	3b03      	subs	r3, #3
 8001746:	e000      	b.n	800174a <NVIC_EncodePriority+0x32>
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	f04f 32ff 	mov.w	r2, #4294967295
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	401a      	ands	r2, r3
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001760:	f04f 31ff 	mov.w	r1, #4294967295
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43d9      	mvns	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	4313      	orrs	r3, r2
         );
}
 8001772:	4618      	mov	r0, r3
 8001774:	3724      	adds	r7, #36	@ 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ff4c 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017a6:	f7ff ff61 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	68b9      	ldr	r1, [r7, #8]
 80017b0:	6978      	ldr	r0, [r7, #20]
 80017b2:	f7ff ffb1 	bl	8001718 <NVIC_EncodePriority>
 80017b6:	4602      	mov	r2, r0
 80017b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff80 	bl	80016c4 <__NVIC_SetPriority>
}
 80017c4:	bf00      	nop
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff54 	bl	8001688 <__NVIC_EnableIRQ>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e014      	b.n	8001824 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	791b      	ldrb	r3, [r3, #4]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d105      	bne.n	8001810 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff f896 	bl	800093c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2202      	movs	r2, #2
 8001814:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	795b      	ldrb	r3, [r3, #5]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_DAC_Start+0x16>
 800183e:	2302      	movs	r3, #2
 8001840:	e03b      	b.n	80018ba <HAL_DAC_Start+0x8e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2202      	movs	r2, #2
 800184c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	2201      	movs	r2, #1
 800185c:	409a      	lsls	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10f      	bne.n	800188c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001876:	2b04      	cmp	r3, #4
 8001878:	d118      	bne.n	80018ac <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0201 	orr.w	r2, r2, #1
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	e00f      	b.n	80018ac <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001896:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800189a:	d107      	bne.n	80018ac <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0202 	orr.w	r2, r2, #2
 80018aa:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b087      	sub	sp, #28
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d105      	bne.n	80018f0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	3308      	adds	r3, #8
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e004      	b.n	80018fa <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	3314      	adds	r3, #20
 80018f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	461a      	mov	r2, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	371c      	adds	r7, #28
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	795b      	ldrb	r3, [r3, #5]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_DAC_ConfigChannel+0x1c>
 8001928:	2302      	movs	r3, #2
 800192a:	e114      	b.n	8001b56 <HAL_DAC_ConfigChannel+0x246>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2202      	movs	r2, #2
 8001936:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b04      	cmp	r3, #4
 800193e:	f040 8081 	bne.w	8001a44 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001942:	f7ff f9cd 	bl	8000ce0 <HAL_GetTick>
 8001946:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d140      	bne.n	80019d0 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800194e:	e018      	b.n	8001982 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001950:	f7ff f9c6 	bl	8000ce0 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d911      	bls.n	8001982 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001964:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00a      	beq.n	8001982 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f043 0208 	orr.w	r2, r3, #8
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2203      	movs	r2, #3
 800197c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e0e9      	b.n	8001b56 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001988:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1df      	bne.n	8001950 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001990:	2001      	movs	r0, #1
 8001992:	f7ff f9b1 	bl	8000cf8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	6992      	ldr	r2, [r2, #24]
 800199e:	641a      	str	r2, [r3, #64]	@ 0x40
 80019a0:	e023      	b.n	80019ea <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80019a2:	f7ff f99d 	bl	8000ce0 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d90f      	bls.n	80019d0 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da0a      	bge.n	80019d0 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	f043 0208 	orr.w	r2, r3, #8
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2203      	movs	r2, #3
 80019ca:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e0c2      	b.n	8001b56 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	dbe3      	blt.n	80019a2 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80019da:	2001      	movs	r0, #1
 80019dc:	f7ff f98c 	bl	8000cf8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	6992      	ldr	r2, [r2, #24]
 80019e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 0310 	and.w	r3, r3, #16
 80019f6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	ea02 0103 	and.w	r1, r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	69da      	ldr	r2, [r3, #28]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f003 0310 	and.w	r3, r3, #16
 8001a24:	21ff      	movs	r1, #255	@ 0xff
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	ea02 0103 	and.w	r1, r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	6a1a      	ldr	r2, [r3, #32]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d11d      	bne.n	8001a88 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a52:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	221f      	movs	r2, #31
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f003 0310 	and.w	r3, r3, #16
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a8e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2207      	movs	r2, #7
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	431a      	orrs	r2, r3
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f003 0310 	and.w	r3, r3, #16
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6819      	ldr	r1, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43da      	mvns	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	400a      	ands	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f003 0310 	and.w	r3, r3, #16
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	6819      	ldr	r1, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	22c0      	movs	r2, #192	@ 0xc0
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	400a      	ands	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d005      	beq.n	8001b82 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2204      	movs	r2, #4
 8001b7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73fb      	strb	r3, [r7, #15]
 8001b80:	e029      	b.n	8001bd6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 020e 	bic.w	r2, r2, #14
 8001b90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0201 	bic.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	f003 021c 	and.w	r2, r3, #28
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	2101      	movs	r1, #1
 8001bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	4798      	blx	r3
    }
  }
  return status;
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001bee:	b2db      	uxtb	r3, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0a:	e166      	b.n	8001eda <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8158 	beq.w	8001ed4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d005      	beq.n	8001c3c <HAL_GPIO_Init+0x40>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d130      	bne.n	8001c9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	2203      	movs	r2, #3
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c72:	2201      	movs	r2, #1
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 0201 	and.w	r2, r3, #1
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d017      	beq.n	8001cda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d123      	bne.n	8001d2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	08da      	lsrs	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3208      	adds	r2, #8
 8001cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	6939      	ldr	r1, [r7, #16]
 8001d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	2203      	movs	r2, #3
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0203 	and.w	r2, r3, #3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f000 80b2 	beq.w	8001ed4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d70:	4b61      	ldr	r3, [pc, #388]	@ (8001ef8 <HAL_GPIO_Init+0x2fc>)
 8001d72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d74:	4a60      	ldr	r2, [pc, #384]	@ (8001ef8 <HAL_GPIO_Init+0x2fc>)
 8001d76:	f043 0301 	orr.w	r3, r3, #1
 8001d7a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d7c:	4b5e      	ldr	r3, [pc, #376]	@ (8001ef8 <HAL_GPIO_Init+0x2fc>)
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d88:	4a5c      	ldr	r2, [pc, #368]	@ (8001efc <HAL_GPIO_Init+0x300>)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	089b      	lsrs	r3, r3, #2
 8001d8e:	3302      	adds	r3, #2
 8001d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 0303 	and.w	r3, r3, #3
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	220f      	movs	r2, #15
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001db2:	d02b      	beq.n	8001e0c <HAL_GPIO_Init+0x210>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a52      	ldr	r2, [pc, #328]	@ (8001f00 <HAL_GPIO_Init+0x304>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d025      	beq.n	8001e08 <HAL_GPIO_Init+0x20c>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a51      	ldr	r2, [pc, #324]	@ (8001f04 <HAL_GPIO_Init+0x308>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d01f      	beq.n	8001e04 <HAL_GPIO_Init+0x208>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a50      	ldr	r2, [pc, #320]	@ (8001f08 <HAL_GPIO_Init+0x30c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d019      	beq.n	8001e00 <HAL_GPIO_Init+0x204>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a4f      	ldr	r2, [pc, #316]	@ (8001f0c <HAL_GPIO_Init+0x310>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d013      	beq.n	8001dfc <HAL_GPIO_Init+0x200>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a4e      	ldr	r2, [pc, #312]	@ (8001f10 <HAL_GPIO_Init+0x314>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00d      	beq.n	8001df8 <HAL_GPIO_Init+0x1fc>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a4d      	ldr	r2, [pc, #308]	@ (8001f14 <HAL_GPIO_Init+0x318>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d007      	beq.n	8001df4 <HAL_GPIO_Init+0x1f8>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a4c      	ldr	r2, [pc, #304]	@ (8001f18 <HAL_GPIO_Init+0x31c>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d101      	bne.n	8001df0 <HAL_GPIO_Init+0x1f4>
 8001dec:	2307      	movs	r3, #7
 8001dee:	e00e      	b.n	8001e0e <HAL_GPIO_Init+0x212>
 8001df0:	2308      	movs	r3, #8
 8001df2:	e00c      	b.n	8001e0e <HAL_GPIO_Init+0x212>
 8001df4:	2306      	movs	r3, #6
 8001df6:	e00a      	b.n	8001e0e <HAL_GPIO_Init+0x212>
 8001df8:	2305      	movs	r3, #5
 8001dfa:	e008      	b.n	8001e0e <HAL_GPIO_Init+0x212>
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	e006      	b.n	8001e0e <HAL_GPIO_Init+0x212>
 8001e00:	2303      	movs	r3, #3
 8001e02:	e004      	b.n	8001e0e <HAL_GPIO_Init+0x212>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e002      	b.n	8001e0e <HAL_GPIO_Init+0x212>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <HAL_GPIO_Init+0x212>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	f002 0203 	and.w	r2, r2, #3
 8001e14:	0092      	lsls	r2, r2, #2
 8001e16:	4093      	lsls	r3, r2
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e1e:	4937      	ldr	r1, [pc, #220]	@ (8001efc <HAL_GPIO_Init+0x300>)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	3302      	adds	r3, #2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f1c <HAL_GPIO_Init+0x320>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e50:	4a32      	ldr	r2, [pc, #200]	@ (8001f1c <HAL_GPIO_Init+0x320>)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e56:	4b31      	ldr	r3, [pc, #196]	@ (8001f1c <HAL_GPIO_Init+0x320>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e7a:	4a28      	ldr	r2, [pc, #160]	@ (8001f1c <HAL_GPIO_Init+0x320>)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e80:	4b26      	ldr	r3, [pc, #152]	@ (8001f1c <HAL_GPIO_Init+0x320>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f1c <HAL_GPIO_Init+0x320>)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8001f1c <HAL_GPIO_Init+0x320>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ece:	4a13      	ldr	r2, [pc, #76]	@ (8001f1c <HAL_GPIO_Init+0x320>)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f47f ae91 	bne.w	8001c0c <HAL_GPIO_Init+0x10>
  }
}
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40010000 	.word	0x40010000
 8001f00:	48000400 	.word	0x48000400
 8001f04:	48000800 	.word	0x48000800
 8001f08:	48000c00 	.word	0x48000c00
 8001f0c:	48001000 	.word	0x48001000
 8001f10:	48001400 	.word	0x48001400
 8001f14:	48001800 	.word	0x48001800
 8001f18:	48001c00 	.word	0x48001c00
 8001f1c:	40010400 	.word	0x40010400

08001f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	807b      	strh	r3, [r7, #2]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f30:	787b      	ldrb	r3, [r7, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f3c:	e002      	b.n	8001f44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f3e:	887a      	ldrh	r2, [r7, #2]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4013      	ands	r3, r2
 8001f68:	041a      	lsls	r2, r3, #16
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	43d9      	mvns	r1, r3
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	400b      	ands	r3, r1
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e08d      	b.n	80020b2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d106      	bne.n	8001fb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe fd04 	bl	80009b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2224      	movs	r2, #36	@ 0x24
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fe4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d107      	bne.n	8001ffe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	e006      	b.n	800200c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800200a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d108      	bne.n	8002026 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	e007      	b.n	8002036 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002034:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002044:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002048:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002058:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69d9      	ldr	r1, [r3, #28]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1a      	ldr	r2, [r3, #32]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	68f9      	ldr	r1, [r7, #12]
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	4798      	blx	r3
  }
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00f      	beq.n	8002130 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00a      	beq.n	8002130 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	f043 0201 	orr.w	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800212e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00f      	beq.n	800215a <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00a      	beq.n	800215a <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002148:	f043 0208 	orr.w	r2, r3, #8
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002158:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00f      	beq.n	8002184 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	f043 0202 	orr.w	r2, r3, #2
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002182:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002188:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f003 030b 	and.w	r3, r3, #11
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002194:	68f9      	ldr	r1, [r7, #12]
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fbd6 	bl	8002948 <I2C_ITError>
  }
}
 800219c:	bf00      	nop
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	70fb      	strb	r3, [r7, #3]
 80021d8:	4613      	mov	r3, r2
 80021da:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002234:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <I2C_Slave_ISR_IT+0x24>
 8002244:	2302      	movs	r3, #2
 8002246:	e0e2      	b.n	800240e <I2C_Slave_ISR_IT+0x1ea>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	2b00      	cmp	r3, #0
 8002258:	d009      	beq.n	800226e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002264:	6939      	ldr	r1, [r7, #16]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f9b6 	bl	80025d8 <I2C_ITSlaveCplt>
 800226c:	e0ca      	b.n	8002404 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b00      	cmp	r3, #0
 8002276:	d04b      	beq.n	8002310 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800227e:	2b00      	cmp	r3, #0
 8002280:	d046      	beq.n	8002310 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d128      	bne.n	80022de <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b28      	cmp	r3, #40	@ 0x28
 8002296:	d108      	bne.n	80022aa <I2C_Slave_ISR_IT+0x86>
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800229e:	d104      	bne.n	80022aa <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80022a0:	6939      	ldr	r1, [r7, #16]
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 fafc 	bl	80028a0 <I2C_ITListenCplt>
 80022a8:	e031      	b.n	800230e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b29      	cmp	r3, #41	@ 0x29
 80022b4:	d10e      	bne.n	80022d4 <I2C_Slave_ISR_IT+0xb0>
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022bc:	d00a      	beq.n	80022d4 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2210      	movs	r2, #16
 80022c4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fc55 	bl	8002b76 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f926 	bl	800251e <I2C_ITSlaveSeqCplt>
 80022d2:	e01c      	b.n	800230e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2210      	movs	r2, #16
 80022da:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80022dc:	e08f      	b.n	80023fe <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2210      	movs	r2, #16
 80022e4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f043 0204 	orr.w	r2, r3, #4
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <I2C_Slave_ISR_IT+0xdc>
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022fe:	d17e      	bne.n	80023fe <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002304:	4619      	mov	r1, r3
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 fb1e 	bl	8002948 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800230c:	e077      	b.n	80023fe <I2C_Slave_ISR_IT+0x1da>
 800230e:	e076      	b.n	80023fe <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b00      	cmp	r3, #0
 8002318:	d02f      	beq.n	800237a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002320:	2b00      	cmp	r3, #0
 8002322:	d02a      	beq.n	800237a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d018      	beq.n	8002360 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d14b      	bne.n	8002402 <I2C_Slave_ISR_IT+0x1de>
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002370:	d047      	beq.n	8002402 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f8d3 	bl	800251e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002378:	e043      	b.n	8002402 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d009      	beq.n	8002398 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800238a:	2b00      	cmp	r3, #0
 800238c:	d004      	beq.n	8002398 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800238e:	6939      	ldr	r1, [r7, #16]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f840 	bl	8002416 <I2C_ITAddrCplt>
 8002396:	e035      	b.n	8002404 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d030      	beq.n	8002404 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d02b      	beq.n	8002404 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d018      	beq.n	80023e8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ba:	781a      	ldrb	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80023e6:	e00d      	b.n	8002404 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023ee:	d002      	beq.n	80023f6 <I2C_Slave_ISR_IT+0x1d2>
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f891 	bl	800251e <I2C_ITSlaveSeqCplt>
 80023fc:	e002      	b.n	8002404 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80023fe:	bf00      	nop
 8002400:	e000      	b.n	8002404 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002402:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800242c:	2b28      	cmp	r3, #40	@ 0x28
 800242e:	d16a      	bne.n	8002506 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	0c1b      	lsrs	r3, r3, #16
 8002438:	b2db      	uxtb	r3, r3
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	0c1b      	lsrs	r3, r3, #16
 8002448:	b29b      	uxth	r3, r3
 800244a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800244e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	b29b      	uxth	r3, r3
 8002458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800245c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	b29b      	uxth	r3, r3
 8002466:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800246a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d138      	bne.n	80024e6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002474:	897b      	ldrh	r3, [r7, #10]
 8002476:	09db      	lsrs	r3, r3, #7
 8002478:	b29a      	uxth	r2, r3
 800247a:	89bb      	ldrh	r3, [r7, #12]
 800247c:	4053      	eors	r3, r2
 800247e:	b29b      	uxth	r3, r3
 8002480:	f003 0306 	and.w	r3, r3, #6
 8002484:	2b00      	cmp	r3, #0
 8002486:	d11c      	bne.n	80024c2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002488:	897b      	ldrh	r3, [r7, #10]
 800248a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800249a:	2b02      	cmp	r3, #2
 800249c:	d13b      	bne.n	8002516 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2208      	movs	r2, #8
 80024aa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024b4:	89ba      	ldrh	r2, [r7, #12]
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff fe86 	bl	80021cc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80024c0:	e029      	b.n	8002516 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80024c2:	893b      	ldrh	r3, [r7, #8]
 80024c4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80024c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fb95 	bl	8002bfa <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024d8:	89ba      	ldrh	r2, [r7, #12]
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	4619      	mov	r1, r3
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff fe74 	bl	80021cc <HAL_I2C_AddrCallback>
}
 80024e4:	e017      	b.n	8002516 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80024e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fb85 	bl	8002bfa <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024f8:	89ba      	ldrh	r2, [r7, #12]
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	4619      	mov	r1, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff fe64 	bl	80021cc <HAL_I2C_AddrCallback>
}
 8002504:	e007      	b.n	8002516 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2208      	movs	r2, #8
 800250c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	e00c      	b.n	800256c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d007      	beq.n	800256c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800256a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b29      	cmp	r3, #41	@ 0x29
 8002576:	d112      	bne.n	800259e <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2228      	movs	r2, #40	@ 0x28
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2221      	movs	r2, #33	@ 0x21
 8002584:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002586:	2101      	movs	r1, #1
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fb36 	bl	8002bfa <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff fe04 	bl	80021a4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800259c:	e017      	b.n	80025ce <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80025a8:	d111      	bne.n	80025ce <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2228      	movs	r2, #40	@ 0x28
 80025ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2222      	movs	r2, #34	@ 0x22
 80025b6:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025b8:	2102      	movs	r1, #2
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 fb1d 	bl	8002bfa <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff fdf5 	bl	80021b8 <HAL_I2C_SlaveRxCpltCallback>
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025fa:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2220      	movs	r2, #32
 8002602:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002604:	7afb      	ldrb	r3, [r7, #11]
 8002606:	2b21      	cmp	r3, #33	@ 0x21
 8002608:	d002      	beq.n	8002610 <I2C_ITSlaveCplt+0x38>
 800260a:	7afb      	ldrb	r3, [r7, #11]
 800260c:	2b29      	cmp	r3, #41	@ 0x29
 800260e:	d108      	bne.n	8002622 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002610:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 faf0 	bl	8002bfa <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2221      	movs	r2, #33	@ 0x21
 800261e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002620:	e019      	b.n	8002656 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002622:	7afb      	ldrb	r3, [r7, #11]
 8002624:	2b22      	cmp	r3, #34	@ 0x22
 8002626:	d002      	beq.n	800262e <I2C_ITSlaveCplt+0x56>
 8002628:	7afb      	ldrb	r3, [r7, #11]
 800262a:	2b2a      	cmp	r3, #42	@ 0x2a
 800262c:	d108      	bne.n	8002640 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800262e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fae1 	bl	8002bfa <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2222      	movs	r2, #34	@ 0x22
 800263c:	631a      	str	r2, [r3, #48]	@ 0x30
 800263e:	e00a      	b.n	8002656 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002640:	7afb      	ldrb	r3, [r7, #11]
 8002642:	2b28      	cmp	r3, #40	@ 0x28
 8002644:	d107      	bne.n	8002656 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002646:	f248 0103 	movw	r1, #32771	@ 0x8003
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fad5 	bl	8002bfa <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002664:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b89      	ldr	r3, [pc, #548]	@ (8002898 <I2C_ITSlaveCplt+0x2c0>)
 8002672:	400b      	ands	r3, r1
 8002674:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fa7d 	bl	8002b76 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d013      	beq.n	80026ae <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002694:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800269a:	2b00      	cmp	r3, #0
 800269c:	d01f      	beq.n	80026de <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026ac:	e017      	b.n	80026de <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d012      	beq.n	80026de <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026c6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d006      	beq.n	80026de <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	b29a      	uxth	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d020      	beq.n	800272a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f023 0304 	bic.w	r3, r3, #4
 80026ee:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00c      	beq.n	800272a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002738:	f043 0204 	orr.w	r2, r3, #4
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	d049      	beq.n	80027de <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002750:	2b00      	cmp	r3, #0
 8002752:	d044      	beq.n	80027de <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d128      	bne.n	80027b0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b28      	cmp	r3, #40	@ 0x28
 8002768:	d108      	bne.n	800277c <I2C_ITSlaveCplt+0x1a4>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002770:	d104      	bne.n	800277c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002772:	6979      	ldr	r1, [r7, #20]
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f893 	bl	80028a0 <I2C_ITListenCplt>
 800277a:	e030      	b.n	80027de <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b29      	cmp	r3, #41	@ 0x29
 8002786:	d10e      	bne.n	80027a6 <I2C_ITSlaveCplt+0x1ce>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800278e:	d00a      	beq.n	80027a6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2210      	movs	r2, #16
 8002796:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f9ec 	bl	8002b76 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff febd 	bl	800251e <I2C_ITSlaveSeqCplt>
 80027a4:	e01b      	b.n	80027de <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2210      	movs	r2, #16
 80027ac:	61da      	str	r2, [r3, #28]
 80027ae:	e016      	b.n	80027de <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2210      	movs	r2, #16
 80027b6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027bc:	f043 0204 	orr.w	r2, r3, #4
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <I2C_ITSlaveCplt+0x1fa>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027d0:	d105      	bne.n	80027de <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	4619      	mov	r1, r3
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f8b5 	bl	8002948 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d010      	beq.n	8002816 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f8:	4619      	mov	r1, r3
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f8a4 	bl	8002948 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b28      	cmp	r3, #40	@ 0x28
 800280a:	d141      	bne.n	8002890 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800280c:	6979      	ldr	r1, [r7, #20]
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f846 	bl	80028a0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002814:	e03c      	b.n	8002890 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800281e:	d014      	beq.n	800284a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff fe7c 	bl	800251e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a1c      	ldr	r2, [pc, #112]	@ (800289c <I2C_ITSlaveCplt+0x2c4>)
 800282a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff fcd0 	bl	80021e8 <HAL_I2C_ListenCpltCallback>
}
 8002848:	e022      	b.n	8002890 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b22      	cmp	r3, #34	@ 0x22
 8002854:	d10e      	bne.n	8002874 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff fca3 	bl	80021b8 <HAL_I2C_SlaveRxCpltCallback>
}
 8002872:	e00d      	b.n	8002890 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff fc8a 	bl	80021a4 <HAL_I2C_SlaveTxCpltCallback>
}
 8002890:	bf00      	nop
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	fe00e800 	.word	0xfe00e800
 800289c:	ffff0000 	.word	0xffff0000

080028a0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a25      	ldr	r2, [pc, #148]	@ (8002944 <I2C_ITListenCplt+0xa4>)
 80028ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	f003 0304 	and.w	r3, r3, #4
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d022      	beq.n	800291c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d012      	beq.n	800291c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fa:	3b01      	subs	r3, #1
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002914:	f043 0204 	orr.w	r2, r3, #4
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800291c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f96a 	bl	8002bfa <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2210      	movs	r2, #16
 800292c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fc56 	bl	80021e8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800293c:	bf00      	nop
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	ffff0000 	.word	0xffff0000

08002948 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002958:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a6d      	ldr	r2, [pc, #436]	@ (8002b1c <I2C_ITError+0x1d4>)
 8002966:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	2b28      	cmp	r3, #40	@ 0x28
 800297e:	d005      	beq.n	800298c <I2C_ITError+0x44>
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	2b29      	cmp	r3, #41	@ 0x29
 8002984:	d002      	beq.n	800298c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	2b2a      	cmp	r3, #42	@ 0x2a
 800298a:	d10b      	bne.n	80029a4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800298c:	2103      	movs	r1, #3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f933 	bl	8002bfa <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2228      	movs	r2, #40	@ 0x28
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a60      	ldr	r2, [pc, #384]	@ (8002b20 <I2C_ITError+0x1d8>)
 80029a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80029a2:	e030      	b.n	8002a06 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80029a4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f926 	bl	8002bfa <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f8e1 	bl	8002b76 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b60      	cmp	r3, #96	@ 0x60
 80029be:	d01f      	beq.n	8002a00 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d114      	bne.n	8002a00 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b10      	cmp	r3, #16
 80029e2:	d109      	bne.n	80029f8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2210      	movs	r2, #16
 80029ea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f0:	f043 0204 	orr.w	r2, r3, #4
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2220      	movs	r2, #32
 80029fe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d039      	beq.n	8002a88 <I2C_ITError+0x140>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b11      	cmp	r3, #17
 8002a18:	d002      	beq.n	8002a20 <I2C_ITError+0xd8>
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b21      	cmp	r3, #33	@ 0x21
 8002a1e:	d133      	bne.n	8002a88 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a2e:	d107      	bne.n	8002a40 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a3e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff f8cb 	bl	8001be0 <HAL_DMA_GetState>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d017      	beq.n	8002a80 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a54:	4a33      	ldr	r2, [pc, #204]	@ (8002b24 <I2C_ITError+0x1dc>)
 8002a56:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff f87a 	bl	8001b5e <HAL_DMA_Abort_IT>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d04d      	beq.n	8002b0c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a7e:	e045      	b.n	8002b0c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f851 	bl	8002b28 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a86:	e041      	b.n	8002b0c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d039      	beq.n	8002b04 <I2C_ITError+0x1bc>
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	2b12      	cmp	r3, #18
 8002a94:	d002      	beq.n	8002a9c <I2C_ITError+0x154>
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b22      	cmp	r3, #34	@ 0x22
 8002a9a:	d133      	bne.n	8002b04 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002aa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aaa:	d107      	bne.n	8002abc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002aba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff f88d 	bl	8001be0 <HAL_DMA_GetState>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d017      	beq.n	8002afc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad0:	4a14      	ldr	r2, [pc, #80]	@ (8002b24 <I2C_ITError+0x1dc>)
 8002ad2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff f83c 	bl	8001b5e <HAL_DMA_Abort_IT>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d011      	beq.n	8002b10 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002af6:	4610      	mov	r0, r2
 8002af8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002afa:	e009      	b.n	8002b10 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f813 	bl	8002b28 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b02:	e005      	b.n	8002b10 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f80f 	bl	8002b28 <I2C_TreatErrorCallback>
  }
}
 8002b0a:	e002      	b.n	8002b12 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b0c:	bf00      	nop
 8002b0e:	e000      	b.n	8002b12 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b10:	bf00      	nop
}
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	ffff0000 	.word	0xffff0000
 8002b20:	08002225 	.word	0x08002225
 8002b24:	08002bbf 	.word	0x08002bbf

08002b28 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b60      	cmp	r3, #96	@ 0x60
 8002b3a:	d10e      	bne.n	8002b5a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff fb5c 	bl	8002210 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b58:	e009      	b.n	8002b6e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff fb47 	bl	80021fc <HAL_I2C_ErrorCallback>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d103      	bne.n	8002b94 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2200      	movs	r2, #0
 8002b92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d007      	beq.n	8002bb2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699a      	ldr	r2, [r3, #24]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	619a      	str	r2, [r3, #24]
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd8:	2200      	movs	r2, #0
 8002bda:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be8:	2200      	movs	r2, #0
 8002bea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7ff ff9b 	bl	8002b28 <I2C_TreatErrorCallback>
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002c0a:	887b      	ldrh	r3, [r7, #2]
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00f      	beq.n	8002c34 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8002c1a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002c28:	2b28      	cmp	r3, #40	@ 0x28
 8002c2a:	d003      	beq.n	8002c34 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002c32:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002c34:	887b      	ldrh	r3, [r7, #2]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00f      	beq.n	8002c5e <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8002c44:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002c52:	2b28      	cmp	r3, #40	@ 0x28
 8002c54:	d003      	beq.n	8002c5e <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002c5c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002c5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	da03      	bge.n	8002c6e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8002c6c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002c6e:	887b      	ldrh	r3, [r7, #2]
 8002c70:	2b10      	cmp	r3, #16
 8002c72:	d103      	bne.n	8002c7c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8002c7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002c7c:	887b      	ldrh	r3, [r7, #2]
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d103      	bne.n	8002c8a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f043 0320 	orr.w	r3, r3, #32
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002c8a:	887b      	ldrh	r3, [r7, #2]
 8002c8c:	2b40      	cmp	r3, #64	@ 0x40
 8002c8e:	d103      	bne.n	8002c98 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c96:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6819      	ldr	r1, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	43da      	mvns	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	400a      	ands	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	d138      	bne.n	8002d3e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e032      	b.n	8002d40 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2224      	movs	r2, #36	@ 0x24
 8002ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d08:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6819      	ldr	r1, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f042 0201 	orr.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e000      	b.n	8002d40 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d3e:	2302      	movs	r3, #2
  }
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	d139      	bne.n	8002dd6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e033      	b.n	8002dd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2224      	movs	r2, #36	@ 0x24
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d9e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0201 	orr.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e000      	b.n	8002dd8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dd6:	2302      	movs	r3, #2
  }
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002de8:	4b04      	ldr	r3, [pc, #16]	@ (8002dfc <HAL_PWREx_GetVoltageRange+0x18>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40007000 	.word	0x40007000

08002e00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e0e:	d130      	bne.n	8002e72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e10:	4b23      	ldr	r3, [pc, #140]	@ (8002ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e1c:	d038      	beq.n	8002e90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e26:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2232      	movs	r2, #50	@ 0x32
 8002e34:	fb02 f303 	mul.w	r3, r2, r3
 8002e38:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3e:	0c9b      	lsrs	r3, r3, #18
 8002e40:	3301      	adds	r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e44:	e002      	b.n	8002e4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e58:	d102      	bne.n	8002e60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1f2      	bne.n	8002e46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e6c:	d110      	bne.n	8002e90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e00f      	b.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e7e:	d007      	beq.n	8002e90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e80:	4b07      	ldr	r3, [pc, #28]	@ (8002ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e88:	4a05      	ldr	r2, [pc, #20]	@ (8002ea0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	431bde83 	.word	0x431bde83

08002eac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b088      	sub	sp, #32
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d102      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f000 bc08 	b.w	80036d0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ec0:	4b96      	ldr	r3, [pc, #600]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eca:	4b94      	ldr	r3, [pc, #592]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0310 	and.w	r3, r3, #16
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80e4 	beq.w	80030aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x4c>
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	2b0c      	cmp	r3, #12
 8002eec:	f040 808b 	bne.w	8003006 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	f040 8087 	bne.w	8003006 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ef8:	4b88      	ldr	r3, [pc, #544]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_OscConfig+0x64>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e3df      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1a      	ldr	r2, [r3, #32]
 8002f14:	4b81      	ldr	r3, [pc, #516]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d004      	beq.n	8002f2a <HAL_RCC_OscConfig+0x7e>
 8002f20:	4b7e      	ldr	r3, [pc, #504]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f28:	e005      	b.n	8002f36 <HAL_RCC_OscConfig+0x8a>
 8002f2a:	4b7c      	ldr	r3, [pc, #496]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d223      	bcs.n	8002f82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fdae 	bl	8003aa0 <RCC_SetFlashLatencyFromMSIRange>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e3c0      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f4e:	4b73      	ldr	r3, [pc, #460]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a72      	ldr	r2, [pc, #456]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002f54:	f043 0308 	orr.w	r3, r3, #8
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4b70      	ldr	r3, [pc, #448]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	496d      	ldr	r1, [pc, #436]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f6c:	4b6b      	ldr	r3, [pc, #428]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	4968      	ldr	r1, [pc, #416]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
 8002f80:	e025      	b.n	8002fce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f82:	4b66      	ldr	r3, [pc, #408]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a65      	ldr	r2, [pc, #404]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002f88:	f043 0308 	orr.w	r3, r3, #8
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b63      	ldr	r3, [pc, #396]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	4960      	ldr	r1, [pc, #384]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fa0:	4b5e      	ldr	r3, [pc, #376]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	021b      	lsls	r3, r3, #8
 8002fae:	495b      	ldr	r1, [pc, #364]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fd6e 	bl	8003aa0 <RCC_SetFlashLatencyFromMSIRange>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e380      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fce:	f000 fc87 	bl	80038e0 <HAL_RCC_GetSysClockFreq>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	4b51      	ldr	r3, [pc, #324]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	4950      	ldr	r1, [pc, #320]	@ (8003120 <HAL_RCC_OscConfig+0x274>)
 8002fe0:	5ccb      	ldrb	r3, [r1, r3]
 8002fe2:	f003 031f 	and.w	r3, r3, #31
 8002fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fea:	4a4e      	ldr	r2, [pc, #312]	@ (8003124 <HAL_RCC_OscConfig+0x278>)
 8002fec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fee:	4b4e      	ldr	r3, [pc, #312]	@ (8003128 <HAL_RCC_OscConfig+0x27c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd fd4e 	bl	8000a94 <HAL_InitTick>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d052      	beq.n	80030a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	e364      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d032      	beq.n	8003074 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800300e:	4b43      	ldr	r3, [pc, #268]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a42      	ldr	r2, [pc, #264]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800301a:	f7fd fe61 	bl	8000ce0 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003022:	f7fd fe5d 	bl	8000ce0 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e34d      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003034:	4b39      	ldr	r3, [pc, #228]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003040:	4b36      	ldr	r3, [pc, #216]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a35      	ldr	r2, [pc, #212]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8003046:	f043 0308 	orr.w	r3, r3, #8
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	4b33      	ldr	r3, [pc, #204]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4930      	ldr	r1, [pc, #192]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800305e:	4b2f      	ldr	r3, [pc, #188]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	492b      	ldr	r1, [pc, #172]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]
 8003072:	e01a      	b.n	80030aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003074:	4b29      	ldr	r3, [pc, #164]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a28      	ldr	r2, [pc, #160]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 800307a:	f023 0301 	bic.w	r3, r3, #1
 800307e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003080:	f7fd fe2e 	bl	8000ce0 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003088:	f7fd fe2a 	bl	8000ce0 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e31a      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800309a:	4b20      	ldr	r3, [pc, #128]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x1dc>
 80030a6:	e000      	b.n	80030aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d073      	beq.n	800319e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d005      	beq.n	80030c8 <HAL_RCC_OscConfig+0x21c>
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	2b0c      	cmp	r3, #12
 80030c0:	d10e      	bne.n	80030e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d10b      	bne.n	80030e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c8:	4b14      	ldr	r3, [pc, #80]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d063      	beq.n	800319c <HAL_RCC_OscConfig+0x2f0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d15f      	bne.n	800319c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e2f7      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e8:	d106      	bne.n	80030f8 <HAL_RCC_OscConfig+0x24c>
 80030ea:	4b0c      	ldr	r3, [pc, #48]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a0b      	ldr	r2, [pc, #44]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 80030f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	e025      	b.n	8003144 <HAL_RCC_OscConfig+0x298>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003100:	d114      	bne.n	800312c <HAL_RCC_OscConfig+0x280>
 8003102:	4b06      	ldr	r3, [pc, #24]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a05      	ldr	r2, [pc, #20]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8003108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b03      	ldr	r3, [pc, #12]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a02      	ldr	r2, [pc, #8]	@ (800311c <HAL_RCC_OscConfig+0x270>)
 8003114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	e013      	b.n	8003144 <HAL_RCC_OscConfig+0x298>
 800311c:	40021000 	.word	0x40021000
 8003120:	08007930 	.word	0x08007930
 8003124:	20000000 	.word	0x20000000
 8003128:	20000004 	.word	0x20000004
 800312c:	4ba0      	ldr	r3, [pc, #640]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a9f      	ldr	r2, [pc, #636]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 8003132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	4b9d      	ldr	r3, [pc, #628]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a9c      	ldr	r2, [pc, #624]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 800313e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d013      	beq.n	8003174 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314c:	f7fd fdc8 	bl	8000ce0 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003152:	e008      	b.n	8003166 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003154:	f7fd fdc4 	bl	8000ce0 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b64      	cmp	r3, #100	@ 0x64
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e2b4      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003166:	4b92      	ldr	r3, [pc, #584]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f0      	beq.n	8003154 <HAL_RCC_OscConfig+0x2a8>
 8003172:	e014      	b.n	800319e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fd fdb4 	bl	8000ce0 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800317c:	f7fd fdb0 	bl	8000ce0 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b64      	cmp	r3, #100	@ 0x64
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e2a0      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800318e:	4b88      	ldr	r3, [pc, #544]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x2d0>
 800319a:	e000      	b.n	800319e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800319c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d060      	beq.n	800326c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	2b04      	cmp	r3, #4
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_OscConfig+0x310>
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2b0c      	cmp	r3, #12
 80031b4:	d119      	bne.n	80031ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d116      	bne.n	80031ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031bc:	4b7c      	ldr	r3, [pc, #496]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_OscConfig+0x328>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e27d      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d4:	4b76      	ldr	r3, [pc, #472]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	061b      	lsls	r3, r3, #24
 80031e2:	4973      	ldr	r1, [pc, #460]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031e8:	e040      	b.n	800326c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d023      	beq.n	800323a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f2:	4b6f      	ldr	r3, [pc, #444]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a6e      	ldr	r2, [pc, #440]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 80031f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fe:	f7fd fd6f 	bl	8000ce0 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003206:	f7fd fd6b 	bl	8000ce0 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e25b      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003218:	4b65      	ldr	r3, [pc, #404]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003224:	4b62      	ldr	r3, [pc, #392]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	061b      	lsls	r3, r3, #24
 8003232:	495f      	ldr	r1, [pc, #380]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
 8003238:	e018      	b.n	800326c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323a:	4b5d      	ldr	r3, [pc, #372]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a5c      	ldr	r2, [pc, #368]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 8003240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003246:	f7fd fd4b 	bl	8000ce0 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324e:	f7fd fd47 	bl	8000ce0 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e237      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003260:	4b53      	ldr	r3, [pc, #332]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f0      	bne.n	800324e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d03c      	beq.n	80032f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01c      	beq.n	80032ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003280:	4b4b      	ldr	r3, [pc, #300]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 8003282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003286:	4a4a      	ldr	r2, [pc, #296]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7fd fd26 	bl	8000ce0 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003298:	f7fd fd22 	bl	8000ce0 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e212      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032aa:	4b41      	ldr	r3, [pc, #260]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 80032ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0ef      	beq.n	8003298 <HAL_RCC_OscConfig+0x3ec>
 80032b8:	e01b      	b.n	80032f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ba:	4b3d      	ldr	r3, [pc, #244]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 80032bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032c0:	4a3b      	ldr	r2, [pc, #236]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ca:	f7fd fd09 	bl	8000ce0 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d2:	f7fd fd05 	bl	8000ce0 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e1f5      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032e4:	4b32      	ldr	r3, [pc, #200]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 80032e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1ef      	bne.n	80032d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80a6 	beq.w	800344c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003300:	2300      	movs	r3, #0
 8003302:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003304:	4b2a      	ldr	r3, [pc, #168]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 8003306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10d      	bne.n	800332c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003310:	4b27      	ldr	r3, [pc, #156]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 8003312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003314:	4a26      	ldr	r2, [pc, #152]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 8003316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800331a:	6593      	str	r3, [r2, #88]	@ 0x58
 800331c:	4b24      	ldr	r3, [pc, #144]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 800331e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003328:	2301      	movs	r3, #1
 800332a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800332c:	4b21      	ldr	r3, [pc, #132]	@ (80033b4 <HAL_RCC_OscConfig+0x508>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003334:	2b00      	cmp	r3, #0
 8003336:	d118      	bne.n	800336a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003338:	4b1e      	ldr	r3, [pc, #120]	@ (80033b4 <HAL_RCC_OscConfig+0x508>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a1d      	ldr	r2, [pc, #116]	@ (80033b4 <HAL_RCC_OscConfig+0x508>)
 800333e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003342:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003344:	f7fd fccc 	bl	8000ce0 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334c:	f7fd fcc8 	bl	8000ce0 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e1b8      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800335e:	4b15      	ldr	r3, [pc, #84]	@ (80033b4 <HAL_RCC_OscConfig+0x508>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d108      	bne.n	8003384 <HAL_RCC_OscConfig+0x4d8>
 8003372:	4b0f      	ldr	r3, [pc, #60]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 8003374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003378:	4a0d      	ldr	r2, [pc, #52]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003382:	e029      	b.n	80033d8 <HAL_RCC_OscConfig+0x52c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b05      	cmp	r3, #5
 800338a:	d115      	bne.n	80033b8 <HAL_RCC_OscConfig+0x50c>
 800338c:	4b08      	ldr	r3, [pc, #32]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003392:	4a07      	ldr	r2, [pc, #28]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800339c:	4b04      	ldr	r3, [pc, #16]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 800339e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a2:	4a03      	ldr	r2, [pc, #12]	@ (80033b0 <HAL_RCC_OscConfig+0x504>)
 80033a4:	f043 0301 	orr.w	r3, r3, #1
 80033a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033ac:	e014      	b.n	80033d8 <HAL_RCC_OscConfig+0x52c>
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40007000 	.word	0x40007000
 80033b8:	4b9d      	ldr	r3, [pc, #628]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033be:	4a9c      	ldr	r2, [pc, #624]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033c8:	4b99      	ldr	r3, [pc, #612]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ce:	4a98      	ldr	r2, [pc, #608]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 80033d0:	f023 0304 	bic.w	r3, r3, #4
 80033d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d016      	beq.n	800340e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e0:	f7fd fc7e 	bl	8000ce0 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e6:	e00a      	b.n	80033fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7fd fc7a 	bl	8000ce0 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e168      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033fe:	4b8c      	ldr	r3, [pc, #560]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 8003400:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0ed      	beq.n	80033e8 <HAL_RCC_OscConfig+0x53c>
 800340c:	e015      	b.n	800343a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340e:	f7fd fc67 	bl	8000ce0 <HAL_GetTick>
 8003412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003414:	e00a      	b.n	800342c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003416:	f7fd fc63 	bl	8000ce0 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003424:	4293      	cmp	r3, r2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e151      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800342c:	4b80      	ldr	r3, [pc, #512]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1ed      	bne.n	8003416 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800343a:	7ffb      	ldrb	r3, [r7, #31]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d105      	bne.n	800344c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003440:	4b7b      	ldr	r3, [pc, #492]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 8003442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003444:	4a7a      	ldr	r2, [pc, #488]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 8003446:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800344a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d03c      	beq.n	80034d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01c      	beq.n	800349a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003460:	4b73      	ldr	r3, [pc, #460]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 8003462:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003466:	4a72      	ldr	r2, [pc, #456]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003470:	f7fd fc36 	bl	8000ce0 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003478:	f7fd fc32 	bl	8000ce0 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e122      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800348a:	4b69      	ldr	r3, [pc, #420]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 800348c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0ef      	beq.n	8003478 <HAL_RCC_OscConfig+0x5cc>
 8003498:	e01b      	b.n	80034d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800349a:	4b65      	ldr	r3, [pc, #404]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 800349c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034a0:	4a63      	ldr	r2, [pc, #396]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 80034a2:	f023 0301 	bic.w	r3, r3, #1
 80034a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034aa:	f7fd fc19 	bl	8000ce0 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034b2:	f7fd fc15 	bl	8000ce0 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e105      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034c4:	4b5a      	ldr	r3, [pc, #360]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 80034c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1ef      	bne.n	80034b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80f9 	beq.w	80036ce <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	f040 80cf 	bne.w	8003684 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034e6:	4b52      	ldr	r3, [pc, #328]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 0203 	and.w	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d12c      	bne.n	8003554 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003504:	3b01      	subs	r3, #1
 8003506:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d123      	bne.n	8003554 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003516:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d11b      	bne.n	8003554 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003526:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d113      	bne.n	8003554 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003536:	085b      	lsrs	r3, r3, #1
 8003538:	3b01      	subs	r3, #1
 800353a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d109      	bne.n	8003554 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	085b      	lsrs	r3, r3, #1
 800354c:	3b01      	subs	r3, #1
 800354e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003550:	429a      	cmp	r2, r3
 8003552:	d071      	beq.n	8003638 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b0c      	cmp	r3, #12
 8003558:	d068      	beq.n	800362c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800355a:	4b35      	ldr	r3, [pc, #212]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d105      	bne.n	8003572 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003566:	4b32      	ldr	r3, [pc, #200]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e0ac      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003576:	4b2e      	ldr	r3, [pc, #184]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2d      	ldr	r2, [pc, #180]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 800357c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003580:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003582:	f7fd fbad 	bl	8000ce0 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358a:	f7fd fba9 	bl	8000ce0 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e099      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800359c:	4b24      	ldr	r3, [pc, #144]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f0      	bne.n	800358a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035a8:	4b21      	ldr	r3, [pc, #132]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	4b21      	ldr	r3, [pc, #132]	@ (8003634 <HAL_RCC_OscConfig+0x788>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035b8:	3a01      	subs	r2, #1
 80035ba:	0112      	lsls	r2, r2, #4
 80035bc:	4311      	orrs	r1, r2
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035c2:	0212      	lsls	r2, r2, #8
 80035c4:	4311      	orrs	r1, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035ca:	0852      	lsrs	r2, r2, #1
 80035cc:	3a01      	subs	r2, #1
 80035ce:	0552      	lsls	r2, r2, #21
 80035d0:	4311      	orrs	r1, r2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80035d6:	0852      	lsrs	r2, r2, #1
 80035d8:	3a01      	subs	r2, #1
 80035da:	0652      	lsls	r2, r2, #25
 80035dc:	4311      	orrs	r1, r2
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035e2:	06d2      	lsls	r2, r2, #27
 80035e4:	430a      	orrs	r2, r1
 80035e6:	4912      	ldr	r1, [pc, #72]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035ec:	4b10      	ldr	r3, [pc, #64]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 80035f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	4a0c      	ldr	r2, [pc, #48]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 80035fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003602:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003604:	f7fd fb6c 	bl	8000ce0 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360c:	f7fd fb68 	bl	8000ce0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e058      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361e:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <HAL_RCC_OscConfig+0x784>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800362a:	e050      	b.n	80036ce <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e04f      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
 8003630:	40021000 	.word	0x40021000
 8003634:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003638:	4b27      	ldr	r3, [pc, #156]	@ (80036d8 <HAL_RCC_OscConfig+0x82c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d144      	bne.n	80036ce <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003644:	4b24      	ldr	r3, [pc, #144]	@ (80036d8 <HAL_RCC_OscConfig+0x82c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a23      	ldr	r2, [pc, #140]	@ (80036d8 <HAL_RCC_OscConfig+0x82c>)
 800364a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800364e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003650:	4b21      	ldr	r3, [pc, #132]	@ (80036d8 <HAL_RCC_OscConfig+0x82c>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4a20      	ldr	r2, [pc, #128]	@ (80036d8 <HAL_RCC_OscConfig+0x82c>)
 8003656:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800365a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800365c:	f7fd fb40 	bl	8000ce0 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003664:	f7fd fb3c 	bl	8000ce0 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e02c      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003676:	4b18      	ldr	r3, [pc, #96]	@ (80036d8 <HAL_RCC_OscConfig+0x82c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0x7b8>
 8003682:	e024      	b.n	80036ce <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	2b0c      	cmp	r3, #12
 8003688:	d01f      	beq.n	80036ca <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368a:	4b13      	ldr	r3, [pc, #76]	@ (80036d8 <HAL_RCC_OscConfig+0x82c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a12      	ldr	r2, [pc, #72]	@ (80036d8 <HAL_RCC_OscConfig+0x82c>)
 8003690:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7fd fb23 	bl	8000ce0 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369e:	f7fd fb1f 	bl	8000ce0 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e00f      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036b0:	4b09      	ldr	r3, [pc, #36]	@ (80036d8 <HAL_RCC_OscConfig+0x82c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f0      	bne.n	800369e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036bc:	4b06      	ldr	r3, [pc, #24]	@ (80036d8 <HAL_RCC_OscConfig+0x82c>)
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	4905      	ldr	r1, [pc, #20]	@ (80036d8 <HAL_RCC_OscConfig+0x82c>)
 80036c2:	4b06      	ldr	r3, [pc, #24]	@ (80036dc <HAL_RCC_OscConfig+0x830>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	60cb      	str	r3, [r1, #12]
 80036c8:	e001      	b.n	80036ce <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e000      	b.n	80036d0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3720      	adds	r7, #32
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40021000 	.word	0x40021000
 80036dc:	feeefffc 	.word	0xfeeefffc

080036e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0e7      	b.n	80038c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036f4:	4b75      	ldr	r3, [pc, #468]	@ (80038cc <HAL_RCC_ClockConfig+0x1ec>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d910      	bls.n	8003724 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003702:	4b72      	ldr	r3, [pc, #456]	@ (80038cc <HAL_RCC_ClockConfig+0x1ec>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f023 0207 	bic.w	r2, r3, #7
 800370a:	4970      	ldr	r1, [pc, #448]	@ (80038cc <HAL_RCC_ClockConfig+0x1ec>)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	4313      	orrs	r3, r2
 8003710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b6e      	ldr	r3, [pc, #440]	@ (80038cc <HAL_RCC_ClockConfig+0x1ec>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d001      	beq.n	8003724 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0cf      	b.n	80038c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d010      	beq.n	8003752 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	4b66      	ldr	r3, [pc, #408]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800373c:	429a      	cmp	r2, r3
 800373e:	d908      	bls.n	8003752 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003740:	4b63      	ldr	r3, [pc, #396]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	4960      	ldr	r1, [pc, #384]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d04c      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b03      	cmp	r3, #3
 8003764:	d107      	bne.n	8003776 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003766:	4b5a      	ldr	r3, [pc, #360]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d121      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e0a6      	b.n	80038c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d107      	bne.n	800378e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800377e:	4b54      	ldr	r3, [pc, #336]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d115      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e09a      	b.n	80038c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d107      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003796:	4b4e      	ldr	r3, [pc, #312]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e08e      	b.n	80038c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a6:	4b4a      	ldr	r3, [pc, #296]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e086      	b.n	80038c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037b6:	4b46      	ldr	r3, [pc, #280]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 0203 	bic.w	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4943      	ldr	r1, [pc, #268]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c8:	f7fd fa8a 	bl	8000ce0 <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ce:	e00a      	b.n	80037e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d0:	f7fd fa86 	bl	8000ce0 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e06e      	b.n	80038c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e6:	4b3a      	ldr	r3, [pc, #232]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 020c 	and.w	r2, r3, #12
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d1eb      	bne.n	80037d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d010      	beq.n	8003826 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	4b31      	ldr	r3, [pc, #196]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003810:	429a      	cmp	r2, r3
 8003812:	d208      	bcs.n	8003826 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003814:	4b2e      	ldr	r3, [pc, #184]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	492b      	ldr	r1, [pc, #172]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003826:	4b29      	ldr	r3, [pc, #164]	@ (80038cc <HAL_RCC_ClockConfig+0x1ec>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d210      	bcs.n	8003856 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003834:	4b25      	ldr	r3, [pc, #148]	@ (80038cc <HAL_RCC_ClockConfig+0x1ec>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f023 0207 	bic.w	r2, r3, #7
 800383c:	4923      	ldr	r1, [pc, #140]	@ (80038cc <HAL_RCC_ClockConfig+0x1ec>)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	4313      	orrs	r3, r2
 8003842:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003844:	4b21      	ldr	r3, [pc, #132]	@ (80038cc <HAL_RCC_ClockConfig+0x1ec>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d001      	beq.n	8003856 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e036      	b.n	80038c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003862:	4b1b      	ldr	r3, [pc, #108]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	4918      	ldr	r1, [pc, #96]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003870:	4313      	orrs	r3, r2
 8003872:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d009      	beq.n	8003894 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003880:	4b13      	ldr	r3, [pc, #76]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4910      	ldr	r1, [pc, #64]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003890:	4313      	orrs	r3, r2
 8003892:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003894:	f000 f824 	bl	80038e0 <HAL_RCC_GetSysClockFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b0d      	ldr	r3, [pc, #52]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f0>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	490b      	ldr	r1, [pc, #44]	@ (80038d4 <HAL_RCC_ClockConfig+0x1f4>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	fa22 f303 	lsr.w	r3, r2, r3
 80038b0:	4a09      	ldr	r2, [pc, #36]	@ (80038d8 <HAL_RCC_ClockConfig+0x1f8>)
 80038b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038b4:	4b09      	ldr	r3, [pc, #36]	@ (80038dc <HAL_RCC_ClockConfig+0x1fc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fd f8eb 	bl	8000a94 <HAL_InitTick>
 80038be:	4603      	mov	r3, r0
 80038c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80038c2:	7afb      	ldrb	r3, [r7, #11]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40022000 	.word	0x40022000
 80038d0:	40021000 	.word	0x40021000
 80038d4:	08007930 	.word	0x08007930
 80038d8:	20000000 	.word	0x20000000
 80038dc:	20000004 	.word	0x20000004

080038e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b089      	sub	sp, #36	@ 0x24
 80038e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	2300      	movs	r3, #0
 80038ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ee:	4b3e      	ldr	r3, [pc, #248]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f8:	4b3b      	ldr	r3, [pc, #236]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_RCC_GetSysClockFreq+0x34>
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	2b0c      	cmp	r3, #12
 800390c:	d121      	bne.n	8003952 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d11e      	bne.n	8003952 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003914:	4b34      	ldr	r3, [pc, #208]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d107      	bne.n	8003930 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003920:	4b31      	ldr	r3, [pc, #196]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003926:	0a1b      	lsrs	r3, r3, #8
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	e005      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003930:	4b2d      	ldr	r3, [pc, #180]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800393c:	4a2b      	ldr	r2, [pc, #172]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003944:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10d      	bne.n	8003968 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003950:	e00a      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2b04      	cmp	r3, #4
 8003956:	d102      	bne.n	800395e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003958:	4b25      	ldr	r3, [pc, #148]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800395a:	61bb      	str	r3, [r7, #24]
 800395c:	e004      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b08      	cmp	r3, #8
 8003962:	d101      	bne.n	8003968 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003964:	4b23      	ldr	r3, [pc, #140]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003966:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	2b0c      	cmp	r3, #12
 800396c:	d134      	bne.n	80039d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800396e:	4b1e      	ldr	r3, [pc, #120]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d003      	beq.n	8003986 <HAL_RCC_GetSysClockFreq+0xa6>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d003      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0xac>
 8003984:	e005      	b.n	8003992 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003986:	4b1a      	ldr	r3, [pc, #104]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003988:	617b      	str	r3, [r7, #20]
      break;
 800398a:	e005      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800398c:	4b19      	ldr	r3, [pc, #100]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800398e:	617b      	str	r3, [r7, #20]
      break;
 8003990:	e002      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	617b      	str	r3, [r7, #20]
      break;
 8003996:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003998:	4b13      	ldr	r3, [pc, #76]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	3301      	adds	r3, #1
 80039a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039a6:	4b10      	ldr	r3, [pc, #64]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	fb03 f202 	mul.w	r2, r3, r2
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039be:	4b0a      	ldr	r3, [pc, #40]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	0e5b      	lsrs	r3, r3, #25
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	3301      	adds	r3, #1
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039d8:	69bb      	ldr	r3, [r7, #24]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3724      	adds	r7, #36	@ 0x24
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	08007948 	.word	0x08007948
 80039f0:	00f42400 	.word	0x00f42400
 80039f4:	007a1200 	.word	0x007a1200

080039f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039fc:	4b03      	ldr	r3, [pc, #12]	@ (8003a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80039fe:	681b      	ldr	r3, [r3, #0]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000000 	.word	0x20000000

08003a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a14:	f7ff fff0 	bl	80039f8 <HAL_RCC_GetHCLKFreq>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	0a1b      	lsrs	r3, r3, #8
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	4904      	ldr	r1, [pc, #16]	@ (8003a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a26:	5ccb      	ldrb	r3, [r1, r3]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40021000 	.word	0x40021000
 8003a38:	08007940 	.word	0x08007940

08003a3c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	220f      	movs	r2, #15
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a4c:	4b12      	ldr	r3, [pc, #72]	@ (8003a98 <HAL_RCC_GetClockConfig+0x5c>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0203 	and.w	r2, r3, #3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a58:	4b0f      	ldr	r3, [pc, #60]	@ (8003a98 <HAL_RCC_GetClockConfig+0x5c>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a64:	4b0c      	ldr	r3, [pc, #48]	@ (8003a98 <HAL_RCC_GetClockConfig+0x5c>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a70:	4b09      	ldr	r3, [pc, #36]	@ (8003a98 <HAL_RCC_GetClockConfig+0x5c>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	08db      	lsrs	r3, r3, #3
 8003a76:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003a7e:	4b07      	ldr	r3, [pc, #28]	@ (8003a9c <HAL_RCC_GetClockConfig+0x60>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0207 	and.w	r2, r3, #7
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	601a      	str	r2, [r3, #0]
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40022000 	.word	0x40022000

08003aa0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003aac:	4b2a      	ldr	r3, [pc, #168]	@ (8003b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ab8:	f7ff f994 	bl	8002de4 <HAL_PWREx_GetVoltageRange>
 8003abc:	6178      	str	r0, [r7, #20]
 8003abe:	e014      	b.n	8003aea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ac0:	4b25      	ldr	r3, [pc, #148]	@ (8003b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac4:	4a24      	ldr	r2, [pc, #144]	@ (8003b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8003acc:	4b22      	ldr	r3, [pc, #136]	@ (8003b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ad8:	f7ff f984 	bl	8002de4 <HAL_PWREx_GetVoltageRange>
 8003adc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ade:	4b1e      	ldr	r3, [pc, #120]	@ (8003b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8003b58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ae4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ae8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003af0:	d10b      	bne.n	8003b0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b80      	cmp	r3, #128	@ 0x80
 8003af6:	d919      	bls.n	8003b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2ba0      	cmp	r3, #160	@ 0xa0
 8003afc:	d902      	bls.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003afe:	2302      	movs	r3, #2
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	e013      	b.n	8003b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b04:	2301      	movs	r3, #1
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	e010      	b.n	8003b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b80      	cmp	r3, #128	@ 0x80
 8003b0e:	d902      	bls.n	8003b16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b10:	2303      	movs	r3, #3
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	e00a      	b.n	8003b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b80      	cmp	r3, #128	@ 0x80
 8003b1a:	d102      	bne.n	8003b22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	e004      	b.n	8003b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b70      	cmp	r3, #112	@ 0x70
 8003b26:	d101      	bne.n	8003b2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b28:	2301      	movs	r3, #1
 8003b2a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f023 0207 	bic.w	r2, r3, #7
 8003b34:	4909      	ldr	r1, [pc, #36]	@ (8003b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b3c:	4b07      	ldr	r3, [pc, #28]	@ (8003b5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d001      	beq.n	8003b4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40022000 	.word	0x40022000

08003b60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b68:	2300      	movs	r3, #0
 8003b6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d041      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b80:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b84:	d02a      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b86:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b8a:	d824      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b90:	d008      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b96:	d81e      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ba0:	d010      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ba2:	e018      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ba4:	4b86      	ldr	r3, [pc, #536]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4a85      	ldr	r2, [pc, #532]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bb0:	e015      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 facd 	bl	8004158 <RCCEx_PLLSAI1_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bc2:	e00c      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3320      	adds	r3, #32
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fbb6 	bl	800433c <RCCEx_PLLSAI2_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003bd4:	e003      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	74fb      	strb	r3, [r7, #19]
      break;
 8003bda:	e000      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003bdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bde:	7cfb      	ldrb	r3, [r7, #19]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10b      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003be4:	4b76      	ldr	r3, [pc, #472]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bf2:	4973      	ldr	r1, [pc, #460]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003bfa:	e001      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfc:	7cfb      	ldrb	r3, [r7, #19]
 8003bfe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d041      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c14:	d02a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003c16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c1a:	d824      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c20:	d008      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003c22:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c26:	d81e      	bhi.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003c2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c30:	d010      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c32:	e018      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c34:	4b62      	ldr	r3, [pc, #392]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4a61      	ldr	r2, [pc, #388]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c40:	e015      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3304      	adds	r3, #4
 8003c46:	2100      	movs	r1, #0
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fa85 	bl	8004158 <RCCEx_PLLSAI1_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c52:	e00c      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3320      	adds	r3, #32
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fb6e 	bl	800433c <RCCEx_PLLSAI2_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c64:	e003      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	74fb      	strb	r3, [r7, #19]
      break;
 8003c6a:	e000      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c6e:	7cfb      	ldrb	r3, [r7, #19]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10b      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c74:	4b52      	ldr	r3, [pc, #328]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c82:	494f      	ldr	r1, [pc, #316]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c8a:	e001      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80a0 	beq.w	8003dde <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ca2:	4b47      	ldr	r3, [pc, #284]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00d      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb8:	4b41      	ldr	r3, [pc, #260]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbc:	4a40      	ldr	r2, [pc, #256]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cc4:	4b3e      	ldr	r3, [pc, #248]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ccc:	60bb      	str	r3, [r7, #8]
 8003cce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a3a      	ldr	r2, [pc, #232]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ce0:	f7fc fffe 	bl	8000ce0 <HAL_GetTick>
 8003ce4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ce6:	e009      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce8:	f7fc fffa 	bl	8000ce0 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d902      	bls.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	74fb      	strb	r3, [r7, #19]
        break;
 8003cfa:	e005      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cfc:	4b31      	ldr	r3, [pc, #196]	@ (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0ef      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003d08:	7cfb      	ldrb	r3, [r7, #19]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d15c      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d0e:	4b2c      	ldr	r3, [pc, #176]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d01f      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d019      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d2c:	4b24      	ldr	r3, [pc, #144]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d38:	4b21      	ldr	r3, [pc, #132]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d3e:	4a20      	ldr	r2, [pc, #128]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d48:	4b1d      	ldr	r3, [pc, #116]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d58:	4a19      	ldr	r2, [pc, #100]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d016      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6a:	f7fc ffb9 	bl	8000ce0 <HAL_GetTick>
 8003d6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d70:	e00b      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d72:	f7fc ffb5 	bl	8000ce0 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d902      	bls.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	74fb      	strb	r3, [r7, #19]
            break;
 8003d88:	e006      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ec      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d98:	7cfb      	ldrb	r3, [r7, #19]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10c      	bne.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d9e:	4b08      	ldr	r3, [pc, #32]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dae:	4904      	ldr	r1, [pc, #16]	@ (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003db6:	e009      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	74bb      	strb	r3, [r7, #18]
 8003dbc:	e006      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003dbe:	bf00      	nop
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc8:	7cfb      	ldrb	r3, [r7, #19]
 8003dca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dcc:	7c7b      	ldrb	r3, [r7, #17]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d105      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd2:	4ba6      	ldr	r3, [pc, #664]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd6:	4aa5      	ldr	r2, [pc, #660]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ddc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dea:	4ba0      	ldr	r3, [pc, #640]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df0:	f023 0203 	bic.w	r2, r3, #3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df8:	499c      	ldr	r1, [pc, #624]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e0c:	4b97      	ldr	r3, [pc, #604]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e12:	f023 020c 	bic.w	r2, r3, #12
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1a:	4994      	ldr	r1, [pc, #592]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e2e:	4b8f      	ldr	r3, [pc, #572]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3c:	498b      	ldr	r1, [pc, #556]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e50:	4b86      	ldr	r3, [pc, #536]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5e:	4983      	ldr	r1, [pc, #524]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e72:	4b7e      	ldr	r3, [pc, #504]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e80:	497a      	ldr	r1, [pc, #488]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e94:	4b75      	ldr	r3, [pc, #468]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea2:	4972      	ldr	r1, [pc, #456]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ebc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec4:	4969      	ldr	r1, [pc, #420]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ed8:	4b64      	ldr	r3, [pc, #400]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ede:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ee6:	4961      	ldr	r1, [pc, #388]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003efa:	4b5c      	ldr	r3, [pc, #368]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f00:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f08:	4958      	ldr	r1, [pc, #352]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f1c:	4b53      	ldr	r3, [pc, #332]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f22:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2a:	4950      	ldr	r1, [pc, #320]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f3e:	4b4b      	ldr	r3, [pc, #300]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4c:	4947      	ldr	r1, [pc, #284]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f60:	4b42      	ldr	r3, [pc, #264]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f66:	f023 0203 	bic.w	r2, r3, #3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6e:	493f      	ldr	r1, [pc, #252]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d028      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f82:	4b3a      	ldr	r3, [pc, #232]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f88:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f90:	4936      	ldr	r1, [pc, #216]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fa0:	d106      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fa2:	4b32      	ldr	r3, [pc, #200]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	4a31      	ldr	r2, [pc, #196]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fa8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fac:	60d3      	str	r3, [r2, #12]
 8003fae:	e011      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 f8c9 	bl	8004158 <RCCEx_PLLSAI1_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003fd0:	7cfb      	ldrb	r3, [r7, #19]
 8003fd2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d028      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fe0:	4b22      	ldr	r3, [pc, #136]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fee:	491f      	ldr	r1, [pc, #124]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ffa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ffe:	d106      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004000:	4b1a      	ldr	r3, [pc, #104]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4a19      	ldr	r2, [pc, #100]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004006:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800400a:	60d3      	str	r3, [r2, #12]
 800400c:	e011      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004012:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004016:	d10c      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3304      	adds	r3, #4
 800401c:	2101      	movs	r1, #1
 800401e:	4618      	mov	r0, r3
 8004020:	f000 f89a 	bl	8004158 <RCCEx_PLLSAI1_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004028:	7cfb      	ldrb	r3, [r7, #19]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800402e:	7cfb      	ldrb	r3, [r7, #19]
 8004030:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d02a      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800403e:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004044:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800404c:	4907      	ldr	r1, [pc, #28]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004058:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800405c:	d108      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800405e:	4b03      	ldr	r3, [pc, #12]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	4a02      	ldr	r2, [pc, #8]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004064:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004068:	60d3      	str	r3, [r2, #12]
 800406a:	e013      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800406c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004074:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004078:	d10c      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3304      	adds	r3, #4
 800407e:	2101      	movs	r1, #1
 8004080:	4618      	mov	r0, r3
 8004082:	f000 f869 	bl	8004158 <RCCEx_PLLSAI1_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800408a:	7cfb      	ldrb	r3, [r7, #19]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d02f      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040a0:	4b2c      	ldr	r3, [pc, #176]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040ae:	4929      	ldr	r1, [pc, #164]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040be:	d10d      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3304      	adds	r3, #4
 80040c4:	2102      	movs	r1, #2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 f846 	bl	8004158 <RCCEx_PLLSAI1_Config>
 80040cc:	4603      	mov	r3, r0
 80040ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040d0:	7cfb      	ldrb	r3, [r7, #19]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d014      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80040d6:	7cfb      	ldrb	r3, [r7, #19]
 80040d8:	74bb      	strb	r3, [r7, #18]
 80040da:	e011      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040e4:	d10c      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	3320      	adds	r3, #32
 80040ea:	2102      	movs	r1, #2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 f925 	bl	800433c <RCCEx_PLLSAI2_Config>
 80040f2:	4603      	mov	r3, r0
 80040f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040f6:	7cfb      	ldrb	r3, [r7, #19]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80040fc:	7cfb      	ldrb	r3, [r7, #19]
 80040fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00b      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800410c:	4b11      	ldr	r3, [pc, #68]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800411c:	490d      	ldr	r1, [pc, #52]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00b      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004130:	4b08      	ldr	r3, [pc, #32]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004136:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004140:	4904      	ldr	r1, [pc, #16]	@ (8004154 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004148:	7cbb      	ldrb	r3, [r7, #18]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40021000 	.word	0x40021000

08004158 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004166:	4b74      	ldr	r3, [pc, #464]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d018      	beq.n	80041a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004172:	4b71      	ldr	r3, [pc, #452]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f003 0203 	and.w	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	429a      	cmp	r2, r3
 8004180:	d10d      	bne.n	800419e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
       ||
 8004186:	2b00      	cmp	r3, #0
 8004188:	d009      	beq.n	800419e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800418a:	4b6b      	ldr	r3, [pc, #428]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	091b      	lsrs	r3, r3, #4
 8004190:	f003 0307 	and.w	r3, r3, #7
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
       ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d047      	beq.n	800422e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
 80041a2:	e044      	b.n	800422e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d018      	beq.n	80041de <RCCEx_PLLSAI1_Config+0x86>
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d825      	bhi.n	80041fc <RCCEx_PLLSAI1_Config+0xa4>
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d002      	beq.n	80041ba <RCCEx_PLLSAI1_Config+0x62>
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d009      	beq.n	80041cc <RCCEx_PLLSAI1_Config+0x74>
 80041b8:	e020      	b.n	80041fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80041ba:	4b5f      	ldr	r3, [pc, #380]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d11d      	bne.n	8004202 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ca:	e01a      	b.n	8004202 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d116      	bne.n	8004206 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041dc:	e013      	b.n	8004206 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041de:	4b56      	ldr	r3, [pc, #344]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10f      	bne.n	800420a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041ea:	4b53      	ldr	r3, [pc, #332]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041fa:	e006      	b.n	800420a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004200:	e004      	b.n	800420c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004202:	bf00      	nop
 8004204:	e002      	b.n	800420c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004206:	bf00      	nop
 8004208:	e000      	b.n	800420c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800420a:	bf00      	nop
    }

    if(status == HAL_OK)
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10d      	bne.n	800422e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004212:	4b49      	ldr	r3, [pc, #292]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6819      	ldr	r1, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	3b01      	subs	r3, #1
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	430b      	orrs	r3, r1
 8004228:	4943      	ldr	r1, [pc, #268]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d17c      	bne.n	800432e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004234:	4b40      	ldr	r3, [pc, #256]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a3f      	ldr	r2, [pc, #252]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 800423a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800423e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004240:	f7fc fd4e 	bl	8000ce0 <HAL_GetTick>
 8004244:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004246:	e009      	b.n	800425c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004248:	f7fc fd4a 	bl	8000ce0 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d902      	bls.n	800425c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	73fb      	strb	r3, [r7, #15]
        break;
 800425a:	e005      	b.n	8004268 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800425c:	4b36      	ldr	r3, [pc, #216]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1ef      	bne.n	8004248 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d15f      	bne.n	800432e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d110      	bne.n	8004296 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004274:	4b30      	ldr	r3, [pc, #192]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800427c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6892      	ldr	r2, [r2, #8]
 8004284:	0211      	lsls	r1, r2, #8
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	68d2      	ldr	r2, [r2, #12]
 800428a:	06d2      	lsls	r2, r2, #27
 800428c:	430a      	orrs	r2, r1
 800428e:	492a      	ldr	r1, [pc, #168]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004290:	4313      	orrs	r3, r2
 8004292:	610b      	str	r3, [r1, #16]
 8004294:	e027      	b.n	80042e6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d112      	bne.n	80042c2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800429c:	4b26      	ldr	r3, [pc, #152]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80042a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6892      	ldr	r2, [r2, #8]
 80042ac:	0211      	lsls	r1, r2, #8
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6912      	ldr	r2, [r2, #16]
 80042b2:	0852      	lsrs	r2, r2, #1
 80042b4:	3a01      	subs	r2, #1
 80042b6:	0552      	lsls	r2, r2, #21
 80042b8:	430a      	orrs	r2, r1
 80042ba:	491f      	ldr	r1, [pc, #124]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	610b      	str	r3, [r1, #16]
 80042c0:	e011      	b.n	80042e6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80042c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80042ca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6892      	ldr	r2, [r2, #8]
 80042d2:	0211      	lsls	r1, r2, #8
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6952      	ldr	r2, [r2, #20]
 80042d8:	0852      	lsrs	r2, r2, #1
 80042da:	3a01      	subs	r2, #1
 80042dc:	0652      	lsls	r2, r2, #25
 80042de:	430a      	orrs	r2, r1
 80042e0:	4915      	ldr	r1, [pc, #84]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80042e6:	4b14      	ldr	r3, [pc, #80]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a13      	ldr	r2, [pc, #76]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042f0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f2:	f7fc fcf5 	bl	8000ce0 <HAL_GetTick>
 80042f6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042f8:	e009      	b.n	800430e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042fa:	f7fc fcf1 	bl	8000ce0 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d902      	bls.n	800430e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	73fb      	strb	r3, [r7, #15]
          break;
 800430c:	e005      	b.n	800431a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800430e:	4b0a      	ldr	r3, [pc, #40]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0ef      	beq.n	80042fa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004320:	4b05      	ldr	r3, [pc, #20]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	4903      	ldr	r1, [pc, #12]	@ (8004338 <RCCEx_PLLSAI1_Config+0x1e0>)
 800432a:	4313      	orrs	r3, r2
 800432c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800432e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40021000 	.word	0x40021000

0800433c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800434a:	4b69      	ldr	r3, [pc, #420]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d018      	beq.n	8004388 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004356:	4b66      	ldr	r3, [pc, #408]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 0203 	and.w	r2, r3, #3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d10d      	bne.n	8004382 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
       ||
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800436e:	4b60      	ldr	r3, [pc, #384]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	091b      	lsrs	r3, r3, #4
 8004374:	f003 0307 	and.w	r3, r3, #7
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
       ||
 800437e:	429a      	cmp	r2, r3
 8004380:	d047      	beq.n	8004412 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	73fb      	strb	r3, [r7, #15]
 8004386:	e044      	b.n	8004412 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b03      	cmp	r3, #3
 800438e:	d018      	beq.n	80043c2 <RCCEx_PLLSAI2_Config+0x86>
 8004390:	2b03      	cmp	r3, #3
 8004392:	d825      	bhi.n	80043e0 <RCCEx_PLLSAI2_Config+0xa4>
 8004394:	2b01      	cmp	r3, #1
 8004396:	d002      	beq.n	800439e <RCCEx_PLLSAI2_Config+0x62>
 8004398:	2b02      	cmp	r3, #2
 800439a:	d009      	beq.n	80043b0 <RCCEx_PLLSAI2_Config+0x74>
 800439c:	e020      	b.n	80043e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800439e:	4b54      	ldr	r3, [pc, #336]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d11d      	bne.n	80043e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ae:	e01a      	b.n	80043e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043b0:	4b4f      	ldr	r3, [pc, #316]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d116      	bne.n	80043ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c0:	e013      	b.n	80043ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043c2:	4b4b      	ldr	r3, [pc, #300]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10f      	bne.n	80043ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043ce:	4b48      	ldr	r3, [pc, #288]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d109      	bne.n	80043ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043de:	e006      	b.n	80043ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	73fb      	strb	r3, [r7, #15]
      break;
 80043e4:	e004      	b.n	80043f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043e6:	bf00      	nop
 80043e8:	e002      	b.n	80043f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ea:	bf00      	nop
 80043ec:	e000      	b.n	80043f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80043ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10d      	bne.n	8004412 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80043f6:	4b3e      	ldr	r3, [pc, #248]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6819      	ldr	r1, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	3b01      	subs	r3, #1
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	430b      	orrs	r3, r1
 800440c:	4938      	ldr	r1, [pc, #224]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800440e:	4313      	orrs	r3, r2
 8004410:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d166      	bne.n	80044e6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004418:	4b35      	ldr	r3, [pc, #212]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a34      	ldr	r2, [pc, #208]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800441e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004424:	f7fc fc5c 	bl	8000ce0 <HAL_GetTick>
 8004428:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800442a:	e009      	b.n	8004440 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800442c:	f7fc fc58 	bl	8000ce0 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d902      	bls.n	8004440 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	73fb      	strb	r3, [r7, #15]
        break;
 800443e:	e005      	b.n	800444c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004440:	4b2b      	ldr	r3, [pc, #172]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1ef      	bne.n	800442c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d149      	bne.n	80044e6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d110      	bne.n	800447a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004458:	4b25      	ldr	r3, [pc, #148]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004460:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6892      	ldr	r2, [r2, #8]
 8004468:	0211      	lsls	r1, r2, #8
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	68d2      	ldr	r2, [r2, #12]
 800446e:	06d2      	lsls	r2, r2, #27
 8004470:	430a      	orrs	r2, r1
 8004472:	491f      	ldr	r1, [pc, #124]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004474:	4313      	orrs	r3, r2
 8004476:	614b      	str	r3, [r1, #20]
 8004478:	e011      	b.n	800449e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800447a:	4b1d      	ldr	r3, [pc, #116]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004482:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6892      	ldr	r2, [r2, #8]
 800448a:	0211      	lsls	r1, r2, #8
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6912      	ldr	r2, [r2, #16]
 8004490:	0852      	lsrs	r2, r2, #1
 8004492:	3a01      	subs	r2, #1
 8004494:	0652      	lsls	r2, r2, #25
 8004496:	430a      	orrs	r2, r1
 8004498:	4915      	ldr	r1, [pc, #84]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800449a:	4313      	orrs	r3, r2
 800449c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800449e:	4b14      	ldr	r3, [pc, #80]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a13      	ldr	r2, [pc, #76]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044aa:	f7fc fc19 	bl	8000ce0 <HAL_GetTick>
 80044ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044b0:	e009      	b.n	80044c6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80044b2:	f7fc fc15 	bl	8000ce0 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d902      	bls.n	80044c6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	73fb      	strb	r3, [r7, #15]
          break;
 80044c4:	e005      	b.n	80044d2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80044c6:	4b0a      	ldr	r3, [pc, #40]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0ef      	beq.n	80044b2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80044d8:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044da:	695a      	ldr	r2, [r3, #20]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	4903      	ldr	r1, [pc, #12]	@ (80044f0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40021000 	.word	0x40021000

080044f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e049      	b.n	800459a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f841 	bl	80045a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2202      	movs	r2, #2
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3304      	adds	r3, #4
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f000 f9e0 	bl	80048f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
	...

080045b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d001      	beq.n	80045d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e04f      	b.n	8004670 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a23      	ldr	r2, [pc, #140]	@ (800467c <HAL_TIM_Base_Start_IT+0xc4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d01d      	beq.n	800462e <HAL_TIM_Base_Start_IT+0x76>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045fa:	d018      	beq.n	800462e <HAL_TIM_Base_Start_IT+0x76>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a1f      	ldr	r2, [pc, #124]	@ (8004680 <HAL_TIM_Base_Start_IT+0xc8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d013      	beq.n	800462e <HAL_TIM_Base_Start_IT+0x76>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a1e      	ldr	r2, [pc, #120]	@ (8004684 <HAL_TIM_Base_Start_IT+0xcc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d00e      	beq.n	800462e <HAL_TIM_Base_Start_IT+0x76>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1c      	ldr	r2, [pc, #112]	@ (8004688 <HAL_TIM_Base_Start_IT+0xd0>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d009      	beq.n	800462e <HAL_TIM_Base_Start_IT+0x76>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a1b      	ldr	r2, [pc, #108]	@ (800468c <HAL_TIM_Base_Start_IT+0xd4>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d004      	beq.n	800462e <HAL_TIM_Base_Start_IT+0x76>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a19      	ldr	r2, [pc, #100]	@ (8004690 <HAL_TIM_Base_Start_IT+0xd8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d115      	bne.n	800465a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	4b17      	ldr	r3, [pc, #92]	@ (8004694 <HAL_TIM_Base_Start_IT+0xdc>)
 8004636:	4013      	ands	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b06      	cmp	r3, #6
 800463e:	d015      	beq.n	800466c <HAL_TIM_Base_Start_IT+0xb4>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004646:	d011      	beq.n	800466c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004658:	e008      	b.n	800466c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0201 	orr.w	r2, r2, #1
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	e000      	b.n	800466e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40000400 	.word	0x40000400
 8004684:	40000800 	.word	0x40000800
 8004688:	40000c00 	.word	0x40000c00
 800468c:	40013400 	.word	0x40013400
 8004690:	40014000 	.word	0x40014000
 8004694:	00010007 	.word	0x00010007

08004698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d020      	beq.n	80046fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01b      	beq.n	80046fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0202 	mvn.w	r2, #2
 80046cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f8e9 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 80046e8:	e005      	b.n	80046f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f8db 	bl	80048a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f8ec 	bl	80048ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	d020      	beq.n	8004748 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01b      	beq.n	8004748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0204 	mvn.w	r2, #4
 8004718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2202      	movs	r2, #2
 800471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f8c3 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f8b5 	bl	80048a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f8c6 	bl	80048ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d020      	beq.n	8004794 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d01b      	beq.n	8004794 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0208 	mvn.w	r2, #8
 8004764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2204      	movs	r2, #4
 800476a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f89d 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 8004780:	e005      	b.n	800478e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f88f 	bl	80048a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f8a0 	bl	80048ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f003 0310 	and.w	r3, r3, #16
 800479a:	2b00      	cmp	r3, #0
 800479c:	d020      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01b      	beq.n	80047e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0210 	mvn.w	r2, #16
 80047b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2208      	movs	r2, #8
 80047b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f877 	bl	80048ba <HAL_TIM_IC_CaptureCallback>
 80047cc:	e005      	b.n	80047da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f869 	bl	80048a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f87a 	bl	80048ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00c      	beq.n	8004804 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0201 	mvn.w	r2, #1
 80047fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fb fffe 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480a:	2b00      	cmp	r3, #0
 800480c:	d104      	bne.n	8004818 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00c      	beq.n	8004832 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800481e:	2b00      	cmp	r3, #0
 8004820:	d007      	beq.n	8004832 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800482a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f913 	bl	8004a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00c      	beq.n	8004856 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800484e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f90b 	bl	8004a6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00c      	beq.n	800487a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f834 	bl	80048e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00c      	beq.n	800489e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d007      	beq.n	800489e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f06f 0220 	mvn.w	r2, #32
 8004896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f8d3 	bl	8004a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
	...

080048f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a46      	ldr	r2, [pc, #280]	@ (8004a24 <TIM_Base_SetConfig+0x12c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d013      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004916:	d00f      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a43      	ldr	r2, [pc, #268]	@ (8004a28 <TIM_Base_SetConfig+0x130>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00b      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a42      	ldr	r2, [pc, #264]	@ (8004a2c <TIM_Base_SetConfig+0x134>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d007      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a41      	ldr	r2, [pc, #260]	@ (8004a30 <TIM_Base_SetConfig+0x138>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_Base_SetConfig+0x40>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a40      	ldr	r2, [pc, #256]	@ (8004a34 <TIM_Base_SetConfig+0x13c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d108      	bne.n	800494a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800493e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4313      	orrs	r3, r2
 8004948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a35      	ldr	r2, [pc, #212]	@ (8004a24 <TIM_Base_SetConfig+0x12c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d01f      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004958:	d01b      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a32      	ldr	r2, [pc, #200]	@ (8004a28 <TIM_Base_SetConfig+0x130>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d017      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a31      	ldr	r2, [pc, #196]	@ (8004a2c <TIM_Base_SetConfig+0x134>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d013      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a30      	ldr	r2, [pc, #192]	@ (8004a30 <TIM_Base_SetConfig+0x138>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00f      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a2f      	ldr	r2, [pc, #188]	@ (8004a34 <TIM_Base_SetConfig+0x13c>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00b      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a2e      	ldr	r2, [pc, #184]	@ (8004a38 <TIM_Base_SetConfig+0x140>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d007      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2d      	ldr	r2, [pc, #180]	@ (8004a3c <TIM_Base_SetConfig+0x144>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d003      	beq.n	8004992 <TIM_Base_SetConfig+0x9a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a40 <TIM_Base_SetConfig+0x148>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d108      	bne.n	80049a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004998:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a16      	ldr	r2, [pc, #88]	@ (8004a24 <TIM_Base_SetConfig+0x12c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00f      	beq.n	80049f0 <TIM_Base_SetConfig+0xf8>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a18      	ldr	r2, [pc, #96]	@ (8004a34 <TIM_Base_SetConfig+0x13c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00b      	beq.n	80049f0 <TIM_Base_SetConfig+0xf8>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a17      	ldr	r2, [pc, #92]	@ (8004a38 <TIM_Base_SetConfig+0x140>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d007      	beq.n	80049f0 <TIM_Base_SetConfig+0xf8>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a16      	ldr	r2, [pc, #88]	@ (8004a3c <TIM_Base_SetConfig+0x144>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d003      	beq.n	80049f0 <TIM_Base_SetConfig+0xf8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a15      	ldr	r2, [pc, #84]	@ (8004a40 <TIM_Base_SetConfig+0x148>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d103      	bne.n	80049f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d105      	bne.n	8004a16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f023 0201 	bic.w	r2, r3, #1
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	611a      	str	r2, [r3, #16]
  }
}
 8004a16:	bf00      	nop
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40012c00 	.word	0x40012c00
 8004a28:	40000400 	.word	0x40000400
 8004a2c:	40000800 	.word	0x40000800
 8004a30:	40000c00 	.word	0x40000c00
 8004a34:	40013400 	.word	0x40013400
 8004a38:	40014000 	.word	0x40014000
 8004a3c:	40014400 	.word	0x40014400
 8004a40:	40014800 	.word	0x40014800

08004a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <__NVIC_SetPriority>:
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	6039      	str	r1, [r7, #0]
 8004a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	db0a      	blt.n	8004aaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	b2da      	uxtb	r2, r3
 8004a98:	490c      	ldr	r1, [pc, #48]	@ (8004acc <__NVIC_SetPriority+0x4c>)
 8004a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a9e:	0112      	lsls	r2, r2, #4
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004aa8:	e00a      	b.n	8004ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	4908      	ldr	r1, [pc, #32]	@ (8004ad0 <__NVIC_SetPriority+0x50>)
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	3b04      	subs	r3, #4
 8004ab8:	0112      	lsls	r2, r2, #4
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	440b      	add	r3, r1
 8004abe:	761a      	strb	r2, [r3, #24]
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	e000e100 	.word	0xe000e100
 8004ad0:	e000ed00 	.word	0xe000ed00

08004ad4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004ad8:	4b05      	ldr	r3, [pc, #20]	@ (8004af0 <SysTick_Handler+0x1c>)
 8004ada:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004adc:	f001 fd46 	bl	800656c <xTaskGetSchedulerState>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d001      	beq.n	8004aea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004ae6:	f002 fb3f 	bl	8007168 <xPortSysTickHandler>
  }
}
 8004aea:	bf00      	nop
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	e000e010 	.word	0xe000e010

08004af4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004af8:	2100      	movs	r1, #0
 8004afa:	f06f 0004 	mvn.w	r0, #4
 8004afe:	f7ff ffbf 	bl	8004a80 <__NVIC_SetPriority>
#endif
}
 8004b02:	bf00      	nop
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b0e:	f3ef 8305 	mrs	r3, IPSR
 8004b12:	603b      	str	r3, [r7, #0]
  return(result);
 8004b14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004b1a:	f06f 0305 	mvn.w	r3, #5
 8004b1e:	607b      	str	r3, [r7, #4]
 8004b20:	e00c      	b.n	8004b3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b22:	4b0a      	ldr	r3, [pc, #40]	@ (8004b4c <osKernelInitialize+0x44>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d105      	bne.n	8004b36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b2a:	4b08      	ldr	r3, [pc, #32]	@ (8004b4c <osKernelInitialize+0x44>)
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	607b      	str	r3, [r7, #4]
 8004b34:	e002      	b.n	8004b3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b3c:	687b      	ldr	r3, [r7, #4]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	200001a4 	.word	0x200001a4

08004b50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b56:	f3ef 8305 	mrs	r3, IPSR
 8004b5a:	603b      	str	r3, [r7, #0]
  return(result);
 8004b5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004b62:	f06f 0305 	mvn.w	r3, #5
 8004b66:	607b      	str	r3, [r7, #4]
 8004b68:	e010      	b.n	8004b8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b98 <osKernelStart+0x48>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d109      	bne.n	8004b86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b72:	f7ff ffbf 	bl	8004af4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b76:	4b08      	ldr	r3, [pc, #32]	@ (8004b98 <osKernelStart+0x48>)
 8004b78:	2202      	movs	r2, #2
 8004b7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b7c:	f001 f892 	bl	8005ca4 <vTaskStartScheduler>
      stat = osOK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	607b      	str	r3, [r7, #4]
 8004b84:	e002      	b.n	8004b8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004b86:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b8c:	687b      	ldr	r3, [r7, #4]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	200001a4 	.word	0x200001a4

08004b9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08e      	sub	sp, #56	@ 0x38
 8004ba0:	af04      	add	r7, sp, #16
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bac:	f3ef 8305 	mrs	r3, IPSR
 8004bb0:	617b      	str	r3, [r7, #20]
  return(result);
 8004bb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d17e      	bne.n	8004cb6 <osThreadNew+0x11a>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d07b      	beq.n	8004cb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004bbe:	2380      	movs	r3, #128	@ 0x80
 8004bc0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004bc2:	2318      	movs	r3, #24
 8004bc4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295
 8004bce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d045      	beq.n	8004c62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <osThreadNew+0x48>
        name = attr->name;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <osThreadNew+0x6e>
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	2b38      	cmp	r3, #56	@ 0x38
 8004bfc:	d805      	bhi.n	8004c0a <osThreadNew+0x6e>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d001      	beq.n	8004c0e <osThreadNew+0x72>
        return (NULL);
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e054      	b.n	8004cb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	089b      	lsrs	r3, r3, #2
 8004c1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00e      	beq.n	8004c44 <osThreadNew+0xa8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	2ba7      	cmp	r3, #167	@ 0xa7
 8004c2c:	d90a      	bls.n	8004c44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d006      	beq.n	8004c44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <osThreadNew+0xa8>
        mem = 1;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	61bb      	str	r3, [r7, #24]
 8004c42:	e010      	b.n	8004c66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10c      	bne.n	8004c66 <osThreadNew+0xca>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d108      	bne.n	8004c66 <osThreadNew+0xca>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <osThreadNew+0xca>
          mem = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e001      	b.n	8004c66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d110      	bne.n	8004c8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c74:	9202      	str	r2, [sp, #8]
 8004c76:	9301      	str	r3, [sp, #4]
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	6a3a      	ldr	r2, [r7, #32]
 8004c80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f000 fe1a 	bl	80058bc <xTaskCreateStatic>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	613b      	str	r3, [r7, #16]
 8004c8c:	e013      	b.n	8004cb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d110      	bne.n	8004cb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	f107 0310 	add.w	r3, r7, #16
 8004c9c:	9301      	str	r3, [sp, #4]
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 fe68 	bl	800597c <xTaskCreate>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d001      	beq.n	8004cb6 <osThreadNew+0x11a>
            hTask = NULL;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004cb6:	693b      	ldr	r3, [r7, #16]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3728      	adds	r7, #40	@ 0x28
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cc8:	f3ef 8305 	mrs	r3, IPSR
 8004ccc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d003      	beq.n	8004cdc <osDelay+0x1c>
    stat = osErrorISR;
 8004cd4:	f06f 0305 	mvn.w	r3, #5
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	e007      	b.n	8004cec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d002      	beq.n	8004cec <osDelay+0x2c>
      vTaskDelay(ticks);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 ffa6 	bl	8005c38 <vTaskDelay>
    }
  }

  return (stat);
 8004cec:	68fb      	ldr	r3, [r7, #12]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4a07      	ldr	r2, [pc, #28]	@ (8004d24 <vApplicationGetIdleTaskMemory+0x2c>)
 8004d08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	4a06      	ldr	r2, [pc, #24]	@ (8004d28 <vApplicationGetIdleTaskMemory+0x30>)
 8004d0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2280      	movs	r2, #128	@ 0x80
 8004d14:	601a      	str	r2, [r3, #0]
}
 8004d16:	bf00      	nop
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	200001a8 	.word	0x200001a8
 8004d28:	20000250 	.word	0x20000250

08004d2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4a07      	ldr	r2, [pc, #28]	@ (8004d58 <vApplicationGetTimerTaskMemory+0x2c>)
 8004d3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	4a06      	ldr	r2, [pc, #24]	@ (8004d5c <vApplicationGetTimerTaskMemory+0x30>)
 8004d42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d4a:	601a      	str	r2, [r3, #0]
}
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	20000450 	.word	0x20000450
 8004d5c:	200004f8 	.word	0x200004f8

08004d60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f103 0208 	add.w	r2, r3, #8
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f04f 32ff 	mov.w	r2, #4294967295
 8004d78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f103 0208 	add.w	r2, r3, #8
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f103 0208 	add.w	r2, r3, #8
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	601a      	str	r2, [r3, #0]
}
 8004df6:	bf00      	nop
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e02:	b480      	push	{r7}
 8004e04:	b085      	sub	sp, #20
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e18:	d103      	bne.n	8004e22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	e00c      	b.n	8004e3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3308      	adds	r3, #8
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	e002      	b.n	8004e30 <vListInsert+0x2e>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d2f6      	bcs.n	8004e2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	601a      	str	r2, [r3, #0]
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6892      	ldr	r2, [r2, #8]
 8004e8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6852      	ldr	r2, [r2, #4]
 8004e94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d103      	bne.n	8004ea8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689a      	ldr	r2, [r3, #8]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	1e5a      	subs	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ef4:	f002 f8a8 	bl	8007048 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f00:	68f9      	ldr	r1, [r7, #12]
 8004f02:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004f04:	fb01 f303 	mul.w	r3, r1, r3
 8004f08:	441a      	add	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f24:	3b01      	subs	r3, #1
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004f2a:	fb01 f303 	mul.w	r3, r1, r3
 8004f2e:	441a      	add	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	22ff      	movs	r2, #255	@ 0xff
 8004f38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	22ff      	movs	r2, #255	@ 0xff
 8004f40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d114      	bne.n	8004f74 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d01a      	beq.n	8004f88 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3310      	adds	r3, #16
 8004f56:	4618      	mov	r0, r3
 8004f58:	f001 f942 	bl	80061e0 <xTaskRemoveFromEventList>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d012      	beq.n	8004f88 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f62:	4b0d      	ldr	r3, [pc, #52]	@ (8004f98 <xQueueGenericReset+0xd0>)
 8004f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	e009      	b.n	8004f88 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3310      	adds	r3, #16
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff fef1 	bl	8004d60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3324      	adds	r3, #36	@ 0x24
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff feec 	bl	8004d60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f88:	f002 f890 	bl	80070ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f8c:	2301      	movs	r3, #1
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	e000ed04 	.word	0xe000ed04

08004f9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08e      	sub	sp, #56	@ 0x38
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004fc2:	bf00      	nop
 8004fc4:	bf00      	nop
 8004fc6:	e7fd      	b.n	8004fc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	e7fd      	b.n	8004fe2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <xQueueGenericCreateStatic+0x56>
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <xQueueGenericCreateStatic+0x5a>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e000      	b.n	8004ff8 <xQueueGenericCreateStatic+0x5c>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10b      	bne.n	8005014 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005000:	f383 8811 	msr	BASEPRI, r3
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	623b      	str	r3, [r7, #32]
}
 800500e:	bf00      	nop
 8005010:	bf00      	nop
 8005012:	e7fd      	b.n	8005010 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d102      	bne.n	8005020 <xQueueGenericCreateStatic+0x84>
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <xQueueGenericCreateStatic+0x88>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <xQueueGenericCreateStatic+0x8a>
 8005024:	2300      	movs	r3, #0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10b      	bne.n	8005042 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	61fb      	str	r3, [r7, #28]
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	e7fd      	b.n	800503e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005042:	2350      	movs	r3, #80	@ 0x50
 8005044:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b50      	cmp	r3, #80	@ 0x50
 800504a:	d00b      	beq.n	8005064 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	61bb      	str	r3, [r7, #24]
}
 800505e:	bf00      	nop
 8005060:	bf00      	nop
 8005062:	e7fd      	b.n	8005060 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005064:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800506a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00d      	beq.n	800508c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005078:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800507c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	4613      	mov	r3, r2
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	68b9      	ldr	r1, [r7, #8]
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f805 	bl	8005096 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800508c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800508e:	4618      	mov	r0, r3
 8005090:	3730      	adds	r7, #48	@ 0x30
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	607a      	str	r2, [r7, #4]
 80050a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	e002      	b.n	80050b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050c4:	2101      	movs	r1, #1
 80050c6:	69b8      	ldr	r0, [r7, #24]
 80050c8:	f7ff fefe 	bl	8004ec8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	78fa      	ldrb	r2, [r7, #3]
 80050d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050d4:	bf00      	nop
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08e      	sub	sp, #56	@ 0x38
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050ea:	2300      	movs	r3, #0
 80050ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80050f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10b      	bne.n	8005110 <xQueueGenericSend+0x34>
	__asm volatile
 80050f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800510a:	bf00      	nop
 800510c:	bf00      	nop
 800510e:	e7fd      	b.n	800510c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d103      	bne.n	800511e <xQueueGenericSend+0x42>
 8005116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <xQueueGenericSend+0x46>
 800511e:	2301      	movs	r3, #1
 8005120:	e000      	b.n	8005124 <xQueueGenericSend+0x48>
 8005122:	2300      	movs	r3, #0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10b      	bne.n	8005140 <xQueueGenericSend+0x64>
	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800513a:	bf00      	nop
 800513c:	bf00      	nop
 800513e:	e7fd      	b.n	800513c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d103      	bne.n	800514e <xQueueGenericSend+0x72>
 8005146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <xQueueGenericSend+0x76>
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <xQueueGenericSend+0x78>
 8005152:	2300      	movs	r3, #0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10b      	bne.n	8005170 <xQueueGenericSend+0x94>
	__asm volatile
 8005158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	623b      	str	r3, [r7, #32]
}
 800516a:	bf00      	nop
 800516c:	bf00      	nop
 800516e:	e7fd      	b.n	800516c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005170:	f001 f9fc 	bl	800656c <xTaskGetSchedulerState>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d102      	bne.n	8005180 <xQueueGenericSend+0xa4>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <xQueueGenericSend+0xa8>
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <xQueueGenericSend+0xaa>
 8005184:	2300      	movs	r3, #0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10b      	bne.n	80051a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	61fb      	str	r3, [r7, #28]
}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	e7fd      	b.n	800519e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051a2:	f001 ff51 	bl	8007048 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d302      	bcc.n	80051b8 <xQueueGenericSend+0xdc>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d129      	bne.n	800520c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	68b9      	ldr	r1, [r7, #8]
 80051bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051be:	f000 fa0f 	bl	80055e0 <prvCopyDataToQueue>
 80051c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d010      	beq.n	80051ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ce:	3324      	adds	r3, #36	@ 0x24
 80051d0:	4618      	mov	r0, r3
 80051d2:	f001 f805 	bl	80061e0 <xTaskRemoveFromEventList>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d013      	beq.n	8005204 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80051dc:	4b3f      	ldr	r3, [pc, #252]	@ (80052dc <xQueueGenericSend+0x200>)
 80051de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	e00a      	b.n	8005204 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80051ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051f4:	4b39      	ldr	r3, [pc, #228]	@ (80052dc <xQueueGenericSend+0x200>)
 80051f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005204:	f001 ff52 	bl	80070ac <vPortExitCritical>
				return pdPASS;
 8005208:	2301      	movs	r3, #1
 800520a:	e063      	b.n	80052d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d103      	bne.n	800521a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005212:	f001 ff4b 	bl	80070ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005216:	2300      	movs	r3, #0
 8005218:	e05c      	b.n	80052d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800521a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005220:	f107 0314 	add.w	r3, r7, #20
 8005224:	4618      	mov	r0, r3
 8005226:	f001 f83f 	bl	80062a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800522a:	2301      	movs	r3, #1
 800522c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800522e:	f001 ff3d 	bl	80070ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005232:	f000 fda7 	bl	8005d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005236:	f001 ff07 	bl	8007048 <vPortEnterCritical>
 800523a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005240:	b25b      	sxtb	r3, r3
 8005242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005246:	d103      	bne.n	8005250 <xQueueGenericSend+0x174>
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005252:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005256:	b25b      	sxtb	r3, r3
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d103      	bne.n	8005266 <xQueueGenericSend+0x18a>
 800525e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005266:	f001 ff21 	bl	80070ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800526a:	1d3a      	adds	r2, r7, #4
 800526c:	f107 0314 	add.w	r3, r7, #20
 8005270:	4611      	mov	r1, r2
 8005272:	4618      	mov	r0, r3
 8005274:	f001 f82e 	bl	80062d4 <xTaskCheckForTimeOut>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d124      	bne.n	80052c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800527e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005280:	f000 faa6 	bl	80057d0 <prvIsQueueFull>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d018      	beq.n	80052bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800528a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528c:	3310      	adds	r3, #16
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	4611      	mov	r1, r2
 8005292:	4618      	mov	r0, r3
 8005294:	f000 ff52 	bl	800613c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005298:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800529a:	f000 fa31 	bl	8005700 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800529e:	f000 fd7f 	bl	8005da0 <xTaskResumeAll>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f47f af7c 	bne.w	80051a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80052aa:	4b0c      	ldr	r3, [pc, #48]	@ (80052dc <xQueueGenericSend+0x200>)
 80052ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	e772      	b.n	80051a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80052bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052be:	f000 fa1f 	bl	8005700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052c2:	f000 fd6d 	bl	8005da0 <xTaskResumeAll>
 80052c6:	e76c      	b.n	80051a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80052c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052ca:	f000 fa19 	bl	8005700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052ce:	f000 fd67 	bl	8005da0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80052d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3738      	adds	r7, #56	@ 0x38
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	e000ed04 	.word	0xe000ed04

080052e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b090      	sub	sp, #64	@ 0x40
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80052f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10b      	bne.n	8005310 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800530a:	bf00      	nop
 800530c:	bf00      	nop
 800530e:	e7fd      	b.n	800530c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d103      	bne.n	800531e <xQueueGenericSendFromISR+0x3e>
 8005316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <xQueueGenericSendFromISR+0x42>
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <xQueueGenericSendFromISR+0x44>
 8005322:	2300      	movs	r3, #0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10b      	bne.n	8005340 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532c:	f383 8811 	msr	BASEPRI, r3
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	f3bf 8f4f 	dsb	sy
 8005338:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800533a:	bf00      	nop
 800533c:	bf00      	nop
 800533e:	e7fd      	b.n	800533c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d103      	bne.n	800534e <xQueueGenericSendFromISR+0x6e>
 8005346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <xQueueGenericSendFromISR+0x72>
 800534e:	2301      	movs	r3, #1
 8005350:	e000      	b.n	8005354 <xQueueGenericSendFromISR+0x74>
 8005352:	2300      	movs	r3, #0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10b      	bne.n	8005370 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	623b      	str	r3, [r7, #32]
}
 800536a:	bf00      	nop
 800536c:	bf00      	nop
 800536e:	e7fd      	b.n	800536c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005370:	f001 ff4a 	bl	8007208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005374:	f3ef 8211 	mrs	r2, BASEPRI
 8005378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	61fa      	str	r2, [r7, #28]
 800538a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800538c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800538e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005392:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005398:	429a      	cmp	r2, r3
 800539a:	d302      	bcc.n	80053a2 <xQueueGenericSendFromISR+0xc2>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d12f      	bne.n	8005402 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80053a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	68b9      	ldr	r1, [r7, #8]
 80053b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80053b8:	f000 f912 	bl	80055e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80053bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80053c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c4:	d112      	bne.n	80053ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d016      	beq.n	80053fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d0:	3324      	adds	r3, #36	@ 0x24
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 ff04 	bl	80061e0 <xTaskRemoveFromEventList>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00e      	beq.n	80053fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00b      	beq.n	80053fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e007      	b.n	80053fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80053f0:	3301      	adds	r3, #1
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	b25a      	sxtb	r2, r3
 80053f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80053fc:	2301      	movs	r3, #1
 80053fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005400:	e001      	b.n	8005406 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005402:	2300      	movs	r3, #0
 8005404:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005408:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005410:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005414:	4618      	mov	r0, r3
 8005416:	3740      	adds	r7, #64	@ 0x40
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08c      	sub	sp, #48	@ 0x30
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005428:	2300      	movs	r3, #0
 800542a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10b      	bne.n	800544e <xQueueReceive+0x32>
	__asm volatile
 8005436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	623b      	str	r3, [r7, #32]
}
 8005448:	bf00      	nop
 800544a:	bf00      	nop
 800544c:	e7fd      	b.n	800544a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d103      	bne.n	800545c <xQueueReceive+0x40>
 8005454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <xQueueReceive+0x44>
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <xQueueReceive+0x46>
 8005460:	2300      	movs	r3, #0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10b      	bne.n	800547e <xQueueReceive+0x62>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	61fb      	str	r3, [r7, #28]
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	e7fd      	b.n	800547a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800547e:	f001 f875 	bl	800656c <xTaskGetSchedulerState>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d102      	bne.n	800548e <xQueueReceive+0x72>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <xQueueReceive+0x76>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <xQueueReceive+0x78>
 8005492:	2300      	movs	r3, #0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d10b      	bne.n	80054b0 <xQueueReceive+0x94>
	__asm volatile
 8005498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	61bb      	str	r3, [r7, #24]
}
 80054aa:	bf00      	nop
 80054ac:	bf00      	nop
 80054ae:	e7fd      	b.n	80054ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054b0:	f001 fdca 	bl	8007048 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01f      	beq.n	8005500 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054c4:	f000 f8f6 	bl	80056b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ca:	1e5a      	subs	r2, r3, #1
 80054cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00f      	beq.n	80054f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054da:	3310      	adds	r3, #16
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fe7f 	bl	80061e0 <xTaskRemoveFromEventList>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d007      	beq.n	80054f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054e8:	4b3c      	ldr	r3, [pc, #240]	@ (80055dc <xQueueReceive+0x1c0>)
 80054ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054f8:	f001 fdd8 	bl	80070ac <vPortExitCritical>
				return pdPASS;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e069      	b.n	80055d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d103      	bne.n	800550e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005506:	f001 fdd1 	bl	80070ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800550a:	2300      	movs	r3, #0
 800550c:	e062      	b.n	80055d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800550e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005510:	2b00      	cmp	r3, #0
 8005512:	d106      	bne.n	8005522 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005514:	f107 0310 	add.w	r3, r7, #16
 8005518:	4618      	mov	r0, r3
 800551a:	f000 fec5 	bl	80062a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800551e:	2301      	movs	r3, #1
 8005520:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005522:	f001 fdc3 	bl	80070ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005526:	f000 fc2d 	bl	8005d84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800552a:	f001 fd8d 	bl	8007048 <vPortEnterCritical>
 800552e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005530:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005534:	b25b      	sxtb	r3, r3
 8005536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553a:	d103      	bne.n	8005544 <xQueueReceive+0x128>
 800553c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005546:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800554a:	b25b      	sxtb	r3, r3
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d103      	bne.n	800555a <xQueueReceive+0x13e>
 8005552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005554:	2200      	movs	r2, #0
 8005556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800555a:	f001 fda7 	bl	80070ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800555e:	1d3a      	adds	r2, r7, #4
 8005560:	f107 0310 	add.w	r3, r7, #16
 8005564:	4611      	mov	r1, r2
 8005566:	4618      	mov	r0, r3
 8005568:	f000 feb4 	bl	80062d4 <xTaskCheckForTimeOut>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d123      	bne.n	80055ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005574:	f000 f916 	bl	80057a4 <prvIsQueueEmpty>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d017      	beq.n	80055ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800557e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005580:	3324      	adds	r3, #36	@ 0x24
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	4611      	mov	r1, r2
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fdd8 	bl	800613c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800558c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800558e:	f000 f8b7 	bl	8005700 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005592:	f000 fc05 	bl	8005da0 <xTaskResumeAll>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d189      	bne.n	80054b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800559c:	4b0f      	ldr	r3, [pc, #60]	@ (80055dc <xQueueReceive+0x1c0>)
 800559e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	e780      	b.n	80054b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80055ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055b0:	f000 f8a6 	bl	8005700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055b4:	f000 fbf4 	bl	8005da0 <xTaskResumeAll>
 80055b8:	e77a      	b.n	80054b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80055ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055bc:	f000 f8a0 	bl	8005700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055c0:	f000 fbee 	bl	8005da0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055c6:	f000 f8ed 	bl	80057a4 <prvIsQueueEmpty>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f43f af6f 	beq.w	80054b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3730      	adds	r7, #48	@ 0x30
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	e000ed04 	.word	0xe000ed04

080055e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80055ec:	2300      	movs	r3, #0
 80055ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10d      	bne.n	800561a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d14d      	bne.n	80056a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	4618      	mov	r0, r3
 800560c:	f000 ffcc 	bl	80065a8 <xTaskPriorityDisinherit>
 8005610:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	609a      	str	r2, [r3, #8]
 8005618:	e043      	b.n	80056a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d119      	bne.n	8005654 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6858      	ldr	r0, [r3, #4]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005628:	461a      	mov	r2, r3
 800562a:	68b9      	ldr	r1, [r7, #8]
 800562c:	f002 f8a0 	bl	8007770 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005638:	441a      	add	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	429a      	cmp	r2, r3
 8005648:	d32b      	bcc.n	80056a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	e026      	b.n	80056a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	68d8      	ldr	r0, [r3, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565c:	461a      	mov	r2, r3
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	f002 f886 	bl	8007770 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566c:	425b      	negs	r3, r3
 800566e:	441a      	add	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d207      	bcs.n	8005690 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005688:	425b      	negs	r3, r3
 800568a:	441a      	add	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d105      	bne.n	80056a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	3b01      	subs	r3, #1
 80056a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80056aa:	697b      	ldr	r3, [r7, #20]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d018      	beq.n	80056f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ce:	441a      	add	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d303      	bcc.n	80056e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68d9      	ldr	r1, [r3, #12]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f0:	461a      	mov	r2, r3
 80056f2:	6838      	ldr	r0, [r7, #0]
 80056f4:	f002 f83c 	bl	8007770 <memcpy>
	}
}
 80056f8:	bf00      	nop
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005708:	f001 fc9e 	bl	8007048 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005712:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005714:	e011      	b.n	800573a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571a:	2b00      	cmp	r3, #0
 800571c:	d012      	beq.n	8005744 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	3324      	adds	r3, #36	@ 0x24
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fd5c 	bl	80061e0 <xTaskRemoveFromEventList>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800572e:	f000 fe35 	bl	800639c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	3b01      	subs	r3, #1
 8005736:	b2db      	uxtb	r3, r3
 8005738:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800573a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800573e:	2b00      	cmp	r3, #0
 8005740:	dce9      	bgt.n	8005716 <prvUnlockQueue+0x16>
 8005742:	e000      	b.n	8005746 <prvUnlockQueue+0x46>
					break;
 8005744:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	22ff      	movs	r2, #255	@ 0xff
 800574a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800574e:	f001 fcad 	bl	80070ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005752:	f001 fc79 	bl	8007048 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800575c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800575e:	e011      	b.n	8005784 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d012      	beq.n	800578e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3310      	adds	r3, #16
 800576c:	4618      	mov	r0, r3
 800576e:	f000 fd37 	bl	80061e0 <xTaskRemoveFromEventList>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005778:	f000 fe10 	bl	800639c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800577c:	7bbb      	ldrb	r3, [r7, #14]
 800577e:	3b01      	subs	r3, #1
 8005780:	b2db      	uxtb	r3, r3
 8005782:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005788:	2b00      	cmp	r3, #0
 800578a:	dce9      	bgt.n	8005760 <prvUnlockQueue+0x60>
 800578c:	e000      	b.n	8005790 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800578e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	22ff      	movs	r2, #255	@ 0xff
 8005794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005798:	f001 fc88 	bl	80070ac <vPortExitCritical>
}
 800579c:	bf00      	nop
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057ac:	f001 fc4c 	bl	8007048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d102      	bne.n	80057be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80057b8:	2301      	movs	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e001      	b.n	80057c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057c2:	f001 fc73 	bl	80070ac <vPortExitCritical>

	return xReturn;
 80057c6:	68fb      	ldr	r3, [r7, #12]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057d8:	f001 fc36 	bl	8007048 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d102      	bne.n	80057ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80057e8:	2301      	movs	r3, #1
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	e001      	b.n	80057f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057f2:	f001 fc5b 	bl	80070ac <vPortExitCritical>

	return xReturn;
 80057f6:	68fb      	ldr	r3, [r7, #12]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	e014      	b.n	800583a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005810:	4a0f      	ldr	r2, [pc, #60]	@ (8005850 <vQueueAddToRegistry+0x50>)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10b      	bne.n	8005834 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800581c:	490c      	ldr	r1, [pc, #48]	@ (8005850 <vQueueAddToRegistry+0x50>)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005826:	4a0a      	ldr	r2, [pc, #40]	@ (8005850 <vQueueAddToRegistry+0x50>)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	4413      	add	r3, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005832:	e006      	b.n	8005842 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3301      	adds	r3, #1
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b07      	cmp	r3, #7
 800583e:	d9e7      	bls.n	8005810 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005840:	bf00      	nop
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	200008f8 	.word	0x200008f8

08005854 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005864:	f001 fbf0 	bl	8007048 <vPortEnterCritical>
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800586e:	b25b      	sxtb	r3, r3
 8005870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005874:	d103      	bne.n	800587e <vQueueWaitForMessageRestricted+0x2a>
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005884:	b25b      	sxtb	r3, r3
 8005886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588a:	d103      	bne.n	8005894 <vQueueWaitForMessageRestricted+0x40>
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005894:	f001 fc0a 	bl	80070ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589c:	2b00      	cmp	r3, #0
 800589e:	d106      	bne.n	80058ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	3324      	adds	r3, #36	@ 0x24
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	68b9      	ldr	r1, [r7, #8]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fc6d 	bl	8006188 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80058ae:	6978      	ldr	r0, [r7, #20]
 80058b0:	f7ff ff26 	bl	8005700 <prvUnlockQueue>
	}
 80058b4:	bf00      	nop
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08e      	sub	sp, #56	@ 0x38
 80058c0:	af04      	add	r7, sp, #16
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80058ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10b      	bne.n	80058e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	623b      	str	r3, [r7, #32]
}
 80058e2:	bf00      	nop
 80058e4:	bf00      	nop
 80058e6:	e7fd      	b.n	80058e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10b      	bne.n	8005906 <xTaskCreateStatic+0x4a>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	61fb      	str	r3, [r7, #28]
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	e7fd      	b.n	8005902 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005906:	23a8      	movs	r3, #168	@ 0xa8
 8005908:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2ba8      	cmp	r3, #168	@ 0xa8
 800590e:	d00b      	beq.n	8005928 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	61bb      	str	r3, [r7, #24]
}
 8005922:	bf00      	nop
 8005924:	bf00      	nop
 8005926:	e7fd      	b.n	8005924 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005928:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800592a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01e      	beq.n	800596e <xTaskCreateStatic+0xb2>
 8005930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005932:	2b00      	cmp	r3, #0
 8005934:	d01b      	beq.n	800596e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005938:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800593e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	2202      	movs	r2, #2
 8005944:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005948:	2300      	movs	r3, #0
 800594a:	9303      	str	r3, [sp, #12]
 800594c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594e:	9302      	str	r3, [sp, #8]
 8005950:	f107 0314 	add.w	r3, r7, #20
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f851 	bl	8005a08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005966:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005968:	f000 f8f6 	bl	8005b58 <prvAddNewTaskToReadyList>
 800596c:	e001      	b.n	8005972 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005972:	697b      	ldr	r3, [r7, #20]
	}
 8005974:	4618      	mov	r0, r3
 8005976:	3728      	adds	r7, #40	@ 0x28
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08c      	sub	sp, #48	@ 0x30
 8005980:	af04      	add	r7, sp, #16
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	4613      	mov	r3, r2
 800598a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800598c:	88fb      	ldrh	r3, [r7, #6]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4618      	mov	r0, r3
 8005992:	f001 fc7b 	bl	800728c <pvPortMalloc>
 8005996:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00e      	beq.n	80059bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800599e:	20a8      	movs	r0, #168	@ 0xa8
 80059a0:	f001 fc74 	bl	800728c <pvPortMalloc>
 80059a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80059b2:	e005      	b.n	80059c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059b4:	6978      	ldr	r0, [r7, #20]
 80059b6:	f001 fd37 	bl	8007428 <vPortFree>
 80059ba:	e001      	b.n	80059c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80059bc:	2300      	movs	r3, #0
 80059be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d017      	beq.n	80059f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059ce:	88fa      	ldrh	r2, [r7, #6]
 80059d0:	2300      	movs	r3, #0
 80059d2:	9303      	str	r3, [sp, #12]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	9302      	str	r3, [sp, #8]
 80059d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f80f 	bl	8005a08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059ea:	69f8      	ldr	r0, [r7, #28]
 80059ec:	f000 f8b4 	bl	8005b58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059f0:	2301      	movs	r3, #1
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	e002      	b.n	80059fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059f6:	f04f 33ff 	mov.w	r3, #4294967295
 80059fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059fc:	69bb      	ldr	r3, [r7, #24]
	}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3720      	adds	r7, #32
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b088      	sub	sp, #32
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a18:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	461a      	mov	r2, r3
 8005a20:	21a5      	movs	r1, #165	@ 0xa5
 8005a22:	f001 fe21 	bl	8007668 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a30:	3b01      	subs	r3, #1
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	f023 0307 	bic.w	r3, r3, #7
 8005a3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00b      	beq.n	8005a62 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	617b      	str	r3, [r7, #20]
}
 8005a5c:	bf00      	nop
 8005a5e:	bf00      	nop
 8005a60:	e7fd      	b.n	8005a5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d01f      	beq.n	8005aa8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a68:	2300      	movs	r3, #0
 8005a6a:	61fb      	str	r3, [r7, #28]
 8005a6c:	e012      	b.n	8005a94 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	4413      	add	r3, r2
 8005a74:	7819      	ldrb	r1, [r3, #0]
 8005a76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	3334      	adds	r3, #52	@ 0x34
 8005a7e:	460a      	mov	r2, r1
 8005a80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	4413      	add	r3, r2
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d006      	beq.n	8005a9c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	3301      	adds	r3, #1
 8005a92:	61fb      	str	r3, [r7, #28]
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	2b0f      	cmp	r3, #15
 8005a98:	d9e9      	bls.n	8005a6e <prvInitialiseNewTask+0x66>
 8005a9a:	e000      	b.n	8005a9e <prvInitialiseNewTask+0x96>
			{
				break;
 8005a9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005aa6:	e003      	b.n	8005ab0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab2:	2b37      	cmp	r3, #55	@ 0x37
 8005ab4:	d901      	bls.n	8005aba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ab6:	2337      	movs	r3, #55	@ 0x37
 8005ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005abe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ac4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac8:	2200      	movs	r2, #0
 8005aca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ace:	3304      	adds	r3, #4
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff f965 	bl	8004da0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad8:	3318      	adds	r3, #24
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff f960 	bl	8004da0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ae4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af8:	2200      	movs	r2, #0
 8005afa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b08:	3354      	adds	r3, #84	@ 0x54
 8005b0a:	224c      	movs	r2, #76	@ 0x4c
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f001 fdaa 	bl	8007668 <memset>
 8005b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b16:	4a0d      	ldr	r2, [pc, #52]	@ (8005b4c <prvInitialiseNewTask+0x144>)
 8005b18:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8005b50 <prvInitialiseNewTask+0x148>)
 8005b1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b22:	4a0c      	ldr	r2, [pc, #48]	@ (8005b54 <prvInitialiseNewTask+0x14c>)
 8005b24:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	68f9      	ldr	r1, [r7, #12]
 8005b2a:	69b8      	ldr	r0, [r7, #24]
 8005b2c:	f001 f95a 	bl	8006de4 <pxPortInitialiseStack>
 8005b30:	4602      	mov	r2, r0
 8005b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d002      	beq.n	8005b42 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b42:	bf00      	nop
 8005b44:	3720      	adds	r7, #32
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	20001b44 	.word	0x20001b44
 8005b50:	20001bac 	.word	0x20001bac
 8005b54:	20001c14 	.word	0x20001c14

08005b58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b60:	f001 fa72 	bl	8007048 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b64:	4b2d      	ldr	r3, [pc, #180]	@ (8005c1c <prvAddNewTaskToReadyList+0xc4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	4a2c      	ldr	r2, [pc, #176]	@ (8005c1c <prvAddNewTaskToReadyList+0xc4>)
 8005b6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8005c20 <prvAddNewTaskToReadyList+0xc8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d109      	bne.n	8005b8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b76:	4a2a      	ldr	r2, [pc, #168]	@ (8005c20 <prvAddNewTaskToReadyList+0xc8>)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b7c:	4b27      	ldr	r3, [pc, #156]	@ (8005c1c <prvAddNewTaskToReadyList+0xc4>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d110      	bne.n	8005ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b84:	f000 fc2e 	bl	80063e4 <prvInitialiseTaskLists>
 8005b88:	e00d      	b.n	8005ba6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b8a:	4b26      	ldr	r3, [pc, #152]	@ (8005c24 <prvAddNewTaskToReadyList+0xcc>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d109      	bne.n	8005ba6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b92:	4b23      	ldr	r3, [pc, #140]	@ (8005c20 <prvAddNewTaskToReadyList+0xc8>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d802      	bhi.n	8005ba6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ba0:	4a1f      	ldr	r2, [pc, #124]	@ (8005c20 <prvAddNewTaskToReadyList+0xc8>)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ba6:	4b20      	ldr	r3, [pc, #128]	@ (8005c28 <prvAddNewTaskToReadyList+0xd0>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3301      	adds	r3, #1
 8005bac:	4a1e      	ldr	r2, [pc, #120]	@ (8005c28 <prvAddNewTaskToReadyList+0xd0>)
 8005bae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005c28 <prvAddNewTaskToReadyList+0xd0>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8005c2c <prvAddNewTaskToReadyList+0xd4>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d903      	bls.n	8005bcc <prvAddNewTaskToReadyList+0x74>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc8:	4a18      	ldr	r2, [pc, #96]	@ (8005c2c <prvAddNewTaskToReadyList+0xd4>)
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4a15      	ldr	r2, [pc, #84]	@ (8005c30 <prvAddNewTaskToReadyList+0xd8>)
 8005bda:	441a      	add	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3304      	adds	r3, #4
 8005be0:	4619      	mov	r1, r3
 8005be2:	4610      	mov	r0, r2
 8005be4:	f7ff f8e9 	bl	8004dba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005be8:	f001 fa60 	bl	80070ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005bec:	4b0d      	ldr	r3, [pc, #52]	@ (8005c24 <prvAddNewTaskToReadyList+0xcc>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00e      	beq.n	8005c12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8005c20 <prvAddNewTaskToReadyList+0xc8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d207      	bcs.n	8005c12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c02:	4b0c      	ldr	r3, [pc, #48]	@ (8005c34 <prvAddNewTaskToReadyList+0xdc>)
 8005c04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c12:	bf00      	nop
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	20000e0c 	.word	0x20000e0c
 8005c20:	20000938 	.word	0x20000938
 8005c24:	20000e18 	.word	0x20000e18
 8005c28:	20000e28 	.word	0x20000e28
 8005c2c:	20000e14 	.word	0x20000e14
 8005c30:	2000093c 	.word	0x2000093c
 8005c34:	e000ed04 	.word	0xe000ed04

08005c38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d018      	beq.n	8005c7c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c4a:	4b14      	ldr	r3, [pc, #80]	@ (8005c9c <vTaskDelay+0x64>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00b      	beq.n	8005c6a <vTaskDelay+0x32>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	60bb      	str	r3, [r7, #8]
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
 8005c68:	e7fd      	b.n	8005c66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c6a:	f000 f88b 	bl	8005d84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c6e:	2100      	movs	r1, #0
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fd09 	bl	8006688 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c76:	f000 f893 	bl	8005da0 <xTaskResumeAll>
 8005c7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d107      	bne.n	8005c92 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005c82:	4b07      	ldr	r3, [pc, #28]	@ (8005ca0 <vTaskDelay+0x68>)
 8005c84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c92:	bf00      	nop
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20000e34 	.word	0x20000e34
 8005ca0:	e000ed04 	.word	0xe000ed04

08005ca4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08a      	sub	sp, #40	@ 0x28
 8005ca8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005cb2:	463a      	mov	r2, r7
 8005cb4:	1d39      	adds	r1, r7, #4
 8005cb6:	f107 0308 	add.w	r3, r7, #8
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7ff f81c 	bl	8004cf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	9202      	str	r2, [sp, #8]
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	460a      	mov	r2, r1
 8005cd2:	4924      	ldr	r1, [pc, #144]	@ (8005d64 <vTaskStartScheduler+0xc0>)
 8005cd4:	4824      	ldr	r0, [pc, #144]	@ (8005d68 <vTaskStartScheduler+0xc4>)
 8005cd6:	f7ff fdf1 	bl	80058bc <xTaskCreateStatic>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	4a23      	ldr	r2, [pc, #140]	@ (8005d6c <vTaskStartScheduler+0xc8>)
 8005cde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ce0:	4b22      	ldr	r3, [pc, #136]	@ (8005d6c <vTaskStartScheduler+0xc8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	e001      	b.n	8005cf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d102      	bne.n	8005cfe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005cf8:	f000 fd1a 	bl	8006730 <xTimerCreateTimerTask>
 8005cfc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d11b      	bne.n	8005d3c <vTaskStartScheduler+0x98>
	__asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	613b      	str	r3, [r7, #16]
}
 8005d16:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d18:	4b15      	ldr	r3, [pc, #84]	@ (8005d70 <vTaskStartScheduler+0xcc>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3354      	adds	r3, #84	@ 0x54
 8005d1e:	4a15      	ldr	r2, [pc, #84]	@ (8005d74 <vTaskStartScheduler+0xd0>)
 8005d20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d22:	4b15      	ldr	r3, [pc, #84]	@ (8005d78 <vTaskStartScheduler+0xd4>)
 8005d24:	f04f 32ff 	mov.w	r2, #4294967295
 8005d28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d2a:	4b14      	ldr	r3, [pc, #80]	@ (8005d7c <vTaskStartScheduler+0xd8>)
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d30:	4b13      	ldr	r3, [pc, #76]	@ (8005d80 <vTaskStartScheduler+0xdc>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d36:	f001 f8e3 	bl	8006f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d3a:	e00f      	b.n	8005d5c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d42:	d10b      	bne.n	8005d5c <vTaskStartScheduler+0xb8>
	__asm volatile
 8005d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d48:	f383 8811 	msr	BASEPRI, r3
 8005d4c:	f3bf 8f6f 	isb	sy
 8005d50:	f3bf 8f4f 	dsb	sy
 8005d54:	60fb      	str	r3, [r7, #12]
}
 8005d56:	bf00      	nop
 8005d58:	bf00      	nop
 8005d5a:	e7fd      	b.n	8005d58 <vTaskStartScheduler+0xb4>
}
 8005d5c:	bf00      	nop
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	08007888 	.word	0x08007888
 8005d68:	080063b5 	.word	0x080063b5
 8005d6c:	20000e30 	.word	0x20000e30
 8005d70:	20000938 	.word	0x20000938
 8005d74:	20000010 	.word	0x20000010
 8005d78:	20000e2c 	.word	0x20000e2c
 8005d7c:	20000e18 	.word	0x20000e18
 8005d80:	20000e10 	.word	0x20000e10

08005d84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d88:	4b04      	ldr	r3, [pc, #16]	@ (8005d9c <vTaskSuspendAll+0x18>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	4a03      	ldr	r2, [pc, #12]	@ (8005d9c <vTaskSuspendAll+0x18>)
 8005d90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d92:	bf00      	nop
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	20000e34 	.word	0x20000e34

08005da0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005daa:	2300      	movs	r3, #0
 8005dac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005dae:	4b42      	ldr	r3, [pc, #264]	@ (8005eb8 <xTaskResumeAll+0x118>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10b      	bne.n	8005dce <xTaskResumeAll+0x2e>
	__asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	603b      	str	r3, [r7, #0]
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	e7fd      	b.n	8005dca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005dce:	f001 f93b 	bl	8007048 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005dd2:	4b39      	ldr	r3, [pc, #228]	@ (8005eb8 <xTaskResumeAll+0x118>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	4a37      	ldr	r2, [pc, #220]	@ (8005eb8 <xTaskResumeAll+0x118>)
 8005dda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ddc:	4b36      	ldr	r3, [pc, #216]	@ (8005eb8 <xTaskResumeAll+0x118>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d162      	bne.n	8005eaa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005de4:	4b35      	ldr	r3, [pc, #212]	@ (8005ebc <xTaskResumeAll+0x11c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d05e      	beq.n	8005eaa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dec:	e02f      	b.n	8005e4e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dee:	4b34      	ldr	r3, [pc, #208]	@ (8005ec0 <xTaskResumeAll+0x120>)
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3318      	adds	r3, #24
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff f83a 	bl	8004e74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3304      	adds	r3, #4
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff f835 	bl	8004e74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8005ec4 <xTaskResumeAll+0x124>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d903      	bls.n	8005e1e <xTaskResumeAll+0x7e>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ec4 <xTaskResumeAll+0x124>)
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4a27      	ldr	r2, [pc, #156]	@ (8005ec8 <xTaskResumeAll+0x128>)
 8005e2c:	441a      	add	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	3304      	adds	r3, #4
 8005e32:	4619      	mov	r1, r3
 8005e34:	4610      	mov	r0, r2
 8005e36:	f7fe ffc0 	bl	8004dba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e3e:	4b23      	ldr	r3, [pc, #140]	@ (8005ecc <xTaskResumeAll+0x12c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d302      	bcc.n	8005e4e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005e48:	4b21      	ldr	r3, [pc, #132]	@ (8005ed0 <xTaskResumeAll+0x130>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e4e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ec0 <xTaskResumeAll+0x120>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1cb      	bne.n	8005dee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e5c:	f000 fb66 	bl	800652c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e60:	4b1c      	ldr	r3, [pc, #112]	@ (8005ed4 <xTaskResumeAll+0x134>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d010      	beq.n	8005e8e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e6c:	f000 f846 	bl	8005efc <xTaskIncrementTick>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005e76:	4b16      	ldr	r3, [pc, #88]	@ (8005ed0 <xTaskResumeAll+0x130>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1f1      	bne.n	8005e6c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005e88:	4b12      	ldr	r3, [pc, #72]	@ (8005ed4 <xTaskResumeAll+0x134>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e8e:	4b10      	ldr	r3, [pc, #64]	@ (8005ed0 <xTaskResumeAll+0x130>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d009      	beq.n	8005eaa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e96:	2301      	movs	r3, #1
 8005e98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ed8 <xTaskResumeAll+0x138>)
 8005e9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005eaa:	f001 f8ff 	bl	80070ac <vPortExitCritical>

	return xAlreadyYielded;
 8005eae:	68bb      	ldr	r3, [r7, #8]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	20000e34 	.word	0x20000e34
 8005ebc:	20000e0c 	.word	0x20000e0c
 8005ec0:	20000dcc 	.word	0x20000dcc
 8005ec4:	20000e14 	.word	0x20000e14
 8005ec8:	2000093c 	.word	0x2000093c
 8005ecc:	20000938 	.word	0x20000938
 8005ed0:	20000e20 	.word	0x20000e20
 8005ed4:	20000e1c 	.word	0x20000e1c
 8005ed8:	e000ed04 	.word	0xe000ed04

08005edc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005ee2:	4b05      	ldr	r3, [pc, #20]	@ (8005ef8 <xTaskGetTickCount+0x1c>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ee8:	687b      	ldr	r3, [r7, #4]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	20000e10 	.word	0x20000e10

08005efc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f06:	4b4f      	ldr	r3, [pc, #316]	@ (8006044 <xTaskIncrementTick+0x148>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f040 8090 	bne.w	8006030 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f10:	4b4d      	ldr	r3, [pc, #308]	@ (8006048 <xTaskIncrementTick+0x14c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3301      	adds	r3, #1
 8005f16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f18:	4a4b      	ldr	r2, [pc, #300]	@ (8006048 <xTaskIncrementTick+0x14c>)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d121      	bne.n	8005f68 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f24:	4b49      	ldr	r3, [pc, #292]	@ (800604c <xTaskIncrementTick+0x150>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00b      	beq.n	8005f46 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	603b      	str	r3, [r7, #0]
}
 8005f40:	bf00      	nop
 8005f42:	bf00      	nop
 8005f44:	e7fd      	b.n	8005f42 <xTaskIncrementTick+0x46>
 8005f46:	4b41      	ldr	r3, [pc, #260]	@ (800604c <xTaskIncrementTick+0x150>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	4b40      	ldr	r3, [pc, #256]	@ (8006050 <xTaskIncrementTick+0x154>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a3e      	ldr	r2, [pc, #248]	@ (800604c <xTaskIncrementTick+0x150>)
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	4a3e      	ldr	r2, [pc, #248]	@ (8006050 <xTaskIncrementTick+0x154>)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8006054 <xTaskIncrementTick+0x158>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	4a3c      	ldr	r2, [pc, #240]	@ (8006054 <xTaskIncrementTick+0x158>)
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	f000 fae2 	bl	800652c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f68:	4b3b      	ldr	r3, [pc, #236]	@ (8006058 <xTaskIncrementTick+0x15c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d349      	bcc.n	8006006 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f72:	4b36      	ldr	r3, [pc, #216]	@ (800604c <xTaskIncrementTick+0x150>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d104      	bne.n	8005f86 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f7c:	4b36      	ldr	r3, [pc, #216]	@ (8006058 <xTaskIncrementTick+0x15c>)
 8005f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f82:	601a      	str	r2, [r3, #0]
					break;
 8005f84:	e03f      	b.n	8006006 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f86:	4b31      	ldr	r3, [pc, #196]	@ (800604c <xTaskIncrementTick+0x150>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d203      	bcs.n	8005fa6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f9e:	4a2e      	ldr	r2, [pc, #184]	@ (8006058 <xTaskIncrementTick+0x15c>)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005fa4:	e02f      	b.n	8006006 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe ff62 	bl	8004e74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	3318      	adds	r3, #24
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fe ff59 	bl	8004e74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fc6:	4b25      	ldr	r3, [pc, #148]	@ (800605c <xTaskIncrementTick+0x160>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d903      	bls.n	8005fd6 <xTaskIncrementTick+0xda>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd2:	4a22      	ldr	r2, [pc, #136]	@ (800605c <xTaskIncrementTick+0x160>)
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8006060 <xTaskIncrementTick+0x164>)
 8005fe4:	441a      	add	r2, r3
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	3304      	adds	r3, #4
 8005fea:	4619      	mov	r1, r3
 8005fec:	4610      	mov	r0, r2
 8005fee:	f7fe fee4 	bl	8004dba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8006064 <xTaskIncrementTick+0x168>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d3b8      	bcc.n	8005f72 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006000:	2301      	movs	r3, #1
 8006002:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006004:	e7b5      	b.n	8005f72 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006006:	4b17      	ldr	r3, [pc, #92]	@ (8006064 <xTaskIncrementTick+0x168>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800600c:	4914      	ldr	r1, [pc, #80]	@ (8006060 <xTaskIncrementTick+0x164>)
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	440b      	add	r3, r1
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d901      	bls.n	8006022 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800601e:	2301      	movs	r3, #1
 8006020:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006022:	4b11      	ldr	r3, [pc, #68]	@ (8006068 <xTaskIncrementTick+0x16c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d007      	beq.n	800603a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800602a:	2301      	movs	r3, #1
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	e004      	b.n	800603a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006030:	4b0e      	ldr	r3, [pc, #56]	@ (800606c <xTaskIncrementTick+0x170>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3301      	adds	r3, #1
 8006036:	4a0d      	ldr	r2, [pc, #52]	@ (800606c <xTaskIncrementTick+0x170>)
 8006038:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800603a:	697b      	ldr	r3, [r7, #20]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	20000e34 	.word	0x20000e34
 8006048:	20000e10 	.word	0x20000e10
 800604c:	20000dc4 	.word	0x20000dc4
 8006050:	20000dc8 	.word	0x20000dc8
 8006054:	20000e24 	.word	0x20000e24
 8006058:	20000e2c 	.word	0x20000e2c
 800605c:	20000e14 	.word	0x20000e14
 8006060:	2000093c 	.word	0x2000093c
 8006064:	20000938 	.word	0x20000938
 8006068:	20000e20 	.word	0x20000e20
 800606c:	20000e1c 	.word	0x20000e1c

08006070 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006076:	4b2b      	ldr	r3, [pc, #172]	@ (8006124 <vTaskSwitchContext+0xb4>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800607e:	4b2a      	ldr	r3, [pc, #168]	@ (8006128 <vTaskSwitchContext+0xb8>)
 8006080:	2201      	movs	r2, #1
 8006082:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006084:	e047      	b.n	8006116 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006086:	4b28      	ldr	r3, [pc, #160]	@ (8006128 <vTaskSwitchContext+0xb8>)
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800608c:	4b27      	ldr	r3, [pc, #156]	@ (800612c <vTaskSwitchContext+0xbc>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	e011      	b.n	80060b8 <vTaskSwitchContext+0x48>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10b      	bne.n	80060b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	607b      	str	r3, [r7, #4]
}
 80060ac:	bf00      	nop
 80060ae:	bf00      	nop
 80060b0:	e7fd      	b.n	80060ae <vTaskSwitchContext+0x3e>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	491d      	ldr	r1, [pc, #116]	@ (8006130 <vTaskSwitchContext+0xc0>)
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	4613      	mov	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0e3      	beq.n	8006094 <vTaskSwitchContext+0x24>
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4613      	mov	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4413      	add	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4a16      	ldr	r2, [pc, #88]	@ (8006130 <vTaskSwitchContext+0xc0>)
 80060d8:	4413      	add	r3, r2
 80060da:	60bb      	str	r3, [r7, #8]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	605a      	str	r2, [r3, #4]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	3308      	adds	r3, #8
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d104      	bne.n	80060fc <vTaskSwitchContext+0x8c>
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	605a      	str	r2, [r3, #4]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	4a0c      	ldr	r2, [pc, #48]	@ (8006134 <vTaskSwitchContext+0xc4>)
 8006104:	6013      	str	r3, [r2, #0]
 8006106:	4a09      	ldr	r2, [pc, #36]	@ (800612c <vTaskSwitchContext+0xbc>)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800610c:	4b09      	ldr	r3, [pc, #36]	@ (8006134 <vTaskSwitchContext+0xc4>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3354      	adds	r3, #84	@ 0x54
 8006112:	4a09      	ldr	r2, [pc, #36]	@ (8006138 <vTaskSwitchContext+0xc8>)
 8006114:	6013      	str	r3, [r2, #0]
}
 8006116:	bf00      	nop
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	20000e34 	.word	0x20000e34
 8006128:	20000e20 	.word	0x20000e20
 800612c:	20000e14 	.word	0x20000e14
 8006130:	2000093c 	.word	0x2000093c
 8006134:	20000938 	.word	0x20000938
 8006138:	20000010 	.word	0x20000010

0800613c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10b      	bne.n	8006164 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	60fb      	str	r3, [r7, #12]
}
 800615e:	bf00      	nop
 8006160:	bf00      	nop
 8006162:	e7fd      	b.n	8006160 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006164:	4b07      	ldr	r3, [pc, #28]	@ (8006184 <vTaskPlaceOnEventList+0x48>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3318      	adds	r3, #24
 800616a:	4619      	mov	r1, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7fe fe48 	bl	8004e02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006172:	2101      	movs	r1, #1
 8006174:	6838      	ldr	r0, [r7, #0]
 8006176:	f000 fa87 	bl	8006688 <prvAddCurrentTaskToDelayedList>
}
 800617a:	bf00      	nop
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20000938 	.word	0x20000938

08006188 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10b      	bne.n	80061b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	617b      	str	r3, [r7, #20]
}
 80061ac:	bf00      	nop
 80061ae:	bf00      	nop
 80061b0:	e7fd      	b.n	80061ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061b2:	4b0a      	ldr	r3, [pc, #40]	@ (80061dc <vTaskPlaceOnEventListRestricted+0x54>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3318      	adds	r3, #24
 80061b8:	4619      	mov	r1, r3
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f7fe fdfd 	bl	8004dba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d002      	beq.n	80061cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80061c6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	68b8      	ldr	r0, [r7, #8]
 80061d0:	f000 fa5a 	bl	8006688 <prvAddCurrentTaskToDelayedList>
	}
 80061d4:	bf00      	nop
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	20000938 	.word	0x20000938

080061e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10b      	bne.n	800620e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	60fb      	str	r3, [r7, #12]
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	e7fd      	b.n	800620a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	3318      	adds	r3, #24
 8006212:	4618      	mov	r0, r3
 8006214:	f7fe fe2e 	bl	8004e74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006218:	4b1d      	ldr	r3, [pc, #116]	@ (8006290 <xTaskRemoveFromEventList+0xb0>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d11d      	bne.n	800625c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	3304      	adds	r3, #4
 8006224:	4618      	mov	r0, r3
 8006226:	f7fe fe25 	bl	8004e74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800622e:	4b19      	ldr	r3, [pc, #100]	@ (8006294 <xTaskRemoveFromEventList+0xb4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d903      	bls.n	800623e <xTaskRemoveFromEventList+0x5e>
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623a:	4a16      	ldr	r2, [pc, #88]	@ (8006294 <xTaskRemoveFromEventList+0xb4>)
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4a13      	ldr	r2, [pc, #76]	@ (8006298 <xTaskRemoveFromEventList+0xb8>)
 800624c:	441a      	add	r2, r3
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	3304      	adds	r3, #4
 8006252:	4619      	mov	r1, r3
 8006254:	4610      	mov	r0, r2
 8006256:	f7fe fdb0 	bl	8004dba <vListInsertEnd>
 800625a:	e005      	b.n	8006268 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	3318      	adds	r3, #24
 8006260:	4619      	mov	r1, r3
 8006262:	480e      	ldr	r0, [pc, #56]	@ (800629c <xTaskRemoveFromEventList+0xbc>)
 8006264:	f7fe fda9 	bl	8004dba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800626c:	4b0c      	ldr	r3, [pc, #48]	@ (80062a0 <xTaskRemoveFromEventList+0xc0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006272:	429a      	cmp	r2, r3
 8006274:	d905      	bls.n	8006282 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006276:	2301      	movs	r3, #1
 8006278:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800627a:	4b0a      	ldr	r3, [pc, #40]	@ (80062a4 <xTaskRemoveFromEventList+0xc4>)
 800627c:	2201      	movs	r2, #1
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	e001      	b.n	8006286 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006282:	2300      	movs	r3, #0
 8006284:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006286:	697b      	ldr	r3, [r7, #20]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3718      	adds	r7, #24
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}
 8006290:	20000e34 	.word	0x20000e34
 8006294:	20000e14 	.word	0x20000e14
 8006298:	2000093c 	.word	0x2000093c
 800629c:	20000dcc 	.word	0x20000dcc
 80062a0:	20000938 	.word	0x20000938
 80062a4:	20000e20 	.word	0x20000e20

080062a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062b0:	4b06      	ldr	r3, [pc, #24]	@ (80062cc <vTaskInternalSetTimeOutState+0x24>)
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062b8:	4b05      	ldr	r3, [pc, #20]	@ (80062d0 <vTaskInternalSetTimeOutState+0x28>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	605a      	str	r2, [r3, #4]
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	20000e24 	.word	0x20000e24
 80062d0:	20000e10 	.word	0x20000e10

080062d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10b      	bne.n	80062fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	613b      	str	r3, [r7, #16]
}
 80062f6:	bf00      	nop
 80062f8:	bf00      	nop
 80062fa:	e7fd      	b.n	80062f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10b      	bne.n	800631a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	60fb      	str	r3, [r7, #12]
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop
 8006318:	e7fd      	b.n	8006316 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800631a:	f000 fe95 	bl	8007048 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800631e:	4b1d      	ldr	r3, [pc, #116]	@ (8006394 <xTaskCheckForTimeOut+0xc0>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006336:	d102      	bne.n	800633e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006338:	2300      	movs	r3, #0
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	e023      	b.n	8006386 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	4b15      	ldr	r3, [pc, #84]	@ (8006398 <xTaskCheckForTimeOut+0xc4>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d007      	beq.n	800635a <xTaskCheckForTimeOut+0x86>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	429a      	cmp	r2, r3
 8006352:	d302      	bcc.n	800635a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006354:	2301      	movs	r3, #1
 8006356:	61fb      	str	r3, [r7, #28]
 8006358:	e015      	b.n	8006386 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	429a      	cmp	r2, r3
 8006362:	d20b      	bcs.n	800637c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	1ad2      	subs	r2, r2, r3
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff ff99 	bl	80062a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006376:	2300      	movs	r3, #0
 8006378:	61fb      	str	r3, [r7, #28]
 800637a:	e004      	b.n	8006386 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006382:	2301      	movs	r3, #1
 8006384:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006386:	f000 fe91 	bl	80070ac <vPortExitCritical>

	return xReturn;
 800638a:	69fb      	ldr	r3, [r7, #28]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3720      	adds	r7, #32
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	20000e10 	.word	0x20000e10
 8006398:	20000e24 	.word	0x20000e24

0800639c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800639c:	b480      	push	{r7}
 800639e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80063a0:	4b03      	ldr	r3, [pc, #12]	@ (80063b0 <vTaskMissedYield+0x14>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	601a      	str	r2, [r3, #0]
}
 80063a6:	bf00      	nop
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	20000e20 	.word	0x20000e20

080063b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063bc:	f000 f852 	bl	8006464 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063c0:	4b06      	ldr	r3, [pc, #24]	@ (80063dc <prvIdleTask+0x28>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d9f9      	bls.n	80063bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80063c8:	4b05      	ldr	r3, [pc, #20]	@ (80063e0 <prvIdleTask+0x2c>)
 80063ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80063d8:	e7f0      	b.n	80063bc <prvIdleTask+0x8>
 80063da:	bf00      	nop
 80063dc:	2000093c 	.word	0x2000093c
 80063e0:	e000ed04 	.word	0xe000ed04

080063e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063ea:	2300      	movs	r3, #0
 80063ec:	607b      	str	r3, [r7, #4]
 80063ee:	e00c      	b.n	800640a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4a12      	ldr	r2, [pc, #72]	@ (8006444 <prvInitialiseTaskLists+0x60>)
 80063fc:	4413      	add	r3, r2
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fe fcae 	bl	8004d60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	3301      	adds	r3, #1
 8006408:	607b      	str	r3, [r7, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b37      	cmp	r3, #55	@ 0x37
 800640e:	d9ef      	bls.n	80063f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006410:	480d      	ldr	r0, [pc, #52]	@ (8006448 <prvInitialiseTaskLists+0x64>)
 8006412:	f7fe fca5 	bl	8004d60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006416:	480d      	ldr	r0, [pc, #52]	@ (800644c <prvInitialiseTaskLists+0x68>)
 8006418:	f7fe fca2 	bl	8004d60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800641c:	480c      	ldr	r0, [pc, #48]	@ (8006450 <prvInitialiseTaskLists+0x6c>)
 800641e:	f7fe fc9f 	bl	8004d60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006422:	480c      	ldr	r0, [pc, #48]	@ (8006454 <prvInitialiseTaskLists+0x70>)
 8006424:	f7fe fc9c 	bl	8004d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006428:	480b      	ldr	r0, [pc, #44]	@ (8006458 <prvInitialiseTaskLists+0x74>)
 800642a:	f7fe fc99 	bl	8004d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800642e:	4b0b      	ldr	r3, [pc, #44]	@ (800645c <prvInitialiseTaskLists+0x78>)
 8006430:	4a05      	ldr	r2, [pc, #20]	@ (8006448 <prvInitialiseTaskLists+0x64>)
 8006432:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006434:	4b0a      	ldr	r3, [pc, #40]	@ (8006460 <prvInitialiseTaskLists+0x7c>)
 8006436:	4a05      	ldr	r2, [pc, #20]	@ (800644c <prvInitialiseTaskLists+0x68>)
 8006438:	601a      	str	r2, [r3, #0]
}
 800643a:	bf00      	nop
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	2000093c 	.word	0x2000093c
 8006448:	20000d9c 	.word	0x20000d9c
 800644c:	20000db0 	.word	0x20000db0
 8006450:	20000dcc 	.word	0x20000dcc
 8006454:	20000de0 	.word	0x20000de0
 8006458:	20000df8 	.word	0x20000df8
 800645c:	20000dc4 	.word	0x20000dc4
 8006460:	20000dc8 	.word	0x20000dc8

08006464 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800646a:	e019      	b.n	80064a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800646c:	f000 fdec 	bl	8007048 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006470:	4b10      	ldr	r3, [pc, #64]	@ (80064b4 <prvCheckTasksWaitingTermination+0x50>)
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	3304      	adds	r3, #4
 800647c:	4618      	mov	r0, r3
 800647e:	f7fe fcf9 	bl	8004e74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006482:	4b0d      	ldr	r3, [pc, #52]	@ (80064b8 <prvCheckTasksWaitingTermination+0x54>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3b01      	subs	r3, #1
 8006488:	4a0b      	ldr	r2, [pc, #44]	@ (80064b8 <prvCheckTasksWaitingTermination+0x54>)
 800648a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800648c:	4b0b      	ldr	r3, [pc, #44]	@ (80064bc <prvCheckTasksWaitingTermination+0x58>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3b01      	subs	r3, #1
 8006492:	4a0a      	ldr	r2, [pc, #40]	@ (80064bc <prvCheckTasksWaitingTermination+0x58>)
 8006494:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006496:	f000 fe09 	bl	80070ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f810 	bl	80064c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064a0:	4b06      	ldr	r3, [pc, #24]	@ (80064bc <prvCheckTasksWaitingTermination+0x58>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e1      	bne.n	800646c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20000de0 	.word	0x20000de0
 80064b8:	20000e0c 	.word	0x20000e0c
 80064bc:	20000df4 	.word	0x20000df4

080064c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3354      	adds	r3, #84	@ 0x54
 80064cc:	4618      	mov	r0, r3
 80064ce:	f001 f8d3 	bl	8007678 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d108      	bne.n	80064ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 ffa1 	bl	8007428 <vPortFree>
				vPortFree( pxTCB );
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 ff9e 	bl	8007428 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80064ec:	e019      	b.n	8006522 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d103      	bne.n	8006500 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 ff95 	bl	8007428 <vPortFree>
	}
 80064fe:	e010      	b.n	8006522 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006506:	2b02      	cmp	r3, #2
 8006508:	d00b      	beq.n	8006522 <prvDeleteTCB+0x62>
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	60fb      	str	r3, [r7, #12]
}
 800651c:	bf00      	nop
 800651e:	bf00      	nop
 8006520:	e7fd      	b.n	800651e <prvDeleteTCB+0x5e>
	}
 8006522:	bf00      	nop
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006532:	4b0c      	ldr	r3, [pc, #48]	@ (8006564 <prvResetNextTaskUnblockTime+0x38>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d104      	bne.n	8006546 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800653c:	4b0a      	ldr	r3, [pc, #40]	@ (8006568 <prvResetNextTaskUnblockTime+0x3c>)
 800653e:	f04f 32ff 	mov.w	r2, #4294967295
 8006542:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006544:	e008      	b.n	8006558 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006546:	4b07      	ldr	r3, [pc, #28]	@ (8006564 <prvResetNextTaskUnblockTime+0x38>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	4a04      	ldr	r2, [pc, #16]	@ (8006568 <prvResetNextTaskUnblockTime+0x3c>)
 8006556:	6013      	str	r3, [r2, #0]
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	20000dc4 	.word	0x20000dc4
 8006568:	20000e2c 	.word	0x20000e2c

0800656c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006572:	4b0b      	ldr	r3, [pc, #44]	@ (80065a0 <xTaskGetSchedulerState+0x34>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d102      	bne.n	8006580 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800657a:	2301      	movs	r3, #1
 800657c:	607b      	str	r3, [r7, #4]
 800657e:	e008      	b.n	8006592 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006580:	4b08      	ldr	r3, [pc, #32]	@ (80065a4 <xTaskGetSchedulerState+0x38>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006588:	2302      	movs	r3, #2
 800658a:	607b      	str	r3, [r7, #4]
 800658c:	e001      	b.n	8006592 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800658e:	2300      	movs	r3, #0
 8006590:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006592:	687b      	ldr	r3, [r7, #4]
	}
 8006594:	4618      	mov	r0, r3
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr
 80065a0:	20000e18 	.word	0x20000e18
 80065a4:	20000e34 	.word	0x20000e34

080065a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80065b4:	2300      	movs	r3, #0
 80065b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d058      	beq.n	8006670 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80065be:	4b2f      	ldr	r3, [pc, #188]	@ (800667c <xTaskPriorityDisinherit+0xd4>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d00b      	beq.n	80065e0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	60fb      	str	r3, [r7, #12]
}
 80065da:	bf00      	nop
 80065dc:	bf00      	nop
 80065de:	e7fd      	b.n	80065dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10b      	bne.n	8006600 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	60bb      	str	r3, [r7, #8]
}
 80065fa:	bf00      	nop
 80065fc:	bf00      	nop
 80065fe:	e7fd      	b.n	80065fc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006604:	1e5a      	subs	r2, r3, #1
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006612:	429a      	cmp	r2, r3
 8006614:	d02c      	beq.n	8006670 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800661a:	2b00      	cmp	r3, #0
 800661c:	d128      	bne.n	8006670 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	3304      	adds	r3, #4
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe fc26 	bl	8004e74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006634:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006640:	4b0f      	ldr	r3, [pc, #60]	@ (8006680 <xTaskPriorityDisinherit+0xd8>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	429a      	cmp	r2, r3
 8006646:	d903      	bls.n	8006650 <xTaskPriorityDisinherit+0xa8>
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664c:	4a0c      	ldr	r2, [pc, #48]	@ (8006680 <xTaskPriorityDisinherit+0xd8>)
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006654:	4613      	mov	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4a09      	ldr	r2, [pc, #36]	@ (8006684 <xTaskPriorityDisinherit+0xdc>)
 800665e:	441a      	add	r2, r3
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	3304      	adds	r3, #4
 8006664:	4619      	mov	r1, r3
 8006666:	4610      	mov	r0, r2
 8006668:	f7fe fba7 	bl	8004dba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800666c:	2301      	movs	r3, #1
 800666e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006670:	697b      	ldr	r3, [r7, #20]
	}
 8006672:	4618      	mov	r0, r3
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20000938 	.word	0x20000938
 8006680:	20000e14 	.word	0x20000e14
 8006684:	2000093c 	.word	0x2000093c

08006688 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006692:	4b21      	ldr	r3, [pc, #132]	@ (8006718 <prvAddCurrentTaskToDelayedList+0x90>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006698:	4b20      	ldr	r3, [pc, #128]	@ (800671c <prvAddCurrentTaskToDelayedList+0x94>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3304      	adds	r3, #4
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fe fbe8 	bl	8004e74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066aa:	d10a      	bne.n	80066c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d007      	beq.n	80066c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066b2:	4b1a      	ldr	r3, [pc, #104]	@ (800671c <prvAddCurrentTaskToDelayedList+0x94>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3304      	adds	r3, #4
 80066b8:	4619      	mov	r1, r3
 80066ba:	4819      	ldr	r0, [pc, #100]	@ (8006720 <prvAddCurrentTaskToDelayedList+0x98>)
 80066bc:	f7fe fb7d 	bl	8004dba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066c0:	e026      	b.n	8006710 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4413      	add	r3, r2
 80066c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066ca:	4b14      	ldr	r3, [pc, #80]	@ (800671c <prvAddCurrentTaskToDelayedList+0x94>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d209      	bcs.n	80066ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066da:	4b12      	ldr	r3, [pc, #72]	@ (8006724 <prvAddCurrentTaskToDelayedList+0x9c>)
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	4b0f      	ldr	r3, [pc, #60]	@ (800671c <prvAddCurrentTaskToDelayedList+0x94>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3304      	adds	r3, #4
 80066e4:	4619      	mov	r1, r3
 80066e6:	4610      	mov	r0, r2
 80066e8:	f7fe fb8b 	bl	8004e02 <vListInsert>
}
 80066ec:	e010      	b.n	8006710 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006728 <prvAddCurrentTaskToDelayedList+0xa0>)
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	4b0a      	ldr	r3, [pc, #40]	@ (800671c <prvAddCurrentTaskToDelayedList+0x94>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3304      	adds	r3, #4
 80066f8:	4619      	mov	r1, r3
 80066fa:	4610      	mov	r0, r2
 80066fc:	f7fe fb81 	bl	8004e02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006700:	4b0a      	ldr	r3, [pc, #40]	@ (800672c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	429a      	cmp	r2, r3
 8006708:	d202      	bcs.n	8006710 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800670a:	4a08      	ldr	r2, [pc, #32]	@ (800672c <prvAddCurrentTaskToDelayedList+0xa4>)
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	6013      	str	r3, [r2, #0]
}
 8006710:	bf00      	nop
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	20000e10 	.word	0x20000e10
 800671c:	20000938 	.word	0x20000938
 8006720:	20000df8 	.word	0x20000df8
 8006724:	20000dc8 	.word	0x20000dc8
 8006728:	20000dc4 	.word	0x20000dc4
 800672c:	20000e2c 	.word	0x20000e2c

08006730 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08a      	sub	sp, #40	@ 0x28
 8006734:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800673a:	f000 fb13 	bl	8006d64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800673e:	4b1d      	ldr	r3, [pc, #116]	@ (80067b4 <xTimerCreateTimerTask+0x84>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d021      	beq.n	800678a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800674e:	1d3a      	adds	r2, r7, #4
 8006750:	f107 0108 	add.w	r1, r7, #8
 8006754:	f107 030c 	add.w	r3, r7, #12
 8006758:	4618      	mov	r0, r3
 800675a:	f7fe fae7 	bl	8004d2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800675e:	6879      	ldr	r1, [r7, #4]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	9202      	str	r2, [sp, #8]
 8006766:	9301      	str	r3, [sp, #4]
 8006768:	2302      	movs	r3, #2
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	2300      	movs	r3, #0
 800676e:	460a      	mov	r2, r1
 8006770:	4911      	ldr	r1, [pc, #68]	@ (80067b8 <xTimerCreateTimerTask+0x88>)
 8006772:	4812      	ldr	r0, [pc, #72]	@ (80067bc <xTimerCreateTimerTask+0x8c>)
 8006774:	f7ff f8a2 	bl	80058bc <xTaskCreateStatic>
 8006778:	4603      	mov	r3, r0
 800677a:	4a11      	ldr	r2, [pc, #68]	@ (80067c0 <xTimerCreateTimerTask+0x90>)
 800677c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800677e:	4b10      	ldr	r3, [pc, #64]	@ (80067c0 <xTimerCreateTimerTask+0x90>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006786:	2301      	movs	r3, #1
 8006788:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10b      	bne.n	80067a8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	613b      	str	r3, [r7, #16]
}
 80067a2:	bf00      	nop
 80067a4:	bf00      	nop
 80067a6:	e7fd      	b.n	80067a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80067a8:	697b      	ldr	r3, [r7, #20]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3718      	adds	r7, #24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	20000e68 	.word	0x20000e68
 80067b8:	08007890 	.word	0x08007890
 80067bc:	080068fd 	.word	0x080068fd
 80067c0:	20000e6c 	.word	0x20000e6c

080067c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08a      	sub	sp, #40	@ 0x28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80067d2:	2300      	movs	r3, #0
 80067d4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10b      	bne.n	80067f4 <xTimerGenericCommand+0x30>
	__asm volatile
 80067dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e0:	f383 8811 	msr	BASEPRI, r3
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	623b      	str	r3, [r7, #32]
}
 80067ee:	bf00      	nop
 80067f0:	bf00      	nop
 80067f2:	e7fd      	b.n	80067f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80067f4:	4b19      	ldr	r3, [pc, #100]	@ (800685c <xTimerGenericCommand+0x98>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d02a      	beq.n	8006852 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b05      	cmp	r3, #5
 800680c:	dc18      	bgt.n	8006840 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800680e:	f7ff fead 	bl	800656c <xTaskGetSchedulerState>
 8006812:	4603      	mov	r3, r0
 8006814:	2b02      	cmp	r3, #2
 8006816:	d109      	bne.n	800682c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006818:	4b10      	ldr	r3, [pc, #64]	@ (800685c <xTimerGenericCommand+0x98>)
 800681a:	6818      	ldr	r0, [r3, #0]
 800681c:	f107 0110 	add.w	r1, r7, #16
 8006820:	2300      	movs	r3, #0
 8006822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006824:	f7fe fc5a 	bl	80050dc <xQueueGenericSend>
 8006828:	6278      	str	r0, [r7, #36]	@ 0x24
 800682a:	e012      	b.n	8006852 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800682c:	4b0b      	ldr	r3, [pc, #44]	@ (800685c <xTimerGenericCommand+0x98>)
 800682e:	6818      	ldr	r0, [r3, #0]
 8006830:	f107 0110 	add.w	r1, r7, #16
 8006834:	2300      	movs	r3, #0
 8006836:	2200      	movs	r2, #0
 8006838:	f7fe fc50 	bl	80050dc <xQueueGenericSend>
 800683c:	6278      	str	r0, [r7, #36]	@ 0x24
 800683e:	e008      	b.n	8006852 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006840:	4b06      	ldr	r3, [pc, #24]	@ (800685c <xTimerGenericCommand+0x98>)
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	f107 0110 	add.w	r1, r7, #16
 8006848:	2300      	movs	r3, #0
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	f7fe fd48 	bl	80052e0 <xQueueGenericSendFromISR>
 8006850:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006854:	4618      	mov	r0, r3
 8006856:	3728      	adds	r7, #40	@ 0x28
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	20000e68 	.word	0x20000e68

08006860 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b088      	sub	sp, #32
 8006864:	af02      	add	r7, sp, #8
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800686a:	4b23      	ldr	r3, [pc, #140]	@ (80068f8 <prvProcessExpiredTimer+0x98>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	3304      	adds	r3, #4
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe fafb 	bl	8004e74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d023      	beq.n	80068d4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	699a      	ldr	r2, [r3, #24]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	18d1      	adds	r1, r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	6978      	ldr	r0, [r7, #20]
 800689a:	f000 f8d5 	bl	8006a48 <prvInsertTimerInActiveList>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d020      	beq.n	80068e6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068a4:	2300      	movs	r3, #0
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	2300      	movs	r3, #0
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	2100      	movs	r1, #0
 80068ae:	6978      	ldr	r0, [r7, #20]
 80068b0:	f7ff ff88 	bl	80067c4 <xTimerGenericCommand>
 80068b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d114      	bne.n	80068e6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	60fb      	str	r3, [r7, #12]
}
 80068ce:	bf00      	nop
 80068d0:	bf00      	nop
 80068d2:	e7fd      	b.n	80068d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80068da:	f023 0301 	bic.w	r3, r3, #1
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	6978      	ldr	r0, [r7, #20]
 80068ec:	4798      	blx	r3
}
 80068ee:	bf00      	nop
 80068f0:	3718      	adds	r7, #24
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20000e60 	.word	0x20000e60

080068fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006904:	f107 0308 	add.w	r3, r7, #8
 8006908:	4618      	mov	r0, r3
 800690a:	f000 f859 	bl	80069c0 <prvGetNextExpireTime>
 800690e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	4619      	mov	r1, r3
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	f000 f805 	bl	8006924 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800691a:	f000 f8d7 	bl	8006acc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800691e:	bf00      	nop
 8006920:	e7f0      	b.n	8006904 <prvTimerTask+0x8>
	...

08006924 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800692e:	f7ff fa29 	bl	8005d84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006932:	f107 0308 	add.w	r3, r7, #8
 8006936:	4618      	mov	r0, r3
 8006938:	f000 f866 	bl	8006a08 <prvSampleTimeNow>
 800693c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d130      	bne.n	80069a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10a      	bne.n	8006960 <prvProcessTimerOrBlockTask+0x3c>
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	429a      	cmp	r2, r3
 8006950:	d806      	bhi.n	8006960 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006952:	f7ff fa25 	bl	8005da0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7ff ff81 	bl	8006860 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800695e:	e024      	b.n	80069aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d008      	beq.n	8006978 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006966:	4b13      	ldr	r3, [pc, #76]	@ (80069b4 <prvProcessTimerOrBlockTask+0x90>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <prvProcessTimerOrBlockTask+0x50>
 8006970:	2301      	movs	r3, #1
 8006972:	e000      	b.n	8006976 <prvProcessTimerOrBlockTask+0x52>
 8006974:	2300      	movs	r3, #0
 8006976:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006978:	4b0f      	ldr	r3, [pc, #60]	@ (80069b8 <prvProcessTimerOrBlockTask+0x94>)
 800697a:	6818      	ldr	r0, [r3, #0]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	4619      	mov	r1, r3
 8006986:	f7fe ff65 	bl	8005854 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800698a:	f7ff fa09 	bl	8005da0 <xTaskResumeAll>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10a      	bne.n	80069aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006994:	4b09      	ldr	r3, [pc, #36]	@ (80069bc <prvProcessTimerOrBlockTask+0x98>)
 8006996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	f3bf 8f6f 	isb	sy
}
 80069a4:	e001      	b.n	80069aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80069a6:	f7ff f9fb 	bl	8005da0 <xTaskResumeAll>
}
 80069aa:	bf00      	nop
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	20000e64 	.word	0x20000e64
 80069b8:	20000e68 	.word	0x20000e68
 80069bc:	e000ed04 	.word	0xe000ed04

080069c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80069c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006a04 <prvGetNextExpireTime+0x44>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <prvGetNextExpireTime+0x16>
 80069d2:	2201      	movs	r2, #1
 80069d4:	e000      	b.n	80069d8 <prvGetNextExpireTime+0x18>
 80069d6:	2200      	movs	r2, #0
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d105      	bne.n	80069f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069e4:	4b07      	ldr	r3, [pc, #28]	@ (8006a04 <prvGetNextExpireTime+0x44>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60fb      	str	r3, [r7, #12]
 80069ee:	e001      	b.n	80069f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80069f4:	68fb      	ldr	r3, [r7, #12]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	20000e60 	.word	0x20000e60

08006a08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a10:	f7ff fa64 	bl	8005edc <xTaskGetTickCount>
 8006a14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a16:	4b0b      	ldr	r3, [pc, #44]	@ (8006a44 <prvSampleTimeNow+0x3c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d205      	bcs.n	8006a2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006a20:	f000 f93a 	bl	8006c98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
 8006a2a:	e002      	b.n	8006a32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a32:	4a04      	ldr	r2, [pc, #16]	@ (8006a44 <prvSampleTimeNow+0x3c>)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a38:	68fb      	ldr	r3, [r7, #12]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	20000e70 	.word	0x20000e70

08006a48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b086      	sub	sp, #24
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d812      	bhi.n	8006a94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	1ad2      	subs	r2, r2, r3
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d302      	bcc.n	8006a82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	e01b      	b.n	8006aba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a82:	4b10      	ldr	r3, [pc, #64]	@ (8006ac4 <prvInsertTimerInActiveList+0x7c>)
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3304      	adds	r3, #4
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	f7fe f9b8 	bl	8004e02 <vListInsert>
 8006a92:	e012      	b.n	8006aba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d206      	bcs.n	8006aaa <prvInsertTimerInActiveList+0x62>
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d302      	bcc.n	8006aaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	e007      	b.n	8006aba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006aaa:	4b07      	ldr	r3, [pc, #28]	@ (8006ac8 <prvInsertTimerInActiveList+0x80>)
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	4610      	mov	r0, r2
 8006ab6:	f7fe f9a4 	bl	8004e02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006aba:	697b      	ldr	r3, [r7, #20]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	20000e64 	.word	0x20000e64
 8006ac8:	20000e60 	.word	0x20000e60

08006acc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08e      	sub	sp, #56	@ 0x38
 8006ad0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ad2:	e0ce      	b.n	8006c72 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	da19      	bge.n	8006b0e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ada:	1d3b      	adds	r3, r7, #4
 8006adc:	3304      	adds	r3, #4
 8006ade:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10b      	bne.n	8006afe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	61fb      	str	r3, [r7, #28]
}
 8006af8:	bf00      	nop
 8006afa:	bf00      	nop
 8006afc:	e7fd      	b.n	8006afa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b04:	6850      	ldr	r0, [r2, #4]
 8006b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b08:	6892      	ldr	r2, [r2, #8]
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f2c0 80ae 	blt.w	8006c72 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d004      	beq.n	8006b2c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b24:	3304      	adds	r3, #4
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fe f9a4 	bl	8004e74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b2c:	463b      	mov	r3, r7
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7ff ff6a 	bl	8006a08 <prvSampleTimeNow>
 8006b34:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2b09      	cmp	r3, #9
 8006b3a:	f200 8097 	bhi.w	8006c6c <prvProcessReceivedCommands+0x1a0>
 8006b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b44 <prvProcessReceivedCommands+0x78>)
 8006b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b44:	08006b6d 	.word	0x08006b6d
 8006b48:	08006b6d 	.word	0x08006b6d
 8006b4c:	08006b6d 	.word	0x08006b6d
 8006b50:	08006be3 	.word	0x08006be3
 8006b54:	08006bf7 	.word	0x08006bf7
 8006b58:	08006c43 	.word	0x08006c43
 8006b5c:	08006b6d 	.word	0x08006b6d
 8006b60:	08006b6d 	.word	0x08006b6d
 8006b64:	08006be3 	.word	0x08006be3
 8006b68:	08006bf7 	.word	0x08006bf7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b72:	f043 0301 	orr.w	r3, r3, #1
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	18d1      	adds	r1, r2, r3
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b8c:	f7ff ff5c 	bl	8006a48 <prvInsertTimerInActiveList>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d06c      	beq.n	8006c70 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ba4:	f003 0304 	and.w	r3, r3, #4
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d061      	beq.n	8006c70 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	441a      	add	r2, r3
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	2100      	movs	r1, #0
 8006bbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bbe:	f7ff fe01 	bl	80067c4 <xTimerGenericCommand>
 8006bc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d152      	bne.n	8006c70 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	61bb      	str	r3, [r7, #24]
}
 8006bdc:	bf00      	nop
 8006bde:	bf00      	nop
 8006be0:	e7fd      	b.n	8006bde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006be8:	f023 0301 	bic.w	r3, r3, #1
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006bf4:	e03d      	b.n	8006c72 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bfc:	f043 0301 	orr.w	r3, r3, #1
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006c08:	68ba      	ldr	r2, [r7, #8]
 8006c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10b      	bne.n	8006c2e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	617b      	str	r3, [r7, #20]
}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	e7fd      	b.n	8006c2a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	18d1      	adds	r1, r2, r3
 8006c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c3c:	f7ff ff04 	bl	8006a48 <prvInsertTimerInActiveList>
					break;
 8006c40:	e017      	b.n	8006c72 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d103      	bne.n	8006c58 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006c50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c52:	f000 fbe9 	bl	8007428 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c56:	e00c      	b.n	8006c72 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c5e:	f023 0301 	bic.w	r3, r3, #1
 8006c62:	b2da      	uxtb	r2, r3
 8006c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006c6a:	e002      	b.n	8006c72 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006c6c:	bf00      	nop
 8006c6e:	e000      	b.n	8006c72 <prvProcessReceivedCommands+0x1a6>
					break;
 8006c70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c72:	4b08      	ldr	r3, [pc, #32]	@ (8006c94 <prvProcessReceivedCommands+0x1c8>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	1d39      	adds	r1, r7, #4
 8006c78:	2200      	movs	r2, #0
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fe fbce 	bl	800541c <xQueueReceive>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f47f af26 	bne.w	8006ad4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006c88:	bf00      	nop
 8006c8a:	bf00      	nop
 8006c8c:	3730      	adds	r7, #48	@ 0x30
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20000e68 	.word	0x20000e68

08006c98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b088      	sub	sp, #32
 8006c9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c9e:	e049      	b.n	8006d34 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8006d5c <prvSwitchTimerLists+0xc4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006caa:	4b2c      	ldr	r3, [pc, #176]	@ (8006d5c <prvSwitchTimerLists+0xc4>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fe f8db 	bl	8004e74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ccc:	f003 0304 	and.w	r3, r3, #4
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d02f      	beq.n	8006d34 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	4413      	add	r3, r2
 8006cdc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006cde:	68ba      	ldr	r2, [r7, #8]
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d90e      	bls.n	8006d04 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8006d5c <prvSwitchTimerLists+0xc4>)
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	f7fe f880 	bl	8004e02 <vListInsert>
 8006d02:	e017      	b.n	8006d34 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d04:	2300      	movs	r3, #0
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	2300      	movs	r3, #0
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f7ff fd58 	bl	80067c4 <xTimerGenericCommand>
 8006d14:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10b      	bne.n	8006d34 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d20:	f383 8811 	msr	BASEPRI, r3
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	f3bf 8f4f 	dsb	sy
 8006d2c:	603b      	str	r3, [r7, #0]
}
 8006d2e:	bf00      	nop
 8006d30:	bf00      	nop
 8006d32:	e7fd      	b.n	8006d30 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d34:	4b09      	ldr	r3, [pc, #36]	@ (8006d5c <prvSwitchTimerLists+0xc4>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1b0      	bne.n	8006ca0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d3e:	4b07      	ldr	r3, [pc, #28]	@ (8006d5c <prvSwitchTimerLists+0xc4>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d44:	4b06      	ldr	r3, [pc, #24]	@ (8006d60 <prvSwitchTimerLists+0xc8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a04      	ldr	r2, [pc, #16]	@ (8006d5c <prvSwitchTimerLists+0xc4>)
 8006d4a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d4c:	4a04      	ldr	r2, [pc, #16]	@ (8006d60 <prvSwitchTimerLists+0xc8>)
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	6013      	str	r3, [r2, #0]
}
 8006d52:	bf00      	nop
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000e60 	.word	0x20000e60
 8006d60:	20000e64 	.word	0x20000e64

08006d64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d6a:	f000 f96d 	bl	8007048 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d6e:	4b15      	ldr	r3, [pc, #84]	@ (8006dc4 <prvCheckForValidListAndQueue+0x60>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d120      	bne.n	8006db8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d76:	4814      	ldr	r0, [pc, #80]	@ (8006dc8 <prvCheckForValidListAndQueue+0x64>)
 8006d78:	f7fd fff2 	bl	8004d60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d7c:	4813      	ldr	r0, [pc, #76]	@ (8006dcc <prvCheckForValidListAndQueue+0x68>)
 8006d7e:	f7fd ffef 	bl	8004d60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d82:	4b13      	ldr	r3, [pc, #76]	@ (8006dd0 <prvCheckForValidListAndQueue+0x6c>)
 8006d84:	4a10      	ldr	r2, [pc, #64]	@ (8006dc8 <prvCheckForValidListAndQueue+0x64>)
 8006d86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d88:	4b12      	ldr	r3, [pc, #72]	@ (8006dd4 <prvCheckForValidListAndQueue+0x70>)
 8006d8a:	4a10      	ldr	r2, [pc, #64]	@ (8006dcc <prvCheckForValidListAndQueue+0x68>)
 8006d8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d8e:	2300      	movs	r3, #0
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	4b11      	ldr	r3, [pc, #68]	@ (8006dd8 <prvCheckForValidListAndQueue+0x74>)
 8006d94:	4a11      	ldr	r2, [pc, #68]	@ (8006ddc <prvCheckForValidListAndQueue+0x78>)
 8006d96:	2110      	movs	r1, #16
 8006d98:	200a      	movs	r0, #10
 8006d9a:	f7fe f8ff 	bl	8004f9c <xQueueGenericCreateStatic>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	4a08      	ldr	r2, [pc, #32]	@ (8006dc4 <prvCheckForValidListAndQueue+0x60>)
 8006da2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006da4:	4b07      	ldr	r3, [pc, #28]	@ (8006dc4 <prvCheckForValidListAndQueue+0x60>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d005      	beq.n	8006db8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006dac:	4b05      	ldr	r3, [pc, #20]	@ (8006dc4 <prvCheckForValidListAndQueue+0x60>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	490b      	ldr	r1, [pc, #44]	@ (8006de0 <prvCheckForValidListAndQueue+0x7c>)
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe fd24 	bl	8005800 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006db8:	f000 f978 	bl	80070ac <vPortExitCritical>
}
 8006dbc:	bf00      	nop
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20000e68 	.word	0x20000e68
 8006dc8:	20000e38 	.word	0x20000e38
 8006dcc:	20000e4c 	.word	0x20000e4c
 8006dd0:	20000e60 	.word	0x20000e60
 8006dd4:	20000e64 	.word	0x20000e64
 8006dd8:	20000f14 	.word	0x20000f14
 8006ddc:	20000e74 	.word	0x20000e74
 8006de0:	08007898 	.word	0x08007898

08006de4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3b04      	subs	r3, #4
 8006df4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3b04      	subs	r3, #4
 8006e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	f023 0201 	bic.w	r2, r3, #1
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3b04      	subs	r3, #4
 8006e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e14:	4a0c      	ldr	r2, [pc, #48]	@ (8006e48 <pxPortInitialiseStack+0x64>)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3b14      	subs	r3, #20
 8006e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	3b04      	subs	r3, #4
 8006e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f06f 0202 	mvn.w	r2, #2
 8006e32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	3b20      	subs	r3, #32
 8006e38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	08006e4d 	.word	0x08006e4d

08006e4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e52:	2300      	movs	r3, #0
 8006e54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e56:	4b13      	ldr	r3, [pc, #76]	@ (8006ea4 <prvTaskExitError+0x58>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5e:	d00b      	beq.n	8006e78 <prvTaskExitError+0x2c>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	60fb      	str	r3, [r7, #12]
}
 8006e72:	bf00      	nop
 8006e74:	bf00      	nop
 8006e76:	e7fd      	b.n	8006e74 <prvTaskExitError+0x28>
	__asm volatile
 8006e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7c:	f383 8811 	msr	BASEPRI, r3
 8006e80:	f3bf 8f6f 	isb	sy
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	60bb      	str	r3, [r7, #8]
}
 8006e8a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e8c:	bf00      	nop
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d0fc      	beq.n	8006e8e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	2000000c 	.word	0x2000000c
	...

08006eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006eb0:	4b07      	ldr	r3, [pc, #28]	@ (8006ed0 <pxCurrentTCBConst2>)
 8006eb2:	6819      	ldr	r1, [r3, #0]
 8006eb4:	6808      	ldr	r0, [r1, #0]
 8006eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eba:	f380 8809 	msr	PSP, r0
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f04f 0000 	mov.w	r0, #0
 8006ec6:	f380 8811 	msr	BASEPRI, r0
 8006eca:	4770      	bx	lr
 8006ecc:	f3af 8000 	nop.w

08006ed0 <pxCurrentTCBConst2>:
 8006ed0:	20000938 	.word	0x20000938
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop

08006ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ed8:	4808      	ldr	r0, [pc, #32]	@ (8006efc <prvPortStartFirstTask+0x24>)
 8006eda:	6800      	ldr	r0, [r0, #0]
 8006edc:	6800      	ldr	r0, [r0, #0]
 8006ede:	f380 8808 	msr	MSP, r0
 8006ee2:	f04f 0000 	mov.w	r0, #0
 8006ee6:	f380 8814 	msr	CONTROL, r0
 8006eea:	b662      	cpsie	i
 8006eec:	b661      	cpsie	f
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	df00      	svc	0
 8006ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006efa:	bf00      	nop
 8006efc:	e000ed08 	.word	0xe000ed08

08006f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f06:	4b47      	ldr	r3, [pc, #284]	@ (8007024 <xPortStartScheduler+0x124>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a47      	ldr	r2, [pc, #284]	@ (8007028 <xPortStartScheduler+0x128>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d10b      	bne.n	8006f28 <xPortStartScheduler+0x28>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	613b      	str	r3, [r7, #16]
}
 8006f22:	bf00      	nop
 8006f24:	bf00      	nop
 8006f26:	e7fd      	b.n	8006f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f28:	4b3e      	ldr	r3, [pc, #248]	@ (8007024 <xPortStartScheduler+0x124>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a3f      	ldr	r2, [pc, #252]	@ (800702c <xPortStartScheduler+0x12c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d10b      	bne.n	8006f4a <xPortStartScheduler+0x4a>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	60fb      	str	r3, [r7, #12]
}
 8006f44:	bf00      	nop
 8006f46:	bf00      	nop
 8006f48:	e7fd      	b.n	8006f46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f4a:	4b39      	ldr	r3, [pc, #228]	@ (8007030 <xPortStartScheduler+0x130>)
 8006f4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	22ff      	movs	r2, #255	@ 0xff
 8006f5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f64:	78fb      	ldrb	r3, [r7, #3]
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	4b31      	ldr	r3, [pc, #196]	@ (8007034 <xPortStartScheduler+0x134>)
 8006f70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f72:	4b31      	ldr	r3, [pc, #196]	@ (8007038 <xPortStartScheduler+0x138>)
 8006f74:	2207      	movs	r2, #7
 8006f76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f78:	e009      	b.n	8006f8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006f7a:	4b2f      	ldr	r3, [pc, #188]	@ (8007038 <xPortStartScheduler+0x138>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	4a2d      	ldr	r2, [pc, #180]	@ (8007038 <xPortStartScheduler+0x138>)
 8006f82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f84:	78fb      	ldrb	r3, [r7, #3]
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f8e:	78fb      	ldrb	r3, [r7, #3]
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f96:	2b80      	cmp	r3, #128	@ 0x80
 8006f98:	d0ef      	beq.n	8006f7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f9a:	4b27      	ldr	r3, [pc, #156]	@ (8007038 <xPortStartScheduler+0x138>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f1c3 0307 	rsb	r3, r3, #7
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	d00b      	beq.n	8006fbe <xPortStartScheduler+0xbe>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	60bb      	str	r3, [r7, #8]
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	e7fd      	b.n	8006fba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8007038 <xPortStartScheduler+0x138>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	021b      	lsls	r3, r3, #8
 8006fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8007038 <xPortStartScheduler+0x138>)
 8006fc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8007038 <xPortStartScheduler+0x138>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006fd0:	4a19      	ldr	r2, [pc, #100]	@ (8007038 <xPortStartScheduler+0x138>)
 8006fd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fdc:	4b17      	ldr	r3, [pc, #92]	@ (800703c <xPortStartScheduler+0x13c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a16      	ldr	r2, [pc, #88]	@ (800703c <xPortStartScheduler+0x13c>)
 8006fe2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006fe6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fe8:	4b14      	ldr	r3, [pc, #80]	@ (800703c <xPortStartScheduler+0x13c>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a13      	ldr	r2, [pc, #76]	@ (800703c <xPortStartScheduler+0x13c>)
 8006fee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ff2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ff4:	f000 f8da 	bl	80071ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ff8:	4b11      	ldr	r3, [pc, #68]	@ (8007040 <xPortStartScheduler+0x140>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ffe:	f000 f8f9 	bl	80071f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007002:	4b10      	ldr	r3, [pc, #64]	@ (8007044 <xPortStartScheduler+0x144>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a0f      	ldr	r2, [pc, #60]	@ (8007044 <xPortStartScheduler+0x144>)
 8007008:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800700c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800700e:	f7ff ff63 	bl	8006ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007012:	f7ff f82d 	bl	8006070 <vTaskSwitchContext>
	prvTaskExitError();
 8007016:	f7ff ff19 	bl	8006e4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	e000ed00 	.word	0xe000ed00
 8007028:	410fc271 	.word	0x410fc271
 800702c:	410fc270 	.word	0x410fc270
 8007030:	e000e400 	.word	0xe000e400
 8007034:	20000f64 	.word	0x20000f64
 8007038:	20000f68 	.word	0x20000f68
 800703c:	e000ed20 	.word	0xe000ed20
 8007040:	2000000c 	.word	0x2000000c
 8007044:	e000ef34 	.word	0xe000ef34

08007048 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	607b      	str	r3, [r7, #4]
}
 8007060:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007062:	4b10      	ldr	r3, [pc, #64]	@ (80070a4 <vPortEnterCritical+0x5c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3301      	adds	r3, #1
 8007068:	4a0e      	ldr	r2, [pc, #56]	@ (80070a4 <vPortEnterCritical+0x5c>)
 800706a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800706c:	4b0d      	ldr	r3, [pc, #52]	@ (80070a4 <vPortEnterCritical+0x5c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d110      	bne.n	8007096 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007074:	4b0c      	ldr	r3, [pc, #48]	@ (80070a8 <vPortEnterCritical+0x60>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00b      	beq.n	8007096 <vPortEnterCritical+0x4e>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	603b      	str	r3, [r7, #0]
}
 8007090:	bf00      	nop
 8007092:	bf00      	nop
 8007094:	e7fd      	b.n	8007092 <vPortEnterCritical+0x4a>
	}
}
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	2000000c 	.word	0x2000000c
 80070a8:	e000ed04 	.word	0xe000ed04

080070ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070b2:	4b12      	ldr	r3, [pc, #72]	@ (80070fc <vPortExitCritical+0x50>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10b      	bne.n	80070d2 <vPortExitCritical+0x26>
	__asm volatile
 80070ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070be:	f383 8811 	msr	BASEPRI, r3
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	607b      	str	r3, [r7, #4]
}
 80070cc:	bf00      	nop
 80070ce:	bf00      	nop
 80070d0:	e7fd      	b.n	80070ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80070d2:	4b0a      	ldr	r3, [pc, #40]	@ (80070fc <vPortExitCritical+0x50>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	4a08      	ldr	r2, [pc, #32]	@ (80070fc <vPortExitCritical+0x50>)
 80070da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070dc:	4b07      	ldr	r3, [pc, #28]	@ (80070fc <vPortExitCritical+0x50>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d105      	bne.n	80070f0 <vPortExitCritical+0x44>
 80070e4:	2300      	movs	r3, #0
 80070e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	f383 8811 	msr	BASEPRI, r3
}
 80070ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	2000000c 	.word	0x2000000c

08007100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007100:	f3ef 8009 	mrs	r0, PSP
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	4b15      	ldr	r3, [pc, #84]	@ (8007160 <pxCurrentTCBConst>)
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	f01e 0f10 	tst.w	lr, #16
 8007110:	bf08      	it	eq
 8007112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711a:	6010      	str	r0, [r2, #0]
 800711c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007120:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007124:	f380 8811 	msr	BASEPRI, r0
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f7fe ff9e 	bl	8006070 <vTaskSwitchContext>
 8007134:	f04f 0000 	mov.w	r0, #0
 8007138:	f380 8811 	msr	BASEPRI, r0
 800713c:	bc09      	pop	{r0, r3}
 800713e:	6819      	ldr	r1, [r3, #0]
 8007140:	6808      	ldr	r0, [r1, #0]
 8007142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007146:	f01e 0f10 	tst.w	lr, #16
 800714a:	bf08      	it	eq
 800714c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007150:	f380 8809 	msr	PSP, r0
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	f3af 8000 	nop.w

08007160 <pxCurrentTCBConst>:
 8007160:	20000938 	.word	0x20000938
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007164:	bf00      	nop
 8007166:	bf00      	nop

08007168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f3bf 8f6f 	isb	sy
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	607b      	str	r3, [r7, #4]
}
 8007180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007182:	f7fe febb 	bl	8005efc <xTaskIncrementTick>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d003      	beq.n	8007194 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800718c:	4b06      	ldr	r3, [pc, #24]	@ (80071a8 <xPortSysTickHandler+0x40>)
 800718e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	2300      	movs	r3, #0
 8007196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	f383 8811 	msr	BASEPRI, r3
}
 800719e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80071a0:	bf00      	nop
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	e000ed04 	.word	0xe000ed04

080071ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071b0:	4b0b      	ldr	r3, [pc, #44]	@ (80071e0 <vPortSetupTimerInterrupt+0x34>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071b6:	4b0b      	ldr	r3, [pc, #44]	@ (80071e4 <vPortSetupTimerInterrupt+0x38>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071bc:	4b0a      	ldr	r3, [pc, #40]	@ (80071e8 <vPortSetupTimerInterrupt+0x3c>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a0a      	ldr	r2, [pc, #40]	@ (80071ec <vPortSetupTimerInterrupt+0x40>)
 80071c2:	fba2 2303 	umull	r2, r3, r2, r3
 80071c6:	099b      	lsrs	r3, r3, #6
 80071c8:	4a09      	ldr	r2, [pc, #36]	@ (80071f0 <vPortSetupTimerInterrupt+0x44>)
 80071ca:	3b01      	subs	r3, #1
 80071cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071ce:	4b04      	ldr	r3, [pc, #16]	@ (80071e0 <vPortSetupTimerInterrupt+0x34>)
 80071d0:	2207      	movs	r2, #7
 80071d2:	601a      	str	r2, [r3, #0]
}
 80071d4:	bf00      	nop
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	e000e010 	.word	0xe000e010
 80071e4:	e000e018 	.word	0xe000e018
 80071e8:	20000000 	.word	0x20000000
 80071ec:	10624dd3 	.word	0x10624dd3
 80071f0:	e000e014 	.word	0xe000e014

080071f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80071f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007204 <vPortEnableVFP+0x10>
 80071f8:	6801      	ldr	r1, [r0, #0]
 80071fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80071fe:	6001      	str	r1, [r0, #0]
 8007200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007202:	bf00      	nop
 8007204:	e000ed88 	.word	0xe000ed88

08007208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800720e:	f3ef 8305 	mrs	r3, IPSR
 8007212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b0f      	cmp	r3, #15
 8007218:	d915      	bls.n	8007246 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800721a:	4a18      	ldr	r2, [pc, #96]	@ (800727c <vPortValidateInterruptPriority+0x74>)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4413      	add	r3, r2
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007224:	4b16      	ldr	r3, [pc, #88]	@ (8007280 <vPortValidateInterruptPriority+0x78>)
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	7afa      	ldrb	r2, [r7, #11]
 800722a:	429a      	cmp	r2, r3
 800722c:	d20b      	bcs.n	8007246 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	607b      	str	r3, [r7, #4]
}
 8007240:	bf00      	nop
 8007242:	bf00      	nop
 8007244:	e7fd      	b.n	8007242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007246:	4b0f      	ldr	r3, [pc, #60]	@ (8007284 <vPortValidateInterruptPriority+0x7c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800724e:	4b0e      	ldr	r3, [pc, #56]	@ (8007288 <vPortValidateInterruptPriority+0x80>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	429a      	cmp	r2, r3
 8007254:	d90b      	bls.n	800726e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	603b      	str	r3, [r7, #0]
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	e7fd      	b.n	800726a <vPortValidateInterruptPriority+0x62>
	}
 800726e:	bf00      	nop
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	e000e3f0 	.word	0xe000e3f0
 8007280:	20000f64 	.word	0x20000f64
 8007284:	e000ed0c 	.word	0xe000ed0c
 8007288:	20000f68 	.word	0x20000f68

0800728c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b08a      	sub	sp, #40	@ 0x28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007294:	2300      	movs	r3, #0
 8007296:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007298:	f7fe fd74 	bl	8005d84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800729c:	4b5c      	ldr	r3, [pc, #368]	@ (8007410 <pvPortMalloc+0x184>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072a4:	f000 f924 	bl	80074f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007414 <pvPortMalloc+0x188>)
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4013      	ands	r3, r2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f040 8095 	bne.w	80073e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d01e      	beq.n	80072fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80072bc:	2208      	movs	r2, #8
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4413      	add	r3, r2
 80072c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f003 0307 	and.w	r3, r3, #7
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d015      	beq.n	80072fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f023 0307 	bic.w	r3, r3, #7
 80072d4:	3308      	adds	r3, #8
 80072d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f003 0307 	and.w	r3, r3, #7
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00b      	beq.n	80072fa <pvPortMalloc+0x6e>
	__asm volatile
 80072e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	617b      	str	r3, [r7, #20]
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop
 80072f8:	e7fd      	b.n	80072f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d06f      	beq.n	80073e0 <pvPortMalloc+0x154>
 8007300:	4b45      	ldr	r3, [pc, #276]	@ (8007418 <pvPortMalloc+0x18c>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	429a      	cmp	r2, r3
 8007308:	d86a      	bhi.n	80073e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800730a:	4b44      	ldr	r3, [pc, #272]	@ (800741c <pvPortMalloc+0x190>)
 800730c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800730e:	4b43      	ldr	r3, [pc, #268]	@ (800741c <pvPortMalloc+0x190>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007314:	e004      	b.n	8007320 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	429a      	cmp	r2, r3
 8007328:	d903      	bls.n	8007332 <pvPortMalloc+0xa6>
 800732a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1f1      	bne.n	8007316 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007332:	4b37      	ldr	r3, [pc, #220]	@ (8007410 <pvPortMalloc+0x184>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007338:	429a      	cmp	r2, r3
 800733a:	d051      	beq.n	80073e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2208      	movs	r2, #8
 8007342:	4413      	add	r3, r2
 8007344:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	6a3b      	ldr	r3, [r7, #32]
 800734c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800734e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007350:	685a      	ldr	r2, [r3, #4]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	1ad2      	subs	r2, r2, r3
 8007356:	2308      	movs	r3, #8
 8007358:	005b      	lsls	r3, r3, #1
 800735a:	429a      	cmp	r2, r3
 800735c:	d920      	bls.n	80073a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800735e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4413      	add	r3, r2
 8007364:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00b      	beq.n	8007388 <pvPortMalloc+0xfc>
	__asm volatile
 8007370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007374:	f383 8811 	msr	BASEPRI, r3
 8007378:	f3bf 8f6f 	isb	sy
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	613b      	str	r3, [r7, #16]
}
 8007382:	bf00      	nop
 8007384:	bf00      	nop
 8007386:	e7fd      	b.n	8007384 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	1ad2      	subs	r2, r2, r3
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800739a:	69b8      	ldr	r0, [r7, #24]
 800739c:	f000 f90a 	bl	80075b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073a0:	4b1d      	ldr	r3, [pc, #116]	@ (8007418 <pvPortMalloc+0x18c>)
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007418 <pvPortMalloc+0x18c>)
 80073ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073ae:	4b1a      	ldr	r3, [pc, #104]	@ (8007418 <pvPortMalloc+0x18c>)
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007420 <pvPortMalloc+0x194>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d203      	bcs.n	80073c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073ba:	4b17      	ldr	r3, [pc, #92]	@ (8007418 <pvPortMalloc+0x18c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a18      	ldr	r2, [pc, #96]	@ (8007420 <pvPortMalloc+0x194>)
 80073c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	4b13      	ldr	r3, [pc, #76]	@ (8007414 <pvPortMalloc+0x188>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	431a      	orrs	r2, r3
 80073cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80073d6:	4b13      	ldr	r3, [pc, #76]	@ (8007424 <pvPortMalloc+0x198>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3301      	adds	r3, #1
 80073dc:	4a11      	ldr	r2, [pc, #68]	@ (8007424 <pvPortMalloc+0x198>)
 80073de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073e0:	f7fe fcde 	bl	8005da0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00b      	beq.n	8007406 <pvPortMalloc+0x17a>
	__asm volatile
 80073ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f2:	f383 8811 	msr	BASEPRI, r3
 80073f6:	f3bf 8f6f 	isb	sy
 80073fa:	f3bf 8f4f 	dsb	sy
 80073fe:	60fb      	str	r3, [r7, #12]
}
 8007400:	bf00      	nop
 8007402:	bf00      	nop
 8007404:	e7fd      	b.n	8007402 <pvPortMalloc+0x176>
	return pvReturn;
 8007406:	69fb      	ldr	r3, [r7, #28]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3728      	adds	r7, #40	@ 0x28
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	20001b2c 	.word	0x20001b2c
 8007414:	20001b40 	.word	0x20001b40
 8007418:	20001b30 	.word	0x20001b30
 800741c:	20001b24 	.word	0x20001b24
 8007420:	20001b34 	.word	0x20001b34
 8007424:	20001b38 	.word	0x20001b38

08007428 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d04f      	beq.n	80074da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800743a:	2308      	movs	r3, #8
 800743c:	425b      	negs	r3, r3
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	4413      	add	r3, r2
 8007442:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	4b25      	ldr	r3, [pc, #148]	@ (80074e4 <vPortFree+0xbc>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4013      	ands	r3, r2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10b      	bne.n	800746e <vPortFree+0x46>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745a:	f383 8811 	msr	BASEPRI, r3
 800745e:	f3bf 8f6f 	isb	sy
 8007462:	f3bf 8f4f 	dsb	sy
 8007466:	60fb      	str	r3, [r7, #12]
}
 8007468:	bf00      	nop
 800746a:	bf00      	nop
 800746c:	e7fd      	b.n	800746a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00b      	beq.n	800748e <vPortFree+0x66>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747a:	f383 8811 	msr	BASEPRI, r3
 800747e:	f3bf 8f6f 	isb	sy
 8007482:	f3bf 8f4f 	dsb	sy
 8007486:	60bb      	str	r3, [r7, #8]
}
 8007488:	bf00      	nop
 800748a:	bf00      	nop
 800748c:	e7fd      	b.n	800748a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	4b14      	ldr	r3, [pc, #80]	@ (80074e4 <vPortFree+0xbc>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4013      	ands	r3, r2
 8007498:	2b00      	cmp	r3, #0
 800749a:	d01e      	beq.n	80074da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d11a      	bne.n	80074da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	4b0e      	ldr	r3, [pc, #56]	@ (80074e4 <vPortFree+0xbc>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	43db      	mvns	r3, r3
 80074ae:	401a      	ands	r2, r3
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074b4:	f7fe fc66 	bl	8005d84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	4b0a      	ldr	r3, [pc, #40]	@ (80074e8 <vPortFree+0xc0>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4413      	add	r3, r2
 80074c2:	4a09      	ldr	r2, [pc, #36]	@ (80074e8 <vPortFree+0xc0>)
 80074c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074c6:	6938      	ldr	r0, [r7, #16]
 80074c8:	f000 f874 	bl	80075b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80074cc:	4b07      	ldr	r3, [pc, #28]	@ (80074ec <vPortFree+0xc4>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3301      	adds	r3, #1
 80074d2:	4a06      	ldr	r2, [pc, #24]	@ (80074ec <vPortFree+0xc4>)
 80074d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80074d6:	f7fe fc63 	bl	8005da0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074da:	bf00      	nop
 80074dc:	3718      	adds	r7, #24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	20001b40 	.word	0x20001b40
 80074e8:	20001b30 	.word	0x20001b30
 80074ec:	20001b3c 	.word	0x20001b3c

080074f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074f6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80074fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80074fc:	4b27      	ldr	r3, [pc, #156]	@ (800759c <prvHeapInit+0xac>)
 80074fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f003 0307 	and.w	r3, r3, #7
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00c      	beq.n	8007524 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3307      	adds	r3, #7
 800750e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f023 0307 	bic.w	r3, r3, #7
 8007516:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	4a1f      	ldr	r2, [pc, #124]	@ (800759c <prvHeapInit+0xac>)
 8007520:	4413      	add	r3, r2
 8007522:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007528:	4a1d      	ldr	r2, [pc, #116]	@ (80075a0 <prvHeapInit+0xb0>)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800752e:	4b1c      	ldr	r3, [pc, #112]	@ (80075a0 <prvHeapInit+0xb0>)
 8007530:	2200      	movs	r2, #0
 8007532:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	4413      	add	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800753c:	2208      	movs	r2, #8
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	1a9b      	subs	r3, r3, r2
 8007542:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0307 	bic.w	r3, r3, #7
 800754a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	4a15      	ldr	r2, [pc, #84]	@ (80075a4 <prvHeapInit+0xb4>)
 8007550:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007552:	4b14      	ldr	r3, [pc, #80]	@ (80075a4 <prvHeapInit+0xb4>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	2200      	movs	r2, #0
 8007558:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800755a:	4b12      	ldr	r3, [pc, #72]	@ (80075a4 <prvHeapInit+0xb4>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2200      	movs	r2, #0
 8007560:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	1ad2      	subs	r2, r2, r3
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007570:	4b0c      	ldr	r3, [pc, #48]	@ (80075a4 <prvHeapInit+0xb4>)
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	4a0a      	ldr	r2, [pc, #40]	@ (80075a8 <prvHeapInit+0xb8>)
 800757e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	4a09      	ldr	r2, [pc, #36]	@ (80075ac <prvHeapInit+0xbc>)
 8007586:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007588:	4b09      	ldr	r3, [pc, #36]	@ (80075b0 <prvHeapInit+0xc0>)
 800758a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800758e:	601a      	str	r2, [r3, #0]
}
 8007590:	bf00      	nop
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	20000f6c 	.word	0x20000f6c
 80075a0:	20001b24 	.word	0x20001b24
 80075a4:	20001b2c 	.word	0x20001b2c
 80075a8:	20001b34 	.word	0x20001b34
 80075ac:	20001b30 	.word	0x20001b30
 80075b0:	20001b40 	.word	0x20001b40

080075b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075bc:	4b28      	ldr	r3, [pc, #160]	@ (8007660 <prvInsertBlockIntoFreeList+0xac>)
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	e002      	b.n	80075c8 <prvInsertBlockIntoFreeList+0x14>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d8f7      	bhi.n	80075c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	4413      	add	r3, r2
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d108      	bne.n	80075f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	441a      	add	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	441a      	add	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	429a      	cmp	r2, r3
 8007608:	d118      	bne.n	800763c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	4b15      	ldr	r3, [pc, #84]	@ (8007664 <prvInsertBlockIntoFreeList+0xb0>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	429a      	cmp	r2, r3
 8007614:	d00d      	beq.n	8007632 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685a      	ldr	r2, [r3, #4]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	441a      	add	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	e008      	b.n	8007644 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007632:	4b0c      	ldr	r3, [pc, #48]	@ (8007664 <prvInsertBlockIntoFreeList+0xb0>)
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	e003      	b.n	8007644 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	429a      	cmp	r2, r3
 800764a:	d002      	beq.n	8007652 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007652:	bf00      	nop
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	20001b24 	.word	0x20001b24
 8007664:	20001b2c 	.word	0x20001b2c

08007668 <memset>:
 8007668:	4402      	add	r2, r0
 800766a:	4603      	mov	r3, r0
 800766c:	4293      	cmp	r3, r2
 800766e:	d100      	bne.n	8007672 <memset+0xa>
 8007670:	4770      	bx	lr
 8007672:	f803 1b01 	strb.w	r1, [r3], #1
 8007676:	e7f9      	b.n	800766c <memset+0x4>

08007678 <_reclaim_reent>:
 8007678:	4b29      	ldr	r3, [pc, #164]	@ (8007720 <_reclaim_reent+0xa8>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4283      	cmp	r3, r0
 800767e:	b570      	push	{r4, r5, r6, lr}
 8007680:	4604      	mov	r4, r0
 8007682:	d04b      	beq.n	800771c <_reclaim_reent+0xa4>
 8007684:	69c3      	ldr	r3, [r0, #28]
 8007686:	b1ab      	cbz	r3, 80076b4 <_reclaim_reent+0x3c>
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	b16b      	cbz	r3, 80076a8 <_reclaim_reent+0x30>
 800768c:	2500      	movs	r5, #0
 800768e:	69e3      	ldr	r3, [r4, #28]
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	5959      	ldr	r1, [r3, r5]
 8007694:	2900      	cmp	r1, #0
 8007696:	d13b      	bne.n	8007710 <_reclaim_reent+0x98>
 8007698:	3504      	adds	r5, #4
 800769a:	2d80      	cmp	r5, #128	@ 0x80
 800769c:	d1f7      	bne.n	800768e <_reclaim_reent+0x16>
 800769e:	69e3      	ldr	r3, [r4, #28]
 80076a0:	4620      	mov	r0, r4
 80076a2:	68d9      	ldr	r1, [r3, #12]
 80076a4:	f000 f872 	bl	800778c <_free_r>
 80076a8:	69e3      	ldr	r3, [r4, #28]
 80076aa:	6819      	ldr	r1, [r3, #0]
 80076ac:	b111      	cbz	r1, 80076b4 <_reclaim_reent+0x3c>
 80076ae:	4620      	mov	r0, r4
 80076b0:	f000 f86c 	bl	800778c <_free_r>
 80076b4:	6961      	ldr	r1, [r4, #20]
 80076b6:	b111      	cbz	r1, 80076be <_reclaim_reent+0x46>
 80076b8:	4620      	mov	r0, r4
 80076ba:	f000 f867 	bl	800778c <_free_r>
 80076be:	69e1      	ldr	r1, [r4, #28]
 80076c0:	b111      	cbz	r1, 80076c8 <_reclaim_reent+0x50>
 80076c2:	4620      	mov	r0, r4
 80076c4:	f000 f862 	bl	800778c <_free_r>
 80076c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80076ca:	b111      	cbz	r1, 80076d2 <_reclaim_reent+0x5a>
 80076cc:	4620      	mov	r0, r4
 80076ce:	f000 f85d 	bl	800778c <_free_r>
 80076d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076d4:	b111      	cbz	r1, 80076dc <_reclaim_reent+0x64>
 80076d6:	4620      	mov	r0, r4
 80076d8:	f000 f858 	bl	800778c <_free_r>
 80076dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80076de:	b111      	cbz	r1, 80076e6 <_reclaim_reent+0x6e>
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 f853 	bl	800778c <_free_r>
 80076e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80076e8:	b111      	cbz	r1, 80076f0 <_reclaim_reent+0x78>
 80076ea:	4620      	mov	r0, r4
 80076ec:	f000 f84e 	bl	800778c <_free_r>
 80076f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80076f2:	b111      	cbz	r1, 80076fa <_reclaim_reent+0x82>
 80076f4:	4620      	mov	r0, r4
 80076f6:	f000 f849 	bl	800778c <_free_r>
 80076fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80076fc:	b111      	cbz	r1, 8007704 <_reclaim_reent+0x8c>
 80076fe:	4620      	mov	r0, r4
 8007700:	f000 f844 	bl	800778c <_free_r>
 8007704:	6a23      	ldr	r3, [r4, #32]
 8007706:	b14b      	cbz	r3, 800771c <_reclaim_reent+0xa4>
 8007708:	4620      	mov	r0, r4
 800770a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800770e:	4718      	bx	r3
 8007710:	680e      	ldr	r6, [r1, #0]
 8007712:	4620      	mov	r0, r4
 8007714:	f000 f83a 	bl	800778c <_free_r>
 8007718:	4631      	mov	r1, r6
 800771a:	e7bb      	b.n	8007694 <_reclaim_reent+0x1c>
 800771c:	bd70      	pop	{r4, r5, r6, pc}
 800771e:	bf00      	nop
 8007720:	20000010 	.word	0x20000010

08007724 <__libc_init_array>:
 8007724:	b570      	push	{r4, r5, r6, lr}
 8007726:	4d0d      	ldr	r5, [pc, #52]	@ (800775c <__libc_init_array+0x38>)
 8007728:	4c0d      	ldr	r4, [pc, #52]	@ (8007760 <__libc_init_array+0x3c>)
 800772a:	1b64      	subs	r4, r4, r5
 800772c:	10a4      	asrs	r4, r4, #2
 800772e:	2600      	movs	r6, #0
 8007730:	42a6      	cmp	r6, r4
 8007732:	d109      	bne.n	8007748 <__libc_init_array+0x24>
 8007734:	4d0b      	ldr	r5, [pc, #44]	@ (8007764 <__libc_init_array+0x40>)
 8007736:	4c0c      	ldr	r4, [pc, #48]	@ (8007768 <__libc_init_array+0x44>)
 8007738:	f000 f87e 	bl	8007838 <_init>
 800773c:	1b64      	subs	r4, r4, r5
 800773e:	10a4      	asrs	r4, r4, #2
 8007740:	2600      	movs	r6, #0
 8007742:	42a6      	cmp	r6, r4
 8007744:	d105      	bne.n	8007752 <__libc_init_array+0x2e>
 8007746:	bd70      	pop	{r4, r5, r6, pc}
 8007748:	f855 3b04 	ldr.w	r3, [r5], #4
 800774c:	4798      	blx	r3
 800774e:	3601      	adds	r6, #1
 8007750:	e7ee      	b.n	8007730 <__libc_init_array+0xc>
 8007752:	f855 3b04 	ldr.w	r3, [r5], #4
 8007756:	4798      	blx	r3
 8007758:	3601      	adds	r6, #1
 800775a:	e7f2      	b.n	8007742 <__libc_init_array+0x1e>
 800775c:	08007978 	.word	0x08007978
 8007760:	08007978 	.word	0x08007978
 8007764:	08007978 	.word	0x08007978
 8007768:	0800797c 	.word	0x0800797c

0800776c <__retarget_lock_acquire_recursive>:
 800776c:	4770      	bx	lr

0800776e <__retarget_lock_release_recursive>:
 800776e:	4770      	bx	lr

08007770 <memcpy>:
 8007770:	440a      	add	r2, r1
 8007772:	4291      	cmp	r1, r2
 8007774:	f100 33ff 	add.w	r3, r0, #4294967295
 8007778:	d100      	bne.n	800777c <memcpy+0xc>
 800777a:	4770      	bx	lr
 800777c:	b510      	push	{r4, lr}
 800777e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007782:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007786:	4291      	cmp	r1, r2
 8007788:	d1f9      	bne.n	800777e <memcpy+0xe>
 800778a:	bd10      	pop	{r4, pc}

0800778c <_free_r>:
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	4605      	mov	r5, r0
 8007790:	2900      	cmp	r1, #0
 8007792:	d041      	beq.n	8007818 <_free_r+0x8c>
 8007794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007798:	1f0c      	subs	r4, r1, #4
 800779a:	2b00      	cmp	r3, #0
 800779c:	bfb8      	it	lt
 800779e:	18e4      	addlt	r4, r4, r3
 80077a0:	f000 f83e 	bl	8007820 <__malloc_lock>
 80077a4:	4a1d      	ldr	r2, [pc, #116]	@ (800781c <_free_r+0x90>)
 80077a6:	6813      	ldr	r3, [r2, #0]
 80077a8:	b933      	cbnz	r3, 80077b8 <_free_r+0x2c>
 80077aa:	6063      	str	r3, [r4, #4]
 80077ac:	6014      	str	r4, [r2, #0]
 80077ae:	4628      	mov	r0, r5
 80077b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077b4:	f000 b83a 	b.w	800782c <__malloc_unlock>
 80077b8:	42a3      	cmp	r3, r4
 80077ba:	d908      	bls.n	80077ce <_free_r+0x42>
 80077bc:	6820      	ldr	r0, [r4, #0]
 80077be:	1821      	adds	r1, r4, r0
 80077c0:	428b      	cmp	r3, r1
 80077c2:	bf01      	itttt	eq
 80077c4:	6819      	ldreq	r1, [r3, #0]
 80077c6:	685b      	ldreq	r3, [r3, #4]
 80077c8:	1809      	addeq	r1, r1, r0
 80077ca:	6021      	streq	r1, [r4, #0]
 80077cc:	e7ed      	b.n	80077aa <_free_r+0x1e>
 80077ce:	461a      	mov	r2, r3
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	b10b      	cbz	r3, 80077d8 <_free_r+0x4c>
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	d9fa      	bls.n	80077ce <_free_r+0x42>
 80077d8:	6811      	ldr	r1, [r2, #0]
 80077da:	1850      	adds	r0, r2, r1
 80077dc:	42a0      	cmp	r0, r4
 80077de:	d10b      	bne.n	80077f8 <_free_r+0x6c>
 80077e0:	6820      	ldr	r0, [r4, #0]
 80077e2:	4401      	add	r1, r0
 80077e4:	1850      	adds	r0, r2, r1
 80077e6:	4283      	cmp	r3, r0
 80077e8:	6011      	str	r1, [r2, #0]
 80077ea:	d1e0      	bne.n	80077ae <_free_r+0x22>
 80077ec:	6818      	ldr	r0, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	6053      	str	r3, [r2, #4]
 80077f2:	4408      	add	r0, r1
 80077f4:	6010      	str	r0, [r2, #0]
 80077f6:	e7da      	b.n	80077ae <_free_r+0x22>
 80077f8:	d902      	bls.n	8007800 <_free_r+0x74>
 80077fa:	230c      	movs	r3, #12
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	e7d6      	b.n	80077ae <_free_r+0x22>
 8007800:	6820      	ldr	r0, [r4, #0]
 8007802:	1821      	adds	r1, r4, r0
 8007804:	428b      	cmp	r3, r1
 8007806:	bf04      	itt	eq
 8007808:	6819      	ldreq	r1, [r3, #0]
 800780a:	685b      	ldreq	r3, [r3, #4]
 800780c:	6063      	str	r3, [r4, #4]
 800780e:	bf04      	itt	eq
 8007810:	1809      	addeq	r1, r1, r0
 8007812:	6021      	streq	r1, [r4, #0]
 8007814:	6054      	str	r4, [r2, #4]
 8007816:	e7ca      	b.n	80077ae <_free_r+0x22>
 8007818:	bd38      	pop	{r3, r4, r5, pc}
 800781a:	bf00      	nop
 800781c:	20001c80 	.word	0x20001c80

08007820 <__malloc_lock>:
 8007820:	4801      	ldr	r0, [pc, #4]	@ (8007828 <__malloc_lock+0x8>)
 8007822:	f7ff bfa3 	b.w	800776c <__retarget_lock_acquire_recursive>
 8007826:	bf00      	nop
 8007828:	20001c7c 	.word	0x20001c7c

0800782c <__malloc_unlock>:
 800782c:	4801      	ldr	r0, [pc, #4]	@ (8007834 <__malloc_unlock+0x8>)
 800782e:	f7ff bf9e 	b.w	800776e <__retarget_lock_release_recursive>
 8007832:	bf00      	nop
 8007834:	20001c7c 	.word	0x20001c7c

08007838 <_init>:
 8007838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783a:	bf00      	nop
 800783c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800783e:	bc08      	pop	{r3}
 8007840:	469e      	mov	lr, r3
 8007842:	4770      	bx	lr

08007844 <_fini>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	bf00      	nop
 8007848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784a:	bc08      	pop	{r3}
 800784c:	469e      	mov	lr, r3
 800784e:	4770      	bx	lr
