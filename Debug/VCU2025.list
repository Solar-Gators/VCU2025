
VCU2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009880  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08009a30  08009a30  0000aa30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b58  08009b58  0000b060  2**0
                  CONTENTS
  4 .ARM          00000000  08009b58  08009b58  0000b060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b58  08009b58  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b58  08009b58  0000ab58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b5c  08009b5c  0000ab5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009b60  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cec  20000060  08009bc0  0000b060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d4c  08009bc0  0000bd4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef1e  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040f4  00000000  00000000  00029fae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  0002e0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149a  00000000  00000000  0002fb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bb2a  00000000  00000000  00030fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e3b4  00000000  00000000  0005cb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e430  00000000  00000000  0007aec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001892f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074d8  00000000  00000000  00189334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0019080c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009a18 	.word	0x08009a18

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08009a18 	.word	0x08009a18

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2uiz>:
 800098c:	004a      	lsls	r2, r1, #1
 800098e:	d211      	bcs.n	80009b4 <__aeabi_d2uiz+0x28>
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000994:	d211      	bcs.n	80009ba <__aeabi_d2uiz+0x2e>
 8000996:	d50d      	bpl.n	80009b4 <__aeabi_d2uiz+0x28>
 8000998:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d40e      	bmi.n	80009c0 <__aeabi_d2uiz+0x34>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009be:	d102      	bne.n	80009c6 <__aeabi_d2uiz+0x3a>
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	0000      	movs	r0, r0
	...

08000a70 <INA226_Initialize>:
#include <INA226.h>
#include <stdio.h>
#include <math.h>

//Initialize INA226 Component using max current expected and resistance of shunt resistor.
HAL_StatusTypeDef  INA226_Initialize(INA226_t *dev, I2C_HandleTypeDef *i2cHandle, float maxCurrent, float shuntResistance ){
 8000a70:	b5b0      	push	{r4, r5, r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a7e:	edc7 0a00 	vstr	s1, [r7]
	dev->i2cHandle = i2cHandle;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	601a      	str	r2, [r3, #0]
	dev->config = 0;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	829a      	strh	r2, [r3, #20]
	dev->shuntVoltage = 0; //max is 81.92mV
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2200      	movs	r2, #0
 8000a92:	82da      	strh	r2, [r3, #22]
	dev->busVoltage = 0;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2200      	movs	r2, #0
 8000a98:	831a      	strh	r2, [r3, #24]
	dev->power = 0;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
	dev->current = 0;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f04f 0200 	mov.w	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
	dev->calibration = 0;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f04f 0200 	mov.w	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	@ 0x24

	//Current LSB = (Maximum Expected Current)/2^15
	dev->current_LSB = (maxCurrent) / pow(2, 15); // 10A
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff fd00 	bl	80004b8 <__aeabi_f2d>
 8000ab8:	f04f 0200 	mov.w	r2, #0
 8000abc:	4b46      	ldr	r3, [pc, #280]	@ (8000bd8 <INA226_Initialize+0x168>)
 8000abe:	f7ff fe7d 	bl	80007bc <__aeabi_ddiv>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	68f9      	ldr	r1, [r7, #12]
 8000ac8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dev->rShunt = shuntResistance; //20 mOHM
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	611a      	str	r2, [r3, #16]

	//store # of errors to check for issues
	uint8_t errNum = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	75fb      	strb	r3, [r7, #23]


	//Check device manufacturing and DIE ID


	status = INA226_ReadRegister(dev,INA226_MANUF_ID_REG , &regData);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	461a      	mov	r2, r3
 8000adc:	21fe      	movs	r1, #254	@ 0xfe
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f000 f87c 	bl	8000bdc <INA226_ReadRegister>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	75bb      	strb	r3, [r7, #22]

	if(regData != INA226_MANUF_ID){
 8000ae8:	8abb      	ldrh	r3, [r7, #20]
 8000aea:	f245 4249 	movw	r2, #21577	@ 0x5449
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d001      	beq.n	8000af6 <INA226_Initialize+0x86>
		//leave since ID doesn't match
		return 255;
 8000af2:	23ff      	movs	r3, #255	@ 0xff
 8000af4:	e066      	b.n	8000bc4 <INA226_Initialize+0x154>
	}

	status = INA226_ReadRegister(dev,INA226_DIE_ID_REG, &regData);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	461a      	mov	r2, r3
 8000afc:	21ff      	movs	r1, #255	@ 0xff
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f000 f86c 	bl	8000bdc <INA226_ReadRegister>
 8000b04:	4603      	mov	r3, r0
 8000b06:	75bb      	strb	r3, [r7, #22]

	if(regData != INA226_DIE_ID){
 8000b08:	8abb      	ldrh	r3, [r7, #20]
 8000b0a:	f242 2260 	movw	r2, #8800	@ 0x2260
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d001      	beq.n	8000b16 <INA226_Initialize+0xa6>
		//leave since ID doesn't match
		return 255;
 8000b12:	23ff      	movs	r3, #255	@ 0xff
 8000b14:	e056      	b.n	8000bc4 <INA226_Initialize+0x154>

	//Configutation Register: Sets different measuring parameters (Page 22-23)
	  // Bit(B)15 -> reset, B11-B9 -> determines average # of samples taken, B8-6 -> Bus Voltage Conversion Time(CT)
	  // B5-B3 -> Shunt Voltage CT, B2-B0 -> Operating Mode (probing timeframe)

	status = INA226_ReadRegister(dev,INA226_CONFIG_REG , &regData);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f000 f85c 	bl	8000bdc <INA226_ReadRegister>
 8000b24:	4603      	mov	r3, r0
 8000b26:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 8000b28:	7dbb      	ldrb	r3, [r7, #22]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	bf14      	ite	ne
 8000b2e:	2301      	movne	r3, #1
 8000b30:	2300      	moveq	r3, #0
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	461a      	mov	r2, r3
 8000b36:	7dfb      	ldrb	r3, [r7, #23]
 8000b38:	4413      	add	r3, r2
 8000b3a:	75fb      	strb	r3, [r7, #23]
	dev->config = regData;
 8000b3c:	8aba      	ldrh	r2, [r7, #20]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	829a      	strh	r2, [r3, #20]


	//calibration register value (page 15)
	CAL = (0.00512)/(dev->current_LSB * shuntResistance);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000b48:	6838      	ldr	r0, [r7, #0]
 8000b4a:	f7ff fcb5 	bl	80004b8 <__aeabi_f2d>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	460b      	mov	r3, r1
 8000b52:	4620      	mov	r0, r4
 8000b54:	4629      	mov	r1, r5
 8000b56:	f7ff fd07 	bl	8000568 <__aeabi_dmul>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	a11c      	add	r1, pc, #112	@ (adr r1, 8000bd0 <INA226_Initialize+0x160>)
 8000b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b64:	f7ff fe2a 	bl	80007bc <__aeabi_ddiv>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f7ff ff0c 	bl	800098c <__aeabi_d2uiz>
 8000b74:	4603      	mov	r3, r0
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	827b      	strh	r3, [r7, #18]
	status = INA226_WriteRegister(dev, INA226_CALIB_REG, &CAL);
 8000b7a:	f107 0312 	add.w	r3, r7, #18
 8000b7e:	461a      	mov	r2, r3
 8000b80:	2105      	movs	r1, #5
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f000 f855 	bl	8000c32 <INA226_WriteRegister>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	75bb      	strb	r3, [r7, #22]
	status = INA226_ReadRegister(dev,INA226_CALIB_REG , &regData);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	461a      	mov	r2, r3
 8000b92:	2105      	movs	r1, #5
 8000b94:	68f8      	ldr	r0, [r7, #12]
 8000b96:	f000 f821 	bl	8000bdc <INA226_ReadRegister>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 8000b9e:	7dbb      	ldrb	r3, [r7, #22]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	bf14      	ite	ne
 8000ba4:	2301      	movne	r3, #1
 8000ba6:	2300      	moveq	r3, #0
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	461a      	mov	r2, r3
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
 8000bae:	4413      	add	r3, r2
 8000bb0:	75fb      	strb	r3, [r7, #23]
	dev->calibration = regData;
 8000bb2:	8abb      	ldrh	r3, [r7, #20]
 8000bb4:	ee07 3a90 	vmov	s15, r3
 8000bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bdb0      	pop	{r4, r5, r7, pc}
 8000bcc:	f3af 8000 	nop.w
 8000bd0:	88e368f1 	.word	0x88e368f1
 8000bd4:	3f74f8b5 	.word	0x3f74f8b5
 8000bd8:	40e00000 	.word	0x40e00000

08000bdc <INA226_ReadRegister>:



//Low Level Functions

HAL_StatusTypeDef INA226_ReadRegister(INA226_t *dev, uint8_t reg, uint16_t *data){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	460b      	mov	r3, r1
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	72fb      	strb	r3, [r7, #11]
    // Read 2 bytes (16 bits) from the register
	uint8_t temp[2];
	HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read(dev->i2cHandle, INA226_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT,temp, 2, HAL_MAX_DELAY);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	7afb      	ldrb	r3, [r7, #11]
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	9302      	str	r3, [sp, #8]
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2301      	movs	r3, #1
 8000c04:	2188      	movs	r1, #136	@ 0x88
 8000c06:	f003 f8bf 	bl	8003d88 <HAL_I2C_Mem_Read>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	75fb      	strb	r3, [r7, #23]
    //temp is full rn
    uint16_t alldata;

    //Index first, beacause it reads LSB first
    alldata = (uint16_t)temp[0];
 8000c0e:	7c3b      	ldrb	r3, [r7, #16]
 8000c10:	82bb      	strh	r3, [r7, #20]

    //shift regdata left 8 so # is xxxxxxxx00000000
    alldata = (alldata << 8);
 8000c12:	8abb      	ldrh	r3, [r7, #20]
 8000c14:	021b      	lsls	r3, r3, #8
 8000c16:	82bb      	strh	r3, [r7, #20]
    alldata = alldata | (uint16_t)temp[1];
 8000c18:	7c7b      	ldrb	r3, [r7, #17]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	8abb      	ldrh	r3, [r7, #20]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	82bb      	strh	r3, [r7, #20]
    *data = alldata;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	8aba      	ldrh	r2, [r7, #20]
 8000c26:	801a      	strh	r2, [r3, #0]
    return status;
 8000c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <INA226_WriteRegister>:

HAL_StatusTypeDef INA226_WriteRegister(INA226_t *dev, uint8_t reg, uint16_t *data){
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b08a      	sub	sp, #40	@ 0x28
 8000c36:	af04      	add	r7, sp, #16
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	72fb      	strb	r3, [r7, #11]
    // Write 2 bytes (16 bits) to the specified register
	uint16_t passData = ((*data >> 8) | (*data << 8));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef status;



	//Pass in a pointer to the 16 bit # as an 8 bit pointer, but use length 2 to write 2 bits.
    status = HAL_I2C_Mem_Write(dev->i2cHandle, INA226_I2C_ADDR, (uint16_t)reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&passData, 2, HAL_MAX_DELAY);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	7afb      	ldrb	r3, [r7, #11]
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	9302      	str	r3, [sp, #8]
 8000c68:	2302      	movs	r3, #2
 8000c6a:	9301      	str	r3, [sp, #4]
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2301      	movs	r3, #1
 8000c74:	2188      	movs	r1, #136	@ 0x88
 8000c76:	f002 ff73 	bl	8003b60 <HAL_I2C_Mem_Write>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	75fb      	strb	r3, [r7, #23]
    return status;
 8000c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <getCurrentAmp>:

// return current value after multiplication
float getCurrentAmp(INA226_t *dev){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	uint16_t regData;
	float currentData;
	float rawVoltage;
	INA226_ReadRegister(dev, INA226_SHUNT_VOLT_REG, &regData);
 8000c90:	f107 030e 	add.w	r3, r7, #14
 8000c94:	461a      	mov	r2, r3
 8000c96:	2101      	movs	r1, #1
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ff9f 	bl	8000bdc <INA226_ReadRegister>
	rawVoltage = (float)regData * 81.82 / 32768;
 8000c9e:	89fb      	ldrh	r3, [r7, #14]
 8000ca0:	ee07 3a90 	vmov	s15, r3
 8000ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca8:	ee17 0a90 	vmov	r0, s15
 8000cac:	f7ff fc04 	bl	80004b8 <__aeabi_f2d>
 8000cb0:	a321      	add	r3, pc, #132	@ (adr r3, 8000d38 <getCurrentAmp+0xb0>)
 8000cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb6:	f7ff fc57 	bl	8000568 <__aeabi_dmul>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <getCurrentAmp+0xa8>)
 8000cc8:	f7ff fd78 	bl	80007bc <__aeabi_ddiv>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f7ff fe7a 	bl	80009cc <__aeabi_d2f>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	617b      	str	r3, [r7, #20]
	currentData = ((rawVoltage/0.02)/1000); //mA to A
 8000cdc:	6978      	ldr	r0, [r7, #20]
 8000cde:	f7ff fbeb 	bl	80004b8 <__aeabi_f2d>
 8000ce2:	a311      	add	r3, pc, #68	@ (adr r3, 8000d28 <getCurrentAmp+0xa0>)
 8000ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce8:	f7ff fd68 	bl	80007bc <__aeabi_ddiv>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f04f 0200 	mov.w	r2, #0
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <getCurrentAmp+0xac>)
 8000cfa:	f7ff fd5f 	bl	80007bc <__aeabi_ddiv>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	4610      	mov	r0, r2
 8000d04:	4619      	mov	r1, r3
 8000d06:	f7ff fe61 	bl	80009cc <__aeabi_d2f>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	613b      	str	r3, [r7, #16]
	dev->current = currentData;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	621a      	str	r2, [r3, #32]
	return currentData;
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	ee07 3a90 	vmov	s15, r3
}
 8000d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	f3af 8000 	nop.w
 8000d28:	47ae147b 	.word	0x47ae147b
 8000d2c:	3f947ae1 	.word	0x3f947ae1
 8000d30:	40e00000 	.word	0x40e00000
 8000d34:	408f4000 	.word	0x408f4000
 8000d38:	e147ae14 	.word	0xe147ae14
 8000d3c:	4054747a 	.word	0x4054747a

08000d40 <getPowerWatt>:

// return power value after multiplication
float getPowerWatt(INA226_t *dev){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	uint16_t regData;
	float rawBusVoltage;
	float powerData;
	INA226_ReadRegister(dev, INA226_BUS_VOLT_REG,&regData);
 8000d48:	f107 030e 	add.w	r3, r7, #14
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	2102      	movs	r1, #2
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff ff43 	bl	8000bdc <INA226_ReadRegister>
	rawBusVoltage = (float)regData * 40.96 / 32768;
 8000d56:	89fb      	ldrh	r3, [r7, #14]
 8000d58:	ee07 3a90 	vmov	s15, r3
 8000d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d60:	ee17 0a90 	vmov	r0, s15
 8000d64:	f7ff fba8 	bl	80004b8 <__aeabi_f2d>
 8000d68:	a314      	add	r3, pc, #80	@ (adr r3, 8000dbc <getPowerWatt+0x7c>)
 8000d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6e:	f7ff fbfb 	bl	8000568 <__aeabi_dmul>
 8000d72:	4602      	mov	r2, r0
 8000d74:	460b      	mov	r3, r1
 8000d76:	4610      	mov	r0, r2
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f04f 0200 	mov.w	r2, #0
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <getPowerWatt+0x78>)
 8000d80:	f7ff fd1c 	bl	80007bc <__aeabi_ddiv>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	4610      	mov	r0, r2
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f7ff fe1e 	bl	80009cc <__aeabi_d2f>
 8000d90:	4603      	mov	r3, r0
 8000d92:	617b      	str	r3, [r7, #20]
	powerData = (rawBusVoltage*dev->current);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	edd3 7a08 	vldr	s15, [r3, #32]
 8000d9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da2:	edc7 7a04 	vstr	s15, [r7, #16]
	return powerData;
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	ee07 3a90 	vmov	s15, r3
}
 8000dac:	eeb0 0a67 	vmov.f32	s0, s15
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40e00000 	.word	0x40e00000
 8000dbc:	47ae147b 	.word	0x47ae147b
 8000dc0:	40447ae1 	.word	0x40447ae1

08000dc4 <HAL_GPIO_EXTI_Callback>:

uint8_t kill_int = 0;

//CAN tranmission with kill_switch
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == GPIO_PIN_13) {
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000dd4:	d102      	bne.n	8000ddc <HAL_GPIO_EXTI_Callback+0x18>
		//OR current byte 1 to show enable the kill switch
		kill_int = 1;
 8000dd6:	4b04      	ldr	r3, [pc, #16]	@ (8000de8 <HAL_GPIO_EXTI_Callback+0x24>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	701a      	strb	r2, [r3, #0]
//		else if(status == HAL_BUSY){
//			HAL_CAN_BUSY++;
//		}


}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	200001e9 	.word	0x200001e9

08000dec <HAL_CAN_RxFifo0MsgPendingCallback>:

// Can reception
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	@ 0x30
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint8_t RxData[8] = { 0 };  // Array to store the received data
 8000df4:	2300      	movs	r3, #0
 8000df6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  CAN_RxHeaderTypeDef RxHeader;
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000dfc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e00:	f107 020c 	add.w	r2, r7, #12
 8000e04:	2100      	movs	r1, #0
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f001 fd97 	bl	800293a <HAL_CAN_GetRxMessage>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
  {
    Error_Handler();
 8000e12:	f000 ff0f 	bl	8001c34 <Error_Handler>
  }
  if (RxHeader.StdId == 0x000 && RxHeader.IDE == CAN_ID_STD)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d117      	bne.n	8000e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d114      	bne.n	8000e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
  {
	  if (RxData[0] == 0) {
 8000e22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d110      	bne.n	8000e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
      last_throttle_recieved_tick = HAL_GetTick();
 8000e2a:	f001 fa31 	bl	8002290 <HAL_GetTick>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a6a      	ldr	r2, [pc, #424]	@ (8000fdc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000e32:	6013      	str	r3, [r2, #0]
		  throttle = (uint16_t)RxData[2]<<8 | RxData[1];
 8000e34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	b21a      	sxth	r2, r3
 8000e3c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	4b65      	ldr	r3, [pc, #404]	@ (8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8000e4a:	801a      	strh	r2, [r3, #0]
	  }
  }
  if (RxHeader.StdId == 0x7FF && RxHeader.IDE == CAN_ID_STD) {
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000e52:	4293      	cmp	r3, r2
 8000e54:	f040 80be 	bne.w	8000fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f040 80ba 	bne.w	8000fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>
	  if(RxData[0] == 1){
 8000e60:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	f040 80b5 	bne.w	8000fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>
		  //byte 1
		  //ignition switch
		  if((RxData[1] & 0x01) != 0x00){
 8000e6a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
			  ignition_switch = true;
 8000e76:	4b5b      	ldr	r3, [pc, #364]	@ (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
 8000e7c:	e002      	b.n	8000e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>
		  }
		  else{
			  ignition_switch = false;
 8000e7e:	4b59      	ldr	r3, [pc, #356]	@ (8000fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x02) != 0x00){
 8000e84:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
			  brakes_active = true; // turn brakes on
 8000e90:	4b55      	ldr	r3, [pc, #340]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	701a      	strb	r2, [r3, #0]
 8000e96:	e002      	b.n	8000e9e <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
		  }else{
			  brakes_active = false; // turn breaks off
 8000e98:	4b53      	ldr	r3, [pc, #332]	@ (8000fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x20) != 0x00){
 8000e9e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000ea2:	f003 0320 	and.w	r3, r3, #32
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_CAN_RxFifo0MsgPendingCallback+0xc6>
			  direction = true; //Forward
 8000eaa:	4b50      	ldr	r3, [pc, #320]	@ (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	e002      	b.n	8000eb8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
		  }else{
			  direction = false; // Reverse
 8000eb2:	4b4e      	ldr	r3, [pc, #312]	@ (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x10) != 0x00){
 8000eb8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000ebc:	f003 0310 	and.w	r3, r3, #16
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>
			  mc_main_ctrl = true;
 8000ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	701a      	strb	r2, [r3, #0]
 8000eca:	e002      	b.n	8000ed2 <HAL_CAN_RxFifo0MsgPendingCallback+0xe6>
		  }else{
			  mc_main_ctrl = false;
 8000ecc:	4b48      	ldr	r3, [pc, #288]	@ (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x04) != 0x00){
 8000ed2:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00c      	beq.n	8000ef8 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>
			  array = true;
 8000ede:	4b45      	ldr	r3, [pc, #276]	@ (8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	701a      	strb	r2, [r3, #0]
        if (array != old_array) {
 8000ee4:	4b43      	ldr	r3, [pc, #268]	@ (8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	4b43      	ldr	r3, [pc, #268]	@ (8000ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d00f      	beq.n	8000f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
          start_array_process = true;
 8000ef0:	4b42      	ldr	r3, [pc, #264]	@ (8000ffc <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	e00b      	b.n	8000f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
        }
		  }else{
			  array = false;
 8000ef8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
        if (array != old_array) {
 8000efe:	4b3d      	ldr	r3, [pc, #244]	@ (8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000f00:	781a      	ldrb	r2, [r3, #0]
 8000f02:	4b3d      	ldr	r3, [pc, #244]	@ (8000ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d002      	beq.n	8000f10 <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
          start_array_process = true;
 8000f0a:	4b3c      	ldr	r3, [pc, #240]	@ (8000ffc <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
        }
		  }
      old_array = array;
 8000f10:	4b38      	ldr	r3, [pc, #224]	@ (8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	4b38      	ldr	r3, [pc, #224]	@ (8000ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000f16:	701a      	strb	r2, [r3, #0]

		  //byte #2
		  if((RxData[2] & 0x01) != 0x00){
 8000f18:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d010      	beq.n	8000f46 <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
			  if (blinkers_active != true) {
 8000f24:	4b36      	ldr	r3, [pc, #216]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	f083 0301 	eor.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d005      	beq.n	8000f3e <HAL_CAN_RxFifo0MsgPendingCallback+0x152>
				  blinkers_active = true;
 8000f32:	4b33      	ldr	r3, [pc, #204]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 8000f38:	4b32      	ldr	r3, [pc, #200]	@ (8001004 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
			  }
			  blinkers_active = true; // turn brakes on
 8000f3e:	4b30      	ldr	r3, [pc, #192]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	e002      	b.n	8000f4c <HAL_CAN_RxFifo0MsgPendingCallback+0x160>

		  }else{
			  blinkers_active = false;
 8000f46:	4b2e      	ldr	r3, [pc, #184]	@ (8001000 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[2] & 0x02) != 0x00){
 8000f4c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d010      	beq.n	8000f7a <HAL_CAN_RxFifo0MsgPendingCallback+0x18e>
			  if (left_turn_active != true) {
 8000f58:	4b2b      	ldr	r3, [pc, #172]	@ (8001008 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	f083 0301 	eor.w	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d005      	beq.n	8000f72 <HAL_CAN_RxFifo0MsgPendingCallback+0x186>
				  left_turn_active = true;
 8000f66:	4b28      	ldr	r3, [pc, #160]	@ (8001008 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 8000f6c:	4b25      	ldr	r3, [pc, #148]	@ (8001004 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
			  }
			  left_turn_active = true; // turn brakes on
 8000f72:	4b25      	ldr	r3, [pc, #148]	@ (8001008 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
 8000f78:	e002      	b.n	8000f80 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>


		  }else{
			  left_turn_active = false; // turn brakes off
 8000f7a:	4b23      	ldr	r3, [pc, #140]	@ (8001008 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[2] & 0x04) != 0x00){
 8000f80:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d013      	beq.n	8000fb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
			  if(right_turn_active != true){
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	f083 0301 	eor.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d008      	beq.n	8000fac <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>
				  right_turn_active = true; // Turn on right
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
				  left_turn_active = false; //Turn off left
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
			  }
			  right_turn_active = true;
 8000fac:	4b17      	ldr	r3, [pc, #92]	@ (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	e002      	b.n	8000fba <HAL_CAN_RxFifo0MsgPendingCallback+0x1ce>
		  }else{
			  right_turn_active = false;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	@ (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
		  }

      if((RxData[2] & 0x10) != 0x00){
 8000fba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_CAN_RxFifo0MsgPendingCallback+0x1e2>
        regen_enable = 1;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
        regen_enable = 0;
      }

	  }
  }
}
 8000fcc:	e002      	b.n	8000fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>
        regen_enable = 0;
 8000fce:	4b10      	ldr	r3, [pc, #64]	@ (8001010 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	3730      	adds	r7, #48	@ 0x30
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000198 	.word	0x20000198
 8000fe0:	20000190 	.word	0x20000190
 8000fe4:	200001a0 	.word	0x200001a0
 8000fe8:	2000019c 	.word	0x2000019c
 8000fec:	200001a1 	.word	0x200001a1
 8000ff0:	200001a2 	.word	0x200001a2
 8000ff4:	200001a3 	.word	0x200001a3
 8000ff8:	200001a4 	.word	0x200001a4
 8000ffc:	200001a6 	.word	0x200001a6
 8001000:	2000019d 	.word	0x2000019d
 8001004:	200001b0 	.word	0x200001b0
 8001008:	2000019e 	.word	0x2000019e
 800100c:	2000019f 	.word	0x2000019f
 8001010:	20000194 	.word	0x20000194

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

  brakes_active = false;
 8001018:	4b51      	ldr	r3, [pc, #324]	@ (8001160 <main+0x14c>)
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
  blinkers_active = false;
 800101e:	4b51      	ldr	r3, [pc, #324]	@ (8001164 <main+0x150>)
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
  left_turn_active = false;
 8001024:	4b50      	ldr	r3, [pc, #320]	@ (8001168 <main+0x154>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]
  right_turn_active = true;
 800102a:	4b50      	ldr	r3, [pc, #320]	@ (800116c <main+0x158>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]


  direction = false;
 8001030:	4b4f      	ldr	r3, [pc, #316]	@ (8001170 <main+0x15c>)
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
  mc_pwreco_ctrl = false;
 8001036:	4b4f      	ldr	r3, [pc, #316]	@ (8001174 <main+0x160>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
  mc_main_ctrl = false;
 800103c:	4b4e      	ldr	r3, [pc, #312]	@ (8001178 <main+0x164>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
  array = false;
 8001042:	4b4e      	ldr	r3, [pc, #312]	@ (800117c <main+0x168>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001048:	f001 f8f5 	bl	8002236 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104c:	f000 f8c2 	bl	80011d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001050:	f000 fa9a 	bl	8001588 <MX_GPIO_Init>
  MX_DAC1_Init();
 8001054:	f000 f98c 	bl	8001370 <MX_DAC1_Init>
  MX_CAN1_Init();
 8001058:	f000 f902 	bl	8001260 <MX_CAN1_Init>
  MX_CAN2_Init();
 800105c:	f000 f952 	bl	8001304 <MX_CAN2_Init>
  MX_TIM1_Init();
 8001060:	f000 fa02 	bl	8001468 <MX_TIM1_Init>
  MX_I2C2_Init();
 8001064:	f000 f9c0 	bl	80013e8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8001068:	4845      	ldr	r0, [pc, #276]	@ (8001180 <main+0x16c>)
 800106a:	f001 fb1d 	bl	80026a8 <HAL_CAN_Start>

  //intalize can RX interupt
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800106e:	2102      	movs	r1, #2
 8001070:	4843      	ldr	r0, [pc, #268]	@ (8001180 <main+0x16c>)
 8001072:	f001 fd84 	bl	8002b7e <HAL_CAN_ActivateNotification>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <main+0x6c>
  {
	  Error_Handler();
 800107c:	f000 fdda 	bl	8001c34 <Error_Handler>
  }

  TxHeader_status.IDE = CAN_ID_STD; // Standard ID (not extended)
 8001080:	4b40      	ldr	r3, [pc, #256]	@ (8001184 <main+0x170>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  TxHeader_status.StdId = 0x02; // 11 bit Identifier
 8001086:	4b3f      	ldr	r3, [pc, #252]	@ (8001184 <main+0x170>)
 8001088:	2202      	movs	r2, #2
 800108a:	601a      	str	r2, [r3, #0]
  TxData_status[0] = 0x02; // 0x02 is the ID for the status message
 800108c:	4b3e      	ldr	r3, [pc, #248]	@ (8001188 <main+0x174>)
 800108e:	2202      	movs	r2, #2
 8001090:	701a      	strb	r2, [r3, #0]
  TxHeader_status.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8001092:	4b3c      	ldr	r3, [pc, #240]	@ (8001184 <main+0x170>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
  TxHeader_status.DLC = 8; // 8 bytes being transmitted
 8001098:	4b3a      	ldr	r3, [pc, #232]	@ (8001184 <main+0x170>)
 800109a:	2208      	movs	r2, #8
 800109c:	611a      	str	r2, [r3, #16]

  if(INA226_Initialize(&INA226_IVP, &hi2c2, 10, 20) != HAL_OK){ Error_Handler();}
 800109e:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 80010a2:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80010a6:	4939      	ldr	r1, [pc, #228]	@ (800118c <main+0x178>)
 80010a8:	4839      	ldr	r0, [pc, #228]	@ (8001190 <main+0x17c>)
 80010aa:	f7ff fce1 	bl	8000a70 <INA226_Initialize>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <main+0xa4>
 80010b4:	f000 fdbe 	bl	8001c34 <Error_Handler>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2104      	movs	r1, #4
 80010bc:	4835      	ldr	r0, [pc, #212]	@ (8001194 <main+0x180>)
 80010be:	f002 fc69 	bl	8003994 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2108      	movs	r1, #8
 80010c6:	4833      	ldr	r0, [pc, #204]	@ (8001194 <main+0x180>)
 80010c8:	f002 fc64 	bl	8003994 <HAL_GPIO_WritePin>

  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80010cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010d0:	4830      	ldr	r0, [pc, #192]	@ (8001194 <main+0x180>)
 80010d2:	f002 fc47 	bl	8003964 <HAL_GPIO_ReadPin>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d111      	bne.n	8001100 <main+0xec>
    kill_switch = true;
 80010dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001198 <main+0x184>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]
    strobe = 1;
 80010e2:	4b2e      	ldr	r3, [pc, #184]	@ (800119c <main+0x188>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
    last_strobe_toggle_tick = HAL_GetTick();
 80010e8:	f001 f8d2 	bl	8002290 <HAL_GetTick>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4a2c      	ldr	r2, [pc, #176]	@ (80011a0 <main+0x18c>)
 80010f0:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, SET); // Turn on kill switch LED
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f8:	4826      	ldr	r0, [pc, #152]	@ (8001194 <main+0x180>)
 80010fa:	f002 fc4b 	bl	8003994 <HAL_GPIO_WritePin>
 80010fe:	e008      	b.n	8001112 <main+0xfe>
  }
  else {
    kill_switch = false;
 8001100:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <main+0x184>)
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, RESET); // Turn off kill switch LED
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800110c:	4821      	ldr	r0, [pc, #132]	@ (8001194 <main+0x180>)
 800110e:	f002 fc41 	bl	8003994 <HAL_GPIO_WritePin>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001112:	f005 fdeb 	bl	8006cec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(Heart_Beat, NULL, &HeartBeat_attributes);
 8001116:	4a23      	ldr	r2, [pc, #140]	@ (80011a4 <main+0x190>)
 8001118:	2100      	movs	r1, #0
 800111a:	4823      	ldr	r0, [pc, #140]	@ (80011a8 <main+0x194>)
 800111c:	f005 fe30 	bl	8006d80 <osThreadNew>
 8001120:	4603      	mov	r3, r0
 8001122:	4a22      	ldr	r2, [pc, #136]	@ (80011ac <main+0x198>)
 8001124:	6013      	str	r3, [r2, #0]

  /* creation of UpdateThrottle */
  UpdateThrottleHandle = osThreadNew(Update_Throttle, NULL, &UpdateThrottle_attributes);
 8001126:	4a22      	ldr	r2, [pc, #136]	@ (80011b0 <main+0x19c>)
 8001128:	2100      	movs	r1, #0
 800112a:	4822      	ldr	r0, [pc, #136]	@ (80011b4 <main+0x1a0>)
 800112c:	f005 fe28 	bl	8006d80 <osThreadNew>
 8001130:	4603      	mov	r3, r0
 8001132:	4a21      	ldr	r2, [pc, #132]	@ (80011b8 <main+0x1a4>)
 8001134:	6013      	str	r3, [r2, #0]

  /* creation of LightsControl */
  LightsControlHandle = osThreadNew(Lights_Control, NULL, &LightsControl_attributes);
 8001136:	4a21      	ldr	r2, [pc, #132]	@ (80011bc <main+0x1a8>)
 8001138:	2100      	movs	r1, #0
 800113a:	4821      	ldr	r0, [pc, #132]	@ (80011c0 <main+0x1ac>)
 800113c:	f005 fe20 	bl	8006d80 <osThreadNew>
 8001140:	4603      	mov	r3, r0
 8001142:	4a20      	ldr	r2, [pc, #128]	@ (80011c4 <main+0x1b0>)
 8001144:	6013      	str	r3, [r2, #0]

  /* creation of ReadSensors */
  ReadSensorsHandle = osThreadNew(Read_Sensors, NULL, &ReadSensors_attributes);
 8001146:	4a20      	ldr	r2, [pc, #128]	@ (80011c8 <main+0x1b4>)
 8001148:	2100      	movs	r1, #0
 800114a:	4820      	ldr	r0, [pc, #128]	@ (80011cc <main+0x1b8>)
 800114c:	f005 fe18 	bl	8006d80 <osThreadNew>
 8001150:	4603      	mov	r3, r0
 8001152:	4a1f      	ldr	r2, [pc, #124]	@ (80011d0 <main+0x1bc>)
 8001154:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001156:	f005 fded 	bl	8006d34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800115a:	bf00      	nop
 800115c:	e7fd      	b.n	800115a <main+0x146>
 800115e:	bf00      	nop
 8001160:	2000019c 	.word	0x2000019c
 8001164:	2000019d 	.word	0x2000019d
 8001168:	2000019e 	.word	0x2000019e
 800116c:	2000019f 	.word	0x2000019f
 8001170:	200001a1 	.word	0x200001a1
 8001174:	200001ac 	.word	0x200001ac
 8001178:	200001a2 	.word	0x200001a2
 800117c:	200001a3 	.word	0x200001a3
 8001180:	2000007c 	.word	0x2000007c
 8001184:	200001c0 	.word	0x200001c0
 8001188:	200001d8 	.word	0x200001d8
 800118c:	200000e0 	.word	0x200000e0
 8001190:	200001f0 	.word	0x200001f0
 8001194:	48000800 	.word	0x48000800
 8001198:	200001a5 	.word	0x200001a5
 800119c:	200001e8 	.word	0x200001e8
 80011a0:	200001e4 	.word	0x200001e4
 80011a4:	08009a80 	.word	0x08009a80
 80011a8:	080016b1 	.word	0x080016b1
 80011ac:	20000180 	.word	0x20000180
 80011b0:	08009aa4 	.word	0x08009aa4
 80011b4:	0800174d 	.word	0x0800174d
 80011b8:	20000184 	.word	0x20000184
 80011bc:	08009ac8 	.word	0x08009ac8
 80011c0:	08001915 	.word	0x08001915
 80011c4:	20000188 	.word	0x20000188
 80011c8:	08009aec 	.word	0x08009aec
 80011cc:	08001a95 	.word	0x08001a95
 80011d0:	2000018c 	.word	0x2000018c

080011d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b096      	sub	sp, #88	@ 0x58
 80011d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	2244      	movs	r2, #68	@ 0x44
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f008 fb30 	bl	8009848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e8:	463b      	mov	r3, r7
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80011fa:	f003 fa47 	bl	800468c <HAL_PWREx_ControlVoltageScaling>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001204:	f000 fd16 	bl	8001c34 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001208:	2310      	movs	r3, #16
 800120a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800120c:	2301      	movs	r3, #1
 800120e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001214:	2360      	movs	r3, #96	@ 0x60
 8001216:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001218:	2300      	movs	r3, #0
 800121a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4618      	mov	r0, r3
 8001222:	f003 fa89 	bl	8004738 <HAL_RCC_OscConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800122c:	f000 fd02 	bl	8001c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001230:	230f      	movs	r3, #15
 8001232:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001244:	463b      	mov	r3, r7
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f003 fe8f 	bl	8004f6c <HAL_RCC_ClockConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001254:	f000 fcee 	bl	8001c34 <Error_Handler>
  }
}
 8001258:	bf00      	nop
 800125a:	3758      	adds	r7, #88	@ 0x58
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	@ 0x28
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001266:	4b25      	ldr	r3, [pc, #148]	@ (80012fc <MX_CAN1_Init+0x9c>)
 8001268:	4a25      	ldr	r2, [pc, #148]	@ (8001300 <MX_CAN1_Init+0xa0>)
 800126a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800126c:	4b23      	ldr	r3, [pc, #140]	@ (80012fc <MX_CAN1_Init+0x9c>)
 800126e:	2202      	movs	r2, #2
 8001270:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001272:	4b22      	ldr	r3, [pc, #136]	@ (80012fc <MX_CAN1_Init+0x9c>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001278:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <MX_CAN1_Init+0x9c>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800127e:	4b1f      	ldr	r3, [pc, #124]	@ (80012fc <MX_CAN1_Init+0x9c>)
 8001280:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001284:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001286:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <MX_CAN1_Init+0x9c>)
 8001288:	2200      	movs	r2, #0
 800128a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800128c:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <MX_CAN1_Init+0x9c>)
 800128e:	2200      	movs	r2, #0
 8001290:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001292:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <MX_CAN1_Init+0x9c>)
 8001294:	2200      	movs	r2, #0
 8001296:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001298:	4b18      	ldr	r3, [pc, #96]	@ (80012fc <MX_CAN1_Init+0x9c>)
 800129a:	2200      	movs	r2, #0
 800129c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800129e:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <MX_CAN1_Init+0x9c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80012a4:	4b15      	ldr	r3, [pc, #84]	@ (80012fc <MX_CAN1_Init+0x9c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80012aa:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <MX_CAN1_Init+0x9c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80012b0:	4812      	ldr	r0, [pc, #72]	@ (80012fc <MX_CAN1_Init+0x9c>)
 80012b2:	f001 f81d 	bl	80022f0 <HAL_CAN_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80012bc:	f000 fcba 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80012c0:	2301      	movs	r3, #1
 80012c2:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80012c4:	2312      	movs	r3, #18
 80012c6:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x000<<5;
 80012cc:	2300      	movs	r3, #0
 80012ce:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x000<<5;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80012dc:	2300      	movs	r3, #0
 80012de:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80012e4:	2314      	movs	r3, #20
 80012e6:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80012e8:	463b      	mov	r3, r7
 80012ea:	4619      	mov	r1, r3
 80012ec:	4803      	ldr	r0, [pc, #12]	@ (80012fc <MX_CAN1_Init+0x9c>)
 80012ee:	f001 f8fb 	bl	80024e8 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	@ 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000007c 	.word	0x2000007c
 8001300:	40006400 	.word	0x40006400

08001304 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001308:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <MX_CAN2_Init+0x64>)
 800130a:	4a18      	ldr	r2, [pc, #96]	@ (800136c <MX_CAN2_Init+0x68>)
 800130c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 800130e:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <MX_CAN2_Init+0x64>)
 8001310:	2202      	movs	r2, #2
 8001312:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001314:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <MX_CAN2_Init+0x64>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800131a:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <MX_CAN2_Init+0x64>)
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <MX_CAN2_Init+0x64>)
 8001322:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001326:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <MX_CAN2_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <MX_CAN2_Init+0x64>)
 8001330:	2200      	movs	r2, #0
 8001332:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <MX_CAN2_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <MX_CAN2_Init+0x64>)
 800133c:	2200      	movs	r2, #0
 800133e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001340:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <MX_CAN2_Init+0x64>)
 8001342:	2200      	movs	r2, #0
 8001344:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001346:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <MX_CAN2_Init+0x64>)
 8001348:	2200      	movs	r2, #0
 800134a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <MX_CAN2_Init+0x64>)
 800134e:	2200      	movs	r2, #0
 8001350:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	@ (8001368 <MX_CAN2_Init+0x64>)
 8001354:	f000 ffcc 	bl	80022f0 <HAL_CAN_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 800135e:	f000 fc69 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200000a4 	.word	0x200000a4
 800136c:	40006800 	.word	0x40006800

08001370 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2224      	movs	r2, #36	@ 0x24
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f008 fa63 	bl	8009848 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001382:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <MX_DAC1_Init+0x70>)
 8001384:	4a17      	ldr	r2, [pc, #92]	@ (80013e4 <MX_DAC1_Init+0x74>)
 8001386:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001388:	4815      	ldr	r0, [pc, #84]	@ (80013e0 <MX_DAC1_Init+0x70>)
 800138a:	f001 ff2f 	bl	80031ec <HAL_DAC_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001394:	f000 fc4e 	bl	8001c34 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013ac:	1d3b      	adds	r3, r7, #4
 80013ae:	2200      	movs	r2, #0
 80013b0:	4619      	mov	r1, r3
 80013b2:	480b      	ldr	r0, [pc, #44]	@ (80013e0 <MX_DAC1_Init+0x70>)
 80013b4:	f002 f812 	bl	80033dc <HAL_DAC_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80013be:	f000 fc39 	bl	8001c34 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2210      	movs	r2, #16
 80013c6:	4619      	mov	r1, r3
 80013c8:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <MX_DAC1_Init+0x70>)
 80013ca:	f002 f807 	bl	80033dc <HAL_DAC_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80013d4:	f000 fc2e 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	@ 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200000cc 	.word	0x200000cc
 80013e4:	40007400 	.word	0x40007400

080013e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <MX_I2C2_Init+0x74>)
 80013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <MX_I2C2_Init+0x78>)
 80013f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <MX_I2C2_Init+0x74>)
 80013f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001464 <MX_I2C2_Init+0x7c>)
 80013f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013f8:	4b18      	ldr	r3, [pc, #96]	@ (800145c <MX_I2C2_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fe:	4b17      	ldr	r3, [pc, #92]	@ (800145c <MX_I2C2_Init+0x74>)
 8001400:	2201      	movs	r2, #1
 8001402:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b15      	ldr	r3, [pc, #84]	@ (800145c <MX_I2C2_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800140a:	4b14      	ldr	r3, [pc, #80]	@ (800145c <MX_I2C2_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001410:	4b12      	ldr	r3, [pc, #72]	@ (800145c <MX_I2C2_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <MX_I2C2_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141c:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <MX_I2C2_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001422:	480e      	ldr	r0, [pc, #56]	@ (800145c <MX_I2C2_Init+0x74>)
 8001424:	f002 fb00 	bl	8003a28 <HAL_I2C_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800142e:	f000 fc01 	bl	8001c34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001432:	2100      	movs	r1, #0
 8001434:	4809      	ldr	r0, [pc, #36]	@ (800145c <MX_I2C2_Init+0x74>)
 8001436:	f003 f883 	bl	8004540 <HAL_I2CEx_ConfigAnalogFilter>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001440:	f000 fbf8 	bl	8001c34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001444:	2100      	movs	r1, #0
 8001446:	4805      	ldr	r0, [pc, #20]	@ (800145c <MX_I2C2_Init+0x74>)
 8001448:	f003 f8c5 	bl	80045d6 <HAL_I2CEx_ConfigDigitalFilter>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001452:	f000 fbef 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200000e0 	.word	0x200000e0
 8001460:	40005800 	.word	0x40005800
 8001464:	00100d14 	.word	0x00100d14

08001468 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b096      	sub	sp, #88	@ 0x58
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800147a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	615a      	str	r2, [r3, #20]
 800148c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	222c      	movs	r2, #44	@ 0x2c
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f008 f9d7 	bl	8009848 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800149a:	4b39      	ldr	r3, [pc, #228]	@ (8001580 <MX_TIM1_Init+0x118>)
 800149c:	4a39      	ldr	r2, [pc, #228]	@ (8001584 <MX_TIM1_Init+0x11c>)
 800149e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014a0:	4b37      	ldr	r3, [pc, #220]	@ (8001580 <MX_TIM1_Init+0x118>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a6:	4b36      	ldr	r3, [pc, #216]	@ (8001580 <MX_TIM1_Init+0x118>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014ac:	4b34      	ldr	r3, [pc, #208]	@ (8001580 <MX_TIM1_Init+0x118>)
 80014ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b4:	4b32      	ldr	r3, [pc, #200]	@ (8001580 <MX_TIM1_Init+0x118>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ba:	4b31      	ldr	r3, [pc, #196]	@ (8001580 <MX_TIM1_Init+0x118>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001580 <MX_TIM1_Init+0x118>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80014c6:	482e      	ldr	r0, [pc, #184]	@ (8001580 <MX_TIM1_Init+0x118>)
 80014c8:	f004 fd2c 	bl	8005f24 <HAL_TIM_OC_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80014d2:	f000 fbaf 	bl	8001c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014e2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014e6:	4619      	mov	r1, r3
 80014e8:	4825      	ldr	r0, [pc, #148]	@ (8001580 <MX_TIM1_Init+0x118>)
 80014ea:	f005 fa97 	bl	8006a1c <HAL_TIMEx_MasterConfigSynchronization>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014f4:	f000 fb9e 	bl	8001c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 100;
 80014fc:	2364      	movs	r3, #100	@ 0x64
 80014fe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001500:	2300      	movs	r3, #0
 8001502:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001504:	2300      	movs	r3, #0
 8001506:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001514:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001518:	2200      	movs	r2, #0
 800151a:	4619      	mov	r1, r3
 800151c:	4818      	ldr	r0, [pc, #96]	@ (8001580 <MX_TIM1_Init+0x118>)
 800151e:	f004 fe5f 	bl	80061e0 <HAL_TIM_OC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001528:	f000 fb84 	bl	8001c34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001540:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001544:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800154e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	4807      	ldr	r0, [pc, #28]	@ (8001580 <MX_TIM1_Init+0x118>)
 8001562:	f005 fae3 	bl	8006b2c <HAL_TIMEx_ConfigBreakDeadTime>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800156c:	f000 fb62 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001570:	4803      	ldr	r0, [pc, #12]	@ (8001580 <MX_TIM1_Init+0x118>)
 8001572:	f000 fd25 	bl	8001fc0 <HAL_TIM_MspPostInit>

}
 8001576:	bf00      	nop
 8001578:	3758      	adds	r7, #88	@ 0x58
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000134 	.word	0x20000134
 8001584:	40012c00 	.word	0x40012c00

08001588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159e:	4b41      	ldr	r3, [pc, #260]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	4a40      	ldr	r2, [pc, #256]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015aa:	4b3e      	ldr	r3, [pc, #248]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b3b      	ldr	r3, [pc, #236]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ba:	4a3a      	ldr	r2, [pc, #232]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c2:	4b38      	ldr	r3, [pc, #224]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b35      	ldr	r3, [pc, #212]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	4a34      	ldr	r2, [pc, #208]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015da:	4b32      	ldr	r3, [pc, #200]	@ (80016a4 <MX_GPIO_Init+0x11c>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80015e6:	2200      	movs	r2, #0
 80015e8:	f24c 010f 	movw	r1, #49167	@ 0xc00f
 80015ec:	482e      	ldr	r0, [pc, #184]	@ (80016a8 <MX_GPIO_Init+0x120>)
 80015ee:	f002 f9d1 	bl	8003994 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2107      	movs	r1, #7
 80015f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015fa:	f002 f9cb 	bl	8003994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	f242 0102 	movw	r1, #8194	@ 0x2002
 8001604:	4829      	ldr	r0, [pc, #164]	@ (80016ac <MX_GPIO_Init+0x124>)
 8001606:	f002 f9c5 	bl	8003994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800160a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800160e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001610:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	4619      	mov	r1, r3
 8001620:	4821      	ldr	r0, [pc, #132]	@ (80016a8 <MX_GPIO_Init+0x120>)
 8001622:	f002 f80d 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 8001626:	f24c 030f 	movw	r3, #49167	@ 0xc00f
 800162a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	481a      	ldr	r0, [pc, #104]	@ (80016a8 <MX_GPIO_Init+0x120>)
 8001640:	f001 fffe 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : MC_Main_Pin PA1 PA2 */
  GPIO_InitStruct.Pin = MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2;
 8001644:	2307      	movs	r3, #7
 8001646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	2301      	movs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	4619      	mov	r1, r3
 800165a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165e:	f001 ffef 	bl	8003640 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 8001662:	f242 0302 	movw	r3, #8194	@ 0x2002
 8001666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001674:	f107 030c 	add.w	r3, r7, #12
 8001678:	4619      	mov	r1, r3
 800167a:	480c      	ldr	r0, [pc, #48]	@ (80016ac <MX_GPIO_Init+0x124>)
 800167c:	f001 ffe0 	bl	8003640 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2105      	movs	r1, #5
 8001684:	2028      	movs	r0, #40	@ 0x28
 8001686:	f001 fd87 	bl	8003198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800168a:	2028      	movs	r0, #40	@ 0x28
 800168c:	f001 fda0 	bl	80031d0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8001690:	2201      	movs	r2, #1
 8001692:	2101      	movs	r1, #1
 8001694:	4804      	ldr	r0, [pc, #16]	@ (80016a8 <MX_GPIO_Init+0x120>)
 8001696:	f002 f97d 	bl	8003994 <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_2 */
}
 800169a:	bf00      	nop
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	48000800 	.word	0x48000800
 80016ac:	48000400 	.word	0x48000400

080016b0 <Heart_Beat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Heart_Beat */
void Heart_Beat(void *argument)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	bool once = false;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  for(;;)
  {
	  if(kill_int){
 80016bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001730 <Heart_Beat+0x80>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d02b      	beq.n	800171c <Heart_Beat+0x6c>
		  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80016c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016c8:	481a      	ldr	r0, [pc, #104]	@ (8001734 <Heart_Beat+0x84>)
 80016ca:	f002 f94b 	bl	8003964 <HAL_GPIO_ReadPin>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d120      	bne.n	8001716 <Heart_Beat+0x66>
				  kill_switch = true;
 80016d4:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <Heart_Beat+0x88>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
				  TxData_status[1] |= (1 << 5); // Bit 5 = Kill switch enabled
 80016da:	4b18      	ldr	r3, [pc, #96]	@ (800173c <Heart_Beat+0x8c>)
 80016dc:	785b      	ldrb	r3, [r3, #1]
 80016de:	f043 0320 	orr.w	r3, r3, #32
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b15      	ldr	r3, [pc, #84]	@ (800173c <Heart_Beat+0x8c>)
 80016e6:	705a      	strb	r2, [r3, #1]

				  strobe = 1;
 80016e8:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <Heart_Beat+0x90>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	701a      	strb	r2, [r3, #0]
				  if (!once) {
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	f083 0301 	eor.w	r3, r3, #1
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d010      	beq.n	800171c <Heart_Beat+0x6c>
					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, SET); // Turn on kill switch LED
 80016fa:	2201      	movs	r2, #1
 80016fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001700:	480c      	ldr	r0, [pc, #48]	@ (8001734 <Heart_Beat+0x84>)
 8001702:	f002 f947 	bl	8003994 <HAL_GPIO_WritePin>
					  last_strobe_toggle_tick = HAL_GetTick();
 8001706:	f000 fdc3 	bl	8002290 <HAL_GetTick>
 800170a:	4603      	mov	r3, r0
 800170c:	4a0d      	ldr	r2, [pc, #52]	@ (8001744 <Heart_Beat+0x94>)
 800170e:	6013      	str	r3, [r2, #0]
					  once = true;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	e002      	b.n	800171c <Heart_Beat+0x6c>
				  }
		  } else {
			  kill_int = 0;
 8001716:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <Heart_Beat+0x80>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
		  }
	  }
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800171c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001720:	4809      	ldr	r0, [pc, #36]	@ (8001748 <Heart_Beat+0x98>)
 8001722:	f002 f94f 	bl	80039c4 <HAL_GPIO_TogglePin>
    osDelay(500);
 8001726:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800172a:	f005 fbbb 	bl	8006ea4 <osDelay>
	  if(kill_int){
 800172e:	e7c5      	b.n	80016bc <Heart_Beat+0xc>
 8001730:	200001e9 	.word	0x200001e9
 8001734:	48000800 	.word	0x48000800
 8001738:	200001a5 	.word	0x200001a5
 800173c:	200001d8 	.word	0x200001d8
 8001740:	200001e8 	.word	0x200001e8
 8001744:	200001e4 	.word	0x200001e4
 8001748:	48000400 	.word	0x48000400

0800174c <Update_Throttle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Update_Throttle */
void Update_Throttle(void *argument)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Update_Throttle */

  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1); //Start DAC 1 and 2
 8001754:	2100      	movs	r1, #0
 8001756:	4862      	ldr	r0, [pc, #392]	@ (80018e0 <Update_Throttle+0x194>)
 8001758:	f001 fd6a 	bl	8003230 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 800175c:	2110      	movs	r1, #16
 800175e:	4860      	ldr	r0, [pc, #384]	@ (80018e0 <Update_Throttle+0x194>)
 8001760:	f001 fd66 	bl	8003230 <HAL_DAC_Start>

  /* Infinite loop */
  for(;;)
  {
    if (HAL_GetTick() - last_throttle_recieved_tick > 300) {
 8001764:	f000 fd94 	bl	8002290 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	4b5e      	ldr	r3, [pc, #376]	@ (80018e4 <Update_Throttle+0x198>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001774:	d902      	bls.n	800177c <Update_Throttle+0x30>
      throttle = 0; // Set throttle to 0 if no message received for .3 second
 8001776:	4b5c      	ldr	r3, [pc, #368]	@ (80018e8 <Update_Throttle+0x19c>)
 8001778:	2200      	movs	r2, #0
 800177a:	801a      	strh	r2, [r3, #0]
    }

    if (throttle > 0) {
 800177c:	4b5a      	ldr	r3, [pc, #360]	@ (80018e8 <Update_Throttle+0x19c>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <Update_Throttle+0x44>
    	volatile int testing = 1000;
 8001784:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001788:	60fb      	str	r3, [r7, #12]
    	testing++;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3301      	adds	r3, #1
 800178e:	60fb      	str	r3, [r7, #12]
    }

    if (kill_switch || HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8001790:	4b56      	ldr	r3, [pc, #344]	@ (80018ec <Update_Throttle+0x1a0>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d107      	bne.n	80017a8 <Update_Throttle+0x5c>
 8001798:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800179c:	4854      	ldr	r0, [pc, #336]	@ (80018f0 <Update_Throttle+0x1a4>)
 800179e:	f002 f8e1 	bl	8003964 <HAL_GPIO_ReadPin>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d106      	bne.n	80017b6 <Update_Throttle+0x6a>
      HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // Set throttle to 0 if kill switch is on
 80017a8:	2300      	movs	r3, #0
 80017aa:	2200      	movs	r2, #0
 80017ac:	2110      	movs	r1, #16
 80017ae:	484c      	ldr	r0, [pc, #304]	@ (80018e0 <Update_Throttle+0x194>)
 80017b0:	f001 fde5 	bl	800337e <HAL_DAC_SetValue>
 80017b4:	e006      	b.n	80017c4 <Update_Throttle+0x78>
    }
    else {
	    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, throttle);
 80017b6:	4b4c      	ldr	r3, [pc, #304]	@ (80018e8 <Update_Throttle+0x19c>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	2200      	movs	r2, #0
 80017bc:	2110      	movs	r1, #16
 80017be:	4848      	ldr	r0, [pc, #288]	@ (80018e0 <Update_Throttle+0x194>)
 80017c0:	f001 fddd 	bl	800337e <HAL_DAC_SetValue>
    }


    if (regen_enable && throttle == 0) {
 80017c4:	4b4b      	ldr	r3, [pc, #300]	@ (80018f4 <Update_Throttle+0x1a8>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d008      	beq.n	80017de <Update_Throttle+0x92>
 80017cc:	4b46      	ldr	r3, [pc, #280]	@ (80018e8 <Update_Throttle+0x19c>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d104      	bne.n	80017de <Update_Throttle+0x92>
      regen = 2500; // also try 2048
 80017d4:	4b48      	ldr	r3, [pc, #288]	@ (80018f8 <Update_Throttle+0x1ac>)
 80017d6:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80017da:	801a      	strh	r2, [r3, #0]
 80017dc:	e002      	b.n	80017e4 <Update_Throttle+0x98>
    } else {
      regen = 0;
 80017de:	4b46      	ldr	r3, [pc, #280]	@ (80018f8 <Update_Throttle+0x1ac>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	801a      	strh	r2, [r3, #0]
    }
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, regen);
 80017e4:	4b44      	ldr	r3, [pc, #272]	@ (80018f8 <Update_Throttle+0x1ac>)
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	2200      	movs	r2, #0
 80017ea:	2100      	movs	r1, #0
 80017ec:	483c      	ldr	r0, [pc, #240]	@ (80018e0 <Update_Throttle+0x194>)
 80017ee:	f001 fdc6 	bl	800337e <HAL_DAC_SetValue>

	  //change for bistable relay
	  //gonna have to think about this section

    // i think these are active low (at least this top one is most likely, so im assuming the next one is too)
	  if(mc_main_ctrl){
 80017f2:	4b42      	ldr	r3, [pc, #264]	@ (80018fc <Update_Throttle+0x1b0>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d006      	beq.n	8001808 <Update_Throttle+0xbc>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2101      	movs	r1, #1
 80017fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001802:	f002 f8c7 	bl	8003994 <HAL_GPIO_WritePin>
 8001806:	e005      	b.n	8001814 <Update_Throttle+0xc8>
	  }else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001808:	2201      	movs	r2, #1
 800180a:	2101      	movs	r1, #1
 800180c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001810:	f002 f8c0 	bl	8003994 <HAL_GPIO_WritePin>
//	  }else{
//		  //open eco
//		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
//	  }

	  if(direction == true){
 8001814:	4b3a      	ldr	r3, [pc, #232]	@ (8001900 <Update_Throttle+0x1b4>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <Update_Throttle+0xde>
		  //closed forward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	2102      	movs	r1, #2
 8001820:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001824:	f002 f8b6 	bl	8003994 <HAL_GPIO_WritePin>
 8001828:	e005      	b.n	8001836 <Update_Throttle+0xea>
	  }else{
		  //open backward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 800182a:	2201      	movs	r2, #1
 800182c:	2102      	movs	r1, #2
 800182e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001832:	f002 f8af 	bl	8003994 <HAL_GPIO_WritePin>
	  }

    // enable precharger for 250ms before enabling array contactor
    if (array && start_array_process && precharge_start_tick == 0) {
 8001836:	4b33      	ldr	r3, [pc, #204]	@ (8001904 <Update_Throttle+0x1b8>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d014      	beq.n	8001868 <Update_Throttle+0x11c>
 800183e:	4b32      	ldr	r3, [pc, #200]	@ (8001908 <Update_Throttle+0x1bc>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d010      	beq.n	8001868 <Update_Throttle+0x11c>
 8001846:	4b31      	ldr	r3, [pc, #196]	@ (800190c <Update_Throttle+0x1c0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10c      	bne.n	8001868 <Update_Throttle+0x11c>
        array_precharge_contactor_en = true;
 800184e:	4b30      	ldr	r3, [pc, #192]	@ (8001910 <Update_Throttle+0x1c4>)
 8001850:	2201      	movs	r2, #1
 8001852:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET); // enable precharge contactor
 8001854:	2201      	movs	r2, #1
 8001856:	2104      	movs	r1, #4
 8001858:	4825      	ldr	r0, [pc, #148]	@ (80018f0 <Update_Throttle+0x1a4>)
 800185a:	f002 f89b 	bl	8003994 <HAL_GPIO_WritePin>
        precharge_start_tick = HAL_GetTick();
 800185e:	f000 fd17 	bl	8002290 <HAL_GetTick>
 8001862:	4603      	mov	r3, r0
 8001864:	4a29      	ldr	r2, [pc, #164]	@ (800190c <Update_Throttle+0x1c0>)
 8001866:	6013      	str	r3, [r2, #0]
    }
    if (precharge_start_tick && (HAL_GetTick() - precharge_start_tick > 250)) {
 8001868:	4b28      	ldr	r3, [pc, #160]	@ (800190c <Update_Throttle+0x1c0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d017      	beq.n	80018a0 <Update_Throttle+0x154>
 8001870:	f000 fd0e 	bl	8002290 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	4b25      	ldr	r3, [pc, #148]	@ (800190c <Update_Throttle+0x1c0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2bfa      	cmp	r3, #250	@ 0xfa
 800187e:	d90f      	bls.n	80018a0 <Update_Throttle+0x154>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET); // enable array contactor
 8001880:	2201      	movs	r2, #1
 8001882:	2108      	movs	r1, #8
 8001884:	481a      	ldr	r0, [pc, #104]	@ (80018f0 <Update_Throttle+0x1a4>)
 8001886:	f002 f885 	bl	8003994 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET); // disable precharge contactor
 800188a:	2200      	movs	r2, #0
 800188c:	2104      	movs	r1, #4
 800188e:	4818      	ldr	r0, [pc, #96]	@ (80018f0 <Update_Throttle+0x1a4>)
 8001890:	f002 f880 	bl	8003994 <HAL_GPIO_WritePin>
        start_array_process = false;
 8001894:	4b1c      	ldr	r3, [pc, #112]	@ (8001908 <Update_Throttle+0x1bc>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
        precharge_start_tick = 0;
 800189a:	4b1c      	ldr	r3, [pc, #112]	@ (800190c <Update_Throttle+0x1c0>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
    }

    if (!array && start_array_process) {
 80018a0:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <Update_Throttle+0x1b8>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	f083 0301 	eor.w	r3, r3, #1
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d013      	beq.n	80018d6 <Update_Throttle+0x18a>
 80018ae:	4b16      	ldr	r3, [pc, #88]	@ (8001908 <Update_Throttle+0x1bc>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00f      	beq.n	80018d6 <Update_Throttle+0x18a>
        array_precharge_contactor_en = false;
 80018b6:	4b16      	ldr	r3, [pc, #88]	@ (8001910 <Update_Throttle+0x1c4>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET); // disable precharge contactor
 80018bc:	2200      	movs	r2, #0
 80018be:	2104      	movs	r1, #4
 80018c0:	480b      	ldr	r0, [pc, #44]	@ (80018f0 <Update_Throttle+0x1a4>)
 80018c2:	f002 f867 	bl	8003994 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET); // disable array contactor
 80018c6:	2200      	movs	r2, #0
 80018c8:	2108      	movs	r1, #8
 80018ca:	4809      	ldr	r0, [pc, #36]	@ (80018f0 <Update_Throttle+0x1a4>)
 80018cc:	f002 f862 	bl	8003994 <HAL_GPIO_WritePin>
        start_array_process = false;
 80018d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001908 <Update_Throttle+0x1bc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
    }

	  osDelay(20);
 80018d6:	2014      	movs	r0, #20
 80018d8:	f005 fae4 	bl	8006ea4 <osDelay>
    if (HAL_GetTick() - last_throttle_recieved_tick > 300) {
 80018dc:	e742      	b.n	8001764 <Update_Throttle+0x18>
 80018de:	bf00      	nop
 80018e0:	200000cc 	.word	0x200000cc
 80018e4:	20000198 	.word	0x20000198
 80018e8:	20000190 	.word	0x20000190
 80018ec:	200001a5 	.word	0x200001a5
 80018f0:	48000800 	.word	0x48000800
 80018f4:	20000194 	.word	0x20000194
 80018f8:	20000192 	.word	0x20000192
 80018fc:	200001a2 	.word	0x200001a2
 8001900:	200001a1 	.word	0x200001a1
 8001904:	200001a3 	.word	0x200001a3
 8001908:	200001a6 	.word	0x200001a6
 800190c:	200001a8 	.word	0x200001a8
 8001910:	200001a7 	.word	0x200001a7

08001914 <Lights_Control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Lights_Control */
void Lights_Control(void *argument)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  //left_turn_active = true;

  /* Infinite loop */
  for(;;)
  {
	  if (blinkers_active) {
 800191c:	4b56      	ldr	r3, [pc, #344]	@ (8001a78 <Lights_Control+0x164>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d032      	beq.n	800198a <Lights_Control+0x76>
		  if (signal_counter < 5) {
 8001924:	4b55      	ldr	r3, [pc, #340]	@ (8001a7c <Lights_Control+0x168>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b04      	cmp	r3, #4
 800192a:	dc0b      	bgt.n	8001944 <Lights_Control+0x30>
        // rear left light
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001932:	4853      	ldr	r0, [pc, #332]	@ (8001a80 <Lights_Control+0x16c>)
 8001934:	f002 f82e 	bl	8003994 <HAL_GPIO_WritePin>
        // rear right light
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	2102      	movs	r1, #2
 800193c:	4850      	ldr	r0, [pc, #320]	@ (8001a80 <Lights_Control+0x16c>)
 800193e:	f002 f829 	bl	8003994 <HAL_GPIO_WritePin>
 8001942:	e00a      	b.n	800195a <Lights_Control+0x46>
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8001944:	2201      	movs	r2, #1
 8001946:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800194a:	484d      	ldr	r0, [pc, #308]	@ (8001a80 <Lights_Control+0x16c>)
 800194c:	f002 f822 	bl	8003994 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8001950:	2201      	movs	r2, #1
 8001952:	2102      	movs	r1, #2
 8001954:	484a      	ldr	r0, [pc, #296]	@ (8001a80 <Lights_Control+0x16c>)
 8001956:	f002 f81d 	bl	8003994 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 800195a:	4b48      	ldr	r3, [pc, #288]	@ (8001a7c <Lights_Control+0x168>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	3301      	adds	r3, #1
 8001960:	4a46      	ldr	r2, [pc, #280]	@ (8001a7c <Lights_Control+0x168>)
 8001962:	6013      	str	r3, [r2, #0]
		  signal_counter = signal_counter%10;
 8001964:	4b45      	ldr	r3, [pc, #276]	@ (8001a7c <Lights_Control+0x168>)
 8001966:	6819      	ldr	r1, [r3, #0]
 8001968:	4b46      	ldr	r3, [pc, #280]	@ (8001a84 <Lights_Control+0x170>)
 800196a:	fb83 2301 	smull	r2, r3, r3, r1
 800196e:	109a      	asrs	r2, r3, #2
 8001970:	17cb      	asrs	r3, r1, #31
 8001972:	1ad2      	subs	r2, r2, r3
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	1aca      	subs	r2, r1, r3
 800197e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a7c <Lights_Control+0x168>)
 8001980:	601a      	str	r2, [r3, #0]
		  osDelay(100);
 8001982:	2064      	movs	r0, #100	@ 0x64
 8001984:	f005 fa8e 	bl	8006ea4 <osDelay>
		  continue;
 8001988:	e074      	b.n	8001a74 <Lights_Control+0x160>
	  }

	  if(left_turn_active){
 800198a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a88 <Lights_Control+0x174>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d016      	beq.n	80019c0 <Lights_Control+0xac>
		  if(signal_counter < 5){
 8001992:	4b3a      	ldr	r3, [pc, #232]	@ (8001a7c <Lights_Control+0x168>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b04      	cmp	r3, #4
 8001998:	dc06      	bgt.n	80019a8 <Lights_Control+0x94>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019a0:	4837      	ldr	r0, [pc, #220]	@ (8001a80 <Lights_Control+0x16c>)
 80019a2:	f001 fff7 	bl	8003994 <HAL_GPIO_WritePin>
 80019a6:	e005      	b.n	80019b4 <Lights_Control+0xa0>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019ae:	4834      	ldr	r0, [pc, #208]	@ (8001a80 <Lights_Control+0x16c>)
 80019b0:	f001 fff0 	bl	8003994 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 80019b4:	4b31      	ldr	r3, [pc, #196]	@ (8001a7c <Lights_Control+0x168>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	4a30      	ldr	r2, [pc, #192]	@ (8001a7c <Lights_Control+0x168>)
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e010      	b.n	80019e2 <Lights_Control+0xce>

	  }else{
		  if(brakes_active){
 80019c0:	4b32      	ldr	r3, [pc, #200]	@ (8001a8c <Lights_Control+0x178>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <Lights_Control+0xc2>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 80019c8:	2201      	movs	r2, #1
 80019ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019ce:	482c      	ldr	r0, [pc, #176]	@ (8001a80 <Lights_Control+0x16c>)
 80019d0:	f001 ffe0 	bl	8003994 <HAL_GPIO_WritePin>
 80019d4:	e005      	b.n	80019e2 <Lights_Control+0xce>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019dc:	4828      	ldr	r0, [pc, #160]	@ (8001a80 <Lights_Control+0x16c>)
 80019de:	f001 ffd9 	bl	8003994 <HAL_GPIO_WritePin>
		  }
	  }

	  if(right_turn_active){
 80019e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a90 <Lights_Control+0x17c>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d014      	beq.n	8001a14 <Lights_Control+0x100>
		  if(signal_counter < 5){
 80019ea:	4b24      	ldr	r3, [pc, #144]	@ (8001a7c <Lights_Control+0x168>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	dc05      	bgt.n	80019fe <Lights_Control+0xea>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2102      	movs	r1, #2
 80019f6:	4822      	ldr	r0, [pc, #136]	@ (8001a80 <Lights_Control+0x16c>)
 80019f8:	f001 ffcc 	bl	8003994 <HAL_GPIO_WritePin>
 80019fc:	e004      	b.n	8001a08 <Lights_Control+0xf4>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 80019fe:	2201      	movs	r2, #1
 8001a00:	2102      	movs	r1, #2
 8001a02:	481f      	ldr	r0, [pc, #124]	@ (8001a80 <Lights_Control+0x16c>)
 8001a04:	f001 ffc6 	bl	8003994 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 8001a08:	4b1c      	ldr	r3, [pc, #112]	@ (8001a7c <Lights_Control+0x168>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001a7c <Lights_Control+0x168>)
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e00e      	b.n	8001a32 <Lights_Control+0x11e>
	  }
	  else{
		  if(brakes_active){
 8001a14:	4b1d      	ldr	r3, [pc, #116]	@ (8001a8c <Lights_Control+0x178>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <Lights_Control+0x114>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	2102      	movs	r1, #2
 8001a20:	4817      	ldr	r0, [pc, #92]	@ (8001a80 <Lights_Control+0x16c>)
 8001a22:	f001 ffb7 	bl	8003994 <HAL_GPIO_WritePin>
 8001a26:	e004      	b.n	8001a32 <Lights_Control+0x11e>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2102      	movs	r1, #2
 8001a2c:	4814      	ldr	r0, [pc, #80]	@ (8001a80 <Lights_Control+0x16c>)
 8001a2e:	f001 ffb1 	bl	8003994 <HAL_GPIO_WritePin>
		  }
	  }

	  if(brakes_active){
 8001a32:	4b16      	ldr	r3, [pc, #88]	@ (8001a8c <Lights_Control+0x178>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d005      	beq.n	8001a46 <Lights_Control+0x132>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET); //sets center rear light (brake light)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	4810      	ldr	r0, [pc, #64]	@ (8001a80 <Lights_Control+0x16c>)
 8001a40:	f001 ffa8 	bl	8003994 <HAL_GPIO_WritePin>
 8001a44:	e004      	b.n	8001a50 <Lights_Control+0x13c>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2101      	movs	r1, #1
 8001a4a:	480d      	ldr	r0, [pc, #52]	@ (8001a80 <Lights_Control+0x16c>)
 8001a4c:	f001 ffa2 	bl	8003994 <HAL_GPIO_WritePin>
	  }
	  signal_counter = signal_counter%10;
 8001a50:	4b0a      	ldr	r3, [pc, #40]	@ (8001a7c <Lights_Control+0x168>)
 8001a52:	6819      	ldr	r1, [r3, #0]
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <Lights_Control+0x170>)
 8001a56:	fb83 2301 	smull	r2, r3, r3, r1
 8001a5a:	109a      	asrs	r2, r3, #2
 8001a5c:	17cb      	asrs	r3, r1, #31
 8001a5e:	1ad2      	subs	r2, r2, r3
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	1aca      	subs	r2, r1, r3
 8001a6a:	4b04      	ldr	r3, [pc, #16]	@ (8001a7c <Lights_Control+0x168>)
 8001a6c:	601a      	str	r2, [r3, #0]
	  osDelay(100);
 8001a6e:	2064      	movs	r0, #100	@ 0x64
 8001a70:	f005 fa18 	bl	8006ea4 <osDelay>
	  if (blinkers_active) {
 8001a74:	e752      	b.n	800191c <Lights_Control+0x8>
 8001a76:	bf00      	nop
 8001a78:	2000019d 	.word	0x2000019d
 8001a7c:	200001b0 	.word	0x200001b0
 8001a80:	48000800 	.word	0x48000800
 8001a84:	66666667 	.word	0x66666667
 8001a88:	2000019e 	.word	0x2000019e
 8001a8c:	2000019c 	.word	0x2000019c
 8001a90:	2000019f 	.word	0x2000019f

08001a94 <Read_Sensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Read_Sensors */
void Read_Sensors(void *argument)
{
 8001a94:	b5b0      	push	{r4, r5, r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Read_Sensors */

	TxHeader_status.IDE = CAN_ID_STD; // Standard ID (not extended)
 8001a9c:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd8 <Read_Sensors+0x144>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
	TxHeader_status.StdId = 0x07; // 11 bit Identifier
 8001aa2:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd8 <Read_Sensors+0x144>)
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	601a      	str	r2, [r3, #0]
	TxHeader_status.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8001aa8:	4b4b      	ldr	r3, [pc, #300]	@ (8001bd8 <Read_Sensors+0x144>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
	TxHeader_status.DLC = 8; // 8 bytes being transmitted
 8001aae:	4b4a      	ldr	r3, [pc, #296]	@ (8001bd8 <Read_Sensors+0x144>)
 8001ab0:	2208      	movs	r2, #8
 8001ab2:	611a      	str	r2, [r3, #16]

	//Message ID 2 for VCU
	TxData_status[0] = 7;
 8001ab4:	4b49      	ldr	r3, [pc, #292]	@ (8001bdc <Read_Sensors+0x148>)
 8001ab6:	2207      	movs	r2, #7
 8001ab8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  for(;;)
  {

    if (strobe && HAL_GetTick() - last_strobe_toggle_tick > 500) {
 8001aba:	4b49      	ldr	r3, [pc, #292]	@ (8001be0 <Read_Sensors+0x14c>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d012      	beq.n	8001ae8 <Read_Sensors+0x54>
 8001ac2:	f000 fbe5 	bl	8002290 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	4b46      	ldr	r3, [pc, #280]	@ (8001be4 <Read_Sensors+0x150>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ad2:	d909      	bls.n	8001ae8 <Read_Sensors+0x54>
      last_strobe_toggle_tick = HAL_GetTick();
 8001ad4:	f000 fbdc 	bl	8002290 <HAL_GetTick>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a42      	ldr	r2, [pc, #264]	@ (8001be4 <Read_Sensors+0x150>)
 8001adc:	6013      	str	r3, [r2, #0]
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15); // Toggle strobe LED
 8001ade:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ae2:	4841      	ldr	r0, [pc, #260]	@ (8001be8 <Read_Sensors+0x154>)
 8001ae4:	f001 ff6e 	bl	80039c4 <HAL_GPIO_TogglePin>
    }

	  //INA226_t *data = (INA226_t *)argument;
	  INA226_IVP.current = getCurrentAmp(&INA226_IVP);
 8001ae8:	4840      	ldr	r0, [pc, #256]	@ (8001bec <Read_Sensors+0x158>)
 8001aea:	f7ff f8cd 	bl	8000c88 <getCurrentAmp>
 8001aee:	eef0 7a40 	vmov.f32	s15, s0
 8001af2:	4b3e      	ldr	r3, [pc, #248]	@ (8001bec <Read_Sensors+0x158>)
 8001af4:	edc3 7a08 	vstr	s15, [r3, #32]
	  INA226_IVP.power = getPowerWatt(&INA226_IVP);
 8001af8:	483c      	ldr	r0, [pc, #240]	@ (8001bec <Read_Sensors+0x158>)
 8001afa:	f7ff f921 	bl	8000d40 <getPowerWatt>
 8001afe:	eef0 7a40 	vmov.f32	s15, s0
 8001b02:	4b3a      	ldr	r3, [pc, #232]	@ (8001bec <Read_Sensors+0x158>)
 8001b04:	edc3 7a07 	vstr	s15, [r3, #28]

    union FloatBytes power;
    power.f = INA226_IVP.power;
 8001b08:	4b38      	ldr	r3, [pc, #224]	@ (8001bec <Read_Sensors+0x158>)
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	60bb      	str	r3, [r7, #8]

	  //Assign CAN message
	  TxData_status[2] = power.bytes[0]; //LSB
 8001b0e:	7a3a      	ldrb	r2, [r7, #8]
 8001b10:	4b32      	ldr	r3, [pc, #200]	@ (8001bdc <Read_Sensors+0x148>)
 8001b12:	709a      	strb	r2, [r3, #2]
	  TxData_status[3] = power.bytes[1];
 8001b14:	7a7a      	ldrb	r2, [r7, #9]
 8001b16:	4b31      	ldr	r3, [pc, #196]	@ (8001bdc <Read_Sensors+0x148>)
 8001b18:	70da      	strb	r2, [r3, #3]
	  TxData_status[4] = power.bytes[2];
 8001b1a:	7aba      	ldrb	r2, [r7, #10]
 8001b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bdc <Read_Sensors+0x148>)
 8001b1e:	711a      	strb	r2, [r3, #4]
	  TxData_status[5] = power.bytes[3]; //MSB
 8001b20:	7afa      	ldrb	r2, [r7, #11]
 8001b22:	4b2e      	ldr	r3, [pc, #184]	@ (8001bdc <Read_Sensors+0x148>)
 8001b24:	715a      	strb	r2, [r3, #5]
		  HAL_CAN_BUSY++;
	  }
*/

    // also send status message
    TxData_status[1] = 0; // Reset status byte
 8001b26:	4b2d      	ldr	r3, [pc, #180]	@ (8001bdc <Read_Sensors+0x148>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	705a      	strb	r2, [r3, #1]
    // for byte 1, bit 0 = mc, bit 1 = array, bit 2 = kill switch
    if (mc_main_ctrl)
 8001b2c:	4b30      	ldr	r3, [pc, #192]	@ (8001bf0 <Read_Sensors+0x15c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <Read_Sensors+0xae>
        TxData_status[1] |= (1 << 0); // Bit 0 = MC status
 8001b34:	4b29      	ldr	r3, [pc, #164]	@ (8001bdc <Read_Sensors+0x148>)
 8001b36:	785b      	ldrb	r3, [r3, #1]
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4b27      	ldr	r3, [pc, #156]	@ (8001bdc <Read_Sensors+0x148>)
 8001b40:	705a      	strb	r2, [r3, #1]
    if (array)
 8001b42:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <Read_Sensors+0x160>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <Read_Sensors+0xc4>
        TxData_status[1] |= (1 << 2); // Bit 2 = array status 
 8001b4a:	4b24      	ldr	r3, [pc, #144]	@ (8001bdc <Read_Sensors+0x148>)
 8001b4c:	785b      	ldrb	r3, [r3, #1]
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <Read_Sensors+0x148>)
 8001b56:	705a      	strb	r2, [r3, #1]
    if (direction)
 8001b58:	4b27      	ldr	r3, [pc, #156]	@ (8001bf8 <Read_Sensors+0x164>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d006      	beq.n	8001b6e <Read_Sensors+0xda>
        TxData_status[1] |= (1 << 3); // Bit 3 = Direction status
 8001b60:	4b1e      	ldr	r3, [pc, #120]	@ (8001bdc <Read_Sensors+0x148>)
 8001b62:	785b      	ldrb	r3, [r3, #1]
 8001b64:	f043 0308 	orr.w	r3, r3, #8
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <Read_Sensors+0x148>)
 8001b6c:	705a      	strb	r2, [r3, #1]
    if(kill_switch)
 8001b6e:	4b23      	ldr	r3, [pc, #140]	@ (8001bfc <Read_Sensors+0x168>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <Read_Sensors+0xf0>
    	TxData_status[1] |= (1 << 4); // Bit 4 = Kill switch status
 8001b76:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <Read_Sensors+0x148>)
 8001b78:	785b      	ldrb	r3, [r3, #1]
 8001b7a:	f043 0310 	orr.w	r3, r3, #16
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <Read_Sensors+0x148>)
 8001b82:	705a      	strb	r2, [r3, #1]

    while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8001b84:	bf00      	nop
 8001b86:	481e      	ldr	r0, [pc, #120]	@ (8001c00 <Read_Sensors+0x16c>)
 8001b88:	f000 fea2 	bl	80028d0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f9      	beq.n	8001b86 <Read_Sensors+0xf2>
    HAL_StatusTypeDef status2;
    status2 = HAL_CAN_AddTxMessage(&hcan1, &TxHeader_status, TxData_status, &TxMailbox_status);
 8001b92:	4b1c      	ldr	r3, [pc, #112]	@ (8001c04 <Read_Sensors+0x170>)
 8001b94:	4a11      	ldr	r2, [pc, #68]	@ (8001bdc <Read_Sensors+0x148>)
 8001b96:	4910      	ldr	r1, [pc, #64]	@ (8001bd8 <Read_Sensors+0x144>)
 8001b98:	4819      	ldr	r0, [pc, #100]	@ (8001c00 <Read_Sensors+0x16c>)
 8001b9a:	f000 fdc9 	bl	8002730 <HAL_CAN_AddTxMessage>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	73fb      	strb	r3, [r7, #15]
    messages_sent++;
 8001ba2:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <Read_Sensors+0x174>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	1c54      	adds	r4, r2, #1
 8001baa:	f143 0500 	adc.w	r5, r3, #0
 8001bae:	4b16      	ldr	r3, [pc, #88]	@ (8001c08 <Read_Sensors+0x174>)
 8001bb0:	e9c3 4500 	strd	r4, r5, [r3]
    if (status2 == HAL_ERROR){
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d102      	bne.n	8001bc0 <Read_Sensors+0x12c>
        Error_Handler();
 8001bba:	f000 f83b 	bl	8001c34 <Error_Handler>
 8001bbe:	e007      	b.n	8001bd0 <Read_Sensors+0x13c>
    }
    else if(status2 == HAL_BUSY){
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d104      	bne.n	8001bd0 <Read_Sensors+0x13c>
        HAL_CAN_BUSY++;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <Read_Sensors+0x178>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8001c0c <Read_Sensors+0x178>)
 8001bce:	6013      	str	r3, [r2, #0]
    }

    osDelay(10);
 8001bd0:	200a      	movs	r0, #10
 8001bd2:	f005 f967 	bl	8006ea4 <osDelay>
  {
 8001bd6:	e770      	b.n	8001aba <Read_Sensors+0x26>
 8001bd8:	200001c0 	.word	0x200001c0
 8001bdc:	200001d8 	.word	0x200001d8
 8001be0:	200001e8 	.word	0x200001e8
 8001be4:	200001e4 	.word	0x200001e4
 8001be8:	48000800 	.word	0x48000800
 8001bec:	200001f0 	.word	0x200001f0
 8001bf0:	200001a2 	.word	0x200001a2
 8001bf4:	200001a3 	.word	0x200001a3
 8001bf8:	200001a1 	.word	0x200001a1
 8001bfc:	200001a5 	.word	0x200001a5
 8001c00:	2000007c 	.word	0x2000007c
 8001c04:	200001e0 	.word	0x200001e0
 8001c08:	200001b8 	.word	0x200001b8
 8001c0c:	200001b4 	.word	0x200001b4

08001c10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a04      	ldr	r2, [pc, #16]	@ (8001c30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d101      	bne.n	8001c26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c22:	f000 fb21 	bl	8002268 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40001000 	.word	0x40001000

08001c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c38:	b672      	cpsid	i
}
 8001c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // Set throttle to 0 if kill switch is on
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	2200      	movs	r2, #0
 8001c40:	2110      	movs	r1, #16
 8001c42:	4805      	ldr	r0, [pc, #20]	@ (8001c58 <Error_Handler+0x24>)
 8001c44:	f001 fb9b 	bl	800337e <HAL_DAC_SetValue>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // should turn off mc
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c50:	f001 fea0 	bl	8003994 <HAL_GPIO_WritePin>
  
  while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <Error_Handler+0x20>
 8001c58:	200000cc 	.word	0x200000cc

08001c5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c62:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_MspInit+0x4c>)
 8001c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c66:	4a10      	ldr	r2, [pc, #64]	@ (8001ca8 <HAL_MspInit+0x4c>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <HAL_MspInit+0x4c>)
 8001c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <HAL_MspInit+0x4c>)
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <HAL_MspInit+0x4c>)
 8001c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c84:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c86:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <HAL_MspInit+0x4c>)
 8001c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c8e:	603b      	str	r3, [r7, #0]
 8001c90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	210f      	movs	r1, #15
 8001c96:	f06f 0001 	mvn.w	r0, #1
 8001c9a:	f001 fa7d 	bl	8003198 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40021000 	.word	0x40021000

08001cac <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	@ 0x30
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a56      	ldr	r2, [pc, #344]	@ (8001e24 <HAL_CAN_MspInit+0x178>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d14b      	bne.n	8001d66 <HAL_CAN_MspInit+0xba>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001cce:	4b56      	ldr	r3, [pc, #344]	@ (8001e28 <HAL_CAN_MspInit+0x17c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	4a54      	ldr	r2, [pc, #336]	@ (8001e28 <HAL_CAN_MspInit+0x17c>)
 8001cd6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001cd8:	4b53      	ldr	r3, [pc, #332]	@ (8001e28 <HAL_CAN_MspInit+0x17c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d10b      	bne.n	8001cf8 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001ce0:	4b52      	ldr	r3, [pc, #328]	@ (8001e2c <HAL_CAN_MspInit+0x180>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce4:	4a51      	ldr	r2, [pc, #324]	@ (8001e2c <HAL_CAN_MspInit+0x180>)
 8001ce6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cec:	4b4f      	ldr	r3, [pc, #316]	@ (8001e2c <HAL_CAN_MspInit+0x180>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf8:	4b4c      	ldr	r3, [pc, #304]	@ (8001e2c <HAL_CAN_MspInit+0x180>)
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfc:	4a4b      	ldr	r2, [pc, #300]	@ (8001e2c <HAL_CAN_MspInit+0x180>)
 8001cfe:	f043 0302 	orr.w	r3, r3, #2
 8001d02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d04:	4b49      	ldr	r3, [pc, #292]	@ (8001e2c <HAL_CAN_MspInit+0x180>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d22:	2309      	movs	r3, #9
 8001d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	f107 031c 	add.w	r3, r7, #28
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4840      	ldr	r0, [pc, #256]	@ (8001e30 <HAL_CAN_MspInit+0x184>)
 8001d2e:	f001 fc87 	bl	8003640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d40:	2303      	movs	r3, #3
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d44:	2309      	movs	r3, #9
 8001d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4838      	ldr	r0, [pc, #224]	@ (8001e30 <HAL_CAN_MspInit+0x184>)
 8001d50:	f001 fc76 	bl	8003640 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2105      	movs	r1, #5
 8001d58:	2014      	movs	r0, #20
 8001d5a:	f001 fa1d 	bl	8003198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001d5e:	2014      	movs	r0, #20
 8001d60:	f001 fa36 	bl	80031d0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001d64:	e059      	b.n	8001e1a <HAL_CAN_MspInit+0x16e>
  else if(hcan->Instance==CAN2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a32      	ldr	r2, [pc, #200]	@ (8001e34 <HAL_CAN_MspInit+0x188>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d154      	bne.n	8001e1a <HAL_CAN_MspInit+0x16e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001d70:	4b2e      	ldr	r3, [pc, #184]	@ (8001e2c <HAL_CAN_MspInit+0x180>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d74:	4a2d      	ldr	r2, [pc, #180]	@ (8001e2c <HAL_CAN_MspInit+0x180>)
 8001d76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e2c <HAL_CAN_MspInit+0x180>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001d88:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <HAL_CAN_MspInit+0x17c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	4a26      	ldr	r2, [pc, #152]	@ (8001e28 <HAL_CAN_MspInit+0x17c>)
 8001d90:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001d92:	4b25      	ldr	r3, [pc, #148]	@ (8001e28 <HAL_CAN_MspInit+0x17c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d10b      	bne.n	8001db2 <HAL_CAN_MspInit+0x106>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001d9a:	4b24      	ldr	r3, [pc, #144]	@ (8001e2c <HAL_CAN_MspInit+0x180>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9e:	4a23      	ldr	r2, [pc, #140]	@ (8001e2c <HAL_CAN_MspInit+0x180>)
 8001da0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001da4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001da6:	4b21      	ldr	r3, [pc, #132]	@ (8001e2c <HAL_CAN_MspInit+0x180>)
 8001da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e2c <HAL_CAN_MspInit+0x180>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db6:	4a1d      	ldr	r2, [pc, #116]	@ (8001e2c <HAL_CAN_MspInit+0x180>)
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001e2c <HAL_CAN_MspInit+0x180>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001dca:	2320      	movs	r3, #32
 8001dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	4619      	mov	r1, r3
 8001de4:	4812      	ldr	r0, [pc, #72]	@ (8001e30 <HAL_CAN_MspInit+0x184>)
 8001de6:	f001 fc2b 	bl	8003640 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dea:	2340      	movs	r3, #64	@ 0x40
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df6:	2303      	movs	r3, #3
 8001df8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001dfa:	2308      	movs	r3, #8
 8001dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfe:	f107 031c 	add.w	r3, r7, #28
 8001e02:	4619      	mov	r1, r3
 8001e04:	480a      	ldr	r0, [pc, #40]	@ (8001e30 <HAL_CAN_MspInit+0x184>)
 8001e06:	f001 fc1b 	bl	8003640 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2105      	movs	r1, #5
 8001e0e:	2057      	movs	r0, #87	@ 0x57
 8001e10:	f001 f9c2 	bl	8003198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001e14:	2057      	movs	r0, #87	@ 0x57
 8001e16:	f001 f9db 	bl	80031d0 <HAL_NVIC_EnableIRQ>
}
 8001e1a:	bf00      	nop
 8001e1c:	3730      	adds	r7, #48	@ 0x30
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40006400 	.word	0x40006400
 8001e28:	20000218 	.word	0x20000218
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	48000400 	.word	0x48000400
 8001e34:	40006800 	.word	0x40006800

08001e38 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	@ 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a19      	ldr	r2, [pc, #100]	@ (8001ebc <HAL_DAC_MspInit+0x84>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d12c      	bne.n	8001eb4 <HAL_DAC_MspInit+0x7c>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001e5a:	4b19      	ldr	r3, [pc, #100]	@ (8001ec0 <HAL_DAC_MspInit+0x88>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5e:	4a18      	ldr	r2, [pc, #96]	@ (8001ec0 <HAL_DAC_MspInit+0x88>)
 8001e60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001e64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e66:	4b16      	ldr	r3, [pc, #88]	@ (8001ec0 <HAL_DAC_MspInit+0x88>)
 8001e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <HAL_DAC_MspInit+0x88>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e76:	4a12      	ldr	r2, [pc, #72]	@ (8001ec0 <HAL_DAC_MspInit+0x88>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <HAL_DAC_MspInit+0x88>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e8a:	2330      	movs	r3, #48	@ 0x30
 8001e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ea0:	f001 fbce 	bl	8003640 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	210f      	movs	r1, #15
 8001ea8:	2036      	movs	r0, #54	@ 0x36
 8001eaa:	f001 f975 	bl	8003198 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001eae:	2036      	movs	r0, #54	@ 0x36
 8001eb0:	f001 f98e 	bl	80031d0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001eb4:	bf00      	nop
 8001eb6:	3728      	adds	r7, #40	@ 0x28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40007400 	.word	0x40007400
 8001ec0:	40021000 	.word	0x40021000

08001ec4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b0ac      	sub	sp, #176	@ 0xb0
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	228c      	movs	r2, #140	@ 0x8c
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f007 fcaf 	bl	8009848 <memset>
  if(hi2c->Instance==I2C2)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a21      	ldr	r2, [pc, #132]	@ (8001f74 <HAL_I2C_MspInit+0xb0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d13b      	bne.n	8001f6c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ef4:	2380      	movs	r3, #128	@ 0x80
 8001ef6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	4618      	mov	r0, r3
 8001f02:	f003 fa73 	bl	80053ec <HAL_RCCEx_PeriphCLKConfig>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f0c:	f7ff fe92 	bl	8001c34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f10:	4b19      	ldr	r3, [pc, #100]	@ (8001f78 <HAL_I2C_MspInit+0xb4>)
 8001f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f14:	4a18      	ldr	r2, [pc, #96]	@ (8001f78 <HAL_I2C_MspInit+0xb4>)
 8001f16:	f043 0302 	orr.w	r3, r3, #2
 8001f1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f1c:	4b16      	ldr	r3, [pc, #88]	@ (8001f78 <HAL_I2C_MspInit+0xb4>)
 8001f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f28:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f30:	2312      	movs	r3, #18
 8001f32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f42:	2304      	movs	r3, #4
 8001f44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	480b      	ldr	r0, [pc, #44]	@ (8001f7c <HAL_I2C_MspInit+0xb8>)
 8001f50:	f001 fb76 	bl	8003640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <HAL_I2C_MspInit+0xb4>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f58:	4a07      	ldr	r2, [pc, #28]	@ (8001f78 <HAL_I2C_MspInit+0xb4>)
 8001f5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f60:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <HAL_I2C_MspInit+0xb4>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001f6c:	bf00      	nop
 8001f6e:	37b0      	adds	r7, #176	@ 0xb0
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40005800 	.word	0x40005800
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	48000400 	.word	0x48000400

08001f80 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001fb8 <HAL_TIM_OC_MspInit+0x38>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d10b      	bne.n	8001faa <HAL_TIM_OC_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <HAL_TIM_OC_MspInit+0x3c>)
 8001f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f96:	4a09      	ldr	r2, [pc, #36]	@ (8001fbc <HAL_TIM_OC_MspInit+0x3c>)
 8001f98:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f9e:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <HAL_TIM_OC_MspInit+0x3c>)
 8001fa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40012c00 	.word	0x40012c00
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a12      	ldr	r2, [pc, #72]	@ (8002028 <HAL_TIM_MspPostInit+0x68>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d11d      	bne.n	800201e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe2:	4b12      	ldr	r3, [pc, #72]	@ (800202c <HAL_TIM_MspPostInit+0x6c>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe6:	4a11      	ldr	r2, [pc, #68]	@ (800202c <HAL_TIM_MspPostInit+0x6c>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fee:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <HAL_TIM_MspPostInit+0x6c>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
 8001ff8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ffa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ffe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800200c:	2301      	movs	r3, #1
 800200e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	4619      	mov	r1, r3
 8002016:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800201a:	f001 fb11 	bl	8003640 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800201e:	bf00      	nop
 8002020:	3720      	adds	r7, #32
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40012c00 	.word	0x40012c00
 800202c:	40021000 	.word	0x40021000

08002030 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08e      	sub	sp, #56	@ 0x38
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800203e:	4b34      	ldr	r3, [pc, #208]	@ (8002110 <HAL_InitTick+0xe0>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002042:	4a33      	ldr	r2, [pc, #204]	@ (8002110 <HAL_InitTick+0xe0>)
 8002044:	f043 0310 	orr.w	r3, r3, #16
 8002048:	6593      	str	r3, [r2, #88]	@ 0x58
 800204a:	4b31      	ldr	r3, [pc, #196]	@ (8002110 <HAL_InitTick+0xe0>)
 800204c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002056:	f107 0210 	add.w	r2, r7, #16
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4611      	mov	r1, r2
 8002060:	4618      	mov	r0, r3
 8002062:	f003 f931 	bl	80052c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800206a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800206c:	2b00      	cmp	r3, #0
 800206e:	d103      	bne.n	8002078 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002070:	f003 f914 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 8002074:	6378      	str	r0, [r7, #52]	@ 0x34
 8002076:	e004      	b.n	8002082 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002078:	f003 f910 	bl	800529c <HAL_RCC_GetPCLK1Freq>
 800207c:	4603      	mov	r3, r0
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002084:	4a23      	ldr	r2, [pc, #140]	@ (8002114 <HAL_InitTick+0xe4>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	0c9b      	lsrs	r3, r3, #18
 800208c:	3b01      	subs	r3, #1
 800208e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002090:	4b21      	ldr	r3, [pc, #132]	@ (8002118 <HAL_InitTick+0xe8>)
 8002092:	4a22      	ldr	r2, [pc, #136]	@ (800211c <HAL_InitTick+0xec>)
 8002094:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002096:	4b20      	ldr	r3, [pc, #128]	@ (8002118 <HAL_InitTick+0xe8>)
 8002098:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800209c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800209e:	4a1e      	ldr	r2, [pc, #120]	@ (8002118 <HAL_InitTick+0xe8>)
 80020a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80020a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002118 <HAL_InitTick+0xe8>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002118 <HAL_InitTick+0xe8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b0:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <HAL_InitTick+0xe8>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80020b6:	4818      	ldr	r0, [pc, #96]	@ (8002118 <HAL_InitTick+0xe8>)
 80020b8:	f003 fe62 	bl	8005d80 <HAL_TIM_Base_Init>
 80020bc:	4603      	mov	r3, r0
 80020be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80020c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d11b      	bne.n	8002102 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80020ca:	4813      	ldr	r0, [pc, #76]	@ (8002118 <HAL_InitTick+0xe8>)
 80020cc:	f003 feba 	bl	8005e44 <HAL_TIM_Base_Start_IT>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80020d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d111      	bne.n	8002102 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020de:	2036      	movs	r0, #54	@ 0x36
 80020e0:	f001 f876 	bl	80031d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	d808      	bhi.n	80020fc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80020ea:	2200      	movs	r2, #0
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	2036      	movs	r0, #54	@ 0x36
 80020f0:	f001 f852 	bl	8003198 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002120 <HAL_InitTick+0xf0>)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e002      	b.n	8002102 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002102:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002106:	4618      	mov	r0, r3
 8002108:	3738      	adds	r7, #56	@ 0x38
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40021000 	.word	0x40021000
 8002114:	431bde83 	.word	0x431bde83
 8002118:	2000021c 	.word	0x2000021c
 800211c:	40001000 	.word	0x40001000
 8002120:	20000004 	.word	0x20000004

08002124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <NMI_Handler+0x4>

0800212c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <HardFault_Handler+0x4>

08002134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002138:	bf00      	nop
 800213a:	e7fd      	b.n	8002138 <MemManage_Handler+0x4>

0800213c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <BusFault_Handler+0x4>

08002144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <UsageFault_Handler+0x4>

0800214c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002160:	4802      	ldr	r0, [pc, #8]	@ (800216c <CAN1_RX0_IRQHandler+0x10>)
 8002162:	f000 fd32 	bl	8002bca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	2000007c 	.word	0x2000007c

08002170 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002174:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002178:	f001 fc3e 	bl	80039f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}

08002180 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (htim6.Instance != NULL)
 8002184:	4b07      	ldr	r3, [pc, #28]	@ (80021a4 <TIM6_DAC_IRQHandler+0x24>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <TIM6_DAC_IRQHandler+0x12>
  {
    HAL_TIM_IRQHandler(&htim6);
 800218c:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <TIM6_DAC_IRQHandler+0x24>)
 800218e:	f003 ff20 	bl	8005fd2 <HAL_TIM_IRQHandler>
  }
  if (hdac1.Instance != NULL)
 8002192:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <TIM6_DAC_IRQHandler+0x28>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <TIM6_DAC_IRQHandler+0x20>
  {
    HAL_DAC_IRQHandler(&hdac1);
 800219a:	4803      	ldr	r0, [pc, #12]	@ (80021a8 <TIM6_DAC_IRQHandler+0x28>)
 800219c:	f001 f895 	bl	80032ca <HAL_DAC_IRQHandler>
  }
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	2000021c 	.word	0x2000021c
 80021a8:	200000cc 	.word	0x200000cc

080021ac <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80021b0:	4802      	ldr	r0, [pc, #8]	@ (80021bc <CAN2_RX0_IRQHandler+0x10>)
 80021b2:	f000 fd0a 	bl	8002bca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200000a4 	.word	0x200000a4

080021c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021c4:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <SystemInit+0x20>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ca:	4a05      	ldr	r2, [pc, #20]	@ (80021e0 <SystemInit+0x20>)
 80021cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800221c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021e8:	f7ff ffea 	bl	80021c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021ec:	480c      	ldr	r0, [pc, #48]	@ (8002220 <LoopForever+0x6>)
  ldr r1, =_edata
 80021ee:	490d      	ldr	r1, [pc, #52]	@ (8002224 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002228 <LoopForever+0xe>)
  movs r3, #0
 80021f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021f4:	e002      	b.n	80021fc <LoopCopyDataInit>

080021f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021fa:	3304      	adds	r3, #4

080021fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002200:	d3f9      	bcc.n	80021f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002202:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002204:	4c0a      	ldr	r4, [pc, #40]	@ (8002230 <LoopForever+0x16>)
  movs r3, #0
 8002206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002208:	e001      	b.n	800220e <LoopFillZerobss>

0800220a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800220a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800220c:	3204      	adds	r2, #4

0800220e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800220e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002210:	d3fb      	bcc.n	800220a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002212:	f007 fb77 	bl	8009904 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002216:	f7fe fefd 	bl	8001014 <main>

0800221a <LoopForever>:

LoopForever:
    b LoopForever
 800221a:	e7fe      	b.n	800221a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800221c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002224:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002228:	08009b60 	.word	0x08009b60
  ldr r2, =_sbss
 800222c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002230:	20001d4c 	.word	0x20001d4c

08002234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002234:	e7fe      	b.n	8002234 <ADC1_2_IRQHandler>

08002236 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002240:	2003      	movs	r0, #3
 8002242:	f000 ff9e 	bl	8003182 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002246:	200f      	movs	r0, #15
 8002248:	f7ff fef2 	bl	8002030 <HAL_InitTick>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	71fb      	strb	r3, [r7, #7]
 8002256:	e001      	b.n	800225c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002258:	f7ff fd00 	bl	8001c5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800225c:	79fb      	ldrb	r3, [r7, #7]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800226c:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <HAL_IncTick+0x20>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	4b06      	ldr	r3, [pc, #24]	@ (800228c <HAL_IncTick+0x24>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4413      	add	r3, r2
 8002278:	4a04      	ldr	r2, [pc, #16]	@ (800228c <HAL_IncTick+0x24>)
 800227a:	6013      	str	r3, [r2, #0]
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000008 	.word	0x20000008
 800228c:	20000268 	.word	0x20000268

08002290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return uwTick;
 8002294:	4b03      	ldr	r3, [pc, #12]	@ (80022a4 <HAL_GetTick+0x14>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20000268 	.word	0x20000268

080022a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b0:	f7ff ffee 	bl	8002290 <HAL_GetTick>
 80022b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d005      	beq.n	80022ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022c2:	4b0a      	ldr	r3, [pc, #40]	@ (80022ec <HAL_Delay+0x44>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	4413      	add	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ce:	bf00      	nop
 80022d0:	f7ff ffde 	bl	8002290 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d8f7      	bhi.n	80022d0 <HAL_Delay+0x28>
  {
  }
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000008 	.word	0x20000008

080022f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e0ed      	b.n	80024de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d102      	bne.n	8002314 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fccc 	bl	8001cac <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002324:	f7ff ffb4 	bl	8002290 <HAL_GetTick>
 8002328:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800232a:	e012      	b.n	8002352 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800232c:	f7ff ffb0 	bl	8002290 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b0a      	cmp	r3, #10
 8002338:	d90b      	bls.n	8002352 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2205      	movs	r2, #5
 800234a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0c5      	b.n	80024de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0e5      	beq.n	800232c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0202 	bic.w	r2, r2, #2
 800236e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002370:	f7ff ff8e 	bl	8002290 <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002376:	e012      	b.n	800239e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002378:	f7ff ff8a 	bl	8002290 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b0a      	cmp	r3, #10
 8002384:	d90b      	bls.n	800239e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2205      	movs	r2, #5
 8002396:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e09f      	b.n	80024de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1e5      	bne.n	8002378 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	7e1b      	ldrb	r3, [r3, #24]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d108      	bne.n	80023c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	e007      	b.n	80023d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7e5b      	ldrb	r3, [r3, #25]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d108      	bne.n	80023f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	e007      	b.n	8002400 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7e9b      	ldrb	r3, [r3, #26]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d108      	bne.n	800241a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0220 	orr.w	r2, r2, #32
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	e007      	b.n	800242a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0220 	bic.w	r2, r2, #32
 8002428:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7edb      	ldrb	r3, [r3, #27]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d108      	bne.n	8002444 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0210 	bic.w	r2, r2, #16
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	e007      	b.n	8002454 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0210 	orr.w	r2, r2, #16
 8002452:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	7f1b      	ldrb	r3, [r3, #28]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d108      	bne.n	800246e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0208 	orr.w	r2, r2, #8
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	e007      	b.n	800247e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0208 	bic.w	r2, r2, #8
 800247c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	7f5b      	ldrb	r3, [r3, #29]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d108      	bne.n	8002498 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0204 	orr.w	r2, r2, #4
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	e007      	b.n	80024a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0204 	bic.w	r2, r2, #4
 80024a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	ea42 0103 	orr.w	r1, r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	1e5a      	subs	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b087      	sub	sp, #28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024fe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d003      	beq.n	800250e <HAL_CAN_ConfigFilter+0x26>
 8002506:	7cfb      	ldrb	r3, [r7, #19]
 8002508:	2b02      	cmp	r3, #2
 800250a:	f040 80be 	bne.w	800268a <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800250e:	4b65      	ldr	r3, [pc, #404]	@ (80026a4 <HAL_CAN_ConfigFilter+0x1bc>)
 8002510:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002518:	f043 0201 	orr.w	r2, r3, #1
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002528:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	431a      	orrs	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	f003 031f 	and.w	r3, r3, #31
 800254e:	2201      	movs	r2, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	43db      	mvns	r3, r3
 8002560:	401a      	ands	r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d123      	bne.n	80025b8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	43db      	mvns	r3, r3
 800257a:	401a      	ands	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002592:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3248      	adds	r2, #72	@ 0x48
 8002598:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025ae:	6979      	ldr	r1, [r7, #20]
 80025b0:	3348      	adds	r3, #72	@ 0x48
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	440b      	add	r3, r1
 80025b6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d122      	bne.n	8002606 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80025e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3248      	adds	r2, #72	@ 0x48
 80025e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80025fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80025fc:	6979      	ldr	r1, [r7, #20]
 80025fe:	3348      	adds	r3, #72	@ 0x48
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	440b      	add	r3, r1
 8002604:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d109      	bne.n	8002622 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	43db      	mvns	r3, r3
 8002618:	401a      	ands	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002620:	e007      	b.n	8002632 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	431a      	orrs	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	43db      	mvns	r3, r3
 8002644:	401a      	ands	r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800264c:	e007      	b.n	800265e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	431a      	orrs	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d107      	bne.n	8002676 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	431a      	orrs	r2, r3
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800267c:	f023 0201 	bic.w	r2, r3, #1
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e006      	b.n	8002698 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
  }
}
 8002698:	4618      	mov	r0, r3
 800269a:	371c      	adds	r7, #28
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	40006400 	.word	0x40006400

080026a8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d12e      	bne.n	800271a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0201 	bic.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80026d4:	f7ff fddc 	bl	8002290 <HAL_GetTick>
 80026d8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80026da:	e012      	b.n	8002702 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026dc:	f7ff fdd8 	bl	8002290 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b0a      	cmp	r3, #10
 80026e8:	d90b      	bls.n	8002702 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2205      	movs	r2, #5
 80026fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e012      	b.n	8002728 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e5      	bne.n	80026dc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002716:	2300      	movs	r3, #0
 8002718:	e006      	b.n	8002728 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
  }
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	@ 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002744:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800274e:	7ffb      	ldrb	r3, [r7, #31]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d003      	beq.n	800275c <HAL_CAN_AddTxMessage+0x2c>
 8002754:	7ffb      	ldrb	r3, [r7, #31]
 8002756:	2b02      	cmp	r3, #2
 8002758:	f040 80ad 	bne.w	80028b6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10a      	bne.n	800277c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 8095 	beq.w	80028a6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	0e1b      	lsrs	r3, r3, #24
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002786:	2201      	movs	r2, #1
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	409a      	lsls	r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10d      	bne.n	80027b4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80027a2:	68f9      	ldr	r1, [r7, #12]
 80027a4:	6809      	ldr	r1, [r1, #0]
 80027a6:	431a      	orrs	r2, r3
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	3318      	adds	r3, #24
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	440b      	add	r3, r1
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	e00f      	b.n	80027d4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027be:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027c4:	68f9      	ldr	r1, [r7, #12]
 80027c6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80027c8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	3318      	adds	r3, #24
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	440b      	add	r3, r1
 80027d2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6819      	ldr	r1, [r3, #0]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3318      	adds	r3, #24
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	440b      	add	r3, r1
 80027e4:	3304      	adds	r3, #4
 80027e6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	7d1b      	ldrb	r3, [r3, #20]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d111      	bne.n	8002814 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	3318      	adds	r3, #24
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	4413      	add	r3, r2
 80027fc:	3304      	adds	r3, #4
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	6811      	ldr	r1, [r2, #0]
 8002804:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	3318      	adds	r3, #24
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	440b      	add	r3, r1
 8002810:	3304      	adds	r3, #4
 8002812:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3307      	adds	r3, #7
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	061a      	lsls	r2, r3, #24
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3306      	adds	r3, #6
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	041b      	lsls	r3, r3, #16
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3305      	adds	r3, #5
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	4313      	orrs	r3, r2
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	3204      	adds	r2, #4
 8002834:	7812      	ldrb	r2, [r2, #0]
 8002836:	4610      	mov	r0, r2
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	6811      	ldr	r1, [r2, #0]
 800283c:	ea43 0200 	orr.w	r2, r3, r0
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	440b      	add	r3, r1
 8002846:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800284a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3303      	adds	r3, #3
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	061a      	lsls	r2, r3, #24
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3302      	adds	r3, #2
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	041b      	lsls	r3, r3, #16
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3301      	adds	r3, #1
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	4313      	orrs	r3, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	7812      	ldrb	r2, [r2, #0]
 800286c:	4610      	mov	r0, r2
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	6811      	ldr	r1, [r2, #0]
 8002872:	ea43 0200 	orr.w	r2, r3, r0
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	440b      	add	r3, r1
 800287c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002880:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	3318      	adds	r3, #24
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	4413      	add	r3, r2
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	6811      	ldr	r1, [r2, #0]
 8002894:	f043 0201 	orr.w	r2, r3, #1
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	3318      	adds	r3, #24
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	440b      	add	r3, r1
 80028a0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e00e      	b.n	80028c4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e006      	b.n	80028c4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
  }
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3724      	adds	r7, #36	@ 0x24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028e2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80028e4:	7afb      	ldrb	r3, [r7, #11]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d002      	beq.n	80028f0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d11d      	bne.n	800292c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3301      	adds	r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	3301      	adds	r3, #1
 8002916:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3301      	adds	r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800292c:	68fb      	ldr	r3, [r7, #12]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800293a:	b480      	push	{r7}
 800293c:	b087      	sub	sp, #28
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002950:	7dfb      	ldrb	r3, [r7, #23]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d003      	beq.n	800295e <HAL_CAN_GetRxMessage+0x24>
 8002956:	7dfb      	ldrb	r3, [r7, #23]
 8002958:	2b02      	cmp	r3, #2
 800295a:	f040 8103 	bne.w	8002b64 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10e      	bne.n	8002982 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d116      	bne.n	80029a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e0f7      	b.n	8002b72 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d107      	bne.n	80029a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0e8      	b.n	8002b72 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	331b      	adds	r3, #27
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	4413      	add	r3, r2
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0204 	and.w	r2, r3, #4
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10c      	bne.n	80029d8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	331b      	adds	r3, #27
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	4413      	add	r3, r2
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0d5b      	lsrs	r3, r3, #21
 80029ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	e00b      	b.n	80029f0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	331b      	adds	r3, #27
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	4413      	add	r3, r2
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	08db      	lsrs	r3, r3, #3
 80029e8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	331b      	adds	r3, #27
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	4413      	add	r3, r2
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0202 	and.w	r2, r3, #2
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	331b      	adds	r3, #27
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	4413      	add	r3, r2
 8002a12:	3304      	adds	r3, #4
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2208      	movs	r2, #8
 8002a22:	611a      	str	r2, [r3, #16]
 8002a24:	e00b      	b.n	8002a3e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	331b      	adds	r3, #27
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	4413      	add	r3, r2
 8002a32:	3304      	adds	r3, #4
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 020f 	and.w	r2, r3, #15
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	331b      	adds	r3, #27
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	4413      	add	r3, r2
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	0a1b      	lsrs	r3, r3, #8
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	331b      	adds	r3, #27
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	4413      	add	r3, r2
 8002a62:	3304      	adds	r3, #4
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	0c1b      	lsrs	r3, r3, #16
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	0a1a      	lsrs	r2, r3, #8
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	0c1a      	lsrs	r2, r3, #16
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	0e1a      	lsrs	r2, r3, #24
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	3303      	adds	r3, #3
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	0a1a      	lsrs	r2, r3, #8
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	3305      	adds	r3, #5
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0c1a      	lsrs	r2, r3, #16
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	3306      	adds	r3, #6
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	0e1a      	lsrs	r2, r3, #24
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	3307      	adds	r3, #7
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d108      	bne.n	8002b50 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0220 	orr.w	r2, r2, #32
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	e007      	b.n	8002b60 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0220 	orr.w	r2, r2, #32
 8002b5e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e006      	b.n	8002b72 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b68:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
  }
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	371c      	adds	r7, #28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b085      	sub	sp, #20
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
 8002b86:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b8e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d002      	beq.n	8002b9c <HAL_CAN_ActivateNotification+0x1e>
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d109      	bne.n	8002bb0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6959      	ldr	r1, [r3, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002bac:	2300      	movs	r3, #0
 8002bae:	e006      	b.n	8002bbe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b08a      	sub	sp, #40	@ 0x28
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d07c      	beq.n	8002d0a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d023      	beq.n	8002c62 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f983 	bl	8002f38 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c32:	e016      	b.n	8002c62 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d004      	beq.n	8002c48 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c46:	e00c      	b.n	8002c62 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d004      	beq.n	8002c5c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c5a:	e002      	b.n	8002c62 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f989 	bl	8002f74 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d024      	beq.n	8002cb6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c74:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f963 	bl	8002f4c <HAL_CAN_TxMailbox1CompleteCallback>
 8002c86:	e016      	b.n	8002cb6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c9a:	e00c      	b.n	8002cb6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d004      	beq.n	8002cb0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cae:	e002      	b.n	8002cb6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f969 	bl	8002f88 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d024      	beq.n	8002d0a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002cc8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f943 	bl	8002f60 <HAL_CAN_TxMailbox2CompleteCallback>
 8002cda:	e016      	b.n	8002d0a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d004      	beq.n	8002cf0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cee:	e00c      	b.n	8002d0a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d004      	beq.n	8002d04 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d02:	e002      	b.n	8002d0a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f949 	bl	8002f9c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00c      	beq.n	8002d2e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d24:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2210      	movs	r2, #16
 8002d2c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00b      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d006      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2208      	movs	r2, #8
 8002d48:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f930 	bl	8002fb0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d009      	beq.n	8002d6e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7fe f83f 	bl	8000dec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00c      	beq.n	8002d92 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f003 0310 	and.w	r3, r3, #16
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2210      	movs	r2, #16
 8002d90:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	f003 0320 	and.w	r3, r3, #32
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00b      	beq.n	8002db4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2208      	movs	r2, #8
 8002dac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f912 	bl	8002fd8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	f003 0310 	and.w	r3, r3, #16
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d009      	beq.n	8002dd2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d002      	beq.n	8002dd2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f8f9 	bl	8002fc4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00b      	beq.n	8002df4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2210      	movs	r2, #16
 8002dec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f8fc 	bl	8002fec <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00b      	beq.n	8002e16 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d006      	beq.n	8002e16 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2208      	movs	r2, #8
 8002e0e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f8f5 	bl	8003000 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d07b      	beq.n	8002f18 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d072      	beq.n	8002f10 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	f043 0304 	orr.w	r3, r3, #4
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d043      	beq.n	8002f10 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d03e      	beq.n	8002f10 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e98:	2b60      	cmp	r3, #96	@ 0x60
 8002e9a:	d02b      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x32a>
 8002e9c:	2b60      	cmp	r3, #96	@ 0x60
 8002e9e:	d82e      	bhi.n	8002efe <HAL_CAN_IRQHandler+0x334>
 8002ea0:	2b50      	cmp	r3, #80	@ 0x50
 8002ea2:	d022      	beq.n	8002eea <HAL_CAN_IRQHandler+0x320>
 8002ea4:	2b50      	cmp	r3, #80	@ 0x50
 8002ea6:	d82a      	bhi.n	8002efe <HAL_CAN_IRQHandler+0x334>
 8002ea8:	2b40      	cmp	r3, #64	@ 0x40
 8002eaa:	d019      	beq.n	8002ee0 <HAL_CAN_IRQHandler+0x316>
 8002eac:	2b40      	cmp	r3, #64	@ 0x40
 8002eae:	d826      	bhi.n	8002efe <HAL_CAN_IRQHandler+0x334>
 8002eb0:	2b30      	cmp	r3, #48	@ 0x30
 8002eb2:	d010      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x30c>
 8002eb4:	2b30      	cmp	r3, #48	@ 0x30
 8002eb6:	d822      	bhi.n	8002efe <HAL_CAN_IRQHandler+0x334>
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d002      	beq.n	8002ec2 <HAL_CAN_IRQHandler+0x2f8>
 8002ebc:	2b20      	cmp	r3, #32
 8002ebe:	d005      	beq.n	8002ecc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ec0:	e01d      	b.n	8002efe <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	f043 0308 	orr.w	r3, r3, #8
 8002ec8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002eca:	e019      	b.n	8002f00 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ece:	f043 0310 	orr.w	r3, r3, #16
 8002ed2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ed4:	e014      	b.n	8002f00 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	f043 0320 	orr.w	r3, r3, #32
 8002edc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ede:	e00f      	b.n	8002f00 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ee8:	e00a      	b.n	8002f00 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ef0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ef2:	e005      	b.n	8002f00 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002efa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002efc:	e000      	b.n	8002f00 <HAL_CAN_IRQHandler+0x336>
            break;
 8002efe:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f0e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2204      	movs	r2, #4
 8002f16:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d008      	beq.n	8002f30 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f872 	bl	8003014 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f30:	bf00      	nop
 8002f32:	3728      	adds	r7, #40	@ 0x28
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003038:	4b0c      	ldr	r3, [pc, #48]	@ (800306c <__NVIC_SetPriorityGrouping+0x44>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003044:	4013      	ands	r3, r2
 8003046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003050:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305a:	4a04      	ldr	r2, [pc, #16]	@ (800306c <__NVIC_SetPriorityGrouping+0x44>)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	60d3      	str	r3, [r2, #12]
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003074:	4b04      	ldr	r3, [pc, #16]	@ (8003088 <__NVIC_GetPriorityGrouping+0x18>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	0a1b      	lsrs	r3, r3, #8
 800307a:	f003 0307 	and.w	r3, r3, #7
}
 800307e:	4618      	mov	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	2b00      	cmp	r3, #0
 800309c:	db0b      	blt.n	80030b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	f003 021f 	and.w	r2, r3, #31
 80030a4:	4907      	ldr	r1, [pc, #28]	@ (80030c4 <__NVIC_EnableIRQ+0x38>)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	2001      	movs	r0, #1
 80030ae:	fa00 f202 	lsl.w	r2, r0, r2
 80030b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	e000e100 	.word	0xe000e100

080030c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	6039      	str	r1, [r7, #0]
 80030d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	db0a      	blt.n	80030f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	490c      	ldr	r1, [pc, #48]	@ (8003114 <__NVIC_SetPriority+0x4c>)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	0112      	lsls	r2, r2, #4
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	440b      	add	r3, r1
 80030ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f0:	e00a      	b.n	8003108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	4908      	ldr	r1, [pc, #32]	@ (8003118 <__NVIC_SetPriority+0x50>)
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	3b04      	subs	r3, #4
 8003100:	0112      	lsls	r2, r2, #4
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	440b      	add	r3, r1
 8003106:	761a      	strb	r2, [r3, #24]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000e100 	.word	0xe000e100
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	@ 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f1c3 0307 	rsb	r3, r3, #7
 8003136:	2b04      	cmp	r3, #4
 8003138:	bf28      	it	cs
 800313a:	2304      	movcs	r3, #4
 800313c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3304      	adds	r3, #4
 8003142:	2b06      	cmp	r3, #6
 8003144:	d902      	bls.n	800314c <NVIC_EncodePriority+0x30>
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	3b03      	subs	r3, #3
 800314a:	e000      	b.n	800314e <NVIC_EncodePriority+0x32>
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	f04f 32ff 	mov.w	r2, #4294967295
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43da      	mvns	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	401a      	ands	r2, r3
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003164:	f04f 31ff 	mov.w	r1, #4294967295
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	43d9      	mvns	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003174:	4313      	orrs	r3, r2
         );
}
 8003176:	4618      	mov	r0, r3
 8003178:	3724      	adds	r7, #36	@ 0x24
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff ff4c 	bl	8003028 <__NVIC_SetPriorityGrouping>
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031aa:	f7ff ff61 	bl	8003070 <__NVIC_GetPriorityGrouping>
 80031ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	68b9      	ldr	r1, [r7, #8]
 80031b4:	6978      	ldr	r0, [r7, #20]
 80031b6:	f7ff ffb1 	bl	800311c <NVIC_EncodePriority>
 80031ba:	4602      	mov	r2, r0
 80031bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c0:	4611      	mov	r1, r2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff80 	bl	80030c8 <__NVIC_SetPriority>
}
 80031c8:	bf00      	nop
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff54 	bl	800308c <__NVIC_EnableIRQ>
}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e014      	b.n	8003228 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	791b      	ldrb	r3, [r3, #4]
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d105      	bne.n	8003214 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe fe12 	bl	8001e38 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	795b      	ldrb	r3, [r3, #5]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_DAC_Start+0x16>
 8003242:	2302      	movs	r3, #2
 8003244:	e03b      	b.n	80032be <HAL_DAC_Start+0x8e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6819      	ldr	r1, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2201      	movs	r2, #1
 8003260:	409a      	lsls	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10f      	bne.n	8003290 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800327a:	2b04      	cmp	r3, #4
 800327c:	d118      	bne.n	80032b0 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0201 	orr.w	r2, r2, #1
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	e00f      	b.n	80032b0 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800329a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800329e:	d107      	bne.n	80032b0 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0202 	orr.w	r2, r2, #2
 80032ae:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032e0:	d120      	bne.n	8003324 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032f0:	d118      	bne.n	8003324 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2204      	movs	r2, #4
 80032f6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f043 0201 	orr.w	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800330c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800331c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f852 	bl	80033c8 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800332e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003332:	d120      	bne.n	8003376 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800333e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003342:	d118      	bne.n	8003376 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2204      	movs	r2, #4
 8003348:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f043 0202 	orr.w	r2, r3, #2
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800335e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800336e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f95a 	bl	800362a <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800337e:	b480      	push	{r7}
 8003380:	b087      	sub	sp, #28
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d105      	bne.n	80033a8 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4413      	add	r3, r2
 80033a2:	3308      	adds	r3, #8
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	e004      	b.n	80033b2 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	3314      	adds	r3, #20
 80033b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	461a      	mov	r2, r3
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	795b      	ldrb	r3, [r3, #5]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_DAC_ConfigChannel+0x1c>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e114      	b.n	8003622 <HAL_DAC_ConfigChannel+0x246>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2202      	movs	r2, #2
 8003402:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b04      	cmp	r3, #4
 800340a:	f040 8081 	bne.w	8003510 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800340e:	f7fe ff3f 	bl	8002290 <HAL_GetTick>
 8003412:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d140      	bne.n	800349c <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800341a:	e018      	b.n	800344e <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800341c:	f7fe ff38 	bl	8002290 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b01      	cmp	r3, #1
 8003428:	d911      	bls.n	800344e <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f043 0208 	orr.w	r2, r3, #8
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2203      	movs	r2, #3
 8003448:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e0e9      	b.n	8003622 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1df      	bne.n	800341c <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800345c:	2001      	movs	r0, #1
 800345e:	f7fe ff23 	bl	80022a8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	6992      	ldr	r2, [r2, #24]
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40
 800346c:	e023      	b.n	80034b6 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800346e:	f7fe ff0f 	bl	8002290 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d90f      	bls.n	800349c <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003482:	2b00      	cmp	r3, #0
 8003484:	da0a      	bge.n	800349c <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f043 0208 	orr.w	r2, r3, #8
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2203      	movs	r2, #3
 8003496:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e0c2      	b.n	8003622 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	dbe3      	blt.n	800346e <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80034a6:	2001      	movs	r0, #1
 80034a8:	f7fe fefe 	bl	80022a8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	6992      	ldr	r2, [r2, #24]
 80034b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	ea02 0103 	and.w	r1, r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	409a      	lsls	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f003 0310 	and.w	r3, r3, #16
 80034f0:	21ff      	movs	r1, #255	@ 0xff
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	ea02 0103 	and.w	r1, r2, r3
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	6a1a      	ldr	r2, [r3, #32]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	409a      	lsls	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d11d      	bne.n	8003554 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	221f      	movs	r2, #31
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2207      	movs	r2, #7
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	431a      	orrs	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6819      	ldr	r1, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43da      	mvns	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	400a      	ands	r2, r1
 80035b8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6819      	ldr	r1, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f003 0310 	and.w	r3, r3, #16
 8003604:	22c0      	movs	r2, #192	@ 0xc0
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	43da      	mvns	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	400a      	ands	r2, r1
 8003612:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2201      	movs	r2, #1
 8003618:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800364a:	2300      	movs	r3, #0
 800364c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800364e:	e166      	b.n	800391e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	2101      	movs	r1, #1
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	fa01 f303 	lsl.w	r3, r1, r3
 800365c:	4013      	ands	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 8158 	beq.w	8003918 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	2b01      	cmp	r3, #1
 8003672:	d005      	beq.n	8003680 <HAL_GPIO_Init+0x40>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d130      	bne.n	80036e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	2203      	movs	r2, #3
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4013      	ands	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036b6:	2201      	movs	r2, #1
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43db      	mvns	r3, r3
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4013      	ands	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	091b      	lsrs	r3, r3, #4
 80036cc:	f003 0201 	and.w	r2, r3, #1
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d017      	beq.n	800371e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	2203      	movs	r2, #3
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	4013      	ands	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d123      	bne.n	8003772 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	08da      	lsrs	r2, r3, #3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3208      	adds	r2, #8
 8003732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003736:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	220f      	movs	r2, #15
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43db      	mvns	r3, r3
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4013      	ands	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	08da      	lsrs	r2, r3, #3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3208      	adds	r2, #8
 800376c:	6939      	ldr	r1, [r7, #16]
 800376e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	2203      	movs	r2, #3
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43db      	mvns	r3, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 0203 	and.w	r2, r3, #3
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80b2 	beq.w	8003918 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b4:	4b61      	ldr	r3, [pc, #388]	@ (800393c <HAL_GPIO_Init+0x2fc>)
 80037b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037b8:	4a60      	ldr	r2, [pc, #384]	@ (800393c <HAL_GPIO_Init+0x2fc>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6613      	str	r3, [r2, #96]	@ 0x60
 80037c0:	4b5e      	ldr	r3, [pc, #376]	@ (800393c <HAL_GPIO_Init+0x2fc>)
 80037c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037cc:	4a5c      	ldr	r2, [pc, #368]	@ (8003940 <HAL_GPIO_Init+0x300>)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	089b      	lsrs	r3, r3, #2
 80037d2:	3302      	adds	r3, #2
 80037d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f003 0303 	and.w	r3, r3, #3
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	220f      	movs	r2, #15
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	43db      	mvns	r3, r3
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4013      	ands	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80037f6:	d02b      	beq.n	8003850 <HAL_GPIO_Init+0x210>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a52      	ldr	r2, [pc, #328]	@ (8003944 <HAL_GPIO_Init+0x304>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d025      	beq.n	800384c <HAL_GPIO_Init+0x20c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a51      	ldr	r2, [pc, #324]	@ (8003948 <HAL_GPIO_Init+0x308>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d01f      	beq.n	8003848 <HAL_GPIO_Init+0x208>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a50      	ldr	r2, [pc, #320]	@ (800394c <HAL_GPIO_Init+0x30c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d019      	beq.n	8003844 <HAL_GPIO_Init+0x204>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a4f      	ldr	r2, [pc, #316]	@ (8003950 <HAL_GPIO_Init+0x310>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d013      	beq.n	8003840 <HAL_GPIO_Init+0x200>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a4e      	ldr	r2, [pc, #312]	@ (8003954 <HAL_GPIO_Init+0x314>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00d      	beq.n	800383c <HAL_GPIO_Init+0x1fc>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a4d      	ldr	r2, [pc, #308]	@ (8003958 <HAL_GPIO_Init+0x318>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d007      	beq.n	8003838 <HAL_GPIO_Init+0x1f8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a4c      	ldr	r2, [pc, #304]	@ (800395c <HAL_GPIO_Init+0x31c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d101      	bne.n	8003834 <HAL_GPIO_Init+0x1f4>
 8003830:	2307      	movs	r3, #7
 8003832:	e00e      	b.n	8003852 <HAL_GPIO_Init+0x212>
 8003834:	2308      	movs	r3, #8
 8003836:	e00c      	b.n	8003852 <HAL_GPIO_Init+0x212>
 8003838:	2306      	movs	r3, #6
 800383a:	e00a      	b.n	8003852 <HAL_GPIO_Init+0x212>
 800383c:	2305      	movs	r3, #5
 800383e:	e008      	b.n	8003852 <HAL_GPIO_Init+0x212>
 8003840:	2304      	movs	r3, #4
 8003842:	e006      	b.n	8003852 <HAL_GPIO_Init+0x212>
 8003844:	2303      	movs	r3, #3
 8003846:	e004      	b.n	8003852 <HAL_GPIO_Init+0x212>
 8003848:	2302      	movs	r3, #2
 800384a:	e002      	b.n	8003852 <HAL_GPIO_Init+0x212>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_GPIO_Init+0x212>
 8003850:	2300      	movs	r3, #0
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	f002 0203 	and.w	r2, r2, #3
 8003858:	0092      	lsls	r2, r2, #2
 800385a:	4093      	lsls	r3, r2
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003862:	4937      	ldr	r1, [pc, #220]	@ (8003940 <HAL_GPIO_Init+0x300>)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	089b      	lsrs	r3, r3, #2
 8003868:	3302      	adds	r3, #2
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003870:	4b3b      	ldr	r3, [pc, #236]	@ (8003960 <HAL_GPIO_Init+0x320>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	43db      	mvns	r3, r3
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4013      	ands	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003894:	4a32      	ldr	r2, [pc, #200]	@ (8003960 <HAL_GPIO_Init+0x320>)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800389a:	4b31      	ldr	r3, [pc, #196]	@ (8003960 <HAL_GPIO_Init+0x320>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	43db      	mvns	r3, r3
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4013      	ands	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038be:	4a28      	ldr	r2, [pc, #160]	@ (8003960 <HAL_GPIO_Init+0x320>)
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038c4:	4b26      	ldr	r3, [pc, #152]	@ (8003960 <HAL_GPIO_Init+0x320>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4013      	ands	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003960 <HAL_GPIO_Init+0x320>)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038ee:	4b1c      	ldr	r3, [pc, #112]	@ (8003960 <HAL_GPIO_Init+0x320>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	43db      	mvns	r3, r3
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4013      	ands	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003912:	4a13      	ldr	r2, [pc, #76]	@ (8003960 <HAL_GPIO_Init+0x320>)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	3301      	adds	r3, #1
 800391c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	fa22 f303 	lsr.w	r3, r2, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	f47f ae91 	bne.w	8003650 <HAL_GPIO_Init+0x10>
  }
}
 800392e:	bf00      	nop
 8003930:	bf00      	nop
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	40021000 	.word	0x40021000
 8003940:	40010000 	.word	0x40010000
 8003944:	48000400 	.word	0x48000400
 8003948:	48000800 	.word	0x48000800
 800394c:	48000c00 	.word	0x48000c00
 8003950:	48001000 	.word	0x48001000
 8003954:	48001400 	.word	0x48001400
 8003958:	48001800 	.word	0x48001800
 800395c:	48001c00 	.word	0x48001c00
 8003960:	40010400 	.word	0x40010400

08003964 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	887b      	ldrh	r3, [r7, #2]
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
 8003980:	e001      	b.n	8003986 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003986:	7bfb      	ldrb	r3, [r7, #15]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3714      	adds	r7, #20
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	807b      	strh	r3, [r7, #2]
 80039a0:	4613      	mov	r3, r2
 80039a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039a4:	787b      	ldrb	r3, [r7, #1]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039aa:	887a      	ldrh	r2, [r7, #2]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039b0:	e002      	b.n	80039b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039b2:	887a      	ldrh	r2, [r7, #2]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039d6:	887a      	ldrh	r2, [r7, #2]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4013      	ands	r3, r2
 80039dc:	041a      	lsls	r2, r3, #16
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	43d9      	mvns	r1, r3
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	400b      	ands	r3, r1
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	619a      	str	r2, [r3, #24]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a02:	4b08      	ldr	r3, [pc, #32]	@ (8003a24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a04:	695a      	ldr	r2, [r3, #20]
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d006      	beq.n	8003a1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a0e:	4a05      	ldr	r2, [pc, #20]	@ (8003a24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fd f9d4 	bl	8000dc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40010400 	.word	0x40010400

08003a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e08d      	b.n	8003b56 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7fe fa38 	bl	8001ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2224      	movs	r2, #36	@ 0x24
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0201 	bic.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d107      	bne.n	8003aa2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	e006      	b.n	8003ab0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003aae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d108      	bne.n	8003aca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ac6:	605a      	str	r2, [r3, #4]
 8003ac8:	e007      	b.n	8003ada <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ad8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ae8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003afc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69d9      	ldr	r1, [r3, #28]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1a      	ldr	r2, [r3, #32]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0201 	orr.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	4608      	mov	r0, r1
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	817b      	strh	r3, [r7, #10]
 8003b72:	460b      	mov	r3, r1
 8003b74:	813b      	strh	r3, [r7, #8]
 8003b76:	4613      	mov	r3, r2
 8003b78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	f040 80f9 	bne.w	8003d7a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_I2C_Mem_Write+0x34>
 8003b8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b9a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e0ed      	b.n	8003d7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_I2C_Mem_Write+0x4e>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e0e6      	b.n	8003d7c <HAL_I2C_Mem_Write+0x21c>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003bb6:	f7fe fb6b 	bl	8002290 <HAL_GetTick>
 8003bba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	2319      	movs	r3, #25
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 fac3 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0d1      	b.n	8003d7c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2221      	movs	r2, #33	@ 0x21
 8003bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2240      	movs	r2, #64	@ 0x40
 8003be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a3a      	ldr	r2, [r7, #32]
 8003bf2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003bf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c00:	88f8      	ldrh	r0, [r7, #6]
 8003c02:	893a      	ldrh	r2, [r7, #8]
 8003c04:	8979      	ldrh	r1, [r7, #10]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	4603      	mov	r3, r0
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f9d3 	bl	8003fbc <I2C_RequestMemoryWrite>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0a9      	b.n	8003d7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2bff      	cmp	r3, #255	@ 0xff
 8003c30:	d90e      	bls.n	8003c50 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	22ff      	movs	r2, #255	@ 0xff
 8003c36:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	8979      	ldrh	r1, [r7, #10]
 8003c40:	2300      	movs	r3, #0
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 fc47 	bl	80044dc <I2C_TransferConfig>
 8003c4e:	e00f      	b.n	8003c70 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5e:	b2da      	uxtb	r2, r3
 8003c60:	8979      	ldrh	r1, [r7, #10]
 8003c62:	2300      	movs	r3, #0
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fc36 	bl	80044dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fac6 	bl	8004206 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e07b      	b.n	8003d7c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d034      	beq.n	8003d28 <HAL_I2C_Mem_Write+0x1c8>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d130      	bne.n	8003d28 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ccc:	2200      	movs	r2, #0
 8003cce:	2180      	movs	r1, #128	@ 0x80
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fa3f 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e04d      	b.n	8003d7c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2bff      	cmp	r3, #255	@ 0xff
 8003ce8:	d90e      	bls.n	8003d08 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	22ff      	movs	r2, #255	@ 0xff
 8003cee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	8979      	ldrh	r1, [r7, #10]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 fbeb 	bl	80044dc <I2C_TransferConfig>
 8003d06:	e00f      	b.n	8003d28 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	8979      	ldrh	r1, [r7, #10]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 fbda 	bl	80044dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d19e      	bne.n	8003c70 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 faac 	bl	8004294 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e01a      	b.n	8003d7c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4b0a      	ldr	r3, [pc, #40]	@ (8003d84 <HAL_I2C_Mem_Write+0x224>)
 8003d5a:	400b      	ands	r3, r1
 8003d5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	e000      	b.n	8003d7c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
  }
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	fe00e800 	.word	0xfe00e800

08003d88 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	4608      	mov	r0, r1
 8003d92:	4611      	mov	r1, r2
 8003d94:	461a      	mov	r2, r3
 8003d96:	4603      	mov	r3, r0
 8003d98:	817b      	strh	r3, [r7, #10]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	813b      	strh	r3, [r7, #8]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b20      	cmp	r3, #32
 8003dac:	f040 80fd 	bne.w	8003faa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_I2C_Mem_Read+0x34>
 8003db6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d105      	bne.n	8003dc8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dc2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0f1      	b.n	8003fac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_I2C_Mem_Read+0x4e>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e0ea      	b.n	8003fac <HAL_I2C_Mem_Read+0x224>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dde:	f7fe fa57 	bl	8002290 <HAL_GetTick>
 8003de2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2319      	movs	r3, #25
 8003dea:	2201      	movs	r2, #1
 8003dec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 f9af 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0d5      	b.n	8003fac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2222      	movs	r2, #34	@ 0x22
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2240      	movs	r2, #64	@ 0x40
 8003e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a3a      	ldr	r2, [r7, #32]
 8003e1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e28:	88f8      	ldrh	r0, [r7, #6]
 8003e2a:	893a      	ldrh	r2, [r7, #8]
 8003e2c:	8979      	ldrh	r1, [r7, #10]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	4603      	mov	r3, r0
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f913 	bl	8004064 <I2C_RequestMemoryRead>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d005      	beq.n	8003e50 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e0ad      	b.n	8003fac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2bff      	cmp	r3, #255	@ 0xff
 8003e58:	d90e      	bls.n	8003e78 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	8979      	ldrh	r1, [r7, #10]
 8003e68:	4b52      	ldr	r3, [pc, #328]	@ (8003fb4 <HAL_I2C_Mem_Read+0x22c>)
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 fb33 	bl	80044dc <I2C_TransferConfig>
 8003e76:	e00f      	b.n	8003e98 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	8979      	ldrh	r1, [r7, #10]
 8003e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8003fb4 <HAL_I2C_Mem_Read+0x22c>)
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fb22 	bl	80044dc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2104      	movs	r1, #4
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f956 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e07c      	b.n	8003fac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d034      	beq.n	8003f58 <HAL_I2C_Mem_Read+0x1d0>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d130      	bne.n	8003f58 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efc:	2200      	movs	r2, #0
 8003efe:	2180      	movs	r1, #128	@ 0x80
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f927 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e04d      	b.n	8003fac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2bff      	cmp	r3, #255	@ 0xff
 8003f18:	d90e      	bls.n	8003f38 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	8979      	ldrh	r1, [r7, #10]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fad3 	bl	80044dc <I2C_TransferConfig>
 8003f36:	e00f      	b.n	8003f58 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	8979      	ldrh	r1, [r7, #10]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fac2 	bl	80044dc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d19a      	bne.n	8003e98 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 f994 	bl	8004294 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e01a      	b.n	8003fac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6859      	ldr	r1, [r3, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb8 <HAL_I2C_Mem_Read+0x230>)
 8003f8a:	400b      	ands	r3, r1
 8003f8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e000      	b.n	8003fac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003faa:	2302      	movs	r3, #2
  }
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	80002400 	.word	0x80002400
 8003fb8:	fe00e800 	.word	0xfe00e800

08003fbc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4603      	mov	r3, r0
 8003fcc:	817b      	strh	r3, [r7, #10]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	813b      	strh	r3, [r7, #8]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	8979      	ldrh	r1, [r7, #10]
 8003fdc:	4b20      	ldr	r3, [pc, #128]	@ (8004060 <I2C_RequestMemoryWrite+0xa4>)
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fa79 	bl	80044dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	69b9      	ldr	r1, [r7, #24]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f909 	bl	8004206 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e02c      	b.n	8004058 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d105      	bne.n	8004010 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004004:	893b      	ldrh	r3, [r7, #8]
 8004006:	b2da      	uxtb	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	629a      	str	r2, [r3, #40]	@ 0x28
 800400e:	e015      	b.n	800403c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004010:	893b      	ldrh	r3, [r7, #8]
 8004012:	0a1b      	lsrs	r3, r3, #8
 8004014:	b29b      	uxth	r3, r3
 8004016:	b2da      	uxtb	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	69b9      	ldr	r1, [r7, #24]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f8ef 	bl	8004206 <I2C_WaitOnTXISFlagUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e012      	b.n	8004058 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004032:	893b      	ldrh	r3, [r7, #8]
 8004034:	b2da      	uxtb	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	2200      	movs	r2, #0
 8004044:	2180      	movs	r1, #128	@ 0x80
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f884 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	80002000 	.word	0x80002000

08004064 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	4608      	mov	r0, r1
 800406e:	4611      	mov	r1, r2
 8004070:	461a      	mov	r2, r3
 8004072:	4603      	mov	r3, r0
 8004074:	817b      	strh	r3, [r7, #10]
 8004076:	460b      	mov	r3, r1
 8004078:	813b      	strh	r3, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	b2da      	uxtb	r2, r3
 8004082:	8979      	ldrh	r1, [r7, #10]
 8004084:	4b20      	ldr	r3, [pc, #128]	@ (8004108 <I2C_RequestMemoryRead+0xa4>)
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	2300      	movs	r3, #0
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 fa26 	bl	80044dc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	69b9      	ldr	r1, [r7, #24]
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f8b6 	bl	8004206 <I2C_WaitOnTXISFlagUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e02c      	b.n	80040fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040a4:	88fb      	ldrh	r3, [r7, #6]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d105      	bne.n	80040b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040aa:	893b      	ldrh	r3, [r7, #8]
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80040b4:	e015      	b.n	80040e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040b6:	893b      	ldrh	r3, [r7, #8]
 80040b8:	0a1b      	lsrs	r3, r3, #8
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c4:	69fa      	ldr	r2, [r7, #28]
 80040c6:	69b9      	ldr	r1, [r7, #24]
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f89c 	bl	8004206 <I2C_WaitOnTXISFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e012      	b.n	80040fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040d8:	893b      	ldrh	r3, [r7, #8]
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2200      	movs	r2, #0
 80040ea:	2140      	movs	r1, #64	@ 0x40
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f831 	bl	8004154 <I2C_WaitOnFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	80002000 	.word	0x80002000

0800410c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b02      	cmp	r3, #2
 8004120:	d103      	bne.n	800412a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2200      	movs	r2, #0
 8004128:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b01      	cmp	r3, #1
 8004136:	d007      	beq.n	8004148 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699a      	ldr	r2, [r3, #24]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	619a      	str	r2, [r3, #24]
  }
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	4613      	mov	r3, r2
 8004162:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004164:	e03b      	b.n	80041de <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	6839      	ldr	r1, [r7, #0]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f8d6 	bl	800431c <I2C_IsErrorOccurred>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e041      	b.n	80041fe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004180:	d02d      	beq.n	80041de <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004182:	f7fe f885 	bl	8002290 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	429a      	cmp	r2, r3
 8004190:	d302      	bcc.n	8004198 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d122      	bne.n	80041de <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	4013      	ands	r3, r2
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	79fb      	ldrb	r3, [r7, #7]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d113      	bne.n	80041de <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ba:	f043 0220 	orr.w	r2, r3, #32
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e00f      	b.n	80041fe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699a      	ldr	r2, [r3, #24]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4013      	ands	r3, r2
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	bf0c      	ite	eq
 80041ee:	2301      	moveq	r3, #1
 80041f0:	2300      	movne	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	461a      	mov	r2, r3
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d0b4      	beq.n	8004166 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004212:	e033      	b.n	800427c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f87f 	bl	800431c <I2C_IsErrorOccurred>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e031      	b.n	800428c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	d025      	beq.n	800427c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004230:	f7fe f82e 	bl	8002290 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	429a      	cmp	r2, r3
 800423e:	d302      	bcc.n	8004246 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d11a      	bne.n	800427c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b02      	cmp	r3, #2
 8004252:	d013      	beq.n	800427c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004258:	f043 0220 	orr.w	r2, r3, #32
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e007      	b.n	800428c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b02      	cmp	r3, #2
 8004288:	d1c4      	bne.n	8004214 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042a0:	e02f      	b.n	8004302 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68b9      	ldr	r1, [r7, #8]
 80042a6:	68f8      	ldr	r0, [r7, #12]
 80042a8:	f000 f838 	bl	800431c <I2C_IsErrorOccurred>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e02d      	b.n	8004312 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b6:	f7fd ffeb 	bl	8002290 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d302      	bcc.n	80042cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d11a      	bne.n	8004302 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d013      	beq.n	8004302 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042de:	f043 0220 	orr.w	r2, r3, #32
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e007      	b.n	8004312 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b20      	cmp	r3, #32
 800430e:	d1c8      	bne.n	80042a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	@ 0x28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004328:	2300      	movs	r3, #0
 800432a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004336:	2300      	movs	r3, #0
 8004338:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	f003 0310 	and.w	r3, r3, #16
 8004344:	2b00      	cmp	r3, #0
 8004346:	d068      	beq.n	800441a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2210      	movs	r2, #16
 800434e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004350:	e049      	b.n	80043e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d045      	beq.n	80043e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800435a:	f7fd ff99 	bl	8002290 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	429a      	cmp	r2, r3
 8004368:	d302      	bcc.n	8004370 <I2C_IsErrorOccurred+0x54>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d13a      	bne.n	80043e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800437a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004382:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800438e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004392:	d121      	bne.n	80043d8 <I2C_IsErrorOccurred+0xbc>
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800439a:	d01d      	beq.n	80043d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800439c:	7cfb      	ldrb	r3, [r7, #19]
 800439e:	2b20      	cmp	r3, #32
 80043a0:	d01a      	beq.n	80043d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80043b2:	f7fd ff6d 	bl	8002290 <HAL_GetTick>
 80043b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043b8:	e00e      	b.n	80043d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80043ba:	f7fd ff69 	bl	8002290 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b19      	cmp	r3, #25
 80043c6:	d907      	bls.n	80043d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	f043 0320 	orr.w	r3, r3, #32
 80043ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80043d6:	e006      	b.n	80043e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	f003 0320 	and.w	r3, r3, #32
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	d1e9      	bne.n	80043ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	d003      	beq.n	80043fc <I2C_IsErrorOccurred+0xe0>
 80043f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0aa      	beq.n	8004352 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80043fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004400:	2b00      	cmp	r3, #0
 8004402:	d103      	bne.n	800440c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2220      	movs	r2, #32
 800440a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	f043 0304 	orr.w	r3, r3, #4
 8004412:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00b      	beq.n	8004444 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	f043 0301 	orr.w	r3, r3, #1
 8004432:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800443c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	f043 0308 	orr.w	r3, r3, #8
 8004454:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800445e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00b      	beq.n	8004488 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	f043 0302 	orr.w	r3, r3, #2
 8004476:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004480:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004488:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01c      	beq.n	80044ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f7ff fe3b 	bl	800410c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6859      	ldr	r1, [r3, #4]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	4b0d      	ldr	r3, [pc, #52]	@ (80044d8 <I2C_IsErrorOccurred+0x1bc>)
 80044a2:	400b      	ands	r3, r1
 80044a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044aa:	6a3b      	ldr	r3, [r7, #32]
 80044ac:	431a      	orrs	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80044ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3728      	adds	r7, #40	@ 0x28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	fe00e800 	.word	0xfe00e800

080044dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	607b      	str	r3, [r7, #4]
 80044e6:	460b      	mov	r3, r1
 80044e8:	817b      	strh	r3, [r7, #10]
 80044ea:	4613      	mov	r3, r2
 80044ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044ee:	897b      	ldrh	r3, [r7, #10]
 80044f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044f4:	7a7b      	ldrb	r3, [r7, #9]
 80044f6:	041b      	lsls	r3, r3, #16
 80044f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80044fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	4313      	orrs	r3, r2
 8004506:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800450a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	0d5b      	lsrs	r3, r3, #21
 8004516:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800451a:	4b08      	ldr	r3, [pc, #32]	@ (800453c <I2C_TransferConfig+0x60>)
 800451c:	430b      	orrs	r3, r1
 800451e:	43db      	mvns	r3, r3
 8004520:	ea02 0103 	and.w	r1, r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	03ff63ff 	.word	0x03ff63ff

08004540 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b20      	cmp	r3, #32
 8004554:	d138      	bne.n	80045c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004560:	2302      	movs	r3, #2
 8004562:	e032      	b.n	80045ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2224      	movs	r2, #36	@ 0x24
 8004570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0201 	bic.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004592:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6819      	ldr	r1, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	e000      	b.n	80045ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045c8:	2302      	movs	r3, #2
  }
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b085      	sub	sp, #20
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
 80045de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d139      	bne.n	8004660 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e033      	b.n	8004662 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2224      	movs	r2, #36	@ 0x24
 8004606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004628:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	e000      	b.n	8004662 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004660:	2302      	movs	r3, #2
  }
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
	...

08004670 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004674:	4b04      	ldr	r3, [pc, #16]	@ (8004688 <HAL_PWREx_GetVoltageRange+0x18>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800467c:	4618      	mov	r0, r3
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40007000 	.word	0x40007000

0800468c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800469a:	d130      	bne.n	80046fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800469c:	4b23      	ldr	r3, [pc, #140]	@ (800472c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046a8:	d038      	beq.n	800471c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046aa:	4b20      	ldr	r3, [pc, #128]	@ (800472c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046b2:	4a1e      	ldr	r2, [pc, #120]	@ (800472c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004730 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2232      	movs	r2, #50	@ 0x32
 80046c0:	fb02 f303 	mul.w	r3, r2, r3
 80046c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004734 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	0c9b      	lsrs	r3, r3, #18
 80046cc:	3301      	adds	r3, #1
 80046ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046d0:	e002      	b.n	80046d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046d8:	4b14      	ldr	r3, [pc, #80]	@ (800472c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046e4:	d102      	bne.n	80046ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f2      	bne.n	80046d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046ec:	4b0f      	ldr	r3, [pc, #60]	@ (800472c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046f8:	d110      	bne.n	800471c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e00f      	b.n	800471e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80046fe:	4b0b      	ldr	r3, [pc, #44]	@ (800472c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800470a:	d007      	beq.n	800471c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800470c:	4b07      	ldr	r3, [pc, #28]	@ (800472c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004714:	4a05      	ldr	r2, [pc, #20]	@ (800472c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004716:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800471a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40007000 	.word	0x40007000
 8004730:	20000000 	.word	0x20000000
 8004734:	431bde83 	.word	0x431bde83

08004738 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d102      	bne.n	800474c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	f000 bc08 	b.w	8004f5c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800474c:	4b96      	ldr	r3, [pc, #600]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004756:	4b94      	ldr	r3, [pc, #592]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0310 	and.w	r3, r3, #16
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80e4 	beq.w	8004936 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d007      	beq.n	8004784 <HAL_RCC_OscConfig+0x4c>
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	2b0c      	cmp	r3, #12
 8004778:	f040 808b 	bne.w	8004892 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	2b01      	cmp	r3, #1
 8004780:	f040 8087 	bne.w	8004892 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004784:	4b88      	ldr	r3, [pc, #544]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_RCC_OscConfig+0x64>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e3df      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1a      	ldr	r2, [r3, #32]
 80047a0:	4b81      	ldr	r3, [pc, #516]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d004      	beq.n	80047b6 <HAL_RCC_OscConfig+0x7e>
 80047ac:	4b7e      	ldr	r3, [pc, #504]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047b4:	e005      	b.n	80047c2 <HAL_RCC_OscConfig+0x8a>
 80047b6:	4b7c      	ldr	r3, [pc, #496]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047bc:	091b      	lsrs	r3, r3, #4
 80047be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d223      	bcs.n	800480e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fdae 	bl	800532c <RCC_SetFlashLatencyFromMSIRange>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e3c0      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047da:	4b73      	ldr	r3, [pc, #460]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a72      	ldr	r2, [pc, #456]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047e0:	f043 0308 	orr.w	r3, r3, #8
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	4b70      	ldr	r3, [pc, #448]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	496d      	ldr	r1, [pc, #436]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047f8:	4b6b      	ldr	r3, [pc, #428]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	4968      	ldr	r1, [pc, #416]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004808:	4313      	orrs	r3, r2
 800480a:	604b      	str	r3, [r1, #4]
 800480c:	e025      	b.n	800485a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800480e:	4b66      	ldr	r3, [pc, #408]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a65      	ldr	r2, [pc, #404]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004814:	f043 0308 	orr.w	r3, r3, #8
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	4b63      	ldr	r3, [pc, #396]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	4960      	ldr	r1, [pc, #384]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004828:	4313      	orrs	r3, r2
 800482a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800482c:	4b5e      	ldr	r3, [pc, #376]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	495b      	ldr	r1, [pc, #364]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800483c:	4313      	orrs	r3, r2
 800483e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	4618      	mov	r0, r3
 800484c:	f000 fd6e 	bl	800532c <RCC_SetFlashLatencyFromMSIRange>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e380      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800485a:	f000 fc87 	bl	800516c <HAL_RCC_GetSysClockFreq>
 800485e:	4602      	mov	r2, r0
 8004860:	4b51      	ldr	r3, [pc, #324]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	4950      	ldr	r1, [pc, #320]	@ (80049ac <HAL_RCC_OscConfig+0x274>)
 800486c:	5ccb      	ldrb	r3, [r1, r3]
 800486e:	f003 031f 	and.w	r3, r3, #31
 8004872:	fa22 f303 	lsr.w	r3, r2, r3
 8004876:	4a4e      	ldr	r2, [pc, #312]	@ (80049b0 <HAL_RCC_OscConfig+0x278>)
 8004878:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800487a:	4b4e      	ldr	r3, [pc, #312]	@ (80049b4 <HAL_RCC_OscConfig+0x27c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fd fbd6 	bl	8002030 <HAL_InitTick>
 8004884:	4603      	mov	r3, r0
 8004886:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004888:	7bfb      	ldrb	r3, [r7, #15]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d052      	beq.n	8004934 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800488e:	7bfb      	ldrb	r3, [r7, #15]
 8004890:	e364      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d032      	beq.n	8004900 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800489a:	4b43      	ldr	r3, [pc, #268]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a42      	ldr	r2, [pc, #264]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048a6:	f7fd fcf3 	bl	8002290 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048ae:	f7fd fcef 	bl	8002290 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e34d      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048c0:	4b39      	ldr	r3, [pc, #228]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f0      	beq.n	80048ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048cc:	4b36      	ldr	r3, [pc, #216]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a35      	ldr	r2, [pc, #212]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048d2:	f043 0308 	orr.w	r3, r3, #8
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	4b33      	ldr	r3, [pc, #204]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	4930      	ldr	r1, [pc, #192]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048ea:	4b2f      	ldr	r3, [pc, #188]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	021b      	lsls	r3, r3, #8
 80048f8:	492b      	ldr	r1, [pc, #172]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	604b      	str	r3, [r1, #4]
 80048fe:	e01a      	b.n	8004936 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004900:	4b29      	ldr	r3, [pc, #164]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a28      	ldr	r2, [pc, #160]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004906:	f023 0301 	bic.w	r3, r3, #1
 800490a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800490c:	f7fd fcc0 	bl	8002290 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004914:	f7fd fcbc 	bl	8002290 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e31a      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004926:	4b20      	ldr	r3, [pc, #128]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0x1dc>
 8004932:	e000      	b.n	8004936 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004934:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d073      	beq.n	8004a2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b08      	cmp	r3, #8
 8004946:	d005      	beq.n	8004954 <HAL_RCC_OscConfig+0x21c>
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b0c      	cmp	r3, #12
 800494c:	d10e      	bne.n	800496c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d10b      	bne.n	800496c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004954:	4b14      	ldr	r3, [pc, #80]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d063      	beq.n	8004a28 <HAL_RCC_OscConfig+0x2f0>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d15f      	bne.n	8004a28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e2f7      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004974:	d106      	bne.n	8004984 <HAL_RCC_OscConfig+0x24c>
 8004976:	4b0c      	ldr	r3, [pc, #48]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a0b      	ldr	r2, [pc, #44]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800497c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e025      	b.n	80049d0 <HAL_RCC_OscConfig+0x298>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800498c:	d114      	bne.n	80049b8 <HAL_RCC_OscConfig+0x280>
 800498e:	4b06      	ldr	r3, [pc, #24]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a05      	ldr	r2, [pc, #20]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 8004994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	4b03      	ldr	r3, [pc, #12]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a02      	ldr	r2, [pc, #8]	@ (80049a8 <HAL_RCC_OscConfig+0x270>)
 80049a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	e013      	b.n	80049d0 <HAL_RCC_OscConfig+0x298>
 80049a8:	40021000 	.word	0x40021000
 80049ac:	08009b10 	.word	0x08009b10
 80049b0:	20000000 	.word	0x20000000
 80049b4:	20000004 	.word	0x20000004
 80049b8:	4ba0      	ldr	r3, [pc, #640]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a9f      	ldr	r2, [pc, #636]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 80049be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	4b9d      	ldr	r3, [pc, #628]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a9c      	ldr	r2, [pc, #624]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 80049ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d013      	beq.n	8004a00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fd fc5a 	bl	8002290 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049e0:	f7fd fc56 	bl	8002290 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b64      	cmp	r3, #100	@ 0x64
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e2b4      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f2:	4b92      	ldr	r3, [pc, #584]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0f0      	beq.n	80049e0 <HAL_RCC_OscConfig+0x2a8>
 80049fe:	e014      	b.n	8004a2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a00:	f7fd fc46 	bl	8002290 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a08:	f7fd fc42 	bl	8002290 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b64      	cmp	r3, #100	@ 0x64
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e2a0      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a1a:	4b88      	ldr	r3, [pc, #544]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0x2d0>
 8004a26:	e000      	b.n	8004a2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d060      	beq.n	8004af8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_OscConfig+0x310>
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	2b0c      	cmp	r3, #12
 8004a40:	d119      	bne.n	8004a76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d116      	bne.n	8004a76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a48:	4b7c      	ldr	r3, [pc, #496]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_OscConfig+0x328>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e27d      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a60:	4b76      	ldr	r3, [pc, #472]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	4973      	ldr	r1, [pc, #460]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a74:	e040      	b.n	8004af8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d023      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a7e:	4b6f      	ldr	r3, [pc, #444]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a6e      	ldr	r2, [pc, #440]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8a:	f7fd fc01 	bl	8002290 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a92:	f7fd fbfd 	bl	8002290 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e25b      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aa4:	4b65      	ldr	r3, [pc, #404]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab0:	4b62      	ldr	r3, [pc, #392]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	061b      	lsls	r3, r3, #24
 8004abe:	495f      	ldr	r1, [pc, #380]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	604b      	str	r3, [r1, #4]
 8004ac4:	e018      	b.n	8004af8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a5c      	ldr	r2, [pc, #368]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004acc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad2:	f7fd fbdd 	bl	8002290 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ada:	f7fd fbd9 	bl	8002290 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e237      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aec:	4b53      	ldr	r3, [pc, #332]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f0      	bne.n	8004ada <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d03c      	beq.n	8004b7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01c      	beq.n	8004b46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b12:	4a4a      	ldr	r2, [pc, #296]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b14:	f043 0301 	orr.w	r3, r3, #1
 8004b18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1c:	f7fd fbb8 	bl	8002290 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b24:	f7fd fbb4 	bl	8002290 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e212      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b36:	4b41      	ldr	r3, [pc, #260]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0ef      	beq.n	8004b24 <HAL_RCC_OscConfig+0x3ec>
 8004b44:	e01b      	b.n	8004b7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b46:	4b3d      	ldr	r3, [pc, #244]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b4c:	4a3b      	ldr	r2, [pc, #236]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b56:	f7fd fb9b 	bl	8002290 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b5e:	f7fd fb97 	bl	8002290 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e1f5      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b70:	4b32      	ldr	r3, [pc, #200]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1ef      	bne.n	8004b5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 80a6 	beq.w	8004cd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b90:	4b2a      	ldr	r3, [pc, #168]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10d      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b9c:	4b27      	ldr	r3, [pc, #156]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba0:	4a26      	ldr	r2, [pc, #152]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004ba2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ba6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ba8:	4b24      	ldr	r3, [pc, #144]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bb8:	4b21      	ldr	r3, [pc, #132]	@ (8004c40 <HAL_RCC_OscConfig+0x508>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d118      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bc4:	4b1e      	ldr	r3, [pc, #120]	@ (8004c40 <HAL_RCC_OscConfig+0x508>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c40 <HAL_RCC_OscConfig+0x508>)
 8004bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bd0:	f7fd fb5e 	bl	8002290 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bd8:	f7fd fb5a 	bl	8002290 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e1b8      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bea:	4b15      	ldr	r3, [pc, #84]	@ (8004c40 <HAL_RCC_OscConfig+0x508>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0f0      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d108      	bne.n	8004c10 <HAL_RCC_OscConfig+0x4d8>
 8004bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c04:	4a0d      	ldr	r2, [pc, #52]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c0e:	e029      	b.n	8004c64 <HAL_RCC_OscConfig+0x52c>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b05      	cmp	r3, #5
 8004c16:	d115      	bne.n	8004c44 <HAL_RCC_OscConfig+0x50c>
 8004c18:	4b08      	ldr	r3, [pc, #32]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c1e:	4a07      	ldr	r2, [pc, #28]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c20:	f043 0304 	orr.w	r3, r3, #4
 8004c24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c28:	4b04      	ldr	r3, [pc, #16]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c2e:	4a03      	ldr	r2, [pc, #12]	@ (8004c3c <HAL_RCC_OscConfig+0x504>)
 8004c30:	f043 0301 	orr.w	r3, r3, #1
 8004c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c38:	e014      	b.n	8004c64 <HAL_RCC_OscConfig+0x52c>
 8004c3a:	bf00      	nop
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	40007000 	.word	0x40007000
 8004c44:	4b9d      	ldr	r3, [pc, #628]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c4a:	4a9c      	ldr	r2, [pc, #624]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004c4c:	f023 0301 	bic.w	r3, r3, #1
 8004c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c54:	4b99      	ldr	r3, [pc, #612]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c5a:	4a98      	ldr	r2, [pc, #608]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004c5c:	f023 0304 	bic.w	r3, r3, #4
 8004c60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d016      	beq.n	8004c9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fd fb10 	bl	8002290 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c74:	f7fd fb0c 	bl	8002290 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e168      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c8a:	4b8c      	ldr	r3, [pc, #560]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0ed      	beq.n	8004c74 <HAL_RCC_OscConfig+0x53c>
 8004c98:	e015      	b.n	8004cc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c9a:	f7fd faf9 	bl	8002290 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ca0:	e00a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca2:	f7fd faf5 	bl	8002290 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e151      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cb8:	4b80      	ldr	r3, [pc, #512]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1ed      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc6:	7ffb      	ldrb	r3, [r7, #31]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d105      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ccc:	4b7b      	ldr	r3, [pc, #492]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd0:	4a7a      	ldr	r2, [pc, #488]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cd6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d03c      	beq.n	8004d5e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01c      	beq.n	8004d26 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004cec:	4b73      	ldr	r3, [pc, #460]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cf2:	4a72      	ldr	r2, [pc, #456]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004cf4:	f043 0301 	orr.w	r3, r3, #1
 8004cf8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cfc:	f7fd fac8 	bl	8002290 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d04:	f7fd fac4 	bl	8002290 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e122      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d16:	4b69      	ldr	r3, [pc, #420]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0ef      	beq.n	8004d04 <HAL_RCC_OscConfig+0x5cc>
 8004d24:	e01b      	b.n	8004d5e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d26:	4b65      	ldr	r3, [pc, #404]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004d28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d2c:	4a63      	ldr	r2, [pc, #396]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d36:	f7fd faab 	bl	8002290 <HAL_GetTick>
 8004d3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d3c:	e008      	b.n	8004d50 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d3e:	f7fd faa7 	bl	8002290 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e105      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d50:	4b5a      	ldr	r3, [pc, #360]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1ef      	bne.n	8004d3e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 80f9 	beq.w	8004f5a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	f040 80cf 	bne.w	8004f10 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004d72:	4b52      	ldr	r3, [pc, #328]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f003 0203 	and.w	r2, r3, #3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d12c      	bne.n	8004de0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d90:	3b01      	subs	r3, #1
 8004d92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d123      	bne.n	8004de0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d11b      	bne.n	8004de0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d113      	bne.n	8004de0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d109      	bne.n	8004de0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd6:	085b      	lsrs	r3, r3, #1
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d071      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	2b0c      	cmp	r3, #12
 8004de4:	d068      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004de6:	4b35      	ldr	r3, [pc, #212]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d105      	bne.n	8004dfe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004df2:	4b32      	ldr	r3, [pc, #200]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e0ac      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e02:	4b2e      	ldr	r3, [pc, #184]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a2d      	ldr	r2, [pc, #180]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e0c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e0e:	f7fd fa3f 	bl	8002290 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e16:	f7fd fa3b 	bl	8002290 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e099      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e28:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f0      	bne.n	8004e16 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e34:	4b21      	ldr	r3, [pc, #132]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	4b21      	ldr	r3, [pc, #132]	@ (8004ec0 <HAL_RCC_OscConfig+0x788>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e44:	3a01      	subs	r2, #1
 8004e46:	0112      	lsls	r2, r2, #4
 8004e48:	4311      	orrs	r1, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004e4e:	0212      	lsls	r2, r2, #8
 8004e50:	4311      	orrs	r1, r2
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e56:	0852      	lsrs	r2, r2, #1
 8004e58:	3a01      	subs	r2, #1
 8004e5a:	0552      	lsls	r2, r2, #21
 8004e5c:	4311      	orrs	r1, r2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004e62:	0852      	lsrs	r2, r2, #1
 8004e64:	3a01      	subs	r2, #1
 8004e66:	0652      	lsls	r2, r2, #25
 8004e68:	4311      	orrs	r1, r2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e6e:	06d2      	lsls	r2, r2, #27
 8004e70:	430a      	orrs	r2, r1
 8004e72:	4912      	ldr	r1, [pc, #72]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004e78:	4b10      	ldr	r3, [pc, #64]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a0f      	ldr	r2, [pc, #60]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e84:	4b0d      	ldr	r3, [pc, #52]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	4a0c      	ldr	r2, [pc, #48]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004e8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e90:	f7fd f9fe 	bl	8002290 <HAL_GetTick>
 8004e94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e96:	e008      	b.n	8004eaa <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e98:	f7fd f9fa 	bl	8002290 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e058      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eaa:	4b04      	ldr	r3, [pc, #16]	@ (8004ebc <HAL_RCC_OscConfig+0x784>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004eb6:	e050      	b.n	8004f5a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e04f      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ec4:	4b27      	ldr	r3, [pc, #156]	@ (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d144      	bne.n	8004f5a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ed0:	4b24      	ldr	r3, [pc, #144]	@ (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a23      	ldr	r2, [pc, #140]	@ (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004ed6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004edc:	4b21      	ldr	r3, [pc, #132]	@ (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4a20      	ldr	r2, [pc, #128]	@ (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004ee2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ee6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ee8:	f7fd f9d2 	bl	8002290 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef0:	f7fd f9ce 	bl	8002290 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e02c      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f02:	4b18      	ldr	r3, [pc, #96]	@ (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x7b8>
 8004f0e:	e024      	b.n	8004f5a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	2b0c      	cmp	r3, #12
 8004f14:	d01f      	beq.n	8004f56 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f16:	4b13      	ldr	r3, [pc, #76]	@ (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a12      	ldr	r2, [pc, #72]	@ (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004f1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f22:	f7fd f9b5 	bl	8002290 <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2a:	f7fd f9b1 	bl	8002290 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e00f      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f3c:	4b09      	ldr	r3, [pc, #36]	@ (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1f0      	bne.n	8004f2a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004f48:	4b06      	ldr	r3, [pc, #24]	@ (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	4905      	ldr	r1, [pc, #20]	@ (8004f64 <HAL_RCC_OscConfig+0x82c>)
 8004f4e:	4b06      	ldr	r3, [pc, #24]	@ (8004f68 <HAL_RCC_OscConfig+0x830>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	60cb      	str	r3, [r1, #12]
 8004f54:	e001      	b.n	8004f5a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3720      	adds	r7, #32
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40021000 	.word	0x40021000
 8004f68:	feeefffc 	.word	0xfeeefffc

08004f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e0e7      	b.n	8005150 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f80:	4b75      	ldr	r3, [pc, #468]	@ (8005158 <HAL_RCC_ClockConfig+0x1ec>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d910      	bls.n	8004fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8e:	4b72      	ldr	r3, [pc, #456]	@ (8005158 <HAL_RCC_ClockConfig+0x1ec>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 0207 	bic.w	r2, r3, #7
 8004f96:	4970      	ldr	r1, [pc, #448]	@ (8005158 <HAL_RCC_ClockConfig+0x1ec>)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9e:	4b6e      	ldr	r3, [pc, #440]	@ (8005158 <HAL_RCC_ClockConfig+0x1ec>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d001      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0cf      	b.n	8005150 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d010      	beq.n	8004fde <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	4b66      	ldr	r3, [pc, #408]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d908      	bls.n	8004fde <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fcc:	4b63      	ldr	r3, [pc, #396]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	4960      	ldr	r1, [pc, #384]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d04c      	beq.n	8005084 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b03      	cmp	r3, #3
 8004ff0:	d107      	bne.n	8005002 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff2:	4b5a      	ldr	r3, [pc, #360]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d121      	bne.n	8005042 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e0a6      	b.n	8005150 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b02      	cmp	r3, #2
 8005008:	d107      	bne.n	800501a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800500a:	4b54      	ldr	r3, [pc, #336]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d115      	bne.n	8005042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e09a      	b.n	8005150 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d107      	bne.n	8005032 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005022:	4b4e      	ldr	r3, [pc, #312]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d109      	bne.n	8005042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e08e      	b.n	8005150 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005032:	4b4a      	ldr	r3, [pc, #296]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e086      	b.n	8005150 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005042:	4b46      	ldr	r3, [pc, #280]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f023 0203 	bic.w	r2, r3, #3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4943      	ldr	r1, [pc, #268]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 8005050:	4313      	orrs	r3, r2
 8005052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005054:	f7fd f91c 	bl	8002290 <HAL_GetTick>
 8005058:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505a:	e00a      	b.n	8005072 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800505c:	f7fd f918 	bl	8002290 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800506a:	4293      	cmp	r3, r2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e06e      	b.n	8005150 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005072:	4b3a      	ldr	r3, [pc, #232]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 020c 	and.w	r2, r3, #12
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	429a      	cmp	r2, r3
 8005082:	d1eb      	bne.n	800505c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d010      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	4b31      	ldr	r3, [pc, #196]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800509c:	429a      	cmp	r2, r3
 800509e:	d208      	bcs.n	80050b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a0:	4b2e      	ldr	r3, [pc, #184]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	492b      	ldr	r1, [pc, #172]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050b2:	4b29      	ldr	r3, [pc, #164]	@ (8005158 <HAL_RCC_ClockConfig+0x1ec>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d210      	bcs.n	80050e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c0:	4b25      	ldr	r3, [pc, #148]	@ (8005158 <HAL_RCC_ClockConfig+0x1ec>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f023 0207 	bic.w	r2, r3, #7
 80050c8:	4923      	ldr	r1, [pc, #140]	@ (8005158 <HAL_RCC_ClockConfig+0x1ec>)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d0:	4b21      	ldr	r3, [pc, #132]	@ (8005158 <HAL_RCC_ClockConfig+0x1ec>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d001      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e036      	b.n	8005150 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050ee:	4b1b      	ldr	r3, [pc, #108]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	4918      	ldr	r1, [pc, #96]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d009      	beq.n	8005120 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800510c:	4b13      	ldr	r3, [pc, #76]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	4910      	ldr	r1, [pc, #64]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 800511c:	4313      	orrs	r3, r2
 800511e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005120:	f000 f824 	bl	800516c <HAL_RCC_GetSysClockFreq>
 8005124:	4602      	mov	r2, r0
 8005126:	4b0d      	ldr	r3, [pc, #52]	@ (800515c <HAL_RCC_ClockConfig+0x1f0>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	091b      	lsrs	r3, r3, #4
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	490b      	ldr	r1, [pc, #44]	@ (8005160 <HAL_RCC_ClockConfig+0x1f4>)
 8005132:	5ccb      	ldrb	r3, [r1, r3]
 8005134:	f003 031f 	and.w	r3, r3, #31
 8005138:	fa22 f303 	lsr.w	r3, r2, r3
 800513c:	4a09      	ldr	r2, [pc, #36]	@ (8005164 <HAL_RCC_ClockConfig+0x1f8>)
 800513e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005140:	4b09      	ldr	r3, [pc, #36]	@ (8005168 <HAL_RCC_ClockConfig+0x1fc>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4618      	mov	r0, r3
 8005146:	f7fc ff73 	bl	8002030 <HAL_InitTick>
 800514a:	4603      	mov	r3, r0
 800514c:	72fb      	strb	r3, [r7, #11]

  return status;
 800514e:	7afb      	ldrb	r3, [r7, #11]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40022000 	.word	0x40022000
 800515c:	40021000 	.word	0x40021000
 8005160:	08009b10 	.word	0x08009b10
 8005164:	20000000 	.word	0x20000000
 8005168:	20000004 	.word	0x20000004

0800516c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800516c:	b480      	push	{r7}
 800516e:	b089      	sub	sp, #36	@ 0x24
 8005170:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	61fb      	str	r3, [r7, #28]
 8005176:	2300      	movs	r3, #0
 8005178:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800517a:	4b3e      	ldr	r3, [pc, #248]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x108>)
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 030c 	and.w	r3, r3, #12
 8005182:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005184:	4b3b      	ldr	r3, [pc, #236]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x108>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d005      	beq.n	80051a0 <HAL_RCC_GetSysClockFreq+0x34>
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2b0c      	cmp	r3, #12
 8005198:	d121      	bne.n	80051de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d11e      	bne.n	80051de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051a0:	4b34      	ldr	r3, [pc, #208]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x108>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0308 	and.w	r3, r3, #8
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d107      	bne.n	80051bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80051ac:	4b31      	ldr	r3, [pc, #196]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x108>)
 80051ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051b2:	0a1b      	lsrs	r3, r3, #8
 80051b4:	f003 030f 	and.w	r3, r3, #15
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	e005      	b.n	80051c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80051bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x108>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80051c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005278 <HAL_RCC_GetSysClockFreq+0x10c>)
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10d      	bne.n	80051f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051dc:	e00a      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d102      	bne.n	80051ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051e4:	4b25      	ldr	r3, [pc, #148]	@ (800527c <HAL_RCC_GetSysClockFreq+0x110>)
 80051e6:	61bb      	str	r3, [r7, #24]
 80051e8:	e004      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d101      	bne.n	80051f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051f0:	4b23      	ldr	r3, [pc, #140]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x114>)
 80051f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2b0c      	cmp	r3, #12
 80051f8:	d134      	bne.n	8005264 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x108>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b02      	cmp	r3, #2
 8005208:	d003      	beq.n	8005212 <HAL_RCC_GetSysClockFreq+0xa6>
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b03      	cmp	r3, #3
 800520e:	d003      	beq.n	8005218 <HAL_RCC_GetSysClockFreq+0xac>
 8005210:	e005      	b.n	800521e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005212:	4b1a      	ldr	r3, [pc, #104]	@ (800527c <HAL_RCC_GetSysClockFreq+0x110>)
 8005214:	617b      	str	r3, [r7, #20]
      break;
 8005216:	e005      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005218:	4b19      	ldr	r3, [pc, #100]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x114>)
 800521a:	617b      	str	r3, [r7, #20]
      break;
 800521c:	e002      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	617b      	str	r3, [r7, #20]
      break;
 8005222:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005224:	4b13      	ldr	r3, [pc, #76]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x108>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	3301      	adds	r3, #1
 8005230:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005232:	4b10      	ldr	r3, [pc, #64]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x108>)
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	0a1b      	lsrs	r3, r3, #8
 8005238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	fb03 f202 	mul.w	r2, r3, r2
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	fbb2 f3f3 	udiv	r3, r2, r3
 8005248:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800524a:	4b0a      	ldr	r3, [pc, #40]	@ (8005274 <HAL_RCC_GetSysClockFreq+0x108>)
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	0e5b      	lsrs	r3, r3, #25
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	3301      	adds	r3, #1
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005262:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005264:	69bb      	ldr	r3, [r7, #24]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3724      	adds	r7, #36	@ 0x24
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40021000 	.word	0x40021000
 8005278:	08009b28 	.word	0x08009b28
 800527c:	00f42400 	.word	0x00f42400
 8005280:	007a1200 	.word	0x007a1200

08005284 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005288:	4b03      	ldr	r3, [pc, #12]	@ (8005298 <HAL_RCC_GetHCLKFreq+0x14>)
 800528a:	681b      	ldr	r3, [r3, #0]
}
 800528c:	4618      	mov	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000000 	.word	0x20000000

0800529c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052a0:	f7ff fff0 	bl	8005284 <HAL_RCC_GetHCLKFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b06      	ldr	r3, [pc, #24]	@ (80052c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	4904      	ldr	r1, [pc, #16]	@ (80052c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052bc:	4618      	mov	r0, r3
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	40021000 	.word	0x40021000
 80052c4:	08009b20 	.word	0x08009b20

080052c8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	220f      	movs	r2, #15
 80052d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80052d8:	4b12      	ldr	r3, [pc, #72]	@ (8005324 <HAL_RCC_GetClockConfig+0x5c>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 0203 	and.w	r2, r3, #3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80052e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005324 <HAL_RCC_GetClockConfig+0x5c>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80052f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005324 <HAL_RCC_GetClockConfig+0x5c>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80052fc:	4b09      	ldr	r3, [pc, #36]	@ (8005324 <HAL_RCC_GetClockConfig+0x5c>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	08db      	lsrs	r3, r3, #3
 8005302:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800530a:	4b07      	ldr	r3, [pc, #28]	@ (8005328 <HAL_RCC_GetClockConfig+0x60>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0207 	and.w	r2, r3, #7
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	601a      	str	r2, [r3, #0]
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40021000 	.word	0x40021000
 8005328:	40022000 	.word	0x40022000

0800532c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005334:	2300      	movs	r3, #0
 8005336:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005338:	4b2a      	ldr	r3, [pc, #168]	@ (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800533a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800533c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005344:	f7ff f994 	bl	8004670 <HAL_PWREx_GetVoltageRange>
 8005348:	6178      	str	r0, [r7, #20]
 800534a:	e014      	b.n	8005376 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800534c:	4b25      	ldr	r3, [pc, #148]	@ (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800534e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005350:	4a24      	ldr	r2, [pc, #144]	@ (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005356:	6593      	str	r3, [r2, #88]	@ 0x58
 8005358:	4b22      	ldr	r3, [pc, #136]	@ (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800535a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800535c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005364:	f7ff f984 	bl	8004670 <HAL_PWREx_GetVoltageRange>
 8005368:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800536a:	4b1e      	ldr	r3, [pc, #120]	@ (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800536c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800536e:	4a1d      	ldr	r2, [pc, #116]	@ (80053e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005374:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800537c:	d10b      	bne.n	8005396 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b80      	cmp	r3, #128	@ 0x80
 8005382:	d919      	bls.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2ba0      	cmp	r3, #160	@ 0xa0
 8005388:	d902      	bls.n	8005390 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800538a:	2302      	movs	r3, #2
 800538c:	613b      	str	r3, [r7, #16]
 800538e:	e013      	b.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005390:	2301      	movs	r3, #1
 8005392:	613b      	str	r3, [r7, #16]
 8005394:	e010      	b.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b80      	cmp	r3, #128	@ 0x80
 800539a:	d902      	bls.n	80053a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800539c:	2303      	movs	r3, #3
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	e00a      	b.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b80      	cmp	r3, #128	@ 0x80
 80053a6:	d102      	bne.n	80053ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053a8:	2302      	movs	r3, #2
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	e004      	b.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b70      	cmp	r3, #112	@ 0x70
 80053b2:	d101      	bne.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053b4:	2301      	movs	r3, #1
 80053b6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053b8:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f023 0207 	bic.w	r2, r3, #7
 80053c0:	4909      	ldr	r1, [pc, #36]	@ (80053e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053c8:	4b07      	ldr	r3, [pc, #28]	@ (80053e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d001      	beq.n	80053da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40021000 	.word	0x40021000
 80053e8:	40022000 	.word	0x40022000

080053ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053f4:	2300      	movs	r3, #0
 80053f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053f8:	2300      	movs	r3, #0
 80053fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005404:	2b00      	cmp	r3, #0
 8005406:	d041      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800540c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005410:	d02a      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005412:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005416:	d824      	bhi.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005418:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800541c:	d008      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800541e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005422:	d81e      	bhi.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005428:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800542c:	d010      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800542e:	e018      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005430:	4b86      	ldr	r3, [pc, #536]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	4a85      	ldr	r2, [pc, #532]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800543a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800543c:	e015      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3304      	adds	r3, #4
 8005442:	2100      	movs	r1, #0
 8005444:	4618      	mov	r0, r3
 8005446:	f000 facd 	bl	80059e4 <RCCEx_PLLSAI1_Config>
 800544a:	4603      	mov	r3, r0
 800544c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800544e:	e00c      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3320      	adds	r3, #32
 8005454:	2100      	movs	r1, #0
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fbb6 	bl	8005bc8 <RCCEx_PLLSAI2_Config>
 800545c:	4603      	mov	r3, r0
 800545e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005460:	e003      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	74fb      	strb	r3, [r7, #19]
      break;
 8005466:	e000      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800546a:	7cfb      	ldrb	r3, [r7, #19]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10b      	bne.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005470:	4b76      	ldr	r3, [pc, #472]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005476:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800547e:	4973      	ldr	r1, [pc, #460]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005480:	4313      	orrs	r3, r2
 8005482:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005486:	e001      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005488:	7cfb      	ldrb	r3, [r7, #19]
 800548a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d041      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800549c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054a0:	d02a      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80054a2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054a6:	d824      	bhi.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80054a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054ac:	d008      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054b2:	d81e      	bhi.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80054b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054bc:	d010      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80054be:	e018      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054c0:	4b62      	ldr	r3, [pc, #392]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4a61      	ldr	r2, [pc, #388]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054cc:	e015      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3304      	adds	r3, #4
 80054d2:	2100      	movs	r1, #0
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 fa85 	bl	80059e4 <RCCEx_PLLSAI1_Config>
 80054da:	4603      	mov	r3, r0
 80054dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054de:	e00c      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3320      	adds	r3, #32
 80054e4:	2100      	movs	r1, #0
 80054e6:	4618      	mov	r0, r3
 80054e8:	f000 fb6e 	bl	8005bc8 <RCCEx_PLLSAI2_Config>
 80054ec:	4603      	mov	r3, r0
 80054ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054f0:	e003      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	74fb      	strb	r3, [r7, #19]
      break;
 80054f6:	e000      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80054f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054fa:	7cfb      	ldrb	r3, [r7, #19]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10b      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005500:	4b52      	ldr	r3, [pc, #328]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005506:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800550e:	494f      	ldr	r1, [pc, #316]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005516:	e001      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005518:	7cfb      	ldrb	r3, [r7, #19]
 800551a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 80a0 	beq.w	800566a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800552a:	2300      	movs	r3, #0
 800552c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800552e:	4b47      	ldr	r3, [pc, #284]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800553e:	2300      	movs	r3, #0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00d      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005544:	4b41      	ldr	r3, [pc, #260]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005548:	4a40      	ldr	r2, [pc, #256]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800554a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800554e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005550:	4b3e      	ldr	r3, [pc, #248]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800555c:	2301      	movs	r3, #1
 800555e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005560:	4b3b      	ldr	r3, [pc, #236]	@ (8005650 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a3a      	ldr	r2, [pc, #232]	@ (8005650 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800556a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800556c:	f7fc fe90 	bl	8002290 <HAL_GetTick>
 8005570:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005572:	e009      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005574:	f7fc fe8c 	bl	8002290 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d902      	bls.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	74fb      	strb	r3, [r7, #19]
        break;
 8005586:	e005      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005588:	4b31      	ldr	r3, [pc, #196]	@ (8005650 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0ef      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005594:	7cfb      	ldrb	r3, [r7, #19]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d15c      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800559a:	4b2c      	ldr	r3, [pc, #176]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800559c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d01f      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d019      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055b8:	4b24      	ldr	r3, [pc, #144]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055c4:	4b21      	ldr	r3, [pc, #132]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ca:	4a20      	ldr	r2, [pc, #128]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055d4:	4b1d      	ldr	r3, [pc, #116]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055da:	4a1c      	ldr	r2, [pc, #112]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055e4:	4a19      	ldr	r2, [pc, #100]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d016      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f6:	f7fc fe4b 	bl	8002290 <HAL_GetTick>
 80055fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055fc:	e00b      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055fe:	f7fc fe47 	bl	8002290 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800560c:	4293      	cmp	r3, r2
 800560e:	d902      	bls.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	74fb      	strb	r3, [r7, #19]
            break;
 8005614:	e006      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005616:	4b0d      	ldr	r3, [pc, #52]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0ec      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005624:	7cfb      	ldrb	r3, [r7, #19]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10c      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800562a:	4b08      	ldr	r3, [pc, #32]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800562c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005630:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563a:	4904      	ldr	r1, [pc, #16]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005642:	e009      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005644:	7cfb      	ldrb	r3, [r7, #19]
 8005646:	74bb      	strb	r3, [r7, #18]
 8005648:	e006      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800564a:	bf00      	nop
 800564c:	40021000 	.word	0x40021000
 8005650:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005654:	7cfb      	ldrb	r3, [r7, #19]
 8005656:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005658:	7c7b      	ldrb	r3, [r7, #17]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d105      	bne.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800565e:	4ba6      	ldr	r3, [pc, #664]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005662:	4aa5      	ldr	r2, [pc, #660]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005664:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005668:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005676:	4ba0      	ldr	r3, [pc, #640]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800567c:	f023 0203 	bic.w	r2, r3, #3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005684:	499c      	ldr	r1, [pc, #624]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0302 	and.w	r3, r3, #2
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005698:	4b97      	ldr	r3, [pc, #604]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800569a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569e:	f023 020c 	bic.w	r2, r3, #12
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a6:	4994      	ldr	r1, [pc, #592]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056ba:	4b8f      	ldr	r3, [pc, #572]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c8:	498b      	ldr	r1, [pc, #556]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056dc:	4b86      	ldr	r3, [pc, #536]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ea:	4983      	ldr	r1, [pc, #524]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0310 	and.w	r3, r3, #16
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056fe:	4b7e      	ldr	r3, [pc, #504]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005704:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800570c:	497a      	ldr	r1, [pc, #488]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0320 	and.w	r3, r3, #32
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005720:	4b75      	ldr	r3, [pc, #468]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005726:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800572e:	4972      	ldr	r1, [pc, #456]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005742:	4b6d      	ldr	r3, [pc, #436]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005748:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005750:	4969      	ldr	r1, [pc, #420]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005764:	4b64      	ldr	r3, [pc, #400]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005772:	4961      	ldr	r1, [pc, #388]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005774:	4313      	orrs	r3, r2
 8005776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005786:	4b5c      	ldr	r3, [pc, #368]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005794:	4958      	ldr	r1, [pc, #352]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057a8:	4b53      	ldr	r3, [pc, #332]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b6:	4950      	ldr	r1, [pc, #320]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057ca:	4b4b      	ldr	r3, [pc, #300]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d8:	4947      	ldr	r1, [pc, #284]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00a      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057ec:	4b42      	ldr	r3, [pc, #264]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057f2:	f023 0203 	bic.w	r2, r3, #3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057fa:	493f      	ldr	r1, [pc, #252]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d028      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800580e:	4b3a      	ldr	r3, [pc, #232]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005814:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800581c:	4936      	ldr	r1, [pc, #216]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800581e:	4313      	orrs	r3, r2
 8005820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005828:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800582c:	d106      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800582e:	4b32      	ldr	r3, [pc, #200]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	4a31      	ldr	r2, [pc, #196]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005834:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005838:	60d3      	str	r3, [r2, #12]
 800583a:	e011      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005840:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005844:	d10c      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3304      	adds	r3, #4
 800584a:	2101      	movs	r1, #1
 800584c:	4618      	mov	r0, r3
 800584e:	f000 f8c9 	bl	80059e4 <RCCEx_PLLSAI1_Config>
 8005852:	4603      	mov	r3, r0
 8005854:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005856:	7cfb      	ldrb	r3, [r7, #19]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800585c:	7cfb      	ldrb	r3, [r7, #19]
 800585e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d028      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800586c:	4b22      	ldr	r3, [pc, #136]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800586e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005872:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800587a:	491f      	ldr	r1, [pc, #124]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800587c:	4313      	orrs	r3, r2
 800587e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005886:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800588a:	d106      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800588c:	4b1a      	ldr	r3, [pc, #104]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	4a19      	ldr	r2, [pc, #100]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005892:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005896:	60d3      	str	r3, [r2, #12]
 8005898:	e011      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800589e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058a2:	d10c      	bne.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3304      	adds	r3, #4
 80058a8:	2101      	movs	r1, #1
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 f89a 	bl	80059e4 <RCCEx_PLLSAI1_Config>
 80058b0:	4603      	mov	r3, r0
 80058b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058b4:	7cfb      	ldrb	r3, [r7, #19]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80058ba:	7cfb      	ldrb	r3, [r7, #19]
 80058bc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d02a      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058ca:	4b0b      	ldr	r3, [pc, #44]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058d8:	4907      	ldr	r1, [pc, #28]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058e8:	d108      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058ea:	4b03      	ldr	r3, [pc, #12]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	4a02      	ldr	r2, [pc, #8]	@ (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058f4:	60d3      	str	r3, [r2, #12]
 80058f6:	e013      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80058f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005900:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005904:	d10c      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3304      	adds	r3, #4
 800590a:	2101      	movs	r1, #1
 800590c:	4618      	mov	r0, r3
 800590e:	f000 f869 	bl	80059e4 <RCCEx_PLLSAI1_Config>
 8005912:	4603      	mov	r3, r0
 8005914:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005916:	7cfb      	ldrb	r3, [r7, #19]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800591c:	7cfb      	ldrb	r3, [r7, #19]
 800591e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d02f      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800592c:	4b2c      	ldr	r3, [pc, #176]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005932:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800593a:	4929      	ldr	r1, [pc, #164]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005946:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800594a:	d10d      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	2102      	movs	r1, #2
 8005952:	4618      	mov	r0, r3
 8005954:	f000 f846 	bl	80059e4 <RCCEx_PLLSAI1_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800595c:	7cfb      	ldrb	r3, [r7, #19]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d014      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005962:	7cfb      	ldrb	r3, [r7, #19]
 8005964:	74bb      	strb	r3, [r7, #18]
 8005966:	e011      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800596c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005970:	d10c      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3320      	adds	r3, #32
 8005976:	2102      	movs	r1, #2
 8005978:	4618      	mov	r0, r3
 800597a:	f000 f925 	bl	8005bc8 <RCCEx_PLLSAI2_Config>
 800597e:	4603      	mov	r3, r0
 8005980:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005982:	7cfb      	ldrb	r3, [r7, #19]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005988:	7cfb      	ldrb	r3, [r7, #19]
 800598a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00b      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005998:	4b11      	ldr	r3, [pc, #68]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800599e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059a8:	490d      	ldr	r1, [pc, #52]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00b      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059bc:	4b08      	ldr	r3, [pc, #32]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80059be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059cc:	4904      	ldr	r1, [pc, #16]	@ (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80059d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	40021000 	.word	0x40021000

080059e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059f2:	4b74      	ldr	r3, [pc, #464]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f003 0303 	and.w	r3, r3, #3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d018      	beq.n	8005a30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80059fe:	4b71      	ldr	r3, [pc, #452]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f003 0203 	and.w	r2, r3, #3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d10d      	bne.n	8005a2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
       ||
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d009      	beq.n	8005a2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a16:	4b6b      	ldr	r3, [pc, #428]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	091b      	lsrs	r3, r3, #4
 8005a1c:	f003 0307 	and.w	r3, r3, #7
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
       ||
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d047      	beq.n	8005aba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	73fb      	strb	r3, [r7, #15]
 8005a2e:	e044      	b.n	8005aba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d018      	beq.n	8005a6a <RCCEx_PLLSAI1_Config+0x86>
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d825      	bhi.n	8005a88 <RCCEx_PLLSAI1_Config+0xa4>
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d002      	beq.n	8005a46 <RCCEx_PLLSAI1_Config+0x62>
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d009      	beq.n	8005a58 <RCCEx_PLLSAI1_Config+0x74>
 8005a44:	e020      	b.n	8005a88 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a46:	4b5f      	ldr	r3, [pc, #380]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0302 	and.w	r3, r3, #2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d11d      	bne.n	8005a8e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a56:	e01a      	b.n	8005a8e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a58:	4b5a      	ldr	r3, [pc, #360]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d116      	bne.n	8005a92 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a68:	e013      	b.n	8005a92 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a6a:	4b56      	ldr	r3, [pc, #344]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10f      	bne.n	8005a96 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a76:	4b53      	ldr	r3, [pc, #332]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d109      	bne.n	8005a96 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a86:	e006      	b.n	8005a96 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a8c:	e004      	b.n	8005a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a8e:	bf00      	nop
 8005a90:	e002      	b.n	8005a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a92:	bf00      	nop
 8005a94:	e000      	b.n	8005a98 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a96:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10d      	bne.n	8005aba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a9e:	4b49      	ldr	r3, [pc, #292]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6819      	ldr	r1, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	4943      	ldr	r1, [pc, #268]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d17c      	bne.n	8005bba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ac0:	4b40      	ldr	r3, [pc, #256]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a3f      	ldr	r2, [pc, #252]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ac6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005aca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005acc:	f7fc fbe0 	bl	8002290 <HAL_GetTick>
 8005ad0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ad2:	e009      	b.n	8005ae8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ad4:	f7fc fbdc 	bl	8002290 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d902      	bls.n	8005ae8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	73fb      	strb	r3, [r7, #15]
        break;
 8005ae6:	e005      	b.n	8005af4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ae8:	4b36      	ldr	r3, [pc, #216]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1ef      	bne.n	8005ad4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d15f      	bne.n	8005bba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d110      	bne.n	8005b22 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b00:	4b30      	ldr	r3, [pc, #192]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005b08:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6892      	ldr	r2, [r2, #8]
 8005b10:	0211      	lsls	r1, r2, #8
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	68d2      	ldr	r2, [r2, #12]
 8005b16:	06d2      	lsls	r2, r2, #27
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	492a      	ldr	r1, [pc, #168]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	610b      	str	r3, [r1, #16]
 8005b20:	e027      	b.n	8005b72 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d112      	bne.n	8005b4e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b28:	4b26      	ldr	r3, [pc, #152]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005b30:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6892      	ldr	r2, [r2, #8]
 8005b38:	0211      	lsls	r1, r2, #8
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6912      	ldr	r2, [r2, #16]
 8005b3e:	0852      	lsrs	r2, r2, #1
 8005b40:	3a01      	subs	r2, #1
 8005b42:	0552      	lsls	r2, r2, #21
 8005b44:	430a      	orrs	r2, r1
 8005b46:	491f      	ldr	r1, [pc, #124]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	610b      	str	r3, [r1, #16]
 8005b4c:	e011      	b.n	8005b72 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b56:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6892      	ldr	r2, [r2, #8]
 8005b5e:	0211      	lsls	r1, r2, #8
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6952      	ldr	r2, [r2, #20]
 8005b64:	0852      	lsrs	r2, r2, #1
 8005b66:	3a01      	subs	r2, #1
 8005b68:	0652      	lsls	r2, r2, #25
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	4915      	ldr	r1, [pc, #84]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b72:	4b14      	ldr	r3, [pc, #80]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a13      	ldr	r2, [pc, #76]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005b7c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7e:	f7fc fb87 	bl	8002290 <HAL_GetTick>
 8005b82:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b84:	e009      	b.n	8005b9a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b86:	f7fc fb83 	bl	8002290 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d902      	bls.n	8005b9a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	73fb      	strb	r3, [r7, #15]
          break;
 8005b98:	e005      	b.n	8005ba6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0ef      	beq.n	8005b86 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d106      	bne.n	8005bba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005bac:	4b05      	ldr	r3, [pc, #20]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bae:	691a      	ldr	r2, [r3, #16]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	4903      	ldr	r1, [pc, #12]	@ (8005bc4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	40021000 	.word	0x40021000

08005bc8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005bd6:	4b69      	ldr	r3, [pc, #420]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d018      	beq.n	8005c14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005be2:	4b66      	ldr	r3, [pc, #408]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f003 0203 	and.w	r2, r3, #3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d10d      	bne.n	8005c0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
       ||
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d009      	beq.n	8005c0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005bfa:	4b60      	ldr	r3, [pc, #384]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	091b      	lsrs	r3, r3, #4
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
       ||
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d047      	beq.n	8005c9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	73fb      	strb	r3, [r7, #15]
 8005c12:	e044      	b.n	8005c9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d018      	beq.n	8005c4e <RCCEx_PLLSAI2_Config+0x86>
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d825      	bhi.n	8005c6c <RCCEx_PLLSAI2_Config+0xa4>
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d002      	beq.n	8005c2a <RCCEx_PLLSAI2_Config+0x62>
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d009      	beq.n	8005c3c <RCCEx_PLLSAI2_Config+0x74>
 8005c28:	e020      	b.n	8005c6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c2a:	4b54      	ldr	r3, [pc, #336]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d11d      	bne.n	8005c72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c3a:	e01a      	b.n	8005c72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c3c:	4b4f      	ldr	r3, [pc, #316]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d116      	bne.n	8005c76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c4c:	e013      	b.n	8005c76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c4e:	4b4b      	ldr	r3, [pc, #300]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10f      	bne.n	8005c7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c5a:	4b48      	ldr	r3, [pc, #288]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c6a:	e006      	b.n	8005c7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c70:	e004      	b.n	8005c7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c72:	bf00      	nop
 8005c74:	e002      	b.n	8005c7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c76:	bf00      	nop
 8005c78:	e000      	b.n	8005c7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10d      	bne.n	8005c9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c82:	4b3e      	ldr	r3, [pc, #248]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6819      	ldr	r1, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	430b      	orrs	r3, r1
 8005c98:	4938      	ldr	r1, [pc, #224]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d166      	bne.n	8005d72 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ca4:	4b35      	ldr	r3, [pc, #212]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a34      	ldr	r2, [pc, #208]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005caa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cb0:	f7fc faee 	bl	8002290 <HAL_GetTick>
 8005cb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cb6:	e009      	b.n	8005ccc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cb8:	f7fc faea 	bl	8002290 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d902      	bls.n	8005ccc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	73fb      	strb	r3, [r7, #15]
        break;
 8005cca:	e005      	b.n	8005cd8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1ef      	bne.n	8005cb8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d149      	bne.n	8005d72 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d110      	bne.n	8005d06 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ce4:	4b25      	ldr	r3, [pc, #148]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005cec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6892      	ldr	r2, [r2, #8]
 8005cf4:	0211      	lsls	r1, r2, #8
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	68d2      	ldr	r2, [r2, #12]
 8005cfa:	06d2      	lsls	r2, r2, #27
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	491f      	ldr	r1, [pc, #124]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	614b      	str	r3, [r1, #20]
 8005d04:	e011      	b.n	8005d2a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d06:	4b1d      	ldr	r3, [pc, #116]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005d0e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6892      	ldr	r2, [r2, #8]
 8005d16:	0211      	lsls	r1, r2, #8
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	6912      	ldr	r2, [r2, #16]
 8005d1c:	0852      	lsrs	r2, r2, #1
 8005d1e:	3a01      	subs	r2, #1
 8005d20:	0652      	lsls	r2, r2, #25
 8005d22:	430a      	orrs	r2, r1
 8005d24:	4915      	ldr	r1, [pc, #84]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d2a:	4b14      	ldr	r3, [pc, #80]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a13      	ldr	r2, [pc, #76]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d36:	f7fc faab 	bl	8002290 <HAL_GetTick>
 8005d3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d3c:	e009      	b.n	8005d52 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d3e:	f7fc faa7 	bl	8002290 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d902      	bls.n	8005d52 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	73fb      	strb	r3, [r7, #15]
          break;
 8005d50:	e005      	b.n	8005d5e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d52:	4b0a      	ldr	r3, [pc, #40]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d0ef      	beq.n	8005d3e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d106      	bne.n	8005d72 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d64:	4b05      	ldr	r3, [pc, #20]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d66:	695a      	ldr	r2, [r3, #20]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	4903      	ldr	r1, [pc, #12]	@ (8005d7c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40021000 	.word	0x40021000

08005d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e049      	b.n	8005e26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d106      	bne.n	8005dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f841 	bl	8005e2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	f000 fab0 	bl	8006324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d001      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e04f      	b.n	8005efc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a23      	ldr	r2, [pc, #140]	@ (8005f08 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d01d      	beq.n	8005eba <HAL_TIM_Base_Start_IT+0x76>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e86:	d018      	beq.n	8005eba <HAL_TIM_Base_Start_IT+0x76>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8005f0c <HAL_TIM_Base_Start_IT+0xc8>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <HAL_TIM_Base_Start_IT+0x76>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1e      	ldr	r2, [pc, #120]	@ (8005f10 <HAL_TIM_Base_Start_IT+0xcc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00e      	beq.n	8005eba <HAL_TIM_Base_Start_IT+0x76>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8005f14 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d009      	beq.n	8005eba <HAL_TIM_Base_Start_IT+0x76>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8005f18 <HAL_TIM_Base_Start_IT+0xd4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d004      	beq.n	8005eba <HAL_TIM_Base_Start_IT+0x76>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a19      	ldr	r2, [pc, #100]	@ (8005f1c <HAL_TIM_Base_Start_IT+0xd8>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d115      	bne.n	8005ee6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	4b17      	ldr	r3, [pc, #92]	@ (8005f20 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2b06      	cmp	r3, #6
 8005eca:	d015      	beq.n	8005ef8 <HAL_TIM_Base_Start_IT+0xb4>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ed2:	d011      	beq.n	8005ef8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 0201 	orr.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee4:	e008      	b.n	8005ef8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f042 0201 	orr.w	r2, r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	e000      	b.n	8005efa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	40012c00 	.word	0x40012c00
 8005f0c:	40000400 	.word	0x40000400
 8005f10:	40000800 	.word	0x40000800
 8005f14:	40000c00 	.word	0x40000c00
 8005f18:	40013400 	.word	0x40013400
 8005f1c:	40014000 	.word	0x40014000
 8005f20:	00010007 	.word	0x00010007

08005f24 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e049      	b.n	8005fca <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fc f818 	bl	8001f80 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f000 f9de 	bl	8006324 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d020      	beq.n	8006036 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d01b      	beq.n	8006036 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f06f 0202 	mvn.w	r2, #2
 8006006:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d003      	beq.n	8006024 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f963 	bl	80062e8 <HAL_TIM_IC_CaptureCallback>
 8006022:	e005      	b.n	8006030 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f955 	bl	80062d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f966 	bl	80062fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b00      	cmp	r3, #0
 800603e:	d020      	beq.n	8006082 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f003 0304 	and.w	r3, r3, #4
 8006046:	2b00      	cmp	r3, #0
 8006048:	d01b      	beq.n	8006082 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f06f 0204 	mvn.w	r2, #4
 8006052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	699b      	ldr	r3, [r3, #24]
 8006060:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f93d 	bl	80062e8 <HAL_TIM_IC_CaptureCallback>
 800606e:	e005      	b.n	800607c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f92f 	bl	80062d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f940 	bl	80062fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b00      	cmp	r3, #0
 800608a:	d020      	beq.n	80060ce <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f003 0308 	and.w	r3, r3, #8
 8006092:	2b00      	cmp	r3, #0
 8006094:	d01b      	beq.n	80060ce <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f06f 0208 	mvn.w	r2, #8
 800609e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2204      	movs	r2, #4
 80060a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	f003 0303 	and.w	r3, r3, #3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d003      	beq.n	80060bc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 f917 	bl	80062e8 <HAL_TIM_IC_CaptureCallback>
 80060ba:	e005      	b.n	80060c8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f909 	bl	80062d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f91a 	bl	80062fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d020      	beq.n	800611a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d01b      	beq.n	800611a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f06f 0210 	mvn.w	r2, #16
 80060ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2208      	movs	r2, #8
 80060f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f8f1 	bl	80062e8 <HAL_TIM_IC_CaptureCallback>
 8006106:	e005      	b.n	8006114 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f8e3 	bl	80062d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f8f4 	bl	80062fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00c      	beq.n	800613e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d007      	beq.n	800613e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f06f 0201 	mvn.w	r2, #1
 8006136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7fb fd69 	bl	8001c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006144:	2b00      	cmp	r3, #0
 8006146:	d104      	bne.n	8006152 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00c      	beq.n	800616c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 fd68 	bl	8006c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00c      	beq.n	8006190 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800617c:	2b00      	cmp	r3, #0
 800617e:	d007      	beq.n	8006190 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fd60 	bl	8006c50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00c      	beq.n	80061b4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d007      	beq.n	80061b4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f8ae 	bl	8006310 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00c      	beq.n	80061d8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d007      	beq.n	80061d8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f06f 0220 	mvn.w	r2, #32
 80061d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fd28 	bl	8006c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061d8:	bf00      	nop
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061ec:	2300      	movs	r3, #0
 80061ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d101      	bne.n	80061fe <HAL_TIM_OC_ConfigChannel+0x1e>
 80061fa:	2302      	movs	r3, #2
 80061fc:	e066      	b.n	80062cc <HAL_TIM_OC_ConfigChannel+0xec>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b14      	cmp	r3, #20
 800620a:	d857      	bhi.n	80062bc <HAL_TIM_OC_ConfigChannel+0xdc>
 800620c:	a201      	add	r2, pc, #4	@ (adr r2, 8006214 <HAL_TIM_OC_ConfigChannel+0x34>)
 800620e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006212:	bf00      	nop
 8006214:	08006269 	.word	0x08006269
 8006218:	080062bd 	.word	0x080062bd
 800621c:	080062bd 	.word	0x080062bd
 8006220:	080062bd 	.word	0x080062bd
 8006224:	08006277 	.word	0x08006277
 8006228:	080062bd 	.word	0x080062bd
 800622c:	080062bd 	.word	0x080062bd
 8006230:	080062bd 	.word	0x080062bd
 8006234:	08006285 	.word	0x08006285
 8006238:	080062bd 	.word	0x080062bd
 800623c:	080062bd 	.word	0x080062bd
 8006240:	080062bd 	.word	0x080062bd
 8006244:	08006293 	.word	0x08006293
 8006248:	080062bd 	.word	0x080062bd
 800624c:	080062bd 	.word	0x080062bd
 8006250:	080062bd 	.word	0x080062bd
 8006254:	080062a1 	.word	0x080062a1
 8006258:	080062bd 	.word	0x080062bd
 800625c:	080062bd 	.word	0x080062bd
 8006260:	080062bd 	.word	0x080062bd
 8006264:	080062af 	.word	0x080062af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68b9      	ldr	r1, [r7, #8]
 800626e:	4618      	mov	r0, r3
 8006270:	f000 f8fe 	bl	8006470 <TIM_OC1_SetConfig>
      break;
 8006274:	e025      	b.n	80062c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	4618      	mov	r0, r3
 800627e:	f000 f987 	bl	8006590 <TIM_OC2_SetConfig>
      break;
 8006282:	e01e      	b.n	80062c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68b9      	ldr	r1, [r7, #8]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fa0a 	bl	80066a4 <TIM_OC3_SetConfig>
      break;
 8006290:	e017      	b.n	80062c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68b9      	ldr	r1, [r7, #8]
 8006298:	4618      	mov	r0, r3
 800629a:	f000 fa8b 	bl	80067b4 <TIM_OC4_SetConfig>
      break;
 800629e:	e010      	b.n	80062c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68b9      	ldr	r1, [r7, #8]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 faee 	bl	8006888 <TIM_OC5_SetConfig>
      break;
 80062ac:	e009      	b.n	80062c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68b9      	ldr	r1, [r7, #8]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 fb4b 	bl	8006950 <TIM_OC6_SetConfig>
      break;
 80062ba:	e002      	b.n	80062c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	75fb      	strb	r3, [r7, #23]
      break;
 80062c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a46      	ldr	r2, [pc, #280]	@ (8006450 <TIM_Base_SetConfig+0x12c>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d013      	beq.n	8006364 <TIM_Base_SetConfig+0x40>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006342:	d00f      	beq.n	8006364 <TIM_Base_SetConfig+0x40>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a43      	ldr	r2, [pc, #268]	@ (8006454 <TIM_Base_SetConfig+0x130>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00b      	beq.n	8006364 <TIM_Base_SetConfig+0x40>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a42      	ldr	r2, [pc, #264]	@ (8006458 <TIM_Base_SetConfig+0x134>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d007      	beq.n	8006364 <TIM_Base_SetConfig+0x40>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a41      	ldr	r2, [pc, #260]	@ (800645c <TIM_Base_SetConfig+0x138>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d003      	beq.n	8006364 <TIM_Base_SetConfig+0x40>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a40      	ldr	r2, [pc, #256]	@ (8006460 <TIM_Base_SetConfig+0x13c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d108      	bne.n	8006376 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800636a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a35      	ldr	r2, [pc, #212]	@ (8006450 <TIM_Base_SetConfig+0x12c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d01f      	beq.n	80063be <TIM_Base_SetConfig+0x9a>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006384:	d01b      	beq.n	80063be <TIM_Base_SetConfig+0x9a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a32      	ldr	r2, [pc, #200]	@ (8006454 <TIM_Base_SetConfig+0x130>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d017      	beq.n	80063be <TIM_Base_SetConfig+0x9a>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a31      	ldr	r2, [pc, #196]	@ (8006458 <TIM_Base_SetConfig+0x134>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d013      	beq.n	80063be <TIM_Base_SetConfig+0x9a>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a30      	ldr	r2, [pc, #192]	@ (800645c <TIM_Base_SetConfig+0x138>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d00f      	beq.n	80063be <TIM_Base_SetConfig+0x9a>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a2f      	ldr	r2, [pc, #188]	@ (8006460 <TIM_Base_SetConfig+0x13c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00b      	beq.n	80063be <TIM_Base_SetConfig+0x9a>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a2e      	ldr	r2, [pc, #184]	@ (8006464 <TIM_Base_SetConfig+0x140>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d007      	beq.n	80063be <TIM_Base_SetConfig+0x9a>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a2d      	ldr	r2, [pc, #180]	@ (8006468 <TIM_Base_SetConfig+0x144>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d003      	beq.n	80063be <TIM_Base_SetConfig+0x9a>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a2c      	ldr	r2, [pc, #176]	@ (800646c <TIM_Base_SetConfig+0x148>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d108      	bne.n	80063d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	4313      	orrs	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a16      	ldr	r2, [pc, #88]	@ (8006450 <TIM_Base_SetConfig+0x12c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d00f      	beq.n	800641c <TIM_Base_SetConfig+0xf8>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a18      	ldr	r2, [pc, #96]	@ (8006460 <TIM_Base_SetConfig+0x13c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00b      	beq.n	800641c <TIM_Base_SetConfig+0xf8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a17      	ldr	r2, [pc, #92]	@ (8006464 <TIM_Base_SetConfig+0x140>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d007      	beq.n	800641c <TIM_Base_SetConfig+0xf8>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a16      	ldr	r2, [pc, #88]	@ (8006468 <TIM_Base_SetConfig+0x144>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d003      	beq.n	800641c <TIM_Base_SetConfig+0xf8>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a15      	ldr	r2, [pc, #84]	@ (800646c <TIM_Base_SetConfig+0x148>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d103      	bne.n	8006424 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	691a      	ldr	r2, [r3, #16]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b01      	cmp	r3, #1
 8006434:	d105      	bne.n	8006442 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	f023 0201 	bic.w	r2, r3, #1
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	611a      	str	r2, [r3, #16]
  }
}
 8006442:	bf00      	nop
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	40012c00 	.word	0x40012c00
 8006454:	40000400 	.word	0x40000400
 8006458:	40000800 	.word	0x40000800
 800645c:	40000c00 	.word	0x40000c00
 8006460:	40013400 	.word	0x40013400
 8006464:	40014000 	.word	0x40014000
 8006468:	40014400 	.word	0x40014400
 800646c:	40014800 	.word	0x40014800

08006470 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	f023 0201 	bic.w	r2, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800649e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 0303 	bic.w	r3, r3, #3
 80064aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f023 0302 	bic.w	r3, r3, #2
 80064bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a2c      	ldr	r2, [pc, #176]	@ (800657c <TIM_OC1_SetConfig+0x10c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d00f      	beq.n	80064f0 <TIM_OC1_SetConfig+0x80>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a2b      	ldr	r2, [pc, #172]	@ (8006580 <TIM_OC1_SetConfig+0x110>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00b      	beq.n	80064f0 <TIM_OC1_SetConfig+0x80>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a2a      	ldr	r2, [pc, #168]	@ (8006584 <TIM_OC1_SetConfig+0x114>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d007      	beq.n	80064f0 <TIM_OC1_SetConfig+0x80>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a29      	ldr	r2, [pc, #164]	@ (8006588 <TIM_OC1_SetConfig+0x118>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d003      	beq.n	80064f0 <TIM_OC1_SetConfig+0x80>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a28      	ldr	r2, [pc, #160]	@ (800658c <TIM_OC1_SetConfig+0x11c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d10c      	bne.n	800650a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f023 0308 	bic.w	r3, r3, #8
 80064f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	4313      	orrs	r3, r2
 8006500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f023 0304 	bic.w	r3, r3, #4
 8006508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a1b      	ldr	r2, [pc, #108]	@ (800657c <TIM_OC1_SetConfig+0x10c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00f      	beq.n	8006532 <TIM_OC1_SetConfig+0xc2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a1a      	ldr	r2, [pc, #104]	@ (8006580 <TIM_OC1_SetConfig+0x110>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00b      	beq.n	8006532 <TIM_OC1_SetConfig+0xc2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a19      	ldr	r2, [pc, #100]	@ (8006584 <TIM_OC1_SetConfig+0x114>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d007      	beq.n	8006532 <TIM_OC1_SetConfig+0xc2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a18      	ldr	r2, [pc, #96]	@ (8006588 <TIM_OC1_SetConfig+0x118>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d003      	beq.n	8006532 <TIM_OC1_SetConfig+0xc2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a17      	ldr	r2, [pc, #92]	@ (800658c <TIM_OC1_SetConfig+0x11c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d111      	bne.n	8006556 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	621a      	str	r2, [r3, #32]
}
 8006570:	bf00      	nop
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	40012c00 	.word	0x40012c00
 8006580:	40013400 	.word	0x40013400
 8006584:	40014000 	.word	0x40014000
 8006588:	40014400 	.word	0x40014400
 800658c:	40014800 	.word	0x40014800

08006590 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	f023 0210 	bic.w	r2, r3, #16
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	021b      	lsls	r3, r3, #8
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f023 0320 	bic.w	r3, r3, #32
 80065de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a28      	ldr	r2, [pc, #160]	@ (8006690 <TIM_OC2_SetConfig+0x100>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d003      	beq.n	80065fc <TIM_OC2_SetConfig+0x6c>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a27      	ldr	r2, [pc, #156]	@ (8006694 <TIM_OC2_SetConfig+0x104>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d10d      	bne.n	8006618 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006616:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a1d      	ldr	r2, [pc, #116]	@ (8006690 <TIM_OC2_SetConfig+0x100>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d00f      	beq.n	8006640 <TIM_OC2_SetConfig+0xb0>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a1c      	ldr	r2, [pc, #112]	@ (8006694 <TIM_OC2_SetConfig+0x104>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00b      	beq.n	8006640 <TIM_OC2_SetConfig+0xb0>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a1b      	ldr	r2, [pc, #108]	@ (8006698 <TIM_OC2_SetConfig+0x108>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d007      	beq.n	8006640 <TIM_OC2_SetConfig+0xb0>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a1a      	ldr	r2, [pc, #104]	@ (800669c <TIM_OC2_SetConfig+0x10c>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d003      	beq.n	8006640 <TIM_OC2_SetConfig+0xb0>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a19      	ldr	r2, [pc, #100]	@ (80066a0 <TIM_OC2_SetConfig+0x110>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d113      	bne.n	8006668 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006646:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800664e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	4313      	orrs	r3, r2
 800665a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	4313      	orrs	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	621a      	str	r2, [r3, #32]
}
 8006682:	bf00      	nop
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40012c00 	.word	0x40012c00
 8006694:	40013400 	.word	0x40013400
 8006698:	40014000 	.word	0x40014000
 800669c:	40014400 	.word	0x40014400
 80066a0:	40014800 	.word	0x40014800

080066a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0303 	bic.w	r3, r3, #3
 80066de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	021b      	lsls	r3, r3, #8
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a27      	ldr	r2, [pc, #156]	@ (80067a0 <TIM_OC3_SetConfig+0xfc>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d003      	beq.n	800670e <TIM_OC3_SetConfig+0x6a>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a26      	ldr	r2, [pc, #152]	@ (80067a4 <TIM_OC3_SetConfig+0x100>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d10d      	bne.n	800672a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	021b      	lsls	r3, r3, #8
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a1c      	ldr	r2, [pc, #112]	@ (80067a0 <TIM_OC3_SetConfig+0xfc>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00f      	beq.n	8006752 <TIM_OC3_SetConfig+0xae>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a1b      	ldr	r2, [pc, #108]	@ (80067a4 <TIM_OC3_SetConfig+0x100>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d00b      	beq.n	8006752 <TIM_OC3_SetConfig+0xae>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a1a      	ldr	r2, [pc, #104]	@ (80067a8 <TIM_OC3_SetConfig+0x104>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d007      	beq.n	8006752 <TIM_OC3_SetConfig+0xae>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a19      	ldr	r2, [pc, #100]	@ (80067ac <TIM_OC3_SetConfig+0x108>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d003      	beq.n	8006752 <TIM_OC3_SetConfig+0xae>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a18      	ldr	r2, [pc, #96]	@ (80067b0 <TIM_OC3_SetConfig+0x10c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d113      	bne.n	800677a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	011b      	lsls	r3, r3, #4
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	4313      	orrs	r3, r2
 800676c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	4313      	orrs	r3, r2
 8006778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	621a      	str	r2, [r3, #32]
}
 8006794:	bf00      	nop
 8006796:	371c      	adds	r7, #28
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	40012c00 	.word	0x40012c00
 80067a4:	40013400 	.word	0x40013400
 80067a8:	40014000 	.word	0x40014000
 80067ac:	40014400 	.word	0x40014400
 80067b0:	40014800 	.word	0x40014800

080067b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b087      	sub	sp, #28
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
 80067c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	021b      	lsls	r3, r3, #8
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	031b      	lsls	r3, r3, #12
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	4313      	orrs	r3, r2
 800680e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a18      	ldr	r2, [pc, #96]	@ (8006874 <TIM_OC4_SetConfig+0xc0>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d00f      	beq.n	8006838 <TIM_OC4_SetConfig+0x84>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a17      	ldr	r2, [pc, #92]	@ (8006878 <TIM_OC4_SetConfig+0xc4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d00b      	beq.n	8006838 <TIM_OC4_SetConfig+0x84>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a16      	ldr	r2, [pc, #88]	@ (800687c <TIM_OC4_SetConfig+0xc8>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d007      	beq.n	8006838 <TIM_OC4_SetConfig+0x84>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a15      	ldr	r2, [pc, #84]	@ (8006880 <TIM_OC4_SetConfig+0xcc>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d003      	beq.n	8006838 <TIM_OC4_SetConfig+0x84>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a14      	ldr	r2, [pc, #80]	@ (8006884 <TIM_OC4_SetConfig+0xd0>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d109      	bne.n	800684c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800683e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	695b      	ldr	r3, [r3, #20]
 8006844:	019b      	lsls	r3, r3, #6
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	621a      	str	r2, [r3, #32]
}
 8006866:	bf00      	nop
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	40012c00 	.word	0x40012c00
 8006878:	40013400 	.word	0x40013400
 800687c:	40014000 	.word	0x40014000
 8006880:	40014400 	.word	0x40014400
 8006884:	40014800 	.word	0x40014800

08006888 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006888:	b480      	push	{r7}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80068cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	041b      	lsls	r3, r3, #16
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a17      	ldr	r2, [pc, #92]	@ (800693c <TIM_OC5_SetConfig+0xb4>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00f      	beq.n	8006902 <TIM_OC5_SetConfig+0x7a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a16      	ldr	r2, [pc, #88]	@ (8006940 <TIM_OC5_SetConfig+0xb8>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00b      	beq.n	8006902 <TIM_OC5_SetConfig+0x7a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a15      	ldr	r2, [pc, #84]	@ (8006944 <TIM_OC5_SetConfig+0xbc>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d007      	beq.n	8006902 <TIM_OC5_SetConfig+0x7a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a14      	ldr	r2, [pc, #80]	@ (8006948 <TIM_OC5_SetConfig+0xc0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d003      	beq.n	8006902 <TIM_OC5_SetConfig+0x7a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a13      	ldr	r2, [pc, #76]	@ (800694c <TIM_OC5_SetConfig+0xc4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d109      	bne.n	8006916 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006908:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	021b      	lsls	r3, r3, #8
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	621a      	str	r2, [r3, #32]
}
 8006930:	bf00      	nop
 8006932:	371c      	adds	r7, #28
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	40012c00 	.word	0x40012c00
 8006940:	40013400 	.word	0x40013400
 8006944:	40014000 	.word	0x40014000
 8006948:	40014400 	.word	0x40014400
 800694c:	40014800 	.word	0x40014800

08006950 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006950:	b480      	push	{r7}
 8006952:	b087      	sub	sp, #28
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800697e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	021b      	lsls	r3, r3, #8
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	4313      	orrs	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	051b      	lsls	r3, r3, #20
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a18      	ldr	r2, [pc, #96]	@ (8006a08 <TIM_OC6_SetConfig+0xb8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d00f      	beq.n	80069cc <TIM_OC6_SetConfig+0x7c>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a17      	ldr	r2, [pc, #92]	@ (8006a0c <TIM_OC6_SetConfig+0xbc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00b      	beq.n	80069cc <TIM_OC6_SetConfig+0x7c>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a16      	ldr	r2, [pc, #88]	@ (8006a10 <TIM_OC6_SetConfig+0xc0>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d007      	beq.n	80069cc <TIM_OC6_SetConfig+0x7c>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a15      	ldr	r2, [pc, #84]	@ (8006a14 <TIM_OC6_SetConfig+0xc4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d003      	beq.n	80069cc <TIM_OC6_SetConfig+0x7c>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a14      	ldr	r2, [pc, #80]	@ (8006a18 <TIM_OC6_SetConfig+0xc8>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d109      	bne.n	80069e0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	029b      	lsls	r3, r3, #10
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4313      	orrs	r3, r2
 80069de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	621a      	str	r2, [r3, #32]
}
 80069fa:	bf00      	nop
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	40012c00 	.word	0x40012c00
 8006a0c:	40013400 	.word	0x40013400
 8006a10:	40014000 	.word	0x40014000
 8006a14:	40014400 	.word	0x40014400
 8006a18:	40014800 	.word	0x40014800

08006a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e068      	b.n	8006b06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a2e      	ldr	r2, [pc, #184]	@ (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d004      	beq.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a2d      	ldr	r2, [pc, #180]	@ (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d108      	bne.n	8006a7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a1e      	ldr	r2, [pc, #120]	@ (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d01d      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aa6:	d018      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a1b      	ldr	r2, [pc, #108]	@ (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d013      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a1a      	ldr	r2, [pc, #104]	@ (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00e      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a18      	ldr	r2, [pc, #96]	@ (8006b24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d009      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a13      	ldr	r2, [pc, #76]	@ (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d004      	beq.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a14      	ldr	r2, [pc, #80]	@ (8006b28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d10c      	bne.n	8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	40012c00 	.word	0x40012c00
 8006b18:	40013400 	.word	0x40013400
 8006b1c:	40000400 	.word	0x40000400
 8006b20:	40000800 	.word	0x40000800
 8006b24:	40000c00 	.word	0x40000c00
 8006b28:	40014000 	.word	0x40014000

08006b2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d101      	bne.n	8006b48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b44:	2302      	movs	r3, #2
 8006b46:	e065      	b.n	8006c14 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	041b      	lsls	r3, r3, #16
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a16      	ldr	r2, [pc, #88]	@ (8006c20 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d004      	beq.n	8006bd6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a14      	ldr	r2, [pc, #80]	@ (8006c24 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d115      	bne.n	8006c02 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be0:	051b      	lsls	r3, r3, #20
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	40012c00 	.word	0x40012c00
 8006c24:	40013400 	.word	0x40013400

08006c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c58:	bf00      	nop
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <__NVIC_SetPriority>:
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	6039      	str	r1, [r7, #0]
 8006c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	db0a      	blt.n	8006c8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	490c      	ldr	r1, [pc, #48]	@ (8006cb0 <__NVIC_SetPriority+0x4c>)
 8006c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c82:	0112      	lsls	r2, r2, #4
 8006c84:	b2d2      	uxtb	r2, r2
 8006c86:	440b      	add	r3, r1
 8006c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006c8c:	e00a      	b.n	8006ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	4908      	ldr	r1, [pc, #32]	@ (8006cb4 <__NVIC_SetPriority+0x50>)
 8006c94:	79fb      	ldrb	r3, [r7, #7]
 8006c96:	f003 030f 	and.w	r3, r3, #15
 8006c9a:	3b04      	subs	r3, #4
 8006c9c:	0112      	lsls	r2, r2, #4
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	440b      	add	r3, r1
 8006ca2:	761a      	strb	r2, [r3, #24]
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	e000e100 	.word	0xe000e100
 8006cb4:	e000ed00 	.word	0xe000ed00

08006cb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006cbc:	4b05      	ldr	r3, [pc, #20]	@ (8006cd4 <SysTick_Handler+0x1c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006cc0:	f001 fd46 	bl	8008750 <xTaskGetSchedulerState>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d001      	beq.n	8006cce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006cca:	f002 fb3d 	bl	8009348 <xPortSysTickHandler>
  }
}
 8006cce:	bf00      	nop
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	e000e010 	.word	0xe000e010

08006cd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006cdc:	2100      	movs	r1, #0
 8006cde:	f06f 0004 	mvn.w	r0, #4
 8006ce2:	f7ff ffbf 	bl	8006c64 <__NVIC_SetPriority>
#endif
}
 8006ce6:	bf00      	nop
 8006ce8:	bd80      	pop	{r7, pc}
	...

08006cec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cf2:	f3ef 8305 	mrs	r3, IPSR
 8006cf6:	603b      	str	r3, [r7, #0]
  return(result);
 8006cf8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006cfe:	f06f 0305 	mvn.w	r3, #5
 8006d02:	607b      	str	r3, [r7, #4]
 8006d04:	e00c      	b.n	8006d20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d06:	4b0a      	ldr	r3, [pc, #40]	@ (8006d30 <osKernelInitialize+0x44>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d105      	bne.n	8006d1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d0e:	4b08      	ldr	r3, [pc, #32]	@ (8006d30 <osKernelInitialize+0x44>)
 8006d10:	2201      	movs	r2, #1
 8006d12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d14:	2300      	movs	r3, #0
 8006d16:	607b      	str	r3, [r7, #4]
 8006d18:	e002      	b.n	8006d20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d20:	687b      	ldr	r3, [r7, #4]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	2000026c 	.word	0x2000026c

08006d34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d3a:	f3ef 8305 	mrs	r3, IPSR
 8006d3e:	603b      	str	r3, [r7, #0]
  return(result);
 8006d40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006d46:	f06f 0305 	mvn.w	r3, #5
 8006d4a:	607b      	str	r3, [r7, #4]
 8006d4c:	e010      	b.n	8006d70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d7c <osKernelStart+0x48>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d109      	bne.n	8006d6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006d56:	f7ff ffbf 	bl	8006cd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006d5a:	4b08      	ldr	r3, [pc, #32]	@ (8006d7c <osKernelStart+0x48>)
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006d60:	f001 f892 	bl	8007e88 <vTaskStartScheduler>
      stat = osOK;
 8006d64:	2300      	movs	r3, #0
 8006d66:	607b      	str	r3, [r7, #4]
 8006d68:	e002      	b.n	8006d70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d70:	687b      	ldr	r3, [r7, #4]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	2000026c 	.word	0x2000026c

08006d80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08e      	sub	sp, #56	@ 0x38
 8006d84:	af04      	add	r7, sp, #16
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d90:	f3ef 8305 	mrs	r3, IPSR
 8006d94:	617b      	str	r3, [r7, #20]
  return(result);
 8006d96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d17e      	bne.n	8006e9a <osThreadNew+0x11a>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d07b      	beq.n	8006e9a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006da2:	2380      	movs	r3, #128	@ 0x80
 8006da4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006da6:	2318      	movs	r3, #24
 8006da8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006dae:	f04f 33ff 	mov.w	r3, #4294967295
 8006db2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d045      	beq.n	8006e46 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <osThreadNew+0x48>
        name = attr->name;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d002      	beq.n	8006dd6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d008      	beq.n	8006dee <osThreadNew+0x6e>
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	2b38      	cmp	r3, #56	@ 0x38
 8006de0:	d805      	bhi.n	8006dee <osThreadNew+0x6e>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <osThreadNew+0x72>
        return (NULL);
 8006dee:	2300      	movs	r3, #0
 8006df0:	e054      	b.n	8006e9c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	089b      	lsrs	r3, r3, #2
 8006e00:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00e      	beq.n	8006e28 <osThreadNew+0xa8>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	2ba7      	cmp	r3, #167	@ 0xa7
 8006e10:	d90a      	bls.n	8006e28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d006      	beq.n	8006e28 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d002      	beq.n	8006e28 <osThreadNew+0xa8>
        mem = 1;
 8006e22:	2301      	movs	r3, #1
 8006e24:	61bb      	str	r3, [r7, #24]
 8006e26:	e010      	b.n	8006e4a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10c      	bne.n	8006e4a <osThreadNew+0xca>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d108      	bne.n	8006e4a <osThreadNew+0xca>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d104      	bne.n	8006e4a <osThreadNew+0xca>
          mem = 0;
 8006e40:	2300      	movs	r3, #0
 8006e42:	61bb      	str	r3, [r7, #24]
 8006e44:	e001      	b.n	8006e4a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006e46:	2300      	movs	r3, #0
 8006e48:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d110      	bne.n	8006e72 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006e58:	9202      	str	r2, [sp, #8]
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	6a3a      	ldr	r2, [r7, #32]
 8006e64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 fe1a 	bl	8007aa0 <xTaskCreateStatic>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	613b      	str	r3, [r7, #16]
 8006e70:	e013      	b.n	8006e9a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d110      	bne.n	8006e9a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	f107 0310 	add.w	r3, r7, #16
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 fe68 	bl	8007b60 <xTaskCreate>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d001      	beq.n	8006e9a <osThreadNew+0x11a>
            hTask = NULL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006e9a:	693b      	ldr	r3, [r7, #16]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3728      	adds	r7, #40	@ 0x28
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006eac:	f3ef 8305 	mrs	r3, IPSR
 8006eb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <osDelay+0x1c>
    stat = osErrorISR;
 8006eb8:	f06f 0305 	mvn.w	r3, #5
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	e007      	b.n	8006ed0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d002      	beq.n	8006ed0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 ffa6 	bl	8007e1c <vTaskDelay>
    }
  }

  return (stat);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4a07      	ldr	r2, [pc, #28]	@ (8006f08 <vApplicationGetIdleTaskMemory+0x2c>)
 8006eec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	4a06      	ldr	r2, [pc, #24]	@ (8006f0c <vApplicationGetIdleTaskMemory+0x30>)
 8006ef2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2280      	movs	r2, #128	@ 0x80
 8006ef8:	601a      	str	r2, [r3, #0]
}
 8006efa:	bf00      	nop
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	20000270 	.word	0x20000270
 8006f0c:	20000318 	.word	0x20000318

08006f10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4a07      	ldr	r2, [pc, #28]	@ (8006f3c <vApplicationGetTimerTaskMemory+0x2c>)
 8006f20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	4a06      	ldr	r2, [pc, #24]	@ (8006f40 <vApplicationGetTimerTaskMemory+0x30>)
 8006f26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f2e:	601a      	str	r2, [r3, #0]
}
 8006f30:	bf00      	nop
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	20000518 	.word	0x20000518
 8006f40:	200005c0 	.word	0x200005c0

08006f44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f103 0208 	add.w	r2, r3, #8
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f04f 32ff 	mov.w	r2, #4294967295
 8006f5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f103 0208 	add.w	r2, r3, #8
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f103 0208 	add.w	r2, r3, #8
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b085      	sub	sp, #20
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	689a      	ldr	r2, [r3, #8]
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	601a      	str	r2, [r3, #0]
}
 8006fda:	bf00      	nop
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ffc:	d103      	bne.n	8007006 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	e00c      	b.n	8007020 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	3308      	adds	r3, #8
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	e002      	b.n	8007014 <vListInsert+0x2e>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	429a      	cmp	r2, r3
 800701e:	d2f6      	bcs.n	800700e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	601a      	str	r2, [r3, #0]
}
 800704c:	bf00      	nop
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	6892      	ldr	r2, [r2, #8]
 800706e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	6852      	ldr	r2, [r2, #4]
 8007078:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	429a      	cmp	r2, r3
 8007082:	d103      	bne.n	800708c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689a      	ldr	r2, [r3, #8]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	1e5a      	subs	r2, r3, #1
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10b      	bne.n	80070d8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070d2:	bf00      	nop
 80070d4:	bf00      	nop
 80070d6:	e7fd      	b.n	80070d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80070d8:	f002 f8a6 	bl	8009228 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e4:	68f9      	ldr	r1, [r7, #12]
 80070e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80070e8:	fb01 f303 	mul.w	r3, r1, r3
 80070ec:	441a      	add	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007108:	3b01      	subs	r3, #1
 800710a:	68f9      	ldr	r1, [r7, #12]
 800710c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800710e:	fb01 f303 	mul.w	r3, r1, r3
 8007112:	441a      	add	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	22ff      	movs	r2, #255	@ 0xff
 800711c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	22ff      	movs	r2, #255	@ 0xff
 8007124:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d114      	bne.n	8007158 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	691b      	ldr	r3, [r3, #16]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d01a      	beq.n	800716c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3310      	adds	r3, #16
 800713a:	4618      	mov	r0, r3
 800713c:	f001 f942 	bl	80083c4 <xTaskRemoveFromEventList>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d012      	beq.n	800716c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007146:	4b0d      	ldr	r3, [pc, #52]	@ (800717c <xQueueGenericReset+0xd0>)
 8007148:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	e009      	b.n	800716c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	3310      	adds	r3, #16
 800715c:	4618      	mov	r0, r3
 800715e:	f7ff fef1 	bl	8006f44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3324      	adds	r3, #36	@ 0x24
 8007166:	4618      	mov	r0, r3
 8007168:	f7ff feec 	bl	8006f44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800716c:	f002 f88e 	bl	800928c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007170:	2301      	movs	r3, #1
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	e000ed04 	.word	0xe000ed04

08007180 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08e      	sub	sp, #56	@ 0x38
 8007184:	af02      	add	r7, sp, #8
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
 800718c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10b      	bne.n	80071ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80071a6:	bf00      	nop
 80071a8:	bf00      	nop
 80071aa:	e7fd      	b.n	80071a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10b      	bne.n	80071ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80071c4:	bf00      	nop
 80071c6:	bf00      	nop
 80071c8:	e7fd      	b.n	80071c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <xQueueGenericCreateStatic+0x56>
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <xQueueGenericCreateStatic+0x5a>
 80071d6:	2301      	movs	r3, #1
 80071d8:	e000      	b.n	80071dc <xQueueGenericCreateStatic+0x5c>
 80071da:	2300      	movs	r3, #0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10b      	bne.n	80071f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80071e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e4:	f383 8811 	msr	BASEPRI, r3
 80071e8:	f3bf 8f6f 	isb	sy
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	623b      	str	r3, [r7, #32]
}
 80071f2:	bf00      	nop
 80071f4:	bf00      	nop
 80071f6:	e7fd      	b.n	80071f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d102      	bne.n	8007204 <xQueueGenericCreateStatic+0x84>
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <xQueueGenericCreateStatic+0x88>
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <xQueueGenericCreateStatic+0x8a>
 8007208:	2300      	movs	r3, #0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10b      	bne.n	8007226 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	61fb      	str	r3, [r7, #28]
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	e7fd      	b.n	8007222 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007226:	2350      	movs	r3, #80	@ 0x50
 8007228:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2b50      	cmp	r3, #80	@ 0x50
 800722e:	d00b      	beq.n	8007248 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	61bb      	str	r3, [r7, #24]
}
 8007242:	bf00      	nop
 8007244:	bf00      	nop
 8007246:	e7fd      	b.n	8007244 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007248:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800724e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00d      	beq.n	8007270 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800725c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	4613      	mov	r3, r2
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	68b9      	ldr	r1, [r7, #8]
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 f805 	bl	800727a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007272:	4618      	mov	r0, r3
 8007274:	3730      	adds	r7, #48	@ 0x30
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b084      	sub	sp, #16
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	607a      	str	r2, [r7, #4]
 8007286:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d103      	bne.n	8007296 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	e002      	b.n	800729c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80072a8:	2101      	movs	r1, #1
 80072aa:	69b8      	ldr	r0, [r7, #24]
 80072ac:	f7ff fefe 	bl	80070ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	78fa      	ldrb	r2, [r7, #3]
 80072b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80072b8:	bf00      	nop
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08e      	sub	sp, #56	@ 0x38
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80072ce:	2300      	movs	r3, #0
 80072d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10b      	bne.n	80072f4 <xQueueGenericSend+0x34>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80072ee:	bf00      	nop
 80072f0:	bf00      	nop
 80072f2:	e7fd      	b.n	80072f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d103      	bne.n	8007302 <xQueueGenericSend+0x42>
 80072fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <xQueueGenericSend+0x46>
 8007302:	2301      	movs	r3, #1
 8007304:	e000      	b.n	8007308 <xQueueGenericSend+0x48>
 8007306:	2300      	movs	r3, #0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10b      	bne.n	8007324 <xQueueGenericSend+0x64>
	__asm volatile
 800730c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800731e:	bf00      	nop
 8007320:	bf00      	nop
 8007322:	e7fd      	b.n	8007320 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	2b02      	cmp	r3, #2
 8007328:	d103      	bne.n	8007332 <xQueueGenericSend+0x72>
 800732a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800732e:	2b01      	cmp	r3, #1
 8007330:	d101      	bne.n	8007336 <xQueueGenericSend+0x76>
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <xQueueGenericSend+0x78>
 8007336:	2300      	movs	r3, #0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10b      	bne.n	8007354 <xQueueGenericSend+0x94>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	623b      	str	r3, [r7, #32]
}
 800734e:	bf00      	nop
 8007350:	bf00      	nop
 8007352:	e7fd      	b.n	8007350 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007354:	f001 f9fc 	bl	8008750 <xTaskGetSchedulerState>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d102      	bne.n	8007364 <xQueueGenericSend+0xa4>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <xQueueGenericSend+0xa8>
 8007364:	2301      	movs	r3, #1
 8007366:	e000      	b.n	800736a <xQueueGenericSend+0xaa>
 8007368:	2300      	movs	r3, #0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10b      	bne.n	8007386 <xQueueGenericSend+0xc6>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	61fb      	str	r3, [r7, #28]
}
 8007380:	bf00      	nop
 8007382:	bf00      	nop
 8007384:	e7fd      	b.n	8007382 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007386:	f001 ff4f 	bl	8009228 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800738a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800738e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007392:	429a      	cmp	r2, r3
 8007394:	d302      	bcc.n	800739c <xQueueGenericSend+0xdc>
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b02      	cmp	r3, #2
 800739a:	d129      	bne.n	80073f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	68b9      	ldr	r1, [r7, #8]
 80073a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073a2:	f000 fa0f 	bl	80077c4 <prvCopyDataToQueue>
 80073a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d010      	beq.n	80073d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b2:	3324      	adds	r3, #36	@ 0x24
 80073b4:	4618      	mov	r0, r3
 80073b6:	f001 f805 	bl	80083c4 <xTaskRemoveFromEventList>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d013      	beq.n	80073e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80073c0:	4b3f      	ldr	r3, [pc, #252]	@ (80074c0 <xQueueGenericSend+0x200>)
 80073c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	e00a      	b.n	80073e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80073d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d007      	beq.n	80073e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80073d8:	4b39      	ldr	r3, [pc, #228]	@ (80074c0 <xQueueGenericSend+0x200>)
 80073da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80073e8:	f001 ff50 	bl	800928c <vPortExitCritical>
				return pdPASS;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e063      	b.n	80074b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d103      	bne.n	80073fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80073f6:	f001 ff49 	bl	800928c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	e05c      	b.n	80074b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80073fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007400:	2b00      	cmp	r3, #0
 8007402:	d106      	bne.n	8007412 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007404:	f107 0314 	add.w	r3, r7, #20
 8007408:	4618      	mov	r0, r3
 800740a:	f001 f83f 	bl	800848c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800740e:	2301      	movs	r3, #1
 8007410:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007412:	f001 ff3b 	bl	800928c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007416:	f000 fda7 	bl	8007f68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800741a:	f001 ff05 	bl	8009228 <vPortEnterCritical>
 800741e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007420:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007424:	b25b      	sxtb	r3, r3
 8007426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742a:	d103      	bne.n	8007434 <xQueueGenericSend+0x174>
 800742c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007436:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800743a:	b25b      	sxtb	r3, r3
 800743c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007440:	d103      	bne.n	800744a <xQueueGenericSend+0x18a>
 8007442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800744a:	f001 ff1f 	bl	800928c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800744e:	1d3a      	adds	r2, r7, #4
 8007450:	f107 0314 	add.w	r3, r7, #20
 8007454:	4611      	mov	r1, r2
 8007456:	4618      	mov	r0, r3
 8007458:	f001 f82e 	bl	80084b8 <xTaskCheckForTimeOut>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d124      	bne.n	80074ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007462:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007464:	f000 faa6 	bl	80079b4 <prvIsQueueFull>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d018      	beq.n	80074a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800746e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007470:	3310      	adds	r3, #16
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	4611      	mov	r1, r2
 8007476:	4618      	mov	r0, r3
 8007478:	f000 ff52 	bl	8008320 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800747c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800747e:	f000 fa31 	bl	80078e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007482:	f000 fd7f 	bl	8007f84 <xTaskResumeAll>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	f47f af7c 	bne.w	8007386 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800748e:	4b0c      	ldr	r3, [pc, #48]	@ (80074c0 <xQueueGenericSend+0x200>)
 8007490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	f3bf 8f6f 	isb	sy
 800749e:	e772      	b.n	8007386 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074a2:	f000 fa1f 	bl	80078e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074a6:	f000 fd6d 	bl	8007f84 <xTaskResumeAll>
 80074aa:	e76c      	b.n	8007386 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80074ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074ae:	f000 fa19 	bl	80078e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80074b2:	f000 fd67 	bl	8007f84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80074b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3738      	adds	r7, #56	@ 0x38
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	e000ed04 	.word	0xe000ed04

080074c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b090      	sub	sp, #64	@ 0x40
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
 80074d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80074d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10b      	bne.n	80074f4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80074ee:	bf00      	nop
 80074f0:	bf00      	nop
 80074f2:	e7fd      	b.n	80074f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d103      	bne.n	8007502 <xQueueGenericSendFromISR+0x3e>
 80074fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <xQueueGenericSendFromISR+0x42>
 8007502:	2301      	movs	r3, #1
 8007504:	e000      	b.n	8007508 <xQueueGenericSendFromISR+0x44>
 8007506:	2300      	movs	r3, #0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10b      	bne.n	8007524 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800750c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007510:	f383 8811 	msr	BASEPRI, r3
 8007514:	f3bf 8f6f 	isb	sy
 8007518:	f3bf 8f4f 	dsb	sy
 800751c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800751e:	bf00      	nop
 8007520:	bf00      	nop
 8007522:	e7fd      	b.n	8007520 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	2b02      	cmp	r3, #2
 8007528:	d103      	bne.n	8007532 <xQueueGenericSendFromISR+0x6e>
 800752a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800752e:	2b01      	cmp	r3, #1
 8007530:	d101      	bne.n	8007536 <xQueueGenericSendFromISR+0x72>
 8007532:	2301      	movs	r3, #1
 8007534:	e000      	b.n	8007538 <xQueueGenericSendFromISR+0x74>
 8007536:	2300      	movs	r3, #0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10b      	bne.n	8007554 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	623b      	str	r3, [r7, #32]
}
 800754e:	bf00      	nop
 8007550:	bf00      	nop
 8007552:	e7fd      	b.n	8007550 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007554:	f001 ff48 	bl	80093e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007558:	f3ef 8211 	mrs	r2, BASEPRI
 800755c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	61fa      	str	r2, [r7, #28]
 800756e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007570:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007572:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007576:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800757c:	429a      	cmp	r2, r3
 800757e:	d302      	bcc.n	8007586 <xQueueGenericSendFromISR+0xc2>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b02      	cmp	r3, #2
 8007584:	d12f      	bne.n	80075e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007588:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800758c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007594:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	68b9      	ldr	r1, [r7, #8]
 800759a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800759c:	f000 f912 	bl	80077c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80075a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a8:	d112      	bne.n	80075d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d016      	beq.n	80075e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b4:	3324      	adds	r3, #36	@ 0x24
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 ff04 	bl	80083c4 <xTaskRemoveFromEventList>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00e      	beq.n	80075e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00b      	beq.n	80075e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	e007      	b.n	80075e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80075d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80075d4:	3301      	adds	r3, #1
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	b25a      	sxtb	r2, r3
 80075da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80075e0:	2301      	movs	r3, #1
 80075e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80075e4:	e001      	b.n	80075ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80075e6:	2300      	movs	r3, #0
 80075e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80075f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3740      	adds	r7, #64	@ 0x40
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08c      	sub	sp, #48	@ 0x30
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800760c:	2300      	movs	r3, #0
 800760e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10b      	bne.n	8007632 <xQueueReceive+0x32>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	623b      	str	r3, [r7, #32]
}
 800762c:	bf00      	nop
 800762e:	bf00      	nop
 8007630:	e7fd      	b.n	800762e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d103      	bne.n	8007640 <xQueueReceive+0x40>
 8007638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <xQueueReceive+0x44>
 8007640:	2301      	movs	r3, #1
 8007642:	e000      	b.n	8007646 <xQueueReceive+0x46>
 8007644:	2300      	movs	r3, #0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10b      	bne.n	8007662 <xQueueReceive+0x62>
	__asm volatile
 800764a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800764e:	f383 8811 	msr	BASEPRI, r3
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	f3bf 8f4f 	dsb	sy
 800765a:	61fb      	str	r3, [r7, #28]
}
 800765c:	bf00      	nop
 800765e:	bf00      	nop
 8007660:	e7fd      	b.n	800765e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007662:	f001 f875 	bl	8008750 <xTaskGetSchedulerState>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d102      	bne.n	8007672 <xQueueReceive+0x72>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <xQueueReceive+0x76>
 8007672:	2301      	movs	r3, #1
 8007674:	e000      	b.n	8007678 <xQueueReceive+0x78>
 8007676:	2300      	movs	r3, #0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10b      	bne.n	8007694 <xQueueReceive+0x94>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	61bb      	str	r3, [r7, #24]
}
 800768e:	bf00      	nop
 8007690:	bf00      	nop
 8007692:	e7fd      	b.n	8007690 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007694:	f001 fdc8 	bl	8009228 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d01f      	beq.n	80076e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076a8:	f000 f8f6 	bl	8007898 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ae:	1e5a      	subs	r2, r3, #1
 80076b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00f      	beq.n	80076dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076be:	3310      	adds	r3, #16
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fe7f 	bl	80083c4 <xTaskRemoveFromEventList>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d007      	beq.n	80076dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076cc:	4b3c      	ldr	r3, [pc, #240]	@ (80077c0 <xQueueReceive+0x1c0>)
 80076ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076dc:	f001 fdd6 	bl	800928c <vPortExitCritical>
				return pdPASS;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e069      	b.n	80077b8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d103      	bne.n	80076f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076ea:	f001 fdcf 	bl	800928c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80076ee:	2300      	movs	r3, #0
 80076f0:	e062      	b.n	80077b8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d106      	bne.n	8007706 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076f8:	f107 0310 	add.w	r3, r7, #16
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fec5 	bl	800848c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007702:	2301      	movs	r3, #1
 8007704:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007706:	f001 fdc1 	bl	800928c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800770a:	f000 fc2d 	bl	8007f68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800770e:	f001 fd8b 	bl	8009228 <vPortEnterCritical>
 8007712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007714:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007718:	b25b      	sxtb	r3, r3
 800771a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771e:	d103      	bne.n	8007728 <xQueueReceive+0x128>
 8007720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007722:	2200      	movs	r2, #0
 8007724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800772e:	b25b      	sxtb	r3, r3
 8007730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007734:	d103      	bne.n	800773e <xQueueReceive+0x13e>
 8007736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800773e:	f001 fda5 	bl	800928c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007742:	1d3a      	adds	r2, r7, #4
 8007744:	f107 0310 	add.w	r3, r7, #16
 8007748:	4611      	mov	r1, r2
 800774a:	4618      	mov	r0, r3
 800774c:	f000 feb4 	bl	80084b8 <xTaskCheckForTimeOut>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d123      	bne.n	800779e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007758:	f000 f916 	bl	8007988 <prvIsQueueEmpty>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d017      	beq.n	8007792 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007764:	3324      	adds	r3, #36	@ 0x24
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	4611      	mov	r1, r2
 800776a:	4618      	mov	r0, r3
 800776c:	f000 fdd8 	bl	8008320 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007770:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007772:	f000 f8b7 	bl	80078e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007776:	f000 fc05 	bl	8007f84 <xTaskResumeAll>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d189      	bne.n	8007694 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007780:	4b0f      	ldr	r3, [pc, #60]	@ (80077c0 <xQueueReceive+0x1c0>)
 8007782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	e780      	b.n	8007694 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007794:	f000 f8a6 	bl	80078e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007798:	f000 fbf4 	bl	8007f84 <xTaskResumeAll>
 800779c:	e77a      	b.n	8007694 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800779e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077a0:	f000 f8a0 	bl	80078e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077a4:	f000 fbee 	bl	8007f84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077aa:	f000 f8ed 	bl	8007988 <prvIsQueueEmpty>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f43f af6f 	beq.w	8007694 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80077b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3730      	adds	r7, #48	@ 0x30
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	e000ed04 	.word	0xe000ed04

080077c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077d0:	2300      	movs	r3, #0
 80077d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d10d      	bne.n	80077fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d14d      	bne.n	8007886 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f000 ffcc 	bl	800878c <xTaskPriorityDisinherit>
 80077f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	609a      	str	r2, [r3, #8]
 80077fc:	e043      	b.n	8007886 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d119      	bne.n	8007838 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6858      	ldr	r0, [r3, #4]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780c:	461a      	mov	r2, r3
 800780e:	68b9      	ldr	r1, [r7, #8]
 8007810:	f002 f89e 	bl	8009950 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781c:	441a      	add	r2, r3
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	429a      	cmp	r2, r3
 800782c:	d32b      	bcc.n	8007886 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	605a      	str	r2, [r3, #4]
 8007836:	e026      	b.n	8007886 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	68d8      	ldr	r0, [r3, #12]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007840:	461a      	mov	r2, r3
 8007842:	68b9      	ldr	r1, [r7, #8]
 8007844:	f002 f884 	bl	8009950 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	68da      	ldr	r2, [r3, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007850:	425b      	negs	r3, r3
 8007852:	441a      	add	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d207      	bcs.n	8007874 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	689a      	ldr	r2, [r3, #8]
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800786c:	425b      	negs	r3, r3
 800786e:	441a      	add	r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b02      	cmp	r3, #2
 8007878:	d105      	bne.n	8007886 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	3b01      	subs	r3, #1
 8007884:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	1c5a      	adds	r2, r3, #1
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800788e:	697b      	ldr	r3, [r7, #20]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3718      	adds	r7, #24
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d018      	beq.n	80078dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68da      	ldr	r2, [r3, #12]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b2:	441a      	add	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68da      	ldr	r2, [r3, #12]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d303      	bcc.n	80078cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68d9      	ldr	r1, [r3, #12]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d4:	461a      	mov	r2, r3
 80078d6:	6838      	ldr	r0, [r7, #0]
 80078d8:	f002 f83a 	bl	8009950 <memcpy>
	}
}
 80078dc:	bf00      	nop
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80078ec:	f001 fc9c 	bl	8009228 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80078f8:	e011      	b.n	800791e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d012      	beq.n	8007928 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3324      	adds	r3, #36	@ 0x24
 8007906:	4618      	mov	r0, r3
 8007908:	f000 fd5c 	bl	80083c4 <xTaskRemoveFromEventList>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007912:	f000 fe35 	bl	8008580 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	3b01      	subs	r3, #1
 800791a:	b2db      	uxtb	r3, r3
 800791c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800791e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007922:	2b00      	cmp	r3, #0
 8007924:	dce9      	bgt.n	80078fa <prvUnlockQueue+0x16>
 8007926:	e000      	b.n	800792a <prvUnlockQueue+0x46>
					break;
 8007928:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	22ff      	movs	r2, #255	@ 0xff
 800792e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007932:	f001 fcab 	bl	800928c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007936:	f001 fc77 	bl	8009228 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007940:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007942:	e011      	b.n	8007968 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d012      	beq.n	8007972 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3310      	adds	r3, #16
 8007950:	4618      	mov	r0, r3
 8007952:	f000 fd37 	bl	80083c4 <xTaskRemoveFromEventList>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800795c:	f000 fe10 	bl	8008580 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	3b01      	subs	r3, #1
 8007964:	b2db      	uxtb	r3, r3
 8007966:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007968:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800796c:	2b00      	cmp	r3, #0
 800796e:	dce9      	bgt.n	8007944 <prvUnlockQueue+0x60>
 8007970:	e000      	b.n	8007974 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007972:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	22ff      	movs	r2, #255	@ 0xff
 8007978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800797c:	f001 fc86 	bl	800928c <vPortExitCritical>
}
 8007980:	bf00      	nop
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007990:	f001 fc4a 	bl	8009228 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007998:	2b00      	cmp	r3, #0
 800799a:	d102      	bne.n	80079a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800799c:	2301      	movs	r3, #1
 800799e:	60fb      	str	r3, [r7, #12]
 80079a0:	e001      	b.n	80079a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079a2:	2300      	movs	r3, #0
 80079a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079a6:	f001 fc71 	bl	800928c <vPortExitCritical>

	return xReturn;
 80079aa:	68fb      	ldr	r3, [r7, #12]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079bc:	f001 fc34 	bl	8009228 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d102      	bne.n	80079d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079cc:	2301      	movs	r3, #1
 80079ce:	60fb      	str	r3, [r7, #12]
 80079d0:	e001      	b.n	80079d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079d2:	2300      	movs	r3, #0
 80079d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079d6:	f001 fc59 	bl	800928c <vPortExitCritical>

	return xReturn;
 80079da:	68fb      	ldr	r3, [r7, #12]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]
 80079f2:	e014      	b.n	8007a1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80079f4:	4a0f      	ldr	r2, [pc, #60]	@ (8007a34 <vQueueAddToRegistry+0x50>)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10b      	bne.n	8007a18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a00:	490c      	ldr	r1, [pc, #48]	@ (8007a34 <vQueueAddToRegistry+0x50>)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8007a34 <vQueueAddToRegistry+0x50>)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	4413      	add	r3, r2
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a16:	e006      	b.n	8007a26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	60fb      	str	r3, [r7, #12]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2b07      	cmp	r3, #7
 8007a22:	d9e7      	bls.n	80079f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	200009c0 	.word	0x200009c0

08007a38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007a48:	f001 fbee 	bl	8009228 <vPortEnterCritical>
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a52:	b25b      	sxtb	r3, r3
 8007a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a58:	d103      	bne.n	8007a62 <vQueueWaitForMessageRestricted+0x2a>
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a68:	b25b      	sxtb	r3, r3
 8007a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6e:	d103      	bne.n	8007a78 <vQueueWaitForMessageRestricted+0x40>
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a78:	f001 fc08 	bl	800928c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d106      	bne.n	8007a92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	3324      	adds	r3, #36	@ 0x24
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	68b9      	ldr	r1, [r7, #8]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 fc6d 	bl	800836c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007a92:	6978      	ldr	r0, [r7, #20]
 8007a94:	f7ff ff26 	bl	80078e4 <prvUnlockQueue>
	}
 8007a98:	bf00      	nop
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08e      	sub	sp, #56	@ 0x38
 8007aa4:	af04      	add	r7, sp, #16
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
 8007aac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10b      	bne.n	8007acc <xTaskCreateStatic+0x2c>
	__asm volatile
 8007ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	623b      	str	r3, [r7, #32]
}
 8007ac6:	bf00      	nop
 8007ac8:	bf00      	nop
 8007aca:	e7fd      	b.n	8007ac8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10b      	bne.n	8007aea <xTaskCreateStatic+0x4a>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	61fb      	str	r3, [r7, #28]
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop
 8007ae8:	e7fd      	b.n	8007ae6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007aea:	23a8      	movs	r3, #168	@ 0xa8
 8007aec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	2ba8      	cmp	r3, #168	@ 0xa8
 8007af2:	d00b      	beq.n	8007b0c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	61bb      	str	r3, [r7, #24]
}
 8007b06:	bf00      	nop
 8007b08:	bf00      	nop
 8007b0a:	e7fd      	b.n	8007b08 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d01e      	beq.n	8007b52 <xTaskCreateStatic+0xb2>
 8007b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d01b      	beq.n	8007b52 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b1c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b22:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b26:	2202      	movs	r2, #2
 8007b28:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	9303      	str	r3, [sp, #12]
 8007b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b32:	9302      	str	r3, [sp, #8]
 8007b34:	f107 0314 	add.w	r3, r7, #20
 8007b38:	9301      	str	r3, [sp, #4]
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	68b9      	ldr	r1, [r7, #8]
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 f851 	bl	8007bec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007b4c:	f000 f8f6 	bl	8007d3c <prvAddNewTaskToReadyList>
 8007b50:	e001      	b.n	8007b56 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007b52:	2300      	movs	r3, #0
 8007b54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b56:	697b      	ldr	r3, [r7, #20]
	}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3728      	adds	r7, #40	@ 0x28
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b08c      	sub	sp, #48	@ 0x30
 8007b64:	af04      	add	r7, sp, #16
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	603b      	str	r3, [r7, #0]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b70:	88fb      	ldrh	r3, [r7, #6]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4618      	mov	r0, r3
 8007b76:	f001 fc79 	bl	800946c <pvPortMalloc>
 8007b7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00e      	beq.n	8007ba0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b82:	20a8      	movs	r0, #168	@ 0xa8
 8007b84:	f001 fc72 	bl	800946c <pvPortMalloc>
 8007b88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d003      	beq.n	8007b98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b96:	e005      	b.n	8007ba4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b98:	6978      	ldr	r0, [r7, #20]
 8007b9a:	f001 fd35 	bl	8009608 <vPortFree>
 8007b9e:	e001      	b.n	8007ba4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d017      	beq.n	8007bda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007bb2:	88fa      	ldrh	r2, [r7, #6]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	9303      	str	r3, [sp, #12]
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	9302      	str	r3, [sp, #8]
 8007bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bbe:	9301      	str	r3, [sp, #4]
 8007bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	68b9      	ldr	r1, [r7, #8]
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f000 f80f 	bl	8007bec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bce:	69f8      	ldr	r0, [r7, #28]
 8007bd0:	f000 f8b4 	bl	8007d3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	61bb      	str	r3, [r7, #24]
 8007bd8:	e002      	b.n	8007be0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007bda:	f04f 33ff 	mov.w	r3, #4294967295
 8007bde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007be0:	69bb      	ldr	r3, [r7, #24]
	}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3720      	adds	r7, #32
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
	...

08007bec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b088      	sub	sp, #32
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
 8007bf8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	461a      	mov	r2, r3
 8007c04:	21a5      	movs	r1, #165	@ 0xa5
 8007c06:	f001 fe1f 	bl	8009848 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007c14:	3b01      	subs	r3, #1
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	f023 0307 	bic.w	r3, r3, #7
 8007c22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00b      	beq.n	8007c46 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	617b      	str	r3, [r7, #20]
}
 8007c40:	bf00      	nop
 8007c42:	bf00      	nop
 8007c44:	e7fd      	b.n	8007c42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01f      	beq.n	8007c8c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	61fb      	str	r3, [r7, #28]
 8007c50:	e012      	b.n	8007c78 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	4413      	add	r3, r2
 8007c58:	7819      	ldrb	r1, [r3, #0]
 8007c5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	4413      	add	r3, r2
 8007c60:	3334      	adds	r3, #52	@ 0x34
 8007c62:	460a      	mov	r2, r1
 8007c64:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d006      	beq.n	8007c80 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	3301      	adds	r3, #1
 8007c76:	61fb      	str	r3, [r7, #28]
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	2b0f      	cmp	r3, #15
 8007c7c:	d9e9      	bls.n	8007c52 <prvInitialiseNewTask+0x66>
 8007c7e:	e000      	b.n	8007c82 <prvInitialiseNewTask+0x96>
			{
				break;
 8007c80:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c8a:	e003      	b.n	8007c94 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c96:	2b37      	cmp	r3, #55	@ 0x37
 8007c98:	d901      	bls.n	8007c9e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c9a:	2337      	movs	r3, #55	@ 0x37
 8007c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ca8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cac:	2200      	movs	r2, #0
 8007cae:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb2:	3304      	adds	r3, #4
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7ff f965 	bl	8006f84 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cbc:	3318      	adds	r3, #24
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff f960 	bl	8006f84 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cc8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ccc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cd8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cec:	3354      	adds	r3, #84	@ 0x54
 8007cee:	224c      	movs	r2, #76	@ 0x4c
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f001 fda8 	bl	8009848 <memset>
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8007d30 <prvInitialiseNewTask+0x144>)
 8007cfc:	659a      	str	r2, [r3, #88]	@ 0x58
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d00:	4a0c      	ldr	r2, [pc, #48]	@ (8007d34 <prvInitialiseNewTask+0x148>)
 8007d02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d06:	4a0c      	ldr	r2, [pc, #48]	@ (8007d38 <prvInitialiseNewTask+0x14c>)
 8007d08:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	68f9      	ldr	r1, [r7, #12]
 8007d0e:	69b8      	ldr	r0, [r7, #24]
 8007d10:	f001 f95a 	bl	8008fc8 <pxPortInitialiseStack>
 8007d14:	4602      	mov	r2, r0
 8007d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d26:	bf00      	nop
 8007d28:	3720      	adds	r7, #32
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	20001c0c 	.word	0x20001c0c
 8007d34:	20001c74 	.word	0x20001c74
 8007d38:	20001cdc 	.word	0x20001cdc

08007d3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d44:	f001 fa70 	bl	8009228 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d48:	4b2d      	ldr	r3, [pc, #180]	@ (8007e00 <prvAddNewTaskToReadyList+0xc4>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	4a2c      	ldr	r2, [pc, #176]	@ (8007e00 <prvAddNewTaskToReadyList+0xc4>)
 8007d50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d52:	4b2c      	ldr	r3, [pc, #176]	@ (8007e04 <prvAddNewTaskToReadyList+0xc8>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d109      	bne.n	8007d6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8007e04 <prvAddNewTaskToReadyList+0xc8>)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d60:	4b27      	ldr	r3, [pc, #156]	@ (8007e00 <prvAddNewTaskToReadyList+0xc4>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d110      	bne.n	8007d8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d68:	f000 fc2e 	bl	80085c8 <prvInitialiseTaskLists>
 8007d6c:	e00d      	b.n	8007d8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d6e:	4b26      	ldr	r3, [pc, #152]	@ (8007e08 <prvAddNewTaskToReadyList+0xcc>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d109      	bne.n	8007d8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d76:	4b23      	ldr	r3, [pc, #140]	@ (8007e04 <prvAddNewTaskToReadyList+0xc8>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d802      	bhi.n	8007d8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d84:	4a1f      	ldr	r2, [pc, #124]	@ (8007e04 <prvAddNewTaskToReadyList+0xc8>)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d8a:	4b20      	ldr	r3, [pc, #128]	@ (8007e0c <prvAddNewTaskToReadyList+0xd0>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	4a1e      	ldr	r2, [pc, #120]	@ (8007e0c <prvAddNewTaskToReadyList+0xd0>)
 8007d92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007d94:	4b1d      	ldr	r3, [pc, #116]	@ (8007e0c <prvAddNewTaskToReadyList+0xd0>)
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007da0:	4b1b      	ldr	r3, [pc, #108]	@ (8007e10 <prvAddNewTaskToReadyList+0xd4>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d903      	bls.n	8007db0 <prvAddNewTaskToReadyList+0x74>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dac:	4a18      	ldr	r2, [pc, #96]	@ (8007e10 <prvAddNewTaskToReadyList+0xd4>)
 8007dae:	6013      	str	r3, [r2, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db4:	4613      	mov	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4a15      	ldr	r2, [pc, #84]	@ (8007e14 <prvAddNewTaskToReadyList+0xd8>)
 8007dbe:	441a      	add	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	f7ff f8e9 	bl	8006f9e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007dcc:	f001 fa5e 	bl	800928c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8007e08 <prvAddNewTaskToReadyList+0xcc>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00e      	beq.n	8007df6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8007e04 <prvAddNewTaskToReadyList+0xc8>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d207      	bcs.n	8007df6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007de6:	4b0c      	ldr	r3, [pc, #48]	@ (8007e18 <prvAddNewTaskToReadyList+0xdc>)
 8007de8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007df6:	bf00      	nop
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	20000ed4 	.word	0x20000ed4
 8007e04:	20000a00 	.word	0x20000a00
 8007e08:	20000ee0 	.word	0x20000ee0
 8007e0c:	20000ef0 	.word	0x20000ef0
 8007e10:	20000edc 	.word	0x20000edc
 8007e14:	20000a04 	.word	0x20000a04
 8007e18:	e000ed04 	.word	0xe000ed04

08007e1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e24:	2300      	movs	r3, #0
 8007e26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d018      	beq.n	8007e60 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e2e:	4b14      	ldr	r3, [pc, #80]	@ (8007e80 <vTaskDelay+0x64>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00b      	beq.n	8007e4e <vTaskDelay+0x32>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	60bb      	str	r3, [r7, #8]
}
 8007e48:	bf00      	nop
 8007e4a:	bf00      	nop
 8007e4c:	e7fd      	b.n	8007e4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e4e:	f000 f88b 	bl	8007f68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e52:	2100      	movs	r1, #0
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fd09 	bl	800886c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e5a:	f000 f893 	bl	8007f84 <xTaskResumeAll>
 8007e5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d107      	bne.n	8007e76 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007e66:	4b07      	ldr	r3, [pc, #28]	@ (8007e84 <vTaskDelay+0x68>)
 8007e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e76:	bf00      	nop
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20000efc 	.word	0x20000efc
 8007e84:	e000ed04 	.word	0xe000ed04

08007e88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08a      	sub	sp, #40	@ 0x28
 8007e8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e92:	2300      	movs	r3, #0
 8007e94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e96:	463a      	mov	r2, r7
 8007e98:	1d39      	adds	r1, r7, #4
 8007e9a:	f107 0308 	add.w	r3, r7, #8
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7ff f81c 	bl	8006edc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ea4:	6839      	ldr	r1, [r7, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	9202      	str	r2, [sp, #8]
 8007eac:	9301      	str	r3, [sp, #4]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	460a      	mov	r2, r1
 8007eb6:	4924      	ldr	r1, [pc, #144]	@ (8007f48 <vTaskStartScheduler+0xc0>)
 8007eb8:	4824      	ldr	r0, [pc, #144]	@ (8007f4c <vTaskStartScheduler+0xc4>)
 8007eba:	f7ff fdf1 	bl	8007aa0 <xTaskCreateStatic>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	4a23      	ldr	r2, [pc, #140]	@ (8007f50 <vTaskStartScheduler+0xc8>)
 8007ec2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ec4:	4b22      	ldr	r3, [pc, #136]	@ (8007f50 <vTaskStartScheduler+0xc8>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	617b      	str	r3, [r7, #20]
 8007ed0:	e001      	b.n	8007ed6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d102      	bne.n	8007ee2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007edc:	f000 fd1a 	bl	8008914 <xTimerCreateTimerTask>
 8007ee0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d11b      	bne.n	8007f20 <vTaskStartScheduler+0x98>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	613b      	str	r3, [r7, #16]
}
 8007efa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007efc:	4b15      	ldr	r3, [pc, #84]	@ (8007f54 <vTaskStartScheduler+0xcc>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3354      	adds	r3, #84	@ 0x54
 8007f02:	4a15      	ldr	r2, [pc, #84]	@ (8007f58 <vTaskStartScheduler+0xd0>)
 8007f04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f06:	4b15      	ldr	r3, [pc, #84]	@ (8007f5c <vTaskStartScheduler+0xd4>)
 8007f08:	f04f 32ff 	mov.w	r2, #4294967295
 8007f0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f0e:	4b14      	ldr	r3, [pc, #80]	@ (8007f60 <vTaskStartScheduler+0xd8>)
 8007f10:	2201      	movs	r2, #1
 8007f12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f14:	4b13      	ldr	r3, [pc, #76]	@ (8007f64 <vTaskStartScheduler+0xdc>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f1a:	f001 f8e1 	bl	80090e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f1e:	e00f      	b.n	8007f40 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f26:	d10b      	bne.n	8007f40 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	60fb      	str	r3, [r7, #12]
}
 8007f3a:	bf00      	nop
 8007f3c:	bf00      	nop
 8007f3e:	e7fd      	b.n	8007f3c <vTaskStartScheduler+0xb4>
}
 8007f40:	bf00      	nop
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	08009a68 	.word	0x08009a68
 8007f4c:	08008599 	.word	0x08008599
 8007f50:	20000ef8 	.word	0x20000ef8
 8007f54:	20000a00 	.word	0x20000a00
 8007f58:	20000010 	.word	0x20000010
 8007f5c:	20000ef4 	.word	0x20000ef4
 8007f60:	20000ee0 	.word	0x20000ee0
 8007f64:	20000ed8 	.word	0x20000ed8

08007f68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f68:	b480      	push	{r7}
 8007f6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007f6c:	4b04      	ldr	r3, [pc, #16]	@ (8007f80 <vTaskSuspendAll+0x18>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3301      	adds	r3, #1
 8007f72:	4a03      	ldr	r2, [pc, #12]	@ (8007f80 <vTaskSuspendAll+0x18>)
 8007f74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f76:	bf00      	nop
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	20000efc 	.word	0x20000efc

08007f84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f92:	4b42      	ldr	r3, [pc, #264]	@ (800809c <xTaskResumeAll+0x118>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10b      	bne.n	8007fb2 <xTaskResumeAll+0x2e>
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	603b      	str	r3, [r7, #0]
}
 8007fac:	bf00      	nop
 8007fae:	bf00      	nop
 8007fb0:	e7fd      	b.n	8007fae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fb2:	f001 f939 	bl	8009228 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fb6:	4b39      	ldr	r3, [pc, #228]	@ (800809c <xTaskResumeAll+0x118>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	4a37      	ldr	r2, [pc, #220]	@ (800809c <xTaskResumeAll+0x118>)
 8007fbe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fc0:	4b36      	ldr	r3, [pc, #216]	@ (800809c <xTaskResumeAll+0x118>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d162      	bne.n	800808e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fc8:	4b35      	ldr	r3, [pc, #212]	@ (80080a0 <xTaskResumeAll+0x11c>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d05e      	beq.n	800808e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fd0:	e02f      	b.n	8008032 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fd2:	4b34      	ldr	r3, [pc, #208]	@ (80080a4 <xTaskResumeAll+0x120>)
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3318      	adds	r3, #24
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff f83a 	bl	8007058 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7ff f835 	bl	8007058 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80080a8 <xTaskResumeAll+0x124>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d903      	bls.n	8008002 <xTaskResumeAll+0x7e>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80080a8 <xTaskResumeAll+0x124>)
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008006:	4613      	mov	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4a27      	ldr	r2, [pc, #156]	@ (80080ac <xTaskResumeAll+0x128>)
 8008010:	441a      	add	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3304      	adds	r3, #4
 8008016:	4619      	mov	r1, r3
 8008018:	4610      	mov	r0, r2
 800801a:	f7fe ffc0 	bl	8006f9e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008022:	4b23      	ldr	r3, [pc, #140]	@ (80080b0 <xTaskResumeAll+0x12c>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008028:	429a      	cmp	r2, r3
 800802a:	d302      	bcc.n	8008032 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800802c:	4b21      	ldr	r3, [pc, #132]	@ (80080b4 <xTaskResumeAll+0x130>)
 800802e:	2201      	movs	r2, #1
 8008030:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008032:	4b1c      	ldr	r3, [pc, #112]	@ (80080a4 <xTaskResumeAll+0x120>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1cb      	bne.n	8007fd2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008040:	f000 fb66 	bl	8008710 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008044:	4b1c      	ldr	r3, [pc, #112]	@ (80080b8 <xTaskResumeAll+0x134>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d010      	beq.n	8008072 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008050:	f000 f846 	bl	80080e0 <xTaskIncrementTick>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d002      	beq.n	8008060 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800805a:	4b16      	ldr	r3, [pc, #88]	@ (80080b4 <xTaskResumeAll+0x130>)
 800805c:	2201      	movs	r2, #1
 800805e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3b01      	subs	r3, #1
 8008064:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1f1      	bne.n	8008050 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800806c:	4b12      	ldr	r3, [pc, #72]	@ (80080b8 <xTaskResumeAll+0x134>)
 800806e:	2200      	movs	r2, #0
 8008070:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008072:	4b10      	ldr	r3, [pc, #64]	@ (80080b4 <xTaskResumeAll+0x130>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d009      	beq.n	800808e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800807a:	2301      	movs	r3, #1
 800807c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800807e:	4b0f      	ldr	r3, [pc, #60]	@ (80080bc <xTaskResumeAll+0x138>)
 8008080:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800808e:	f001 f8fd 	bl	800928c <vPortExitCritical>

	return xAlreadyYielded;
 8008092:	68bb      	ldr	r3, [r7, #8]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	20000efc 	.word	0x20000efc
 80080a0:	20000ed4 	.word	0x20000ed4
 80080a4:	20000e94 	.word	0x20000e94
 80080a8:	20000edc 	.word	0x20000edc
 80080ac:	20000a04 	.word	0x20000a04
 80080b0:	20000a00 	.word	0x20000a00
 80080b4:	20000ee8 	.word	0x20000ee8
 80080b8:	20000ee4 	.word	0x20000ee4
 80080bc:	e000ed04 	.word	0xe000ed04

080080c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80080c6:	4b05      	ldr	r3, [pc, #20]	@ (80080dc <xTaskGetTickCount+0x1c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80080cc:	687b      	ldr	r3, [r7, #4]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr
 80080da:	bf00      	nop
 80080dc:	20000ed8 	.word	0x20000ed8

080080e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b086      	sub	sp, #24
 80080e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ea:	4b4f      	ldr	r3, [pc, #316]	@ (8008228 <xTaskIncrementTick+0x148>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f040 8090 	bne.w	8008214 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080f4:	4b4d      	ldr	r3, [pc, #308]	@ (800822c <xTaskIncrementTick+0x14c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3301      	adds	r3, #1
 80080fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80080fc:	4a4b      	ldr	r2, [pc, #300]	@ (800822c <xTaskIncrementTick+0x14c>)
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d121      	bne.n	800814c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008108:	4b49      	ldr	r3, [pc, #292]	@ (8008230 <xTaskIncrementTick+0x150>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00b      	beq.n	800812a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	603b      	str	r3, [r7, #0]
}
 8008124:	bf00      	nop
 8008126:	bf00      	nop
 8008128:	e7fd      	b.n	8008126 <xTaskIncrementTick+0x46>
 800812a:	4b41      	ldr	r3, [pc, #260]	@ (8008230 <xTaskIncrementTick+0x150>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	4b40      	ldr	r3, [pc, #256]	@ (8008234 <xTaskIncrementTick+0x154>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a3e      	ldr	r2, [pc, #248]	@ (8008230 <xTaskIncrementTick+0x150>)
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	4a3e      	ldr	r2, [pc, #248]	@ (8008234 <xTaskIncrementTick+0x154>)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6013      	str	r3, [r2, #0]
 800813e:	4b3e      	ldr	r3, [pc, #248]	@ (8008238 <xTaskIncrementTick+0x158>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3301      	adds	r3, #1
 8008144:	4a3c      	ldr	r2, [pc, #240]	@ (8008238 <xTaskIncrementTick+0x158>)
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	f000 fae2 	bl	8008710 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800814c:	4b3b      	ldr	r3, [pc, #236]	@ (800823c <xTaskIncrementTick+0x15c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	429a      	cmp	r2, r3
 8008154:	d349      	bcc.n	80081ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008156:	4b36      	ldr	r3, [pc, #216]	@ (8008230 <xTaskIncrementTick+0x150>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d104      	bne.n	800816a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008160:	4b36      	ldr	r3, [pc, #216]	@ (800823c <xTaskIncrementTick+0x15c>)
 8008162:	f04f 32ff 	mov.w	r2, #4294967295
 8008166:	601a      	str	r2, [r3, #0]
					break;
 8008168:	e03f      	b.n	80081ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800816a:	4b31      	ldr	r3, [pc, #196]	@ (8008230 <xTaskIncrementTick+0x150>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	429a      	cmp	r2, r3
 8008180:	d203      	bcs.n	800818a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008182:	4a2e      	ldr	r2, [pc, #184]	@ (800823c <xTaskIncrementTick+0x15c>)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008188:	e02f      	b.n	80081ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	3304      	adds	r3, #4
 800818e:	4618      	mov	r0, r3
 8008190:	f7fe ff62 	bl	8007058 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008198:	2b00      	cmp	r3, #0
 800819a:	d004      	beq.n	80081a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	3318      	adds	r3, #24
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fe ff59 	bl	8007058 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081aa:	4b25      	ldr	r3, [pc, #148]	@ (8008240 <xTaskIncrementTick+0x160>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d903      	bls.n	80081ba <xTaskIncrementTick+0xda>
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b6:	4a22      	ldr	r2, [pc, #136]	@ (8008240 <xTaskIncrementTick+0x160>)
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081be:	4613      	mov	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4a1f      	ldr	r2, [pc, #124]	@ (8008244 <xTaskIncrementTick+0x164>)
 80081c8:	441a      	add	r2, r3
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	3304      	adds	r3, #4
 80081ce:	4619      	mov	r1, r3
 80081d0:	4610      	mov	r0, r2
 80081d2:	f7fe fee4 	bl	8006f9e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081da:	4b1b      	ldr	r3, [pc, #108]	@ (8008248 <xTaskIncrementTick+0x168>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d3b8      	bcc.n	8008156 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80081e4:	2301      	movs	r3, #1
 80081e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081e8:	e7b5      	b.n	8008156 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081ea:	4b17      	ldr	r3, [pc, #92]	@ (8008248 <xTaskIncrementTick+0x168>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f0:	4914      	ldr	r1, [pc, #80]	@ (8008244 <xTaskIncrementTick+0x164>)
 80081f2:	4613      	mov	r3, r2
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	4413      	add	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	440b      	add	r3, r1
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d901      	bls.n	8008206 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008202:	2301      	movs	r3, #1
 8008204:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008206:	4b11      	ldr	r3, [pc, #68]	@ (800824c <xTaskIncrementTick+0x16c>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d007      	beq.n	800821e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800820e:	2301      	movs	r3, #1
 8008210:	617b      	str	r3, [r7, #20]
 8008212:	e004      	b.n	800821e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008214:	4b0e      	ldr	r3, [pc, #56]	@ (8008250 <xTaskIncrementTick+0x170>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3301      	adds	r3, #1
 800821a:	4a0d      	ldr	r2, [pc, #52]	@ (8008250 <xTaskIncrementTick+0x170>)
 800821c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800821e:	697b      	ldr	r3, [r7, #20]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	20000efc 	.word	0x20000efc
 800822c:	20000ed8 	.word	0x20000ed8
 8008230:	20000e8c 	.word	0x20000e8c
 8008234:	20000e90 	.word	0x20000e90
 8008238:	20000eec 	.word	0x20000eec
 800823c:	20000ef4 	.word	0x20000ef4
 8008240:	20000edc 	.word	0x20000edc
 8008244:	20000a04 	.word	0x20000a04
 8008248:	20000a00 	.word	0x20000a00
 800824c:	20000ee8 	.word	0x20000ee8
 8008250:	20000ee4 	.word	0x20000ee4

08008254 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800825a:	4b2b      	ldr	r3, [pc, #172]	@ (8008308 <vTaskSwitchContext+0xb4>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008262:	4b2a      	ldr	r3, [pc, #168]	@ (800830c <vTaskSwitchContext+0xb8>)
 8008264:	2201      	movs	r2, #1
 8008266:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008268:	e047      	b.n	80082fa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800826a:	4b28      	ldr	r3, [pc, #160]	@ (800830c <vTaskSwitchContext+0xb8>)
 800826c:	2200      	movs	r2, #0
 800826e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008270:	4b27      	ldr	r3, [pc, #156]	@ (8008310 <vTaskSwitchContext+0xbc>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	e011      	b.n	800829c <vTaskSwitchContext+0x48>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10b      	bne.n	8008296 <vTaskSwitchContext+0x42>
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	607b      	str	r3, [r7, #4]
}
 8008290:	bf00      	nop
 8008292:	bf00      	nop
 8008294:	e7fd      	b.n	8008292 <vTaskSwitchContext+0x3e>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	3b01      	subs	r3, #1
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	491d      	ldr	r1, [pc, #116]	@ (8008314 <vTaskSwitchContext+0xc0>)
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	4613      	mov	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	440b      	add	r3, r1
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d0e3      	beq.n	8008278 <vTaskSwitchContext+0x24>
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	4613      	mov	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4a16      	ldr	r2, [pc, #88]	@ (8008314 <vTaskSwitchContext+0xc0>)
 80082bc:	4413      	add	r3, r2
 80082be:	60bb      	str	r3, [r7, #8]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	605a      	str	r2, [r3, #4]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	3308      	adds	r3, #8
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d104      	bne.n	80082e0 <vTaskSwitchContext+0x8c>
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	605a      	str	r2, [r3, #4]
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008318 <vTaskSwitchContext+0xc4>)
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	4a09      	ldr	r2, [pc, #36]	@ (8008310 <vTaskSwitchContext+0xbc>)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80082f0:	4b09      	ldr	r3, [pc, #36]	@ (8008318 <vTaskSwitchContext+0xc4>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3354      	adds	r3, #84	@ 0x54
 80082f6:	4a09      	ldr	r2, [pc, #36]	@ (800831c <vTaskSwitchContext+0xc8>)
 80082f8:	6013      	str	r3, [r2, #0]
}
 80082fa:	bf00      	nop
 80082fc:	3714      	adds	r7, #20
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	20000efc 	.word	0x20000efc
 800830c:	20000ee8 	.word	0x20000ee8
 8008310:	20000edc 	.word	0x20000edc
 8008314:	20000a04 	.word	0x20000a04
 8008318:	20000a00 	.word	0x20000a00
 800831c:	20000010 	.word	0x20000010

08008320 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10b      	bne.n	8008348 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	60fb      	str	r3, [r7, #12]
}
 8008342:	bf00      	nop
 8008344:	bf00      	nop
 8008346:	e7fd      	b.n	8008344 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008348:	4b07      	ldr	r3, [pc, #28]	@ (8008368 <vTaskPlaceOnEventList+0x48>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	3318      	adds	r3, #24
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7fe fe48 	bl	8006fe6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008356:	2101      	movs	r1, #1
 8008358:	6838      	ldr	r0, [r7, #0]
 800835a:	f000 fa87 	bl	800886c <prvAddCurrentTaskToDelayedList>
}
 800835e:	bf00      	nop
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	20000a00 	.word	0x20000a00

0800836c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10b      	bne.n	8008396 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	617b      	str	r3, [r7, #20]
}
 8008390:	bf00      	nop
 8008392:	bf00      	nop
 8008394:	e7fd      	b.n	8008392 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008396:	4b0a      	ldr	r3, [pc, #40]	@ (80083c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3318      	adds	r3, #24
 800839c:	4619      	mov	r1, r3
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f7fe fdfd 	bl	8006f9e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d002      	beq.n	80083b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80083aa:	f04f 33ff 	mov.w	r3, #4294967295
 80083ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	68b8      	ldr	r0, [r7, #8]
 80083b4:	f000 fa5a 	bl	800886c <prvAddCurrentTaskToDelayedList>
	}
 80083b8:	bf00      	nop
 80083ba:	3718      	adds	r7, #24
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	20000a00 	.word	0x20000a00

080083c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	60fb      	str	r3, [r7, #12]
}
 80083ec:	bf00      	nop
 80083ee:	bf00      	nop
 80083f0:	e7fd      	b.n	80083ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	3318      	adds	r3, #24
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fe fe2e 	bl	8007058 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008474 <xTaskRemoveFromEventList+0xb0>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d11d      	bne.n	8008440 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	3304      	adds	r3, #4
 8008408:	4618      	mov	r0, r3
 800840a:	f7fe fe25 	bl	8007058 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008412:	4b19      	ldr	r3, [pc, #100]	@ (8008478 <xTaskRemoveFromEventList+0xb4>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	429a      	cmp	r2, r3
 8008418:	d903      	bls.n	8008422 <xTaskRemoveFromEventList+0x5e>
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800841e:	4a16      	ldr	r2, [pc, #88]	@ (8008478 <xTaskRemoveFromEventList+0xb4>)
 8008420:	6013      	str	r3, [r2, #0]
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008426:	4613      	mov	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	4413      	add	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4a13      	ldr	r2, [pc, #76]	@ (800847c <xTaskRemoveFromEventList+0xb8>)
 8008430:	441a      	add	r2, r3
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	3304      	adds	r3, #4
 8008436:	4619      	mov	r1, r3
 8008438:	4610      	mov	r0, r2
 800843a:	f7fe fdb0 	bl	8006f9e <vListInsertEnd>
 800843e:	e005      	b.n	800844c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	3318      	adds	r3, #24
 8008444:	4619      	mov	r1, r3
 8008446:	480e      	ldr	r0, [pc, #56]	@ (8008480 <xTaskRemoveFromEventList+0xbc>)
 8008448:	f7fe fda9 	bl	8006f9e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008450:	4b0c      	ldr	r3, [pc, #48]	@ (8008484 <xTaskRemoveFromEventList+0xc0>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008456:	429a      	cmp	r2, r3
 8008458:	d905      	bls.n	8008466 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800845a:	2301      	movs	r3, #1
 800845c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800845e:	4b0a      	ldr	r3, [pc, #40]	@ (8008488 <xTaskRemoveFromEventList+0xc4>)
 8008460:	2201      	movs	r2, #1
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	e001      	b.n	800846a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008466:	2300      	movs	r3, #0
 8008468:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800846a:	697b      	ldr	r3, [r7, #20]
}
 800846c:	4618      	mov	r0, r3
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	20000efc 	.word	0x20000efc
 8008478:	20000edc 	.word	0x20000edc
 800847c:	20000a04 	.word	0x20000a04
 8008480:	20000e94 	.word	0x20000e94
 8008484:	20000a00 	.word	0x20000a00
 8008488:	20000ee8 	.word	0x20000ee8

0800848c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008494:	4b06      	ldr	r3, [pc, #24]	@ (80084b0 <vTaskInternalSetTimeOutState+0x24>)
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800849c:	4b05      	ldr	r3, [pc, #20]	@ (80084b4 <vTaskInternalSetTimeOutState+0x28>)
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	605a      	str	r2, [r3, #4]
}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	20000eec 	.word	0x20000eec
 80084b4:	20000ed8 	.word	0x20000ed8

080084b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b088      	sub	sp, #32
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10b      	bne.n	80084e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	613b      	str	r3, [r7, #16]
}
 80084da:	bf00      	nop
 80084dc:	bf00      	nop
 80084de:	e7fd      	b.n	80084dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10b      	bne.n	80084fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80084e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	60fb      	str	r3, [r7, #12]
}
 80084f8:	bf00      	nop
 80084fa:	bf00      	nop
 80084fc:	e7fd      	b.n	80084fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80084fe:	f000 fe93 	bl	8009228 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008502:	4b1d      	ldr	r3, [pc, #116]	@ (8008578 <xTaskCheckForTimeOut+0xc0>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	69ba      	ldr	r2, [r7, #24]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800851a:	d102      	bne.n	8008522 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800851c:	2300      	movs	r3, #0
 800851e:	61fb      	str	r3, [r7, #28]
 8008520:	e023      	b.n	800856a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	4b15      	ldr	r3, [pc, #84]	@ (800857c <xTaskCheckForTimeOut+0xc4>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	429a      	cmp	r2, r3
 800852c:	d007      	beq.n	800853e <xTaskCheckForTimeOut+0x86>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	429a      	cmp	r2, r3
 8008536:	d302      	bcc.n	800853e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008538:	2301      	movs	r3, #1
 800853a:	61fb      	str	r3, [r7, #28]
 800853c:	e015      	b.n	800856a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	429a      	cmp	r2, r3
 8008546:	d20b      	bcs.n	8008560 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	1ad2      	subs	r2, r2, r3
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff ff99 	bl	800848c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800855a:	2300      	movs	r3, #0
 800855c:	61fb      	str	r3, [r7, #28]
 800855e:	e004      	b.n	800856a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2200      	movs	r2, #0
 8008564:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008566:	2301      	movs	r3, #1
 8008568:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800856a:	f000 fe8f 	bl	800928c <vPortExitCritical>

	return xReturn;
 800856e:	69fb      	ldr	r3, [r7, #28]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3720      	adds	r7, #32
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	20000ed8 	.word	0x20000ed8
 800857c:	20000eec 	.word	0x20000eec

08008580 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008580:	b480      	push	{r7}
 8008582:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008584:	4b03      	ldr	r3, [pc, #12]	@ (8008594 <vTaskMissedYield+0x14>)
 8008586:	2201      	movs	r2, #1
 8008588:	601a      	str	r2, [r3, #0]
}
 800858a:	bf00      	nop
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	20000ee8 	.word	0x20000ee8

08008598 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80085a0:	f000 f852 	bl	8008648 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085a4:	4b06      	ldr	r3, [pc, #24]	@ (80085c0 <prvIdleTask+0x28>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d9f9      	bls.n	80085a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80085ac:	4b05      	ldr	r3, [pc, #20]	@ (80085c4 <prvIdleTask+0x2c>)
 80085ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80085bc:	e7f0      	b.n	80085a0 <prvIdleTask+0x8>
 80085be:	bf00      	nop
 80085c0:	20000a04 	.word	0x20000a04
 80085c4:	e000ed04 	.word	0xe000ed04

080085c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085ce:	2300      	movs	r3, #0
 80085d0:	607b      	str	r3, [r7, #4]
 80085d2:	e00c      	b.n	80085ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	4613      	mov	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4a12      	ldr	r2, [pc, #72]	@ (8008628 <prvInitialiseTaskLists+0x60>)
 80085e0:	4413      	add	r3, r2
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fe fcae 	bl	8006f44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	3301      	adds	r3, #1
 80085ec:	607b      	str	r3, [r7, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b37      	cmp	r3, #55	@ 0x37
 80085f2:	d9ef      	bls.n	80085d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80085f4:	480d      	ldr	r0, [pc, #52]	@ (800862c <prvInitialiseTaskLists+0x64>)
 80085f6:	f7fe fca5 	bl	8006f44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80085fa:	480d      	ldr	r0, [pc, #52]	@ (8008630 <prvInitialiseTaskLists+0x68>)
 80085fc:	f7fe fca2 	bl	8006f44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008600:	480c      	ldr	r0, [pc, #48]	@ (8008634 <prvInitialiseTaskLists+0x6c>)
 8008602:	f7fe fc9f 	bl	8006f44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008606:	480c      	ldr	r0, [pc, #48]	@ (8008638 <prvInitialiseTaskLists+0x70>)
 8008608:	f7fe fc9c 	bl	8006f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800860c:	480b      	ldr	r0, [pc, #44]	@ (800863c <prvInitialiseTaskLists+0x74>)
 800860e:	f7fe fc99 	bl	8006f44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008612:	4b0b      	ldr	r3, [pc, #44]	@ (8008640 <prvInitialiseTaskLists+0x78>)
 8008614:	4a05      	ldr	r2, [pc, #20]	@ (800862c <prvInitialiseTaskLists+0x64>)
 8008616:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008618:	4b0a      	ldr	r3, [pc, #40]	@ (8008644 <prvInitialiseTaskLists+0x7c>)
 800861a:	4a05      	ldr	r2, [pc, #20]	@ (8008630 <prvInitialiseTaskLists+0x68>)
 800861c:	601a      	str	r2, [r3, #0]
}
 800861e:	bf00      	nop
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20000a04 	.word	0x20000a04
 800862c:	20000e64 	.word	0x20000e64
 8008630:	20000e78 	.word	0x20000e78
 8008634:	20000e94 	.word	0x20000e94
 8008638:	20000ea8 	.word	0x20000ea8
 800863c:	20000ec0 	.word	0x20000ec0
 8008640:	20000e8c 	.word	0x20000e8c
 8008644:	20000e90 	.word	0x20000e90

08008648 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800864e:	e019      	b.n	8008684 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008650:	f000 fdea 	bl	8009228 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008654:	4b10      	ldr	r3, [pc, #64]	@ (8008698 <prvCheckTasksWaitingTermination+0x50>)
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	68db      	ldr	r3, [r3, #12]
 800865a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	3304      	adds	r3, #4
 8008660:	4618      	mov	r0, r3
 8008662:	f7fe fcf9 	bl	8007058 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008666:	4b0d      	ldr	r3, [pc, #52]	@ (800869c <prvCheckTasksWaitingTermination+0x54>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3b01      	subs	r3, #1
 800866c:	4a0b      	ldr	r2, [pc, #44]	@ (800869c <prvCheckTasksWaitingTermination+0x54>)
 800866e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008670:	4b0b      	ldr	r3, [pc, #44]	@ (80086a0 <prvCheckTasksWaitingTermination+0x58>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3b01      	subs	r3, #1
 8008676:	4a0a      	ldr	r2, [pc, #40]	@ (80086a0 <prvCheckTasksWaitingTermination+0x58>)
 8008678:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800867a:	f000 fe07 	bl	800928c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f810 	bl	80086a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008684:	4b06      	ldr	r3, [pc, #24]	@ (80086a0 <prvCheckTasksWaitingTermination+0x58>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e1      	bne.n	8008650 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800868c:	bf00      	nop
 800868e:	bf00      	nop
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20000ea8 	.word	0x20000ea8
 800869c:	20000ed4 	.word	0x20000ed4
 80086a0:	20000ebc 	.word	0x20000ebc

080086a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3354      	adds	r3, #84	@ 0x54
 80086b0:	4618      	mov	r0, r3
 80086b2:	f001 f8d1 	bl	8009858 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d108      	bne.n	80086d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 ff9f 	bl	8009608 <vPortFree>
				vPortFree( pxTCB );
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 ff9c 	bl	8009608 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086d0:	e019      	b.n	8008706 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d103      	bne.n	80086e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 ff93 	bl	8009608 <vPortFree>
	}
 80086e2:	e010      	b.n	8008706 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d00b      	beq.n	8008706 <prvDeleteTCB+0x62>
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	60fb      	str	r3, [r7, #12]
}
 8008700:	bf00      	nop
 8008702:	bf00      	nop
 8008704:	e7fd      	b.n	8008702 <prvDeleteTCB+0x5e>
	}
 8008706:	bf00      	nop
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
	...

08008710 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008716:	4b0c      	ldr	r3, [pc, #48]	@ (8008748 <prvResetNextTaskUnblockTime+0x38>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d104      	bne.n	800872a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008720:	4b0a      	ldr	r3, [pc, #40]	@ (800874c <prvResetNextTaskUnblockTime+0x3c>)
 8008722:	f04f 32ff 	mov.w	r2, #4294967295
 8008726:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008728:	e008      	b.n	800873c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800872a:	4b07      	ldr	r3, [pc, #28]	@ (8008748 <prvResetNextTaskUnblockTime+0x38>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	4a04      	ldr	r2, [pc, #16]	@ (800874c <prvResetNextTaskUnblockTime+0x3c>)
 800873a:	6013      	str	r3, [r2, #0]
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	20000e8c 	.word	0x20000e8c
 800874c:	20000ef4 	.word	0x20000ef4

08008750 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008756:	4b0b      	ldr	r3, [pc, #44]	@ (8008784 <xTaskGetSchedulerState+0x34>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d102      	bne.n	8008764 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800875e:	2301      	movs	r3, #1
 8008760:	607b      	str	r3, [r7, #4]
 8008762:	e008      	b.n	8008776 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008764:	4b08      	ldr	r3, [pc, #32]	@ (8008788 <xTaskGetSchedulerState+0x38>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d102      	bne.n	8008772 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800876c:	2302      	movs	r3, #2
 800876e:	607b      	str	r3, [r7, #4]
 8008770:	e001      	b.n	8008776 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008772:	2300      	movs	r3, #0
 8008774:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008776:	687b      	ldr	r3, [r7, #4]
	}
 8008778:	4618      	mov	r0, r3
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr
 8008784:	20000ee0 	.word	0x20000ee0
 8008788:	20000efc 	.word	0x20000efc

0800878c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008798:	2300      	movs	r3, #0
 800879a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d058      	beq.n	8008854 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80087a2:	4b2f      	ldr	r3, [pc, #188]	@ (8008860 <xTaskPriorityDisinherit+0xd4>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d00b      	beq.n	80087c4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	60fb      	str	r3, [r7, #12]
}
 80087be:	bf00      	nop
 80087c0:	bf00      	nop
 80087c2:	e7fd      	b.n	80087c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10b      	bne.n	80087e4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	60bb      	str	r3, [r7, #8]
}
 80087de:	bf00      	nop
 80087e0:	bf00      	nop
 80087e2:	e7fd      	b.n	80087e0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087e8:	1e5a      	subs	r2, r3, #1
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d02c      	beq.n	8008854 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d128      	bne.n	8008854 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	3304      	adds	r3, #4
 8008806:	4618      	mov	r0, r3
 8008808:	f7fe fc26 	bl	8007058 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008818:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008824:	4b0f      	ldr	r3, [pc, #60]	@ (8008864 <xTaskPriorityDisinherit+0xd8>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	429a      	cmp	r2, r3
 800882a:	d903      	bls.n	8008834 <xTaskPriorityDisinherit+0xa8>
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008830:	4a0c      	ldr	r2, [pc, #48]	@ (8008864 <xTaskPriorityDisinherit+0xd8>)
 8008832:	6013      	str	r3, [r2, #0]
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008838:	4613      	mov	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4a09      	ldr	r2, [pc, #36]	@ (8008868 <xTaskPriorityDisinherit+0xdc>)
 8008842:	441a      	add	r2, r3
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	3304      	adds	r3, #4
 8008848:	4619      	mov	r1, r3
 800884a:	4610      	mov	r0, r2
 800884c:	f7fe fba7 	bl	8006f9e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008850:	2301      	movs	r3, #1
 8008852:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008854:	697b      	ldr	r3, [r7, #20]
	}
 8008856:	4618      	mov	r0, r3
 8008858:	3718      	adds	r7, #24
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	20000a00 	.word	0x20000a00
 8008864:	20000edc 	.word	0x20000edc
 8008868:	20000a04 	.word	0x20000a04

0800886c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008876:	4b21      	ldr	r3, [pc, #132]	@ (80088fc <prvAddCurrentTaskToDelayedList+0x90>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800887c:	4b20      	ldr	r3, [pc, #128]	@ (8008900 <prvAddCurrentTaskToDelayedList+0x94>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3304      	adds	r3, #4
 8008882:	4618      	mov	r0, r3
 8008884:	f7fe fbe8 	bl	8007058 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800888e:	d10a      	bne.n	80088a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d007      	beq.n	80088a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008896:	4b1a      	ldr	r3, [pc, #104]	@ (8008900 <prvAddCurrentTaskToDelayedList+0x94>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	3304      	adds	r3, #4
 800889c:	4619      	mov	r1, r3
 800889e:	4819      	ldr	r0, [pc, #100]	@ (8008904 <prvAddCurrentTaskToDelayedList+0x98>)
 80088a0:	f7fe fb7d 	bl	8006f9e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088a4:	e026      	b.n	80088f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4413      	add	r3, r2
 80088ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088ae:	4b14      	ldr	r3, [pc, #80]	@ (8008900 <prvAddCurrentTaskToDelayedList+0x94>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d209      	bcs.n	80088d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088be:	4b12      	ldr	r3, [pc, #72]	@ (8008908 <prvAddCurrentTaskToDelayedList+0x9c>)
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	4b0f      	ldr	r3, [pc, #60]	@ (8008900 <prvAddCurrentTaskToDelayedList+0x94>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3304      	adds	r3, #4
 80088c8:	4619      	mov	r1, r3
 80088ca:	4610      	mov	r0, r2
 80088cc:	f7fe fb8b 	bl	8006fe6 <vListInsert>
}
 80088d0:	e010      	b.n	80088f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088d2:	4b0e      	ldr	r3, [pc, #56]	@ (800890c <prvAddCurrentTaskToDelayedList+0xa0>)
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008900 <prvAddCurrentTaskToDelayedList+0x94>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3304      	adds	r3, #4
 80088dc:	4619      	mov	r1, r3
 80088de:	4610      	mov	r0, r2
 80088e0:	f7fe fb81 	bl	8006fe6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008910 <prvAddCurrentTaskToDelayedList+0xa4>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d202      	bcs.n	80088f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80088ee:	4a08      	ldr	r2, [pc, #32]	@ (8008910 <prvAddCurrentTaskToDelayedList+0xa4>)
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	6013      	str	r3, [r2, #0]
}
 80088f4:	bf00      	nop
 80088f6:	3710      	adds	r7, #16
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20000ed8 	.word	0x20000ed8
 8008900:	20000a00 	.word	0x20000a00
 8008904:	20000ec0 	.word	0x20000ec0
 8008908:	20000e90 	.word	0x20000e90
 800890c:	20000e8c 	.word	0x20000e8c
 8008910:	20000ef4 	.word	0x20000ef4

08008914 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b08a      	sub	sp, #40	@ 0x28
 8008918:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800891a:	2300      	movs	r3, #0
 800891c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800891e:	f000 fb13 	bl	8008f48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008922:	4b1d      	ldr	r3, [pc, #116]	@ (8008998 <xTimerCreateTimerTask+0x84>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d021      	beq.n	800896e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800892a:	2300      	movs	r3, #0
 800892c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800892e:	2300      	movs	r3, #0
 8008930:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008932:	1d3a      	adds	r2, r7, #4
 8008934:	f107 0108 	add.w	r1, r7, #8
 8008938:	f107 030c 	add.w	r3, r7, #12
 800893c:	4618      	mov	r0, r3
 800893e:	f7fe fae7 	bl	8006f10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008942:	6879      	ldr	r1, [r7, #4]
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	9202      	str	r2, [sp, #8]
 800894a:	9301      	str	r3, [sp, #4]
 800894c:	2302      	movs	r3, #2
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	2300      	movs	r3, #0
 8008952:	460a      	mov	r2, r1
 8008954:	4911      	ldr	r1, [pc, #68]	@ (800899c <xTimerCreateTimerTask+0x88>)
 8008956:	4812      	ldr	r0, [pc, #72]	@ (80089a0 <xTimerCreateTimerTask+0x8c>)
 8008958:	f7ff f8a2 	bl	8007aa0 <xTaskCreateStatic>
 800895c:	4603      	mov	r3, r0
 800895e:	4a11      	ldr	r2, [pc, #68]	@ (80089a4 <xTimerCreateTimerTask+0x90>)
 8008960:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008962:	4b10      	ldr	r3, [pc, #64]	@ (80089a4 <xTimerCreateTimerTask+0x90>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800896a:	2301      	movs	r3, #1
 800896c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10b      	bne.n	800898c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008978:	f383 8811 	msr	BASEPRI, r3
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	613b      	str	r3, [r7, #16]
}
 8008986:	bf00      	nop
 8008988:	bf00      	nop
 800898a:	e7fd      	b.n	8008988 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800898c:	697b      	ldr	r3, [r7, #20]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20000f30 	.word	0x20000f30
 800899c:	08009a70 	.word	0x08009a70
 80089a0:	08008ae1 	.word	0x08008ae1
 80089a4:	20000f34 	.word	0x20000f34

080089a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08a      	sub	sp, #40	@ 0x28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
 80089b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80089b6:	2300      	movs	r3, #0
 80089b8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d10b      	bne.n	80089d8 <xTimerGenericCommand+0x30>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	623b      	str	r3, [r7, #32]
}
 80089d2:	bf00      	nop
 80089d4:	bf00      	nop
 80089d6:	e7fd      	b.n	80089d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80089d8:	4b19      	ldr	r3, [pc, #100]	@ (8008a40 <xTimerGenericCommand+0x98>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d02a      	beq.n	8008a36 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2b05      	cmp	r3, #5
 80089f0:	dc18      	bgt.n	8008a24 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80089f2:	f7ff fead 	bl	8008750 <xTaskGetSchedulerState>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	d109      	bne.n	8008a10 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80089fc:	4b10      	ldr	r3, [pc, #64]	@ (8008a40 <xTimerGenericCommand+0x98>)
 80089fe:	6818      	ldr	r0, [r3, #0]
 8008a00:	f107 0110 	add.w	r1, r7, #16
 8008a04:	2300      	movs	r3, #0
 8008a06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a08:	f7fe fc5a 	bl	80072c0 <xQueueGenericSend>
 8008a0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008a0e:	e012      	b.n	8008a36 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a10:	4b0b      	ldr	r3, [pc, #44]	@ (8008a40 <xTimerGenericCommand+0x98>)
 8008a12:	6818      	ldr	r0, [r3, #0]
 8008a14:	f107 0110 	add.w	r1, r7, #16
 8008a18:	2300      	movs	r3, #0
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f7fe fc50 	bl	80072c0 <xQueueGenericSend>
 8008a20:	6278      	str	r0, [r7, #36]	@ 0x24
 8008a22:	e008      	b.n	8008a36 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a24:	4b06      	ldr	r3, [pc, #24]	@ (8008a40 <xTimerGenericCommand+0x98>)
 8008a26:	6818      	ldr	r0, [r3, #0]
 8008a28:	f107 0110 	add.w	r1, r7, #16
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	f7fe fd48 	bl	80074c4 <xQueueGenericSendFromISR>
 8008a34:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3728      	adds	r7, #40	@ 0x28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	20000f30 	.word	0x20000f30

08008a44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b088      	sub	sp, #32
 8008a48:	af02      	add	r7, sp, #8
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a4e:	4b23      	ldr	r3, [pc, #140]	@ (8008adc <prvProcessExpiredTimer+0x98>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7fe fafb 	bl	8007058 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a68:	f003 0304 	and.w	r3, r3, #4
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d023      	beq.n	8008ab8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	699a      	ldr	r2, [r3, #24]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	18d1      	adds	r1, r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	6978      	ldr	r0, [r7, #20]
 8008a7e:	f000 f8d5 	bl	8008c2c <prvInsertTimerInActiveList>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d020      	beq.n	8008aca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a88:	2300      	movs	r3, #0
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	2100      	movs	r1, #0
 8008a92:	6978      	ldr	r0, [r7, #20]
 8008a94:	f7ff ff88 	bl	80089a8 <xTimerGenericCommand>
 8008a98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d114      	bne.n	8008aca <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	60fb      	str	r3, [r7, #12]
}
 8008ab2:	bf00      	nop
 8008ab4:	bf00      	nop
 8008ab6:	e7fd      	b.n	8008ab4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008abe:	f023 0301 	bic.w	r3, r3, #1
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	6978      	ldr	r0, [r7, #20]
 8008ad0:	4798      	blx	r3
}
 8008ad2:	bf00      	nop
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	20000f28 	.word	0x20000f28

08008ae0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ae8:	f107 0308 	add.w	r3, r7, #8
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 f859 	bl	8008ba4 <prvGetNextExpireTime>
 8008af2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	4619      	mov	r1, r3
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 f805 	bl	8008b08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008afe:	f000 f8d7 	bl	8008cb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b02:	bf00      	nop
 8008b04:	e7f0      	b.n	8008ae8 <prvTimerTask+0x8>
	...

08008b08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b12:	f7ff fa29 	bl	8007f68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b16:	f107 0308 	add.w	r3, r7, #8
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 f866 	bl	8008bec <prvSampleTimeNow>
 8008b20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d130      	bne.n	8008b8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10a      	bne.n	8008b44 <prvProcessTimerOrBlockTask+0x3c>
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d806      	bhi.n	8008b44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008b36:	f7ff fa25 	bl	8007f84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b3a:	68f9      	ldr	r1, [r7, #12]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f7ff ff81 	bl	8008a44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b42:	e024      	b.n	8008b8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d008      	beq.n	8008b5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b4a:	4b13      	ldr	r3, [pc, #76]	@ (8008b98 <prvProcessTimerOrBlockTask+0x90>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <prvProcessTimerOrBlockTask+0x50>
 8008b54:	2301      	movs	r3, #1
 8008b56:	e000      	b.n	8008b5a <prvProcessTimerOrBlockTask+0x52>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8008b9c <prvProcessTimerOrBlockTask+0x94>)
 8008b5e:	6818      	ldr	r0, [r3, #0]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	f7fe ff65 	bl	8007a38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b6e:	f7ff fa09 	bl	8007f84 <xTaskResumeAll>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b78:	4b09      	ldr	r3, [pc, #36]	@ (8008ba0 <prvProcessTimerOrBlockTask+0x98>)
 8008b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b7e:	601a      	str	r2, [r3, #0]
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	f3bf 8f6f 	isb	sy
}
 8008b88:	e001      	b.n	8008b8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b8a:	f7ff f9fb 	bl	8007f84 <xTaskResumeAll>
}
 8008b8e:	bf00      	nop
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	20000f2c 	.word	0x20000f2c
 8008b9c:	20000f30 	.word	0x20000f30
 8008ba0:	e000ed04 	.word	0xe000ed04

08008ba4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008bac:	4b0e      	ldr	r3, [pc, #56]	@ (8008be8 <prvGetNextExpireTime+0x44>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <prvGetNextExpireTime+0x16>
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	e000      	b.n	8008bbc <prvGetNextExpireTime+0x18>
 8008bba:	2200      	movs	r2, #0
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d105      	bne.n	8008bd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008bc8:	4b07      	ldr	r3, [pc, #28]	@ (8008be8 <prvGetNextExpireTime+0x44>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	60fb      	str	r3, [r7, #12]
 8008bd2:	e001      	b.n	8008bd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3714      	adds	r7, #20
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	20000f28 	.word	0x20000f28

08008bec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008bf4:	f7ff fa64 	bl	80080c0 <xTaskGetTickCount>
 8008bf8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8008c28 <prvSampleTimeNow+0x3c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d205      	bcs.n	8008c10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c04:	f000 f93a 	bl	8008e7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	601a      	str	r2, [r3, #0]
 8008c0e:	e002      	b.n	8008c16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c16:	4a04      	ldr	r2, [pc, #16]	@ (8008c28 <prvSampleTimeNow+0x3c>)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20000f38 	.word	0x20000f38

08008c2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b086      	sub	sp, #24
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
 8008c38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d812      	bhi.n	8008c78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	1ad2      	subs	r2, r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d302      	bcc.n	8008c66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c60:	2301      	movs	r3, #1
 8008c62:	617b      	str	r3, [r7, #20]
 8008c64:	e01b      	b.n	8008c9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c66:	4b10      	ldr	r3, [pc, #64]	@ (8008ca8 <prvInsertTimerInActiveList+0x7c>)
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	4619      	mov	r1, r3
 8008c70:	4610      	mov	r0, r2
 8008c72:	f7fe f9b8 	bl	8006fe6 <vListInsert>
 8008c76:	e012      	b.n	8008c9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d206      	bcs.n	8008c8e <prvInsertTimerInActiveList+0x62>
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d302      	bcc.n	8008c8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	617b      	str	r3, [r7, #20]
 8008c8c:	e007      	b.n	8008c9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c8e:	4b07      	ldr	r3, [pc, #28]	@ (8008cac <prvInsertTimerInActiveList+0x80>)
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	3304      	adds	r3, #4
 8008c96:	4619      	mov	r1, r3
 8008c98:	4610      	mov	r0, r2
 8008c9a:	f7fe f9a4 	bl	8006fe6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008c9e:	697b      	ldr	r3, [r7, #20]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3718      	adds	r7, #24
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	20000f2c 	.word	0x20000f2c
 8008cac:	20000f28 	.word	0x20000f28

08008cb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b08e      	sub	sp, #56	@ 0x38
 8008cb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008cb6:	e0ce      	b.n	8008e56 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	da19      	bge.n	8008cf2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008cbe:	1d3b      	adds	r3, r7, #4
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10b      	bne.n	8008ce2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	61fb      	str	r3, [r7, #28]
}
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	e7fd      	b.n	8008cde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ce8:	6850      	ldr	r0, [r2, #4]
 8008cea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cec:	6892      	ldr	r2, [r2, #8]
 8008cee:	4611      	mov	r1, r2
 8008cf0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f2c0 80ae 	blt.w	8008e56 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d004      	beq.n	8008d10 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d08:	3304      	adds	r3, #4
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fe f9a4 	bl	8007058 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d10:	463b      	mov	r3, r7
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7ff ff6a 	bl	8008bec <prvSampleTimeNow>
 8008d18:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b09      	cmp	r3, #9
 8008d1e:	f200 8097 	bhi.w	8008e50 <prvProcessReceivedCommands+0x1a0>
 8008d22:	a201      	add	r2, pc, #4	@ (adr r2, 8008d28 <prvProcessReceivedCommands+0x78>)
 8008d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d28:	08008d51 	.word	0x08008d51
 8008d2c:	08008d51 	.word	0x08008d51
 8008d30:	08008d51 	.word	0x08008d51
 8008d34:	08008dc7 	.word	0x08008dc7
 8008d38:	08008ddb 	.word	0x08008ddb
 8008d3c:	08008e27 	.word	0x08008e27
 8008d40:	08008d51 	.word	0x08008d51
 8008d44:	08008d51 	.word	0x08008d51
 8008d48:	08008dc7 	.word	0x08008dc7
 8008d4c:	08008ddb 	.word	0x08008ddb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d56:	f043 0301 	orr.w	r3, r3, #1
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	18d1      	adds	r1, r2, r3
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d70:	f7ff ff5c 	bl	8008c2c <prvInsertTimerInActiveList>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d06c      	beq.n	8008e54 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d88:	f003 0304 	and.w	r3, r3, #4
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d061      	beq.n	8008e54 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	441a      	add	r2, r3
 8008d98:	2300      	movs	r3, #0
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	2100      	movs	r1, #0
 8008da0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008da2:	f7ff fe01 	bl	80089a8 <xTimerGenericCommand>
 8008da6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008da8:	6a3b      	ldr	r3, [r7, #32]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d152      	bne.n	8008e54 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	61bb      	str	r3, [r7, #24]
}
 8008dc0:	bf00      	nop
 8008dc2:	bf00      	nop
 8008dc4:	e7fd      	b.n	8008dc2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dcc:	f023 0301 	bic.w	r3, r3, #1
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008dd8:	e03d      	b.n	8008e56 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008de0:	f043 0301 	orr.w	r3, r3, #1
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10b      	bne.n	8008e12 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	617b      	str	r3, [r7, #20]
}
 8008e0c:	bf00      	nop
 8008e0e:	bf00      	nop
 8008e10:	e7fd      	b.n	8008e0e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e14:	699a      	ldr	r2, [r3, #24]
 8008e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e18:	18d1      	adds	r1, r2, r3
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e20:	f7ff ff04 	bl	8008c2c <prvInsertTimerInActiveList>
					break;
 8008e24:	e017      	b.n	8008e56 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e2c:	f003 0302 	and.w	r3, r3, #2
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d103      	bne.n	8008e3c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008e34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e36:	f000 fbe7 	bl	8009608 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e3a:	e00c      	b.n	8008e56 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e42:	f023 0301 	bic.w	r3, r3, #1
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008e4e:	e002      	b.n	8008e56 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008e50:	bf00      	nop
 8008e52:	e000      	b.n	8008e56 <prvProcessReceivedCommands+0x1a6>
					break;
 8008e54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e56:	4b08      	ldr	r3, [pc, #32]	@ (8008e78 <prvProcessReceivedCommands+0x1c8>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	1d39      	adds	r1, r7, #4
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fe fbce 	bl	8007600 <xQueueReceive>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f47f af26 	bne.w	8008cb8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008e6c:	bf00      	nop
 8008e6e:	bf00      	nop
 8008e70:	3730      	adds	r7, #48	@ 0x30
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	20000f30 	.word	0x20000f30

08008e7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b088      	sub	sp, #32
 8008e80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e82:	e049      	b.n	8008f18 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e84:	4b2e      	ldr	r3, [pc, #184]	@ (8008f40 <prvSwitchTimerLists+0xc4>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8008f40 <prvSwitchTimerLists+0xc4>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	68db      	ldr	r3, [r3, #12]
 8008e96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	3304      	adds	r3, #4
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fe f8db 	bl	8007058 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008eb0:	f003 0304 	and.w	r3, r3, #4
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d02f      	beq.n	8008f18 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008ec2:	68ba      	ldr	r2, [r7, #8]
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d90e      	bls.n	8008ee8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8008f40 <prvSwitchTimerLists+0xc4>)
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3304      	adds	r3, #4
 8008ede:	4619      	mov	r1, r3
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	f7fe f880 	bl	8006fe6 <vListInsert>
 8008ee6:	e017      	b.n	8008f18 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ee8:	2300      	movs	r3, #0
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	2300      	movs	r3, #0
 8008eee:	693a      	ldr	r2, [r7, #16]
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f7ff fd58 	bl	80089a8 <xTimerGenericCommand>
 8008ef8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10b      	bne.n	8008f18 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	603b      	str	r3, [r7, #0]
}
 8008f12:	bf00      	nop
 8008f14:	bf00      	nop
 8008f16:	e7fd      	b.n	8008f14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f18:	4b09      	ldr	r3, [pc, #36]	@ (8008f40 <prvSwitchTimerLists+0xc4>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1b0      	bne.n	8008e84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008f22:	4b07      	ldr	r3, [pc, #28]	@ (8008f40 <prvSwitchTimerLists+0xc4>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008f28:	4b06      	ldr	r3, [pc, #24]	@ (8008f44 <prvSwitchTimerLists+0xc8>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a04      	ldr	r2, [pc, #16]	@ (8008f40 <prvSwitchTimerLists+0xc4>)
 8008f2e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f30:	4a04      	ldr	r2, [pc, #16]	@ (8008f44 <prvSwitchTimerLists+0xc8>)
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	6013      	str	r3, [r2, #0]
}
 8008f36:	bf00      	nop
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	20000f28 	.word	0x20000f28
 8008f44:	20000f2c 	.word	0x20000f2c

08008f48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008f4e:	f000 f96b 	bl	8009228 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f52:	4b15      	ldr	r3, [pc, #84]	@ (8008fa8 <prvCheckForValidListAndQueue+0x60>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d120      	bne.n	8008f9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f5a:	4814      	ldr	r0, [pc, #80]	@ (8008fac <prvCheckForValidListAndQueue+0x64>)
 8008f5c:	f7fd fff2 	bl	8006f44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f60:	4813      	ldr	r0, [pc, #76]	@ (8008fb0 <prvCheckForValidListAndQueue+0x68>)
 8008f62:	f7fd ffef 	bl	8006f44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f66:	4b13      	ldr	r3, [pc, #76]	@ (8008fb4 <prvCheckForValidListAndQueue+0x6c>)
 8008f68:	4a10      	ldr	r2, [pc, #64]	@ (8008fac <prvCheckForValidListAndQueue+0x64>)
 8008f6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f6c:	4b12      	ldr	r3, [pc, #72]	@ (8008fb8 <prvCheckForValidListAndQueue+0x70>)
 8008f6e:	4a10      	ldr	r2, [pc, #64]	@ (8008fb0 <prvCheckForValidListAndQueue+0x68>)
 8008f70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f72:	2300      	movs	r3, #0
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	4b11      	ldr	r3, [pc, #68]	@ (8008fbc <prvCheckForValidListAndQueue+0x74>)
 8008f78:	4a11      	ldr	r2, [pc, #68]	@ (8008fc0 <prvCheckForValidListAndQueue+0x78>)
 8008f7a:	2110      	movs	r1, #16
 8008f7c:	200a      	movs	r0, #10
 8008f7e:	f7fe f8ff 	bl	8007180 <xQueueGenericCreateStatic>
 8008f82:	4603      	mov	r3, r0
 8008f84:	4a08      	ldr	r2, [pc, #32]	@ (8008fa8 <prvCheckForValidListAndQueue+0x60>)
 8008f86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f88:	4b07      	ldr	r3, [pc, #28]	@ (8008fa8 <prvCheckForValidListAndQueue+0x60>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d005      	beq.n	8008f9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f90:	4b05      	ldr	r3, [pc, #20]	@ (8008fa8 <prvCheckForValidListAndQueue+0x60>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	490b      	ldr	r1, [pc, #44]	@ (8008fc4 <prvCheckForValidListAndQueue+0x7c>)
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fe fd24 	bl	80079e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f9c:	f000 f976 	bl	800928c <vPortExitCritical>
}
 8008fa0:	bf00      	nop
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20000f30 	.word	0x20000f30
 8008fac:	20000f00 	.word	0x20000f00
 8008fb0:	20000f14 	.word	0x20000f14
 8008fb4:	20000f28 	.word	0x20000f28
 8008fb8:	20000f2c 	.word	0x20000f2c
 8008fbc:	20000fdc 	.word	0x20000fdc
 8008fc0:	20000f3c 	.word	0x20000f3c
 8008fc4:	08009a78 	.word	0x08009a78

08008fc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	3b04      	subs	r3, #4
 8008fd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008fe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	3b04      	subs	r3, #4
 8008fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	f023 0201 	bic.w	r2, r3, #1
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	3b04      	subs	r3, #4
 8008ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800902c <pxPortInitialiseStack+0x64>)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3b14      	subs	r3, #20
 8009002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	3b04      	subs	r3, #4
 800900e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f06f 0202 	mvn.w	r2, #2
 8009016:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	3b20      	subs	r3, #32
 800901c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800901e:	68fb      	ldr	r3, [r7, #12]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3714      	adds	r7, #20
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	08009031 	.word	0x08009031

08009030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800903a:	4b13      	ldr	r3, [pc, #76]	@ (8009088 <prvTaskExitError+0x58>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009042:	d00b      	beq.n	800905c <prvTaskExitError+0x2c>
	__asm volatile
 8009044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	60fb      	str	r3, [r7, #12]
}
 8009056:	bf00      	nop
 8009058:	bf00      	nop
 800905a:	e7fd      	b.n	8009058 <prvTaskExitError+0x28>
	__asm volatile
 800905c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009060:	f383 8811 	msr	BASEPRI, r3
 8009064:	f3bf 8f6f 	isb	sy
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	60bb      	str	r3, [r7, #8]
}
 800906e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009070:	bf00      	nop
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d0fc      	beq.n	8009072 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009078:	bf00      	nop
 800907a:	bf00      	nop
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	2000000c 	.word	0x2000000c
 800908c:	00000000 	.word	0x00000000

08009090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009090:	4b07      	ldr	r3, [pc, #28]	@ (80090b0 <pxCurrentTCBConst2>)
 8009092:	6819      	ldr	r1, [r3, #0]
 8009094:	6808      	ldr	r0, [r1, #0]
 8009096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909a:	f380 8809 	msr	PSP, r0
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f04f 0000 	mov.w	r0, #0
 80090a6:	f380 8811 	msr	BASEPRI, r0
 80090aa:	4770      	bx	lr
 80090ac:	f3af 8000 	nop.w

080090b0 <pxCurrentTCBConst2>:
 80090b0:	20000a00 	.word	0x20000a00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80090b4:	bf00      	nop
 80090b6:	bf00      	nop

080090b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80090b8:	4808      	ldr	r0, [pc, #32]	@ (80090dc <prvPortStartFirstTask+0x24>)
 80090ba:	6800      	ldr	r0, [r0, #0]
 80090bc:	6800      	ldr	r0, [r0, #0]
 80090be:	f380 8808 	msr	MSP, r0
 80090c2:	f04f 0000 	mov.w	r0, #0
 80090c6:	f380 8814 	msr	CONTROL, r0
 80090ca:	b662      	cpsie	i
 80090cc:	b661      	cpsie	f
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	df00      	svc	0
 80090d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80090da:	bf00      	nop
 80090dc:	e000ed08 	.word	0xe000ed08

080090e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b086      	sub	sp, #24
 80090e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80090e6:	4b47      	ldr	r3, [pc, #284]	@ (8009204 <xPortStartScheduler+0x124>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a47      	ldr	r2, [pc, #284]	@ (8009208 <xPortStartScheduler+0x128>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d10b      	bne.n	8009108 <xPortStartScheduler+0x28>
	__asm volatile
 80090f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	613b      	str	r3, [r7, #16]
}
 8009102:	bf00      	nop
 8009104:	bf00      	nop
 8009106:	e7fd      	b.n	8009104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009108:	4b3e      	ldr	r3, [pc, #248]	@ (8009204 <xPortStartScheduler+0x124>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a3f      	ldr	r2, [pc, #252]	@ (800920c <xPortStartScheduler+0x12c>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d10b      	bne.n	800912a <xPortStartScheduler+0x4a>
	__asm volatile
 8009112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009116:	f383 8811 	msr	BASEPRI, r3
 800911a:	f3bf 8f6f 	isb	sy
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	60fb      	str	r3, [r7, #12]
}
 8009124:	bf00      	nop
 8009126:	bf00      	nop
 8009128:	e7fd      	b.n	8009126 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800912a:	4b39      	ldr	r3, [pc, #228]	@ (8009210 <xPortStartScheduler+0x130>)
 800912c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	b2db      	uxtb	r3, r3
 8009134:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	22ff      	movs	r2, #255	@ 0xff
 800913a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	b2db      	uxtb	r3, r3
 8009142:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	b2db      	uxtb	r3, r3
 8009148:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800914c:	b2da      	uxtb	r2, r3
 800914e:	4b31      	ldr	r3, [pc, #196]	@ (8009214 <xPortStartScheduler+0x134>)
 8009150:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009152:	4b31      	ldr	r3, [pc, #196]	@ (8009218 <xPortStartScheduler+0x138>)
 8009154:	2207      	movs	r2, #7
 8009156:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009158:	e009      	b.n	800916e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800915a:	4b2f      	ldr	r3, [pc, #188]	@ (8009218 <xPortStartScheduler+0x138>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	3b01      	subs	r3, #1
 8009160:	4a2d      	ldr	r2, [pc, #180]	@ (8009218 <xPortStartScheduler+0x138>)
 8009162:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009164:	78fb      	ldrb	r3, [r7, #3]
 8009166:	b2db      	uxtb	r3, r3
 8009168:	005b      	lsls	r3, r3, #1
 800916a:	b2db      	uxtb	r3, r3
 800916c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800916e:	78fb      	ldrb	r3, [r7, #3]
 8009170:	b2db      	uxtb	r3, r3
 8009172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009176:	2b80      	cmp	r3, #128	@ 0x80
 8009178:	d0ef      	beq.n	800915a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800917a:	4b27      	ldr	r3, [pc, #156]	@ (8009218 <xPortStartScheduler+0x138>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f1c3 0307 	rsb	r3, r3, #7
 8009182:	2b04      	cmp	r3, #4
 8009184:	d00b      	beq.n	800919e <xPortStartScheduler+0xbe>
	__asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	60bb      	str	r3, [r7, #8]
}
 8009198:	bf00      	nop
 800919a:	bf00      	nop
 800919c:	e7fd      	b.n	800919a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800919e:	4b1e      	ldr	r3, [pc, #120]	@ (8009218 <xPortStartScheduler+0x138>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	021b      	lsls	r3, r3, #8
 80091a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009218 <xPortStartScheduler+0x138>)
 80091a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80091a8:	4b1b      	ldr	r3, [pc, #108]	@ (8009218 <xPortStartScheduler+0x138>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80091b0:	4a19      	ldr	r2, [pc, #100]	@ (8009218 <xPortStartScheduler+0x138>)
 80091b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80091bc:	4b17      	ldr	r3, [pc, #92]	@ (800921c <xPortStartScheduler+0x13c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a16      	ldr	r2, [pc, #88]	@ (800921c <xPortStartScheduler+0x13c>)
 80091c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80091c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80091c8:	4b14      	ldr	r3, [pc, #80]	@ (800921c <xPortStartScheduler+0x13c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a13      	ldr	r2, [pc, #76]	@ (800921c <xPortStartScheduler+0x13c>)
 80091ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80091d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80091d4:	f000 f8da 	bl	800938c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80091d8:	4b11      	ldr	r3, [pc, #68]	@ (8009220 <xPortStartScheduler+0x140>)
 80091da:	2200      	movs	r2, #0
 80091dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80091de:	f000 f8f9 	bl	80093d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80091e2:	4b10      	ldr	r3, [pc, #64]	@ (8009224 <xPortStartScheduler+0x144>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a0f      	ldr	r2, [pc, #60]	@ (8009224 <xPortStartScheduler+0x144>)
 80091e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80091ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80091ee:	f7ff ff63 	bl	80090b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80091f2:	f7ff f82f 	bl	8008254 <vTaskSwitchContext>
	prvTaskExitError();
 80091f6:	f7ff ff1b 	bl	8009030 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}
 8009204:	e000ed00 	.word	0xe000ed00
 8009208:	410fc271 	.word	0x410fc271
 800920c:	410fc270 	.word	0x410fc270
 8009210:	e000e400 	.word	0xe000e400
 8009214:	2000102c 	.word	0x2000102c
 8009218:	20001030 	.word	0x20001030
 800921c:	e000ed20 	.word	0xe000ed20
 8009220:	2000000c 	.word	0x2000000c
 8009224:	e000ef34 	.word	0xe000ef34

08009228 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	607b      	str	r3, [r7, #4]
}
 8009240:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009242:	4b10      	ldr	r3, [pc, #64]	@ (8009284 <vPortEnterCritical+0x5c>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	3301      	adds	r3, #1
 8009248:	4a0e      	ldr	r2, [pc, #56]	@ (8009284 <vPortEnterCritical+0x5c>)
 800924a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800924c:	4b0d      	ldr	r3, [pc, #52]	@ (8009284 <vPortEnterCritical+0x5c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b01      	cmp	r3, #1
 8009252:	d110      	bne.n	8009276 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009254:	4b0c      	ldr	r3, [pc, #48]	@ (8009288 <vPortEnterCritical+0x60>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	d00b      	beq.n	8009276 <vPortEnterCritical+0x4e>
	__asm volatile
 800925e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	603b      	str	r3, [r7, #0]
}
 8009270:	bf00      	nop
 8009272:	bf00      	nop
 8009274:	e7fd      	b.n	8009272 <vPortEnterCritical+0x4a>
	}
}
 8009276:	bf00      	nop
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	2000000c 	.word	0x2000000c
 8009288:	e000ed04 	.word	0xe000ed04

0800928c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009292:	4b12      	ldr	r3, [pc, #72]	@ (80092dc <vPortExitCritical+0x50>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d10b      	bne.n	80092b2 <vPortExitCritical+0x26>
	__asm volatile
 800929a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	607b      	str	r3, [r7, #4]
}
 80092ac:	bf00      	nop
 80092ae:	bf00      	nop
 80092b0:	e7fd      	b.n	80092ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80092b2:	4b0a      	ldr	r3, [pc, #40]	@ (80092dc <vPortExitCritical+0x50>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3b01      	subs	r3, #1
 80092b8:	4a08      	ldr	r2, [pc, #32]	@ (80092dc <vPortExitCritical+0x50>)
 80092ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80092bc:	4b07      	ldr	r3, [pc, #28]	@ (80092dc <vPortExitCritical+0x50>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d105      	bne.n	80092d0 <vPortExitCritical+0x44>
 80092c4:	2300      	movs	r3, #0
 80092c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	f383 8811 	msr	BASEPRI, r3
}
 80092ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr
 80092dc:	2000000c 	.word	0x2000000c

080092e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80092e0:	f3ef 8009 	mrs	r0, PSP
 80092e4:	f3bf 8f6f 	isb	sy
 80092e8:	4b15      	ldr	r3, [pc, #84]	@ (8009340 <pxCurrentTCBConst>)
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	f01e 0f10 	tst.w	lr, #16
 80092f0:	bf08      	it	eq
 80092f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80092f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092fa:	6010      	str	r0, [r2, #0]
 80092fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009300:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009304:	f380 8811 	msr	BASEPRI, r0
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f7fe ffa0 	bl	8008254 <vTaskSwitchContext>
 8009314:	f04f 0000 	mov.w	r0, #0
 8009318:	f380 8811 	msr	BASEPRI, r0
 800931c:	bc09      	pop	{r0, r3}
 800931e:	6819      	ldr	r1, [r3, #0]
 8009320:	6808      	ldr	r0, [r1, #0]
 8009322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009326:	f01e 0f10 	tst.w	lr, #16
 800932a:	bf08      	it	eq
 800932c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009330:	f380 8809 	msr	PSP, r0
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	f3af 8000 	nop.w

08009340 <pxCurrentTCBConst>:
 8009340:	20000a00 	.word	0x20000a00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009344:	bf00      	nop
 8009346:	bf00      	nop

08009348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	607b      	str	r3, [r7, #4]
}
 8009360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009362:	f7fe febd 	bl	80080e0 <xTaskIncrementTick>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800936c:	4b06      	ldr	r3, [pc, #24]	@ (8009388 <xPortSysTickHandler+0x40>)
 800936e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	2300      	movs	r3, #0
 8009376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	f383 8811 	msr	BASEPRI, r3
}
 800937e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009380:	bf00      	nop
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	e000ed04 	.word	0xe000ed04

0800938c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800938c:	b480      	push	{r7}
 800938e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009390:	4b0b      	ldr	r3, [pc, #44]	@ (80093c0 <vPortSetupTimerInterrupt+0x34>)
 8009392:	2200      	movs	r2, #0
 8009394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009396:	4b0b      	ldr	r3, [pc, #44]	@ (80093c4 <vPortSetupTimerInterrupt+0x38>)
 8009398:	2200      	movs	r2, #0
 800939a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800939c:	4b0a      	ldr	r3, [pc, #40]	@ (80093c8 <vPortSetupTimerInterrupt+0x3c>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a0a      	ldr	r2, [pc, #40]	@ (80093cc <vPortSetupTimerInterrupt+0x40>)
 80093a2:	fba2 2303 	umull	r2, r3, r2, r3
 80093a6:	099b      	lsrs	r3, r3, #6
 80093a8:	4a09      	ldr	r2, [pc, #36]	@ (80093d0 <vPortSetupTimerInterrupt+0x44>)
 80093aa:	3b01      	subs	r3, #1
 80093ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80093ae:	4b04      	ldr	r3, [pc, #16]	@ (80093c0 <vPortSetupTimerInterrupt+0x34>)
 80093b0:	2207      	movs	r2, #7
 80093b2:	601a      	str	r2, [r3, #0]
}
 80093b4:	bf00      	nop
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	e000e010 	.word	0xe000e010
 80093c4:	e000e018 	.word	0xe000e018
 80093c8:	20000000 	.word	0x20000000
 80093cc:	10624dd3 	.word	0x10624dd3
 80093d0:	e000e014 	.word	0xe000e014

080093d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80093d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80093e4 <vPortEnableVFP+0x10>
 80093d8:	6801      	ldr	r1, [r0, #0]
 80093da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80093de:	6001      	str	r1, [r0, #0]
 80093e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80093e2:	bf00      	nop
 80093e4:	e000ed88 	.word	0xe000ed88

080093e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80093ee:	f3ef 8305 	mrs	r3, IPSR
 80093f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2b0f      	cmp	r3, #15
 80093f8:	d915      	bls.n	8009426 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80093fa:	4a18      	ldr	r2, [pc, #96]	@ (800945c <vPortValidateInterruptPriority+0x74>)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	4413      	add	r3, r2
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009404:	4b16      	ldr	r3, [pc, #88]	@ (8009460 <vPortValidateInterruptPriority+0x78>)
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	7afa      	ldrb	r2, [r7, #11]
 800940a:	429a      	cmp	r2, r3
 800940c:	d20b      	bcs.n	8009426 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800940e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009412:	f383 8811 	msr	BASEPRI, r3
 8009416:	f3bf 8f6f 	isb	sy
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	607b      	str	r3, [r7, #4]
}
 8009420:	bf00      	nop
 8009422:	bf00      	nop
 8009424:	e7fd      	b.n	8009422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009426:	4b0f      	ldr	r3, [pc, #60]	@ (8009464 <vPortValidateInterruptPriority+0x7c>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800942e:	4b0e      	ldr	r3, [pc, #56]	@ (8009468 <vPortValidateInterruptPriority+0x80>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	429a      	cmp	r2, r3
 8009434:	d90b      	bls.n	800944e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	603b      	str	r3, [r7, #0]
}
 8009448:	bf00      	nop
 800944a:	bf00      	nop
 800944c:	e7fd      	b.n	800944a <vPortValidateInterruptPriority+0x62>
	}
 800944e:	bf00      	nop
 8009450:	3714      	adds	r7, #20
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	e000e3f0 	.word	0xe000e3f0
 8009460:	2000102c 	.word	0x2000102c
 8009464:	e000ed0c 	.word	0xe000ed0c
 8009468:	20001030 	.word	0x20001030

0800946c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b08a      	sub	sp, #40	@ 0x28
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009474:	2300      	movs	r3, #0
 8009476:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009478:	f7fe fd76 	bl	8007f68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800947c:	4b5c      	ldr	r3, [pc, #368]	@ (80095f0 <pvPortMalloc+0x184>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009484:	f000 f924 	bl	80096d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009488:	4b5a      	ldr	r3, [pc, #360]	@ (80095f4 <pvPortMalloc+0x188>)
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4013      	ands	r3, r2
 8009490:	2b00      	cmp	r3, #0
 8009492:	f040 8095 	bne.w	80095c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d01e      	beq.n	80094da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800949c:	2208      	movs	r2, #8
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4413      	add	r3, r2
 80094a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f003 0307 	and.w	r3, r3, #7
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d015      	beq.n	80094da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f023 0307 	bic.w	r3, r3, #7
 80094b4:	3308      	adds	r3, #8
 80094b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f003 0307 	and.w	r3, r3, #7
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00b      	beq.n	80094da <pvPortMalloc+0x6e>
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	617b      	str	r3, [r7, #20]
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop
 80094d8:	e7fd      	b.n	80094d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d06f      	beq.n	80095c0 <pvPortMalloc+0x154>
 80094e0:	4b45      	ldr	r3, [pc, #276]	@ (80095f8 <pvPortMalloc+0x18c>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d86a      	bhi.n	80095c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80094ea:	4b44      	ldr	r3, [pc, #272]	@ (80095fc <pvPortMalloc+0x190>)
 80094ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80094ee:	4b43      	ldr	r3, [pc, #268]	@ (80095fc <pvPortMalloc+0x190>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80094f4:	e004      	b.n	8009500 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80094f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80094fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	429a      	cmp	r2, r3
 8009508:	d903      	bls.n	8009512 <pvPortMalloc+0xa6>
 800950a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1f1      	bne.n	80094f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009512:	4b37      	ldr	r3, [pc, #220]	@ (80095f0 <pvPortMalloc+0x184>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009518:	429a      	cmp	r2, r3
 800951a:	d051      	beq.n	80095c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2208      	movs	r2, #8
 8009522:	4413      	add	r3, r2
 8009524:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800952e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	1ad2      	subs	r2, r2, r3
 8009536:	2308      	movs	r3, #8
 8009538:	005b      	lsls	r3, r3, #1
 800953a:	429a      	cmp	r2, r3
 800953c:	d920      	bls.n	8009580 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800953e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4413      	add	r3, r2
 8009544:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	f003 0307 	and.w	r3, r3, #7
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00b      	beq.n	8009568 <pvPortMalloc+0xfc>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	613b      	str	r3, [r7, #16]
}
 8009562:	bf00      	nop
 8009564:	bf00      	nop
 8009566:	e7fd      	b.n	8009564 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956a:	685a      	ldr	r2, [r3, #4]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	1ad2      	subs	r2, r2, r3
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800957a:	69b8      	ldr	r0, [r7, #24]
 800957c:	f000 f90a 	bl	8009794 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009580:	4b1d      	ldr	r3, [pc, #116]	@ (80095f8 <pvPortMalloc+0x18c>)
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	1ad3      	subs	r3, r2, r3
 800958a:	4a1b      	ldr	r2, [pc, #108]	@ (80095f8 <pvPortMalloc+0x18c>)
 800958c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800958e:	4b1a      	ldr	r3, [pc, #104]	@ (80095f8 <pvPortMalloc+0x18c>)
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	4b1b      	ldr	r3, [pc, #108]	@ (8009600 <pvPortMalloc+0x194>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	429a      	cmp	r2, r3
 8009598:	d203      	bcs.n	80095a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800959a:	4b17      	ldr	r3, [pc, #92]	@ (80095f8 <pvPortMalloc+0x18c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a18      	ldr	r2, [pc, #96]	@ (8009600 <pvPortMalloc+0x194>)
 80095a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80095a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a4:	685a      	ldr	r2, [r3, #4]
 80095a6:	4b13      	ldr	r3, [pc, #76]	@ (80095f4 <pvPortMalloc+0x188>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	431a      	orrs	r2, r3
 80095ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80095b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b2:	2200      	movs	r2, #0
 80095b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80095b6:	4b13      	ldr	r3, [pc, #76]	@ (8009604 <pvPortMalloc+0x198>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	3301      	adds	r3, #1
 80095bc:	4a11      	ldr	r2, [pc, #68]	@ (8009604 <pvPortMalloc+0x198>)
 80095be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80095c0:	f7fe fce0 	bl	8007f84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	f003 0307 	and.w	r3, r3, #7
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00b      	beq.n	80095e6 <pvPortMalloc+0x17a>
	__asm volatile
 80095ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d2:	f383 8811 	msr	BASEPRI, r3
 80095d6:	f3bf 8f6f 	isb	sy
 80095da:	f3bf 8f4f 	dsb	sy
 80095de:	60fb      	str	r3, [r7, #12]
}
 80095e0:	bf00      	nop
 80095e2:	bf00      	nop
 80095e4:	e7fd      	b.n	80095e2 <pvPortMalloc+0x176>
	return pvReturn;
 80095e6:	69fb      	ldr	r3, [r7, #28]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3728      	adds	r7, #40	@ 0x28
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	20001bf4 	.word	0x20001bf4
 80095f4:	20001c08 	.word	0x20001c08
 80095f8:	20001bf8 	.word	0x20001bf8
 80095fc:	20001bec 	.word	0x20001bec
 8009600:	20001bfc 	.word	0x20001bfc
 8009604:	20001c00 	.word	0x20001c00

08009608 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d04f      	beq.n	80096ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800961a:	2308      	movs	r3, #8
 800961c:	425b      	negs	r3, r3
 800961e:	697a      	ldr	r2, [r7, #20]
 8009620:	4413      	add	r3, r2
 8009622:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	4b25      	ldr	r3, [pc, #148]	@ (80096c4 <vPortFree+0xbc>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4013      	ands	r3, r2
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10b      	bne.n	800964e <vPortFree+0x46>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	60fb      	str	r3, [r7, #12]
}
 8009648:	bf00      	nop
 800964a:	bf00      	nop
 800964c:	e7fd      	b.n	800964a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00b      	beq.n	800966e <vPortFree+0x66>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	60bb      	str	r3, [r7, #8]
}
 8009668:	bf00      	nop
 800966a:	bf00      	nop
 800966c:	e7fd      	b.n	800966a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	4b14      	ldr	r3, [pc, #80]	@ (80096c4 <vPortFree+0xbc>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4013      	ands	r3, r2
 8009678:	2b00      	cmp	r3, #0
 800967a:	d01e      	beq.n	80096ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d11a      	bne.n	80096ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	4b0e      	ldr	r3, [pc, #56]	@ (80096c4 <vPortFree+0xbc>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	43db      	mvns	r3, r3
 800968e:	401a      	ands	r2, r3
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009694:	f7fe fc68 	bl	8007f68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	4b0a      	ldr	r3, [pc, #40]	@ (80096c8 <vPortFree+0xc0>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4413      	add	r3, r2
 80096a2:	4a09      	ldr	r2, [pc, #36]	@ (80096c8 <vPortFree+0xc0>)
 80096a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80096a6:	6938      	ldr	r0, [r7, #16]
 80096a8:	f000 f874 	bl	8009794 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80096ac:	4b07      	ldr	r3, [pc, #28]	@ (80096cc <vPortFree+0xc4>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3301      	adds	r3, #1
 80096b2:	4a06      	ldr	r2, [pc, #24]	@ (80096cc <vPortFree+0xc4>)
 80096b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80096b6:	f7fe fc65 	bl	8007f84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80096ba:	bf00      	nop
 80096bc:	3718      	adds	r7, #24
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	20001c08 	.word	0x20001c08
 80096c8:	20001bf8 	.word	0x20001bf8
 80096cc:	20001c04 	.word	0x20001c04

080096d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80096d6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80096da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80096dc:	4b27      	ldr	r3, [pc, #156]	@ (800977c <prvHeapInit+0xac>)
 80096de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f003 0307 	and.w	r3, r3, #7
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00c      	beq.n	8009704 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	3307      	adds	r3, #7
 80096ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f023 0307 	bic.w	r3, r3, #7
 80096f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80096f8:	68ba      	ldr	r2, [r7, #8]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	4a1f      	ldr	r2, [pc, #124]	@ (800977c <prvHeapInit+0xac>)
 8009700:	4413      	add	r3, r2
 8009702:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009708:	4a1d      	ldr	r2, [pc, #116]	@ (8009780 <prvHeapInit+0xb0>)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800970e:	4b1c      	ldr	r3, [pc, #112]	@ (8009780 <prvHeapInit+0xb0>)
 8009710:	2200      	movs	r2, #0
 8009712:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	4413      	add	r3, r2
 800971a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800971c:	2208      	movs	r2, #8
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	1a9b      	subs	r3, r3, r2
 8009722:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f023 0307 	bic.w	r3, r3, #7
 800972a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	4a15      	ldr	r2, [pc, #84]	@ (8009784 <prvHeapInit+0xb4>)
 8009730:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009732:	4b14      	ldr	r3, [pc, #80]	@ (8009784 <prvHeapInit+0xb4>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2200      	movs	r2, #0
 8009738:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800973a:	4b12      	ldr	r3, [pc, #72]	@ (8009784 <prvHeapInit+0xb4>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2200      	movs	r2, #0
 8009740:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	1ad2      	subs	r2, r2, r3
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009750:	4b0c      	ldr	r3, [pc, #48]	@ (8009784 <prvHeapInit+0xb4>)
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	4a0a      	ldr	r2, [pc, #40]	@ (8009788 <prvHeapInit+0xb8>)
 800975e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	4a09      	ldr	r2, [pc, #36]	@ (800978c <prvHeapInit+0xbc>)
 8009766:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009768:	4b09      	ldr	r3, [pc, #36]	@ (8009790 <prvHeapInit+0xc0>)
 800976a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800976e:	601a      	str	r2, [r3, #0]
}
 8009770:	bf00      	nop
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	20001034 	.word	0x20001034
 8009780:	20001bec 	.word	0x20001bec
 8009784:	20001bf4 	.word	0x20001bf4
 8009788:	20001bfc 	.word	0x20001bfc
 800978c:	20001bf8 	.word	0x20001bf8
 8009790:	20001c08 	.word	0x20001c08

08009794 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800979c:	4b28      	ldr	r3, [pc, #160]	@ (8009840 <prvInsertBlockIntoFreeList+0xac>)
 800979e:	60fb      	str	r3, [r7, #12]
 80097a0:	e002      	b.n	80097a8 <prvInsertBlockIntoFreeList+0x14>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	60fb      	str	r3, [r7, #12]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d8f7      	bhi.n	80097a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	4413      	add	r3, r2
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d108      	bne.n	80097d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	685a      	ldr	r2, [r3, #4]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	441a      	add	r2, r3
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	441a      	add	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d118      	bne.n	800981c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	4b15      	ldr	r3, [pc, #84]	@ (8009844 <prvInsertBlockIntoFreeList+0xb0>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d00d      	beq.n	8009812 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	685a      	ldr	r2, [r3, #4]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	441a      	add	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	e008      	b.n	8009824 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009812:	4b0c      	ldr	r3, [pc, #48]	@ (8009844 <prvInsertBlockIntoFreeList+0xb0>)
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	601a      	str	r2, [r3, #0]
 800981a:	e003      	b.n	8009824 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	429a      	cmp	r2, r3
 800982a:	d002      	beq.n	8009832 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009832:	bf00      	nop
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	20001bec 	.word	0x20001bec
 8009844:	20001bf4 	.word	0x20001bf4

08009848 <memset>:
 8009848:	4402      	add	r2, r0
 800984a:	4603      	mov	r3, r0
 800984c:	4293      	cmp	r3, r2
 800984e:	d100      	bne.n	8009852 <memset+0xa>
 8009850:	4770      	bx	lr
 8009852:	f803 1b01 	strb.w	r1, [r3], #1
 8009856:	e7f9      	b.n	800984c <memset+0x4>

08009858 <_reclaim_reent>:
 8009858:	4b29      	ldr	r3, [pc, #164]	@ (8009900 <_reclaim_reent+0xa8>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4283      	cmp	r3, r0
 800985e:	b570      	push	{r4, r5, r6, lr}
 8009860:	4604      	mov	r4, r0
 8009862:	d04b      	beq.n	80098fc <_reclaim_reent+0xa4>
 8009864:	69c3      	ldr	r3, [r0, #28]
 8009866:	b1ab      	cbz	r3, 8009894 <_reclaim_reent+0x3c>
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	b16b      	cbz	r3, 8009888 <_reclaim_reent+0x30>
 800986c:	2500      	movs	r5, #0
 800986e:	69e3      	ldr	r3, [r4, #28]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	5959      	ldr	r1, [r3, r5]
 8009874:	2900      	cmp	r1, #0
 8009876:	d13b      	bne.n	80098f0 <_reclaim_reent+0x98>
 8009878:	3504      	adds	r5, #4
 800987a:	2d80      	cmp	r5, #128	@ 0x80
 800987c:	d1f7      	bne.n	800986e <_reclaim_reent+0x16>
 800987e:	69e3      	ldr	r3, [r4, #28]
 8009880:	4620      	mov	r0, r4
 8009882:	68d9      	ldr	r1, [r3, #12]
 8009884:	f000 f872 	bl	800996c <_free_r>
 8009888:	69e3      	ldr	r3, [r4, #28]
 800988a:	6819      	ldr	r1, [r3, #0]
 800988c:	b111      	cbz	r1, 8009894 <_reclaim_reent+0x3c>
 800988e:	4620      	mov	r0, r4
 8009890:	f000 f86c 	bl	800996c <_free_r>
 8009894:	6961      	ldr	r1, [r4, #20]
 8009896:	b111      	cbz	r1, 800989e <_reclaim_reent+0x46>
 8009898:	4620      	mov	r0, r4
 800989a:	f000 f867 	bl	800996c <_free_r>
 800989e:	69e1      	ldr	r1, [r4, #28]
 80098a0:	b111      	cbz	r1, 80098a8 <_reclaim_reent+0x50>
 80098a2:	4620      	mov	r0, r4
 80098a4:	f000 f862 	bl	800996c <_free_r>
 80098a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80098aa:	b111      	cbz	r1, 80098b2 <_reclaim_reent+0x5a>
 80098ac:	4620      	mov	r0, r4
 80098ae:	f000 f85d 	bl	800996c <_free_r>
 80098b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098b4:	b111      	cbz	r1, 80098bc <_reclaim_reent+0x64>
 80098b6:	4620      	mov	r0, r4
 80098b8:	f000 f858 	bl	800996c <_free_r>
 80098bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80098be:	b111      	cbz	r1, 80098c6 <_reclaim_reent+0x6e>
 80098c0:	4620      	mov	r0, r4
 80098c2:	f000 f853 	bl	800996c <_free_r>
 80098c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80098c8:	b111      	cbz	r1, 80098d0 <_reclaim_reent+0x78>
 80098ca:	4620      	mov	r0, r4
 80098cc:	f000 f84e 	bl	800996c <_free_r>
 80098d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80098d2:	b111      	cbz	r1, 80098da <_reclaim_reent+0x82>
 80098d4:	4620      	mov	r0, r4
 80098d6:	f000 f849 	bl	800996c <_free_r>
 80098da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80098dc:	b111      	cbz	r1, 80098e4 <_reclaim_reent+0x8c>
 80098de:	4620      	mov	r0, r4
 80098e0:	f000 f844 	bl	800996c <_free_r>
 80098e4:	6a23      	ldr	r3, [r4, #32]
 80098e6:	b14b      	cbz	r3, 80098fc <_reclaim_reent+0xa4>
 80098e8:	4620      	mov	r0, r4
 80098ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80098ee:	4718      	bx	r3
 80098f0:	680e      	ldr	r6, [r1, #0]
 80098f2:	4620      	mov	r0, r4
 80098f4:	f000 f83a 	bl	800996c <_free_r>
 80098f8:	4631      	mov	r1, r6
 80098fa:	e7bb      	b.n	8009874 <_reclaim_reent+0x1c>
 80098fc:	bd70      	pop	{r4, r5, r6, pc}
 80098fe:	bf00      	nop
 8009900:	20000010 	.word	0x20000010

08009904 <__libc_init_array>:
 8009904:	b570      	push	{r4, r5, r6, lr}
 8009906:	4d0d      	ldr	r5, [pc, #52]	@ (800993c <__libc_init_array+0x38>)
 8009908:	4c0d      	ldr	r4, [pc, #52]	@ (8009940 <__libc_init_array+0x3c>)
 800990a:	1b64      	subs	r4, r4, r5
 800990c:	10a4      	asrs	r4, r4, #2
 800990e:	2600      	movs	r6, #0
 8009910:	42a6      	cmp	r6, r4
 8009912:	d109      	bne.n	8009928 <__libc_init_array+0x24>
 8009914:	4d0b      	ldr	r5, [pc, #44]	@ (8009944 <__libc_init_array+0x40>)
 8009916:	4c0c      	ldr	r4, [pc, #48]	@ (8009948 <__libc_init_array+0x44>)
 8009918:	f000 f87e 	bl	8009a18 <_init>
 800991c:	1b64      	subs	r4, r4, r5
 800991e:	10a4      	asrs	r4, r4, #2
 8009920:	2600      	movs	r6, #0
 8009922:	42a6      	cmp	r6, r4
 8009924:	d105      	bne.n	8009932 <__libc_init_array+0x2e>
 8009926:	bd70      	pop	{r4, r5, r6, pc}
 8009928:	f855 3b04 	ldr.w	r3, [r5], #4
 800992c:	4798      	blx	r3
 800992e:	3601      	adds	r6, #1
 8009930:	e7ee      	b.n	8009910 <__libc_init_array+0xc>
 8009932:	f855 3b04 	ldr.w	r3, [r5], #4
 8009936:	4798      	blx	r3
 8009938:	3601      	adds	r6, #1
 800993a:	e7f2      	b.n	8009922 <__libc_init_array+0x1e>
 800993c:	08009b58 	.word	0x08009b58
 8009940:	08009b58 	.word	0x08009b58
 8009944:	08009b58 	.word	0x08009b58
 8009948:	08009b5c 	.word	0x08009b5c

0800994c <__retarget_lock_acquire_recursive>:
 800994c:	4770      	bx	lr

0800994e <__retarget_lock_release_recursive>:
 800994e:	4770      	bx	lr

08009950 <memcpy>:
 8009950:	440a      	add	r2, r1
 8009952:	4291      	cmp	r1, r2
 8009954:	f100 33ff 	add.w	r3, r0, #4294967295
 8009958:	d100      	bne.n	800995c <memcpy+0xc>
 800995a:	4770      	bx	lr
 800995c:	b510      	push	{r4, lr}
 800995e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009962:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009966:	4291      	cmp	r1, r2
 8009968:	d1f9      	bne.n	800995e <memcpy+0xe>
 800996a:	bd10      	pop	{r4, pc}

0800996c <_free_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	4605      	mov	r5, r0
 8009970:	2900      	cmp	r1, #0
 8009972:	d041      	beq.n	80099f8 <_free_r+0x8c>
 8009974:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009978:	1f0c      	subs	r4, r1, #4
 800997a:	2b00      	cmp	r3, #0
 800997c:	bfb8      	it	lt
 800997e:	18e4      	addlt	r4, r4, r3
 8009980:	f000 f83e 	bl	8009a00 <__malloc_lock>
 8009984:	4a1d      	ldr	r2, [pc, #116]	@ (80099fc <_free_r+0x90>)
 8009986:	6813      	ldr	r3, [r2, #0]
 8009988:	b933      	cbnz	r3, 8009998 <_free_r+0x2c>
 800998a:	6063      	str	r3, [r4, #4]
 800998c:	6014      	str	r4, [r2, #0]
 800998e:	4628      	mov	r0, r5
 8009990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009994:	f000 b83a 	b.w	8009a0c <__malloc_unlock>
 8009998:	42a3      	cmp	r3, r4
 800999a:	d908      	bls.n	80099ae <_free_r+0x42>
 800999c:	6820      	ldr	r0, [r4, #0]
 800999e:	1821      	adds	r1, r4, r0
 80099a0:	428b      	cmp	r3, r1
 80099a2:	bf01      	itttt	eq
 80099a4:	6819      	ldreq	r1, [r3, #0]
 80099a6:	685b      	ldreq	r3, [r3, #4]
 80099a8:	1809      	addeq	r1, r1, r0
 80099aa:	6021      	streq	r1, [r4, #0]
 80099ac:	e7ed      	b.n	800998a <_free_r+0x1e>
 80099ae:	461a      	mov	r2, r3
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	b10b      	cbz	r3, 80099b8 <_free_r+0x4c>
 80099b4:	42a3      	cmp	r3, r4
 80099b6:	d9fa      	bls.n	80099ae <_free_r+0x42>
 80099b8:	6811      	ldr	r1, [r2, #0]
 80099ba:	1850      	adds	r0, r2, r1
 80099bc:	42a0      	cmp	r0, r4
 80099be:	d10b      	bne.n	80099d8 <_free_r+0x6c>
 80099c0:	6820      	ldr	r0, [r4, #0]
 80099c2:	4401      	add	r1, r0
 80099c4:	1850      	adds	r0, r2, r1
 80099c6:	4283      	cmp	r3, r0
 80099c8:	6011      	str	r1, [r2, #0]
 80099ca:	d1e0      	bne.n	800998e <_free_r+0x22>
 80099cc:	6818      	ldr	r0, [r3, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	6053      	str	r3, [r2, #4]
 80099d2:	4408      	add	r0, r1
 80099d4:	6010      	str	r0, [r2, #0]
 80099d6:	e7da      	b.n	800998e <_free_r+0x22>
 80099d8:	d902      	bls.n	80099e0 <_free_r+0x74>
 80099da:	230c      	movs	r3, #12
 80099dc:	602b      	str	r3, [r5, #0]
 80099de:	e7d6      	b.n	800998e <_free_r+0x22>
 80099e0:	6820      	ldr	r0, [r4, #0]
 80099e2:	1821      	adds	r1, r4, r0
 80099e4:	428b      	cmp	r3, r1
 80099e6:	bf04      	itt	eq
 80099e8:	6819      	ldreq	r1, [r3, #0]
 80099ea:	685b      	ldreq	r3, [r3, #4]
 80099ec:	6063      	str	r3, [r4, #4]
 80099ee:	bf04      	itt	eq
 80099f0:	1809      	addeq	r1, r1, r0
 80099f2:	6021      	streq	r1, [r4, #0]
 80099f4:	6054      	str	r4, [r2, #4]
 80099f6:	e7ca      	b.n	800998e <_free_r+0x22>
 80099f8:	bd38      	pop	{r3, r4, r5, pc}
 80099fa:	bf00      	nop
 80099fc:	20001d48 	.word	0x20001d48

08009a00 <__malloc_lock>:
 8009a00:	4801      	ldr	r0, [pc, #4]	@ (8009a08 <__malloc_lock+0x8>)
 8009a02:	f7ff bfa3 	b.w	800994c <__retarget_lock_acquire_recursive>
 8009a06:	bf00      	nop
 8009a08:	20001d44 	.word	0x20001d44

08009a0c <__malloc_unlock>:
 8009a0c:	4801      	ldr	r0, [pc, #4]	@ (8009a14 <__malloc_unlock+0x8>)
 8009a0e:	f7ff bf9e 	b.w	800994e <__retarget_lock_release_recursive>
 8009a12:	bf00      	nop
 8009a14:	20001d44 	.word	0x20001d44

08009a18 <_init>:
 8009a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1a:	bf00      	nop
 8009a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1e:	bc08      	pop	{r3}
 8009a20:	469e      	mov	lr, r3
 8009a22:	4770      	bx	lr

08009a24 <_fini>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	bf00      	nop
 8009a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2a:	bc08      	pop	{r3}
 8009a2c:	469e      	mov	lr, r3
 8009a2e:	4770      	bx	lr
