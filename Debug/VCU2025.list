
VCU2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071d0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08007380  08007380  00008380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074a8  080074a8  00009060  2**0
                  CONTENTS
  4 .ARM          00000000  080074a8  080074a8  00009060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074a8  080074a8  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074a8  080074a8  000084a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074ac  080074ac  000084ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080074b0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c6c  20000060  08007510  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ccc  08007510  00009ccc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc7c  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ec2  00000000  00000000  00026d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  0002abd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001451  00000000  00000000  0002c610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003d6b  00000000  00000000  0002da61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d6ca  00000000  00000000  000317cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d1bb  00000000  00000000  0004ee96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015c051  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000722c  00000000  00000000  0015c094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001632c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007368 	.word	0x08007368

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08007368 	.word	0x08007368

080001f0 <HAL_GPIO_EXTI_Callback>:
uint8_t RxData[8];  // Array to store the received data

//CAN transmission

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == GPIO_PIN_13) {
//		kill_sw = 0;
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, kill_sw);
	}
}
 80001fa:	bf00      	nop
 80001fc:	370c      	adds	r7, #12
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
	...

08000208 <HAL_CAN_RxFifo0MsgPendingCallback>:

// Can reception
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000210:	4b64      	ldr	r3, [pc, #400]	@ (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8000212:	4a65      	ldr	r2, [pc, #404]	@ (80003a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000214:	2100      	movs	r1, #0
 8000216:	6878      	ldr	r0, [r7, #4]
 8000218:	f001 f9ec 	bl	80015f4 <HAL_CAN_GetRxMessage>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 8000222:	f000 fcd7 	bl	8000bd4 <Error_Handler>
  }
  if (RxHeader.StdId == 0x000)
 8000226:	4b60      	ldr	r3, [pc, #384]	@ (80003a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d10f      	bne.n	800024e <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
  {
	  if (RxData[0] == 0) {
 800022e:	4b5d      	ldr	r3, [pc, #372]	@ (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d10b      	bne.n	800024e <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
		throttle = (uint16_t)RxData[2]<<8 | RxData[1];
 8000236:	4b5b      	ldr	r3, [pc, #364]	@ (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8000238:	789b      	ldrb	r3, [r3, #2]
 800023a:	021b      	lsls	r3, r3, #8
 800023c:	b21a      	sxth	r2, r3
 800023e:	4b59      	ldr	r3, [pc, #356]	@ (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8000240:	785b      	ldrb	r3, [r3, #1]
 8000242:	b21b      	sxth	r3, r3
 8000244:	4313      	orrs	r3, r2
 8000246:	b21b      	sxth	r3, r3
 8000248:	b29a      	uxth	r2, r3
 800024a:	4b58      	ldr	r3, [pc, #352]	@ (80003ac <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 800024c:	801a      	strh	r2, [r3, #0]
	  }
  }
  if (RxHeader.StdId == 0x7FF){
 800024e:	4b56      	ldr	r3, [pc, #344]	@ (80003a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000256:	4293      	cmp	r3, r2
 8000258:	f040 809f 	bne.w	800039a <HAL_CAN_RxFifo0MsgPendingCallback+0x192>
	  if(RxData[0] == 1){
 800025c:	4b51      	ldr	r3, [pc, #324]	@ (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b01      	cmp	r3, #1
 8000262:	f040 809a 	bne.w	800039a <HAL_CAN_RxFifo0MsgPendingCallback+0x192>
		  //byte 1
		  //ignition switch
		  if((RxData[1] & 0x80) != 0x00){
 8000266:	4b4f      	ldr	r3, [pc, #316]	@ (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8000268:	785b      	ldrb	r3, [r3, #1]
 800026a:	b25b      	sxtb	r3, r3
 800026c:	2b00      	cmp	r3, #0
 800026e:	da05      	bge.n	800027c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
			  mppt_pre_contactor_en = false;
 8000270:	4b4f      	ldr	r3, [pc, #316]	@ (80003b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8000272:	2200      	movs	r2, #0
 8000274:	701a      	strb	r2, [r3, #0]
			  mppt_contactor_en = false;
 8000276:	4b4f      	ldr	r3, [pc, #316]	@ (80003b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000278:	2200      	movs	r2, #0
 800027a:	701a      	strb	r2, [r3, #0]
			  //preform shut down sequence
		  }

		  if((RxData[1] & 0x40) != 0x00){
 800027c:	4b49      	ldr	r3, [pc, #292]	@ (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 800027e:	785b      	ldrb	r3, [r3, #1]
 8000280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000284:	2b00      	cmp	r3, #0
 8000286:	d003      	beq.n	8000290 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
			  brakes_active = true; // turn brakes on
 8000288:	4b4b      	ldr	r3, [pc, #300]	@ (80003b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 800028a:	2201      	movs	r2, #1
 800028c:	701a      	strb	r2, [r3, #0]
 800028e:	e002      	b.n	8000296 <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
		  }else{
			  brakes_active = false; // turn breaks off
 8000290:	4b49      	ldr	r3, [pc, #292]	@ (80003b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000292:	2200      	movs	r2, #0
 8000294:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x20) != 0x00){
 8000296:	4b43      	ldr	r3, [pc, #268]	@ (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8000298:	785b      	ldrb	r3, [r3, #1]
 800029a:	f003 0320 	and.w	r3, r3, #32
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d003      	beq.n	80002aa <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
			  dirrection = true; //Forward
 80002a2:	4b46      	ldr	r3, [pc, #280]	@ (80003bc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	701a      	strb	r2, [r3, #0]
 80002a8:	e002      	b.n	80002b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
		  }else{
			  dirrection = false;
 80002aa:	4b44      	ldr	r3, [pc, #272]	@ (80003bc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x10) != 0x00){
 80002b0:	4b3c      	ldr	r3, [pc, #240]	@ (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 80002b2:	785b      	ldrb	r3, [r3, #1]
 80002b4:	f003 0310 	and.w	r3, r3, #16
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d003      	beq.n	80002c4 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
			  mc_main_ctrl = true;
 80002bc:	4b40      	ldr	r3, [pc, #256]	@ (80003c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80002be:	2201      	movs	r2, #1
 80002c0:	701a      	strb	r2, [r3, #0]
 80002c2:	e002      	b.n	80002ca <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
		  }else{
			  mc_main_ctrl = false;
 80002c4:	4b3e      	ldr	r3, [pc, #248]	@ (80003c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x08) != 0x00){
 80002ca:	4b36      	ldr	r3, [pc, #216]	@ (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 80002cc:	785b      	ldrb	r3, [r3, #1]
 80002ce:	f003 0308 	and.w	r3, r3, #8
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d003      	beq.n	80002de <HAL_CAN_RxFifo0MsgPendingCallback+0xd6>
			  array = true;
 80002d6:	4b3b      	ldr	r3, [pc, #236]	@ (80003c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 80002d8:	2201      	movs	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
 80002dc:	e002      	b.n	80002e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>
		  }else{
			  array = false;
 80002de:	4b39      	ldr	r3, [pc, #228]	@ (80003c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x04) != 0x00){
 80002e4:	4b2f      	ldr	r3, [pc, #188]	@ (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 80002e6:	785b      	ldrb	r3, [r3, #1]
 80002e8:	f003 0304 	and.w	r3, r3, #4
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d003      	beq.n	80002f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
			  array_precharge = true;
 80002f0:	4b35      	ldr	r3, [pc, #212]	@ (80003c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	701a      	strb	r2, [r3, #0]
 80002f6:	e002      	b.n	80002fe <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
		  }else{
			  array_precharge = false;
 80002f8:	4b33      	ldr	r3, [pc, #204]	@ (80003c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	701a      	strb	r2, [r3, #0]
		  }


		  //byte #2
		  if((RxData[2] & 0x01) != 0x00){
 80002fe:	4b29      	ldr	r3, [pc, #164]	@ (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8000300:	789b      	ldrb	r3, [r3, #2]
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	2b00      	cmp	r3, #0
 8000308:	d010      	beq.n	800032c <HAL_CAN_RxFifo0MsgPendingCallback+0x124>
			  if (blinkers_active != true) {
 800030a:	4b30      	ldr	r3, [pc, #192]	@ (80003cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	f083 0301 	eor.w	r3, r3, #1
 8000312:	b2db      	uxtb	r3, r3
 8000314:	2b00      	cmp	r3, #0
 8000316:	d005      	beq.n	8000324 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>
				  blinkers_active = true;
 8000318:	4b2c      	ldr	r3, [pc, #176]	@ (80003cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800031a:	2201      	movs	r2, #1
 800031c:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 800031e:	4b2c      	ldr	r3, [pc, #176]	@ (80003d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000320:	2200      	movs	r2, #0
 8000322:	601a      	str	r2, [r3, #0]
			  }
			  blinkers_active = true; // turn brakes on
 8000324:	4b29      	ldr	r3, [pc, #164]	@ (80003cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000326:	2201      	movs	r2, #1
 8000328:	701a      	strb	r2, [r3, #0]
 800032a:	e002      	b.n	8000332 <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>

		  }else{
			  blinkers_active = false; // turn breaks off
 800032c:	4b27      	ldr	r3, [pc, #156]	@ (80003cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[2] & 0x02) != 0x00){
 8000332:	4b1c      	ldr	r3, [pc, #112]	@ (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8000334:	789b      	ldrb	r3, [r3, #2]
 8000336:	f003 0302 	and.w	r3, r3, #2
 800033a:	2b00      	cmp	r3, #0
 800033c:	d010      	beq.n	8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>
			  if (left_turn_active != true) {
 800033e:	4b25      	ldr	r3, [pc, #148]	@ (80003d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	f083 0301 	eor.w	r3, r3, #1
 8000346:	b2db      	uxtb	r3, r3
 8000348:	2b00      	cmp	r3, #0
 800034a:	d005      	beq.n	8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>
				  left_turn_active = true;
 800034c:	4b21      	ldr	r3, [pc, #132]	@ (80003d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 8000352:	4b1f      	ldr	r3, [pc, #124]	@ (80003d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
			  }
			  left_turn_active = true; // turn brakes on
 8000358:	4b1e      	ldr	r3, [pc, #120]	@ (80003d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 800035a:	2201      	movs	r2, #1
 800035c:	701a      	strb	r2, [r3, #0]
 800035e:	e002      	b.n	8000366 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>


		  }else{
			  left_turn_active = false; // turn brakes off
 8000360:	4b1c      	ldr	r3, [pc, #112]	@ (80003d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000362:	2200      	movs	r2, #0
 8000364:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[2] & 0x04) != 0x00){
 8000366:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8000368:	789b      	ldrb	r3, [r3, #2]
 800036a:	f003 0304 	and.w	r3, r3, #4
 800036e:	2b00      	cmp	r3, #0
 8000370:	d010      	beq.n	8000394 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>
			  if(right_turn_active != true){
 8000372:	4b19      	ldr	r3, [pc, #100]	@ (80003d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	f083 0301 	eor.w	r3, r3, #1
 800037a:	b2db      	uxtb	r3, r3
 800037c:	2b00      	cmp	r3, #0
 800037e:	d005      	beq.n	800038c <HAL_CAN_RxFifo0MsgPendingCallback+0x184>
				  right_turn_active = true; //Forward
 8000380:	4b15      	ldr	r3, [pc, #84]	@ (80003d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000382:	2201      	movs	r2, #1
 8000384:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 8000386:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
			  }
			  right_turn_active = true;
 800038c:	4b12      	ldr	r3, [pc, #72]	@ (80003d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800038e:	2201      	movs	r2, #1
 8000390:	701a      	strb	r2, [r3, #0]
		  }


	  }
  }
}
 8000392:	e002      	b.n	800039a <HAL_CAN_RxFifo0MsgPendingCallback+0x192>
			  right_turn_active = false;
 8000394:	4b10      	ldr	r3, [pc, #64]	@ (80003d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000396:	2200      	movs	r2, #0
 8000398:	701a      	strb	r2, [r3, #0]
}
 800039a:	bf00      	nop
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000190 	.word	0x20000190
 80003a8:	20000174 	.word	0x20000174
 80003ac:	20000144 	.word	0x20000144
 80003b0:	20000159 	.word	0x20000159
 80003b4:	20000158 	.word	0x20000158
 80003b8:	20000148 	.word	0x20000148
 80003bc:	2000014c 	.word	0x2000014c
 80003c0:	2000014d 	.word	0x2000014d
 80003c4:	2000014e 	.word	0x2000014e
 80003c8:	2000014f 	.word	0x2000014f
 80003cc:	20000149 	.word	0x20000149
 80003d0:	20000154 	.word	0x20000154
 80003d4:	2000014a 	.word	0x2000014a
 80003d8:	2000014b 	.word	0x2000014b

080003dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

  brakes_active = false;
 80003e0:	4b33      	ldr	r3, [pc, #204]	@ (80004b0 <main+0xd4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	701a      	strb	r2, [r3, #0]
  blinkers_active = false;
 80003e6:	4b33      	ldr	r3, [pc, #204]	@ (80004b4 <main+0xd8>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	701a      	strb	r2, [r3, #0]
  left_turn_active = false;
 80003ec:	4b32      	ldr	r3, [pc, #200]	@ (80004b8 <main+0xdc>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
  right_turn_active = true;
 80003f2:	4b32      	ldr	r3, [pc, #200]	@ (80004bc <main+0xe0>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]


  dirrection = false;
 80003f8:	4b31      	ldr	r3, [pc, #196]	@ (80004c0 <main+0xe4>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	701a      	strb	r2, [r3, #0]
  mc_pwreco_ctrl = false;
 80003fe:	4b31      	ldr	r3, [pc, #196]	@ (80004c4 <main+0xe8>)
 8000400:	2200      	movs	r2, #0
 8000402:	701a      	strb	r2, [r3, #0]
  mc_main_ctrl = false;
 8000404:	4b30      	ldr	r3, [pc, #192]	@ (80004c8 <main+0xec>)
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
  array = false;
 800040a:	4b30      	ldr	r3, [pc, #192]	@ (80004cc <main+0xf0>)
 800040c:	2200      	movs	r2, #0
 800040e:	701a      	strb	r2, [r3, #0]
  array_precharge = false;
 8000410:	4b2f      	ldr	r3, [pc, #188]	@ (80004d0 <main+0xf4>)
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000416:	f000 fe70 	bl	80010fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800041a:	f000 f877 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800041e:	f000 f9bf 	bl	80007a0 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000422:	f000 f941 	bl	80006a8 <MX_DAC1_Init>
  MX_CAN1_Init();
 8000426:	f000 f8b7 	bl	8000598 <MX_CAN1_Init>
  MX_CAN2_Init();
 800042a:	f000 f907 	bl	800063c <MX_CAN2_Init>
  MX_I2C2_Init();
 800042e:	f000 f977 	bl	8000720 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000432:	4828      	ldr	r0, [pc, #160]	@ (80004d4 <main+0xf8>)
 8000434:	f001 f89a 	bl	800156c <HAL_CAN_Start>

  //intalize can RX interupt
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000438:	2102      	movs	r1, #2
 800043a:	4826      	ldr	r0, [pc, #152]	@ (80004d4 <main+0xf8>)
 800043c:	f001 f9fc 	bl	8001838 <HAL_CAN_ActivateNotification>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <main+0x6e>
  {
	  Error_Handler();
 8000446:	f000 fbc5 	bl	8000bd4 <Error_Handler>
  }



  //hdac1.State = HAL_DAC_STATE_RESET;
  TxHeader.IDE = CAN_ID_STD;
 800044a:	4b23      	ldr	r3, [pc, #140]	@ (80004d8 <main+0xfc>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x446;
 8000450:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <main+0xfc>)
 8000452:	f240 4246 	movw	r2, #1094	@ 0x446
 8000456:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8000458:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <main+0xfc>)
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 2;
 800045e:	4b1e      	ldr	r3, [pc, #120]	@ (80004d8 <main+0xfc>)
 8000460:	2202      	movs	r2, #2
 8000462:	611a      	str	r2, [r3, #16]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000464:	f004 f8ea 	bl	800463c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(Heart_Beat, NULL, &HeartBeat_attributes);
 8000468:	4a1c      	ldr	r2, [pc, #112]	@ (80004dc <main+0x100>)
 800046a:	2100      	movs	r1, #0
 800046c:	481c      	ldr	r0, [pc, #112]	@ (80004e0 <main+0x104>)
 800046e:	f004 f92f 	bl	80046d0 <osThreadNew>
 8000472:	4603      	mov	r3, r0
 8000474:	4a1b      	ldr	r2, [pc, #108]	@ (80004e4 <main+0x108>)
 8000476:	6013      	str	r3, [r2, #0]

  /* creation of UpdateThrottle */
  UpdateThrottleHandle = osThreadNew(Update_Throttle, NULL, &UpdateThrottle_attributes);
 8000478:	4a1b      	ldr	r2, [pc, #108]	@ (80004e8 <main+0x10c>)
 800047a:	2100      	movs	r1, #0
 800047c:	481b      	ldr	r0, [pc, #108]	@ (80004ec <main+0x110>)
 800047e:	f004 f927 	bl	80046d0 <osThreadNew>
 8000482:	4603      	mov	r3, r0
 8000484:	4a1a      	ldr	r2, [pc, #104]	@ (80004f0 <main+0x114>)
 8000486:	6013      	str	r3, [r2, #0]

  /* creation of LightsControl */
  LightsControlHandle = osThreadNew(Lights_Control, NULL, &LightsControl_attributes);
 8000488:	4a1a      	ldr	r2, [pc, #104]	@ (80004f4 <main+0x118>)
 800048a:	2100      	movs	r1, #0
 800048c:	481a      	ldr	r0, [pc, #104]	@ (80004f8 <main+0x11c>)
 800048e:	f004 f91f 	bl	80046d0 <osThreadNew>
 8000492:	4603      	mov	r3, r0
 8000494:	4a19      	ldr	r2, [pc, #100]	@ (80004fc <main+0x120>)
 8000496:	6013      	str	r3, [r2, #0]

  /* creation of ReadSensors */
  ReadSensorsHandle = osThreadNew(Read_Sensors, NULL, &ReadSensors_attributes);
 8000498:	4a19      	ldr	r2, [pc, #100]	@ (8000500 <main+0x124>)
 800049a:	2100      	movs	r1, #0
 800049c:	4819      	ldr	r0, [pc, #100]	@ (8000504 <main+0x128>)
 800049e:	f004 f917 	bl	80046d0 <osThreadNew>
 80004a2:	4603      	mov	r3, r0
 80004a4:	4a18      	ldr	r2, [pc, #96]	@ (8000508 <main+0x12c>)
 80004a6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004a8:	f004 f8ec 	bl	8004684 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <main+0xd0>
 80004b0:	20000148 	.word	0x20000148
 80004b4:	20000149 	.word	0x20000149
 80004b8:	2000014a 	.word	0x2000014a
 80004bc:	2000014b 	.word	0x2000014b
 80004c0:	2000014c 	.word	0x2000014c
 80004c4:	20000150 	.word	0x20000150
 80004c8:	2000014d 	.word	0x2000014d
 80004cc:	2000014e 	.word	0x2000014e
 80004d0:	2000014f 	.word	0x2000014f
 80004d4:	2000007c 	.word	0x2000007c
 80004d8:	2000015c 	.word	0x2000015c
 80004dc:	080073d0 	.word	0x080073d0
 80004e0:	080008c9 	.word	0x080008c9
 80004e4:	20000134 	.word	0x20000134
 80004e8:	080073f4 	.word	0x080073f4
 80004ec:	080008fd 	.word	0x080008fd
 80004f0:	20000138 	.word	0x20000138
 80004f4:	08007418 	.word	0x08007418
 80004f8:	08000a21 	.word	0x08000a21
 80004fc:	2000013c 	.word	0x2000013c
 8000500:	0800743c 	.word	0x0800743c
 8000504:	08000ba1 	.word	0x08000ba1
 8000508:	20000140 	.word	0x20000140

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b096      	sub	sp, #88	@ 0x58
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	2244      	movs	r2, #68	@ 0x44
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f006 fe3c 	bl	8007198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	463b      	mov	r3, r7
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800052e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000532:	f002 f9ff 	bl	8002934 <HAL_PWREx_ControlVoltageScaling>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800053c:	f000 fb4a 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000540:	2310      	movs	r3, #16
 8000542:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000544:	2301      	movs	r3, #1
 8000546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800054c:	2360      	movs	r3, #96	@ 0x60
 800054e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000550:	2300      	movs	r3, #0
 8000552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	4618      	mov	r0, r3
 800055a:	f002 fa41 	bl	80029e0 <HAL_RCC_OscConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000564:	f000 fb36 	bl	8000bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	230f      	movs	r3, #15
 800056a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f002 fe47 	bl	8003214 <HAL_RCC_ClockConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800058c:	f000 fb22 	bl	8000bd4 <Error_Handler>
  }
}
 8000590:	bf00      	nop
 8000592:	3758      	adds	r7, #88	@ 0x58
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	@ 0x28
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800059e:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <MX_CAN1_Init+0x9c>)
 80005a0:	4a25      	ldr	r2, [pc, #148]	@ (8000638 <MX_CAN1_Init+0xa0>)
 80005a2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 80005a4:	4b23      	ldr	r3, [pc, #140]	@ (8000634 <MX_CAN1_Init+0x9c>)
 80005a6:	2202      	movs	r2, #2
 80005a8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005aa:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <MX_CAN1_Init+0x9c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005b0:	4b20      	ldr	r3, [pc, #128]	@ (8000634 <MX_CAN1_Init+0x9c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80005b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_CAN1_Init+0x9c>)
 80005b8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005bc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005be:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <MX_CAN1_Init+0x9c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <MX_CAN1_Init+0x9c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000634 <MX_CAN1_Init+0x9c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005d0:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <MX_CAN1_Init+0x9c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005d6:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <MX_CAN1_Init+0x9c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005dc:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <MX_CAN1_Init+0x9c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005e2:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <MX_CAN1_Init+0x9c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005e8:	4812      	ldr	r0, [pc, #72]	@ (8000634 <MX_CAN1_Init+0x9c>)
 80005ea:	f000 fde3 	bl	80011b4 <HAL_CAN_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005f4:	f000 faee 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80005f8:	2301      	movs	r3, #1
 80005fa:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80005fc:	2312      	movs	r3, #18
 80005fe:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x000<<5;
 8000604:	2300      	movs	r3, #0
 8000606:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x000<<5;
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000618:	2301      	movs	r3, #1
 800061a:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 800061c:	2314      	movs	r3, #20
 800061e:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4803      	ldr	r0, [pc, #12]	@ (8000634 <MX_CAN1_Init+0x9c>)
 8000626:	f000 fec1 	bl	80013ac <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	3728      	adds	r7, #40	@ 0x28
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	2000007c 	.word	0x2000007c
 8000638:	40006400 	.word	0x40006400

0800063c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000640:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <MX_CAN2_Init+0x64>)
 8000642:	4a18      	ldr	r2, [pc, #96]	@ (80006a4 <MX_CAN2_Init+0x68>)
 8000644:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 8000646:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <MX_CAN2_Init+0x64>)
 8000648:	2202      	movs	r2, #2
 800064a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800064c:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_CAN2_Init+0x64>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000652:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <MX_CAN2_Init+0x64>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_CAN2_Init+0x64>)
 800065a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800065e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_CAN2_Init+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_CAN2_Init+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_CAN2_Init+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <MX_CAN2_Init+0x64>)
 8000674:	2200      	movs	r2, #0
 8000676:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_CAN2_Init+0x64>)
 800067a:	2200      	movs	r2, #0
 800067c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <MX_CAN2_Init+0x64>)
 8000680:	2200      	movs	r2, #0
 8000682:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_CAN2_Init+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_CAN2_Init+0x64>)
 800068c:	f000 fd92 	bl	80011b4 <HAL_CAN_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8000696:	f000 fa9d 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200000a4 	.word	0x200000a4
 80006a4:	40006800 	.word	0x40006800

080006a8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	@ 0x28
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2224      	movs	r2, #36	@ 0x24
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f006 fd6f 	bl	8007198 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80006ba:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <MX_DAC1_Init+0x70>)
 80006bc:	4a17      	ldr	r2, [pc, #92]	@ (800071c <MX_DAC1_Init+0x74>)
 80006be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006c0:	4815      	ldr	r0, [pc, #84]	@ (8000718 <MX_DAC1_Init+0x70>)
 80006c2:	f001 fbf1 	bl	8001ea8 <HAL_DAC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006cc:	f000 fa82 	bl	8000bd4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	480b      	ldr	r0, [pc, #44]	@ (8000718 <MX_DAC1_Init+0x70>)
 80006ec:	f001 fcd4 	bl	8002098 <HAL_DAC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80006f6:	f000 fa6d 	bl	8000bd4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2210      	movs	r2, #16
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	@ (8000718 <MX_DAC1_Init+0x70>)
 8000702:	f001 fcc9 	bl	8002098 <HAL_DAC_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800070c:	f000 fa62 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	@ 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000cc 	.word	0x200000cc
 800071c:	40007400 	.word	0x40007400

08000720 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <MX_I2C2_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_I2C2_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <MX_I2C2_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000738:	2201      	movs	r2, #1
 800073a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	@ (8000794 <MX_I2C2_Init+0x74>)
 800075c:	f001 ffaa 	bl	80026b4 <HAL_I2C_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000766:	f000 fa35 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4809      	ldr	r0, [pc, #36]	@ (8000794 <MX_I2C2_Init+0x74>)
 800076e:	f002 f83c 	bl	80027ea <HAL_I2CEx_ConfigAnalogFilter>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000778:	f000 fa2c 	bl	8000bd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800077c:	2100      	movs	r1, #0
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_I2C2_Init+0x74>)
 8000780:	f002 f87e 	bl	8002880 <HAL_I2CEx_ConfigDigitalFilter>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800078a:	f000 fa23 	bl	8000bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000e0 	.word	0x200000e0
 8000798:	40005800 	.word	0x40005800
 800079c:	00100d14 	.word	0x00100d14

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b41      	ldr	r3, [pc, #260]	@ (80008bc <MX_GPIO_Init+0x11c>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ba:	4a40      	ldr	r2, [pc, #256]	@ (80008bc <MX_GPIO_Init+0x11c>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c2:	4b3e      	ldr	r3, [pc, #248]	@ (80008bc <MX_GPIO_Init+0x11c>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b3b      	ldr	r3, [pc, #236]	@ (80008bc <MX_GPIO_Init+0x11c>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a3a      	ldr	r2, [pc, #232]	@ (80008bc <MX_GPIO_Init+0x11c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b38      	ldr	r3, [pc, #224]	@ (80008bc <MX_GPIO_Init+0x11c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	4b35      	ldr	r3, [pc, #212]	@ (80008bc <MX_GPIO_Init+0x11c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a34      	ldr	r2, [pc, #208]	@ (80008bc <MX_GPIO_Init+0x11c>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b32      	ldr	r3, [pc, #200]	@ (80008bc <MX_GPIO_Init+0x11c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80007fe:	2200      	movs	r2, #0
 8000800:	f24c 010f 	movw	r1, #49167	@ 0xc00f
 8000804:	482e      	ldr	r0, [pc, #184]	@ (80008c0 <MX_GPIO_Init+0x120>)
 8000806:	f001 ff0b 	bl	8002620 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2107      	movs	r1, #7
 800080e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000812:	f001 ff05 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f242 0102 	movw	r1, #8194	@ 0x2002
 800081c:	4829      	ldr	r0, [pc, #164]	@ (80008c4 <MX_GPIO_Init+0x124>)
 800081e:	f001 feff 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000822:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000828:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4619      	mov	r1, r3
 8000838:	4821      	ldr	r0, [pc, #132]	@ (80008c0 <MX_GPIO_Init+0x120>)
 800083a:	f001 fd5f 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800083e:	f24c 030f 	movw	r3, #49167	@ 0xc00f
 8000842:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	4619      	mov	r1, r3
 8000856:	481a      	ldr	r0, [pc, #104]	@ (80008c0 <MX_GPIO_Init+0x120>)
 8000858:	f001 fd50 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pins : MC_Main_Pin PA1 PA2 */
  GPIO_InitStruct.Pin = MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2;
 800085c:	2307      	movs	r3, #7
 800085e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000876:	f001 fd41 	bl	80022fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 800087a:	f242 0302 	movw	r3, #8194	@ 0x2002
 800087e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4619      	mov	r1, r3
 8000892:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <MX_GPIO_Init+0x124>)
 8000894:	f001 fd32 	bl	80022fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2105      	movs	r1, #5
 800089c:	2028      	movs	r0, #40	@ 0x28
 800089e:	f001 fad9 	bl	8001e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008a2:	2028      	movs	r0, #40	@ 0x28
 80008a4:	f001 faf2 	bl	8001e8c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	2101      	movs	r1, #1
 80008ac:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <MX_GPIO_Init+0x120>)
 80008ae:	f001 feb7 	bl	8002620 <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_2 */
}
 80008b2:	bf00      	nop
 80008b4:	3720      	adds	r7, #32
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000800 	.word	0x48000800
 80008c4:	48000400 	.word	0x48000400

080008c8 <Heart_Beat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Heart_Beat */
void Heart_Beat(void *argument)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008d6:	4807      	ldr	r0, [pc, #28]	@ (80008f4 <Heart_Beat+0x2c>)
 80008d8:	f001 fea2 	bl	8002620 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80008dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008e0:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <Heart_Beat+0x30>)
 80008e2:	f001 feb5 	bl	8002650 <HAL_GPIO_TogglePin>
    osDelay(500);
 80008e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008ea:	f003 ff83 	bl	80047f4 <osDelay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80008ee:	bf00      	nop
 80008f0:	e7ee      	b.n	80008d0 <Heart_Beat+0x8>
 80008f2:	bf00      	nop
 80008f4:	48000800 	.word	0x48000800
 80008f8:	48000400 	.word	0x48000400

080008fc <Update_Throttle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Update_Throttle */
void Update_Throttle(void *argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Update_Throttle */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2104      	movs	r1, #4
 8000908:	483c      	ldr	r0, [pc, #240]	@ (80009fc <Update_Throttle+0x100>)
 800090a:	f001 fe89 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 800090e:	2201      	movs	r2, #1
 8000910:	2104      	movs	r1, #4
 8000912:	483a      	ldr	r0, [pc, #232]	@ (80009fc <Update_Throttle+0x100>)
 8000914:	f001 fe84 	bl	8002620 <HAL_GPIO_WritePin>



  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1); //Start DAC 1 and 2
 8000918:	2100      	movs	r1, #0
 800091a:	4839      	ldr	r0, [pc, #228]	@ (8000a00 <Update_Throttle+0x104>)
 800091c:	f001 fae6 	bl	8001eec <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 8000920:	2110      	movs	r1, #16
 8000922:	4837      	ldr	r0, [pc, #220]	@ (8000a00 <Update_Throttle+0x104>)
 8000924:	f001 fae2 	bl	8001eec <HAL_DAC_Start>
  array = 1;
 8000928:	4b36      	ldr	r3, [pc, #216]	@ (8000a04 <Update_Throttle+0x108>)
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
  array_precharge = 1;
 800092e:	4b36      	ldr	r3, [pc, #216]	@ (8000a08 <Update_Throttle+0x10c>)
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, throttle);
 8000934:	4b35      	ldr	r3, [pc, #212]	@ (8000a0c <Update_Throttle+0x110>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	2200      	movs	r2, #0
 800093a:	2110      	movs	r1, #16
 800093c:	4830      	ldr	r0, [pc, #192]	@ (8000a00 <Update_Throttle+0x104>)
 800093e:	f001 fb7c 	bl	800203a <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, regen);
 8000942:	4b33      	ldr	r3, [pc, #204]	@ (8000a10 <Update_Throttle+0x114>)
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	482d      	ldr	r0, [pc, #180]	@ (8000a00 <Update_Throttle+0x104>)
 800094c:	f001 fb75 	bl	800203a <HAL_DAC_SetValue>
	  //updates gpio pins with states from global variables

	  //change for bistable relay
	  //gonna have to think about this section

	  if(mc_main_ctrl){
 8000950:	4b30      	ldr	r3, [pc, #192]	@ (8000a14 <Update_Throttle+0x118>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d006      	beq.n	8000966 <Update_Throttle+0x6a>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2101      	movs	r1, #1
 800095c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000960:	f001 fe5e 	bl	8002620 <HAL_GPIO_WritePin>
 8000964:	e005      	b.n	8000972 <Update_Throttle+0x76>
	  }else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2101      	movs	r1, #1
 800096a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800096e:	f001 fe57 	bl	8002620 <HAL_GPIO_WritePin>
	  }

	  if(mc_pwreco_ctrl){
 8000972:	4b29      	ldr	r3, [pc, #164]	@ (8000a18 <Update_Throttle+0x11c>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d006      	beq.n	8000988 <Update_Throttle+0x8c>
		  //closed power
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2102      	movs	r1, #2
 800097e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000982:	f001 fe4d 	bl	8002620 <HAL_GPIO_WritePin>
 8000986:	e005      	b.n	8000994 <Update_Throttle+0x98>
	  }else{
		  //open eco
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2102      	movs	r1, #2
 800098c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000990:	f001 fe46 	bl	8002620 <HAL_GPIO_WritePin>
	  }


	  if(dirrection == true){
 8000994:	4b21      	ldr	r3, [pc, #132]	@ (8000a1c <Update_Throttle+0x120>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d006      	beq.n	80009aa <Update_Throttle+0xae>
		  //closed forward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2104      	movs	r1, #4
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009a4:	f001 fe3c 	bl	8002620 <HAL_GPIO_WritePin>
 80009a8:	e005      	b.n	80009b6 <Update_Throttle+0xba>
	  }else{
		  //open backward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2104      	movs	r1, #4
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b2:	f001 fe35 	bl	8002620 <HAL_GPIO_WritePin>
	  }

	  if(array_precharge == true){
 80009b6:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <Update_Throttle+0x10c>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d005      	beq.n	80009ca <Update_Throttle+0xce>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2104      	movs	r1, #4
 80009c2:	480e      	ldr	r0, [pc, #56]	@ (80009fc <Update_Throttle+0x100>)
 80009c4:	f001 fe2c 	bl	8002620 <HAL_GPIO_WritePin>
 80009c8:	e004      	b.n	80009d4 <Update_Throttle+0xd8>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2104      	movs	r1, #4
 80009ce:	480b      	ldr	r0, [pc, #44]	@ (80009fc <Update_Throttle+0x100>)
 80009d0:	f001 fe26 	bl	8002620 <HAL_GPIO_WritePin>
	  }

	  if(array == true){
 80009d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <Update_Throttle+0x108>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d005      	beq.n	80009e8 <Update_Throttle+0xec>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2108      	movs	r1, #8
 80009e0:	4806      	ldr	r0, [pc, #24]	@ (80009fc <Update_Throttle+0x100>)
 80009e2:	f001 fe1d 	bl	8002620 <HAL_GPIO_WritePin>
 80009e6:	e004      	b.n	80009f2 <Update_Throttle+0xf6>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2108      	movs	r1, #8
 80009ec:	4803      	ldr	r0, [pc, #12]	@ (80009fc <Update_Throttle+0x100>)
 80009ee:	f001 fe17 	bl	8002620 <HAL_GPIO_WritePin>
	  }


	  osDelay(20);
 80009f2:	2014      	movs	r0, #20
 80009f4:	f003 fefe 	bl	80047f4 <osDelay>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, throttle);
 80009f8:	e79c      	b.n	8000934 <Update_Throttle+0x38>
 80009fa:	bf00      	nop
 80009fc:	48000800 	.word	0x48000800
 8000a00:	200000cc 	.word	0x200000cc
 8000a04:	2000014e 	.word	0x2000014e
 8000a08:	2000014f 	.word	0x2000014f
 8000a0c:	20000144 	.word	0x20000144
 8000a10:	20000146 	.word	0x20000146
 8000a14:	2000014d 	.word	0x2000014d
 8000a18:	20000150 	.word	0x20000150
 8000a1c:	2000014c 	.word	0x2000014c

08000a20 <Lights_Control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Lights_Control */
void Lights_Control(void *argument)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  //left_turn_active = true;

  /* Infinite loop */
  for(;;)
  {
	  if (blinkers_active) {
 8000a28:	4b56      	ldr	r3, [pc, #344]	@ (8000b84 <Lights_Control+0x164>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d032      	beq.n	8000a96 <Lights_Control+0x76>
		  if (signal_counter < 5) {
 8000a30:	4b55      	ldr	r3, [pc, #340]	@ (8000b88 <Lights_Control+0x168>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b04      	cmp	r3, #4
 8000a36:	dc0b      	bgt.n	8000a50 <Lights_Control+0x30>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a3e:	4853      	ldr	r0, [pc, #332]	@ (8000b8c <Lights_Control+0x16c>)
 8000a40:	f001 fdee 	bl	8002620 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2102      	movs	r1, #2
 8000a48:	4850      	ldr	r0, [pc, #320]	@ (8000b8c <Lights_Control+0x16c>)
 8000a4a:	f001 fde9 	bl	8002620 <HAL_GPIO_WritePin>
 8000a4e:	e00a      	b.n	8000a66 <Lights_Control+0x46>
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a56:	484d      	ldr	r0, [pc, #308]	@ (8000b8c <Lights_Control+0x16c>)
 8000a58:	f001 fde2 	bl	8002620 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2102      	movs	r1, #2
 8000a60:	484a      	ldr	r0, [pc, #296]	@ (8000b8c <Lights_Control+0x16c>)
 8000a62:	f001 fddd 	bl	8002620 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 8000a66:	4b48      	ldr	r3, [pc, #288]	@ (8000b88 <Lights_Control+0x168>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	4a46      	ldr	r2, [pc, #280]	@ (8000b88 <Lights_Control+0x168>)
 8000a6e:	6013      	str	r3, [r2, #0]
		  signal_counter = signal_counter%10;
 8000a70:	4b45      	ldr	r3, [pc, #276]	@ (8000b88 <Lights_Control+0x168>)
 8000a72:	6819      	ldr	r1, [r3, #0]
 8000a74:	4b46      	ldr	r3, [pc, #280]	@ (8000b90 <Lights_Control+0x170>)
 8000a76:	fb83 2301 	smull	r2, r3, r3, r1
 8000a7a:	109a      	asrs	r2, r3, #2
 8000a7c:	17cb      	asrs	r3, r1, #31
 8000a7e:	1ad2      	subs	r2, r2, r3
 8000a80:	4613      	mov	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	1aca      	subs	r2, r1, r3
 8000a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b88 <Lights_Control+0x168>)
 8000a8c:	601a      	str	r2, [r3, #0]
		  osDelay(100);
 8000a8e:	2064      	movs	r0, #100	@ 0x64
 8000a90:	f003 feb0 	bl	80047f4 <osDelay>
		  continue;
 8000a94:	e074      	b.n	8000b80 <Lights_Control+0x160>
	  }

	  if(left_turn_active){
 8000a96:	4b3f      	ldr	r3, [pc, #252]	@ (8000b94 <Lights_Control+0x174>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d016      	beq.n	8000acc <Lights_Control+0xac>
		  if(signal_counter < 5){
 8000a9e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b88 <Lights_Control+0x168>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	dc06      	bgt.n	8000ab4 <Lights_Control+0x94>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aac:	4837      	ldr	r0, [pc, #220]	@ (8000b8c <Lights_Control+0x16c>)
 8000aae:	f001 fdb7 	bl	8002620 <HAL_GPIO_WritePin>
 8000ab2:	e005      	b.n	8000ac0 <Lights_Control+0xa0>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aba:	4834      	ldr	r0, [pc, #208]	@ (8000b8c <Lights_Control+0x16c>)
 8000abc:	f001 fdb0 	bl	8002620 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 8000ac0:	4b31      	ldr	r3, [pc, #196]	@ (8000b88 <Lights_Control+0x168>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	4a30      	ldr	r2, [pc, #192]	@ (8000b88 <Lights_Control+0x168>)
 8000ac8:	6013      	str	r3, [r2, #0]
 8000aca:	e010      	b.n	8000aee <Lights_Control+0xce>

	  }else{
		  if(brakes_active){
 8000acc:	4b32      	ldr	r3, [pc, #200]	@ (8000b98 <Lights_Control+0x178>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d006      	beq.n	8000ae2 <Lights_Control+0xc2>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ada:	482c      	ldr	r0, [pc, #176]	@ (8000b8c <Lights_Control+0x16c>)
 8000adc:	f001 fda0 	bl	8002620 <HAL_GPIO_WritePin>
 8000ae0:	e005      	b.n	8000aee <Lights_Control+0xce>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ae8:	4828      	ldr	r0, [pc, #160]	@ (8000b8c <Lights_Control+0x16c>)
 8000aea:	f001 fd99 	bl	8002620 <HAL_GPIO_WritePin>
		  }
	  }

	  if(right_turn_active){
 8000aee:	4b2b      	ldr	r3, [pc, #172]	@ (8000b9c <Lights_Control+0x17c>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d014      	beq.n	8000b20 <Lights_Control+0x100>
		  if(signal_counter < 5){
 8000af6:	4b24      	ldr	r3, [pc, #144]	@ (8000b88 <Lights_Control+0x168>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	dc05      	bgt.n	8000b0a <Lights_Control+0xea>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2102      	movs	r1, #2
 8000b02:	4822      	ldr	r0, [pc, #136]	@ (8000b8c <Lights_Control+0x16c>)
 8000b04:	f001 fd8c 	bl	8002620 <HAL_GPIO_WritePin>
 8000b08:	e004      	b.n	8000b14 <Lights_Control+0xf4>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	481f      	ldr	r0, [pc, #124]	@ (8000b8c <Lights_Control+0x16c>)
 8000b10:	f001 fd86 	bl	8002620 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 8000b14:	4b1c      	ldr	r3, [pc, #112]	@ (8000b88 <Lights_Control+0x168>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8000b88 <Lights_Control+0x168>)
 8000b1c:	6013      	str	r3, [r2, #0]
 8000b1e:	e00e      	b.n	8000b3e <Lights_Control+0x11e>
	  }
	  else{
		  if(brakes_active){
 8000b20:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <Lights_Control+0x178>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d005      	beq.n	8000b34 <Lights_Control+0x114>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	4817      	ldr	r0, [pc, #92]	@ (8000b8c <Lights_Control+0x16c>)
 8000b2e:	f001 fd77 	bl	8002620 <HAL_GPIO_WritePin>
 8000b32:	e004      	b.n	8000b3e <Lights_Control+0x11e>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2102      	movs	r1, #2
 8000b38:	4814      	ldr	r0, [pc, #80]	@ (8000b8c <Lights_Control+0x16c>)
 8000b3a:	f001 fd71 	bl	8002620 <HAL_GPIO_WritePin>
		  }
	  }

	  if(brakes_active){
 8000b3e:	4b16      	ldr	r3, [pc, #88]	@ (8000b98 <Lights_Control+0x178>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d005      	beq.n	8000b52 <Lights_Control+0x132>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET); //sets center rear light (brake light)
 8000b46:	2200      	movs	r2, #0
 8000b48:	2101      	movs	r1, #1
 8000b4a:	4810      	ldr	r0, [pc, #64]	@ (8000b8c <Lights_Control+0x16c>)
 8000b4c:	f001 fd68 	bl	8002620 <HAL_GPIO_WritePin>
 8000b50:	e004      	b.n	8000b5c <Lights_Control+0x13c>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2101      	movs	r1, #1
 8000b56:	480d      	ldr	r0, [pc, #52]	@ (8000b8c <Lights_Control+0x16c>)
 8000b58:	f001 fd62 	bl	8002620 <HAL_GPIO_WritePin>
	  }
	  signal_counter = signal_counter%10;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <Lights_Control+0x168>)
 8000b5e:	6819      	ldr	r1, [r3, #0]
 8000b60:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <Lights_Control+0x170>)
 8000b62:	fb83 2301 	smull	r2, r3, r3, r1
 8000b66:	109a      	asrs	r2, r3, #2
 8000b68:	17cb      	asrs	r3, r1, #31
 8000b6a:	1ad2      	subs	r2, r2, r3
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	1aca      	subs	r2, r1, r3
 8000b76:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <Lights_Control+0x168>)
 8000b78:	601a      	str	r2, [r3, #0]
	  osDelay(100);
 8000b7a:	2064      	movs	r0, #100	@ 0x64
 8000b7c:	f003 fe3a 	bl	80047f4 <osDelay>
	  if (blinkers_active) {
 8000b80:	e752      	b.n	8000a28 <Lights_Control+0x8>
 8000b82:	bf00      	nop
 8000b84:	20000149 	.word	0x20000149
 8000b88:	20000154 	.word	0x20000154
 8000b8c:	48000800 	.word	0x48000800
 8000b90:	66666667 	.word	0x66666667
 8000b94:	2000014a 	.word	0x2000014a
 8000b98:	20000148 	.word	0x20000148
 8000b9c:	2000014b 	.word	0x2000014b

08000ba0 <Read_Sensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Read_Sensors */
void Read_Sensors(void *argument)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	//send CAN message
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
		Error_Handler();
	}
	*/
	  osDelay(100);
 8000ba8:	2064      	movs	r0, #100	@ 0x64
 8000baa:	f003 fe23 	bl	80047f4 <osDelay>
 8000bae:	e7fb      	b.n	8000ba8 <Read_Sensors+0x8>

08000bb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d101      	bne.n	8000bc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bc2:	f000 fab3 	bl	800112c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40001000 	.word	0x40001000

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd8:	b672      	cpsid	i
}
 8000bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <Error_Handler+0x8>

08000be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be6:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bea:	4a10      	ldr	r2, [pc, #64]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c02:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c0a:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <HAL_MspInit+0x4c>)
 8000c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	210f      	movs	r1, #15
 8000c1a:	f06f 0001 	mvn.w	r0, #1
 8000c1e:	f001 f919 	bl	8001e54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000

08000c30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	@ 0x30
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a56      	ldr	r2, [pc, #344]	@ (8000da8 <HAL_CAN_MspInit+0x178>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d14b      	bne.n	8000cea <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000c52:	4b56      	ldr	r3, [pc, #344]	@ (8000dac <HAL_CAN_MspInit+0x17c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	4a54      	ldr	r2, [pc, #336]	@ (8000dac <HAL_CAN_MspInit+0x17c>)
 8000c5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000c5c:	4b53      	ldr	r3, [pc, #332]	@ (8000dac <HAL_CAN_MspInit+0x17c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d10b      	bne.n	8000c7c <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000c64:	4b52      	ldr	r3, [pc, #328]	@ (8000db0 <HAL_CAN_MspInit+0x180>)
 8000c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c68:	4a51      	ldr	r2, [pc, #324]	@ (8000db0 <HAL_CAN_MspInit+0x180>)
 8000c6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c70:	4b4f      	ldr	r3, [pc, #316]	@ (8000db0 <HAL_CAN_MspInit+0x180>)
 8000c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7c:	4b4c      	ldr	r3, [pc, #304]	@ (8000db0 <HAL_CAN_MspInit+0x180>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c80:	4a4b      	ldr	r2, [pc, #300]	@ (8000db0 <HAL_CAN_MspInit+0x180>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c88:	4b49      	ldr	r3, [pc, #292]	@ (8000db0 <HAL_CAN_MspInit+0x180>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8c:	f003 0302 	and.w	r3, r3, #2
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ca6:	2309      	movs	r3, #9
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4840      	ldr	r0, [pc, #256]	@ (8000db4 <HAL_CAN_MspInit+0x184>)
 8000cb2:	f001 fb23 	bl	80022fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cc8:	2309      	movs	r3, #9
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4838      	ldr	r0, [pc, #224]	@ (8000db4 <HAL_CAN_MspInit+0x184>)
 8000cd4:	f001 fb12 	bl	80022fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2105      	movs	r1, #5
 8000cdc:	2014      	movs	r0, #20
 8000cde:	f001 f8b9 	bl	8001e54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ce2:	2014      	movs	r0, #20
 8000ce4:	f001 f8d2 	bl	8001e8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000ce8:	e059      	b.n	8000d9e <HAL_CAN_MspInit+0x16e>
  else if(hcan->Instance==CAN2)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a32      	ldr	r2, [pc, #200]	@ (8000db8 <HAL_CAN_MspInit+0x188>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d154      	bne.n	8000d9e <HAL_CAN_MspInit+0x16e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000cf4:	4b2e      	ldr	r3, [pc, #184]	@ (8000db0 <HAL_CAN_MspInit+0x180>)
 8000cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf8:	4a2d      	ldr	r2, [pc, #180]	@ (8000db0 <HAL_CAN_MspInit+0x180>)
 8000cfa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d00:	4b2b      	ldr	r3, [pc, #172]	@ (8000db0 <HAL_CAN_MspInit+0x180>)
 8000d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000d0c:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <HAL_CAN_MspInit+0x17c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3301      	adds	r3, #1
 8000d12:	4a26      	ldr	r2, [pc, #152]	@ (8000dac <HAL_CAN_MspInit+0x17c>)
 8000d14:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000d16:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <HAL_CAN_MspInit+0x17c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d10b      	bne.n	8000d36 <HAL_CAN_MspInit+0x106>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000d1e:	4b24      	ldr	r3, [pc, #144]	@ (8000db0 <HAL_CAN_MspInit+0x180>)
 8000d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d22:	4a23      	ldr	r2, [pc, #140]	@ (8000db0 <HAL_CAN_MspInit+0x180>)
 8000d24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d2a:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <HAL_CAN_MspInit+0x180>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	4b1e      	ldr	r3, [pc, #120]	@ (8000db0 <HAL_CAN_MspInit+0x180>)
 8000d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3a:	4a1d      	ldr	r2, [pc, #116]	@ (8000db0 <HAL_CAN_MspInit+0x180>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d42:	4b1b      	ldr	r3, [pc, #108]	@ (8000db0 <HAL_CAN_MspInit+0x180>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d4e:	2320      	movs	r3, #32
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4812      	ldr	r0, [pc, #72]	@ (8000db4 <HAL_CAN_MspInit+0x184>)
 8000d6a:	f001 fac7 	bl	80022fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d6e:	2340      	movs	r3, #64	@ 0x40
 8000d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8000d7e:	2308      	movs	r3, #8
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	480a      	ldr	r0, [pc, #40]	@ (8000db4 <HAL_CAN_MspInit+0x184>)
 8000d8a:	f001 fab7 	bl	80022fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2105      	movs	r1, #5
 8000d92:	2057      	movs	r0, #87	@ 0x57
 8000d94:	f001 f85e 	bl	8001e54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000d98:	2057      	movs	r0, #87	@ 0x57
 8000d9a:	f001 f877 	bl	8001e8c <HAL_NVIC_EnableIRQ>
}
 8000d9e:	bf00      	nop
 8000da0:	3730      	adds	r7, #48	@ 0x30
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40006400 	.word	0x40006400
 8000dac:	20000198 	.word	0x20000198
 8000db0:	40021000 	.word	0x40021000
 8000db4:	48000400 	.word	0x48000400
 8000db8:	40006800 	.word	0x40006800

08000dbc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	@ 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a19      	ldr	r2, [pc, #100]	@ (8000e40 <HAL_DAC_MspInit+0x84>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d12c      	bne.n	8000e38 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000dde:	4b19      	ldr	r3, [pc, #100]	@ (8000e44 <HAL_DAC_MspInit+0x88>)
 8000de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de2:	4a18      	ldr	r2, [pc, #96]	@ (8000e44 <HAL_DAC_MspInit+0x88>)
 8000de4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000de8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dea:	4b16      	ldr	r3, [pc, #88]	@ (8000e44 <HAL_DAC_MspInit+0x88>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <HAL_DAC_MspInit+0x88>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	4a12      	ldr	r2, [pc, #72]	@ (8000e44 <HAL_DAC_MspInit+0x88>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <HAL_DAC_MspInit+0x88>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e0e:	2330      	movs	r3, #48	@ 0x30
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e12:	2303      	movs	r3, #3
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e24:	f001 fa6a 	bl	80022fc <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	2036      	movs	r0, #54	@ 0x36
 8000e2e:	f001 f811 	bl	8001e54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e32:	2036      	movs	r0, #54	@ 0x36
 8000e34:	f001 f82a 	bl	8001e8c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	@ 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40007400 	.word	0x40007400
 8000e44:	40021000 	.word	0x40021000

08000e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0ac      	sub	sp, #176	@ 0xb0
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	228c      	movs	r2, #140	@ 0x8c
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f006 f995 	bl	8007198 <memset>
  if(hi2c->Instance==I2C2)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a21      	ldr	r2, [pc, #132]	@ (8000ef8 <HAL_I2C_MspInit+0xb0>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d13b      	bne.n	8000ef0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e78:	2380      	movs	r3, #128	@ 0x80
 8000e7a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	4618      	mov	r0, r3
 8000e86:	f002 fc05 	bl	8003694 <HAL_RCCEx_PeriphCLKConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e90:	f7ff fea0 	bl	8000bd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e94:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <HAL_I2C_MspInit+0xb4>)
 8000e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e98:	4a18      	ldr	r2, [pc, #96]	@ (8000efc <HAL_I2C_MspInit+0xb4>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea0:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <HAL_I2C_MspInit+0xb4>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000eac:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000eb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb4:	2312      	movs	r3, #18
 8000eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480b      	ldr	r0, [pc, #44]	@ (8000f00 <HAL_I2C_MspInit+0xb8>)
 8000ed4:	f001 fa12 	bl	80022fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ed8:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <HAL_I2C_MspInit+0xb4>)
 8000eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000edc:	4a07      	ldr	r2, [pc, #28]	@ (8000efc <HAL_I2C_MspInit+0xb4>)
 8000ede:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ee2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <HAL_I2C_MspInit+0xb4>)
 8000ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000ef0:	bf00      	nop
 8000ef2:	37b0      	adds	r7, #176	@ 0xb0
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40005800 	.word	0x40005800
 8000efc:	40021000 	.word	0x40021000
 8000f00:	48000400 	.word	0x48000400

08000f04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08e      	sub	sp, #56	@ 0x38
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f12:	4b34      	ldr	r3, [pc, #208]	@ (8000fe4 <HAL_InitTick+0xe0>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f16:	4a33      	ldr	r2, [pc, #204]	@ (8000fe4 <HAL_InitTick+0xe0>)
 8000f18:	f043 0310 	orr.w	r3, r3, #16
 8000f1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f1e:	4b31      	ldr	r3, [pc, #196]	@ (8000fe4 <HAL_InitTick+0xe0>)
 8000f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f22:	f003 0310 	and.w	r3, r3, #16
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f2a:	f107 0210 	add.w	r2, r7, #16
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f002 fb1b 	bl	8003570 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f3a:	6a3b      	ldr	r3, [r7, #32]
 8000f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d103      	bne.n	8000f4c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f44:	f002 fafe 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8000f48:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f4a:	e004      	b.n	8000f56 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f4c:	f002 fafa 	bl	8003544 <HAL_RCC_GetPCLK1Freq>
 8000f50:	4603      	mov	r3, r0
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f58:	4a23      	ldr	r2, [pc, #140]	@ (8000fe8 <HAL_InitTick+0xe4>)
 8000f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5e:	0c9b      	lsrs	r3, r3, #18
 8000f60:	3b01      	subs	r3, #1
 8000f62:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f64:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <HAL_InitTick+0xe8>)
 8000f66:	4a22      	ldr	r2, [pc, #136]	@ (8000ff0 <HAL_InitTick+0xec>)
 8000f68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f6a:	4b20      	ldr	r3, [pc, #128]	@ (8000fec <HAL_InitTick+0xe8>)
 8000f6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f70:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f72:	4a1e      	ldr	r2, [pc, #120]	@ (8000fec <HAL_InitTick+0xe8>)
 8000f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f76:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f78:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <HAL_InitTick+0xe8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fec <HAL_InitTick+0xe8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f84:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <HAL_InitTick+0xe8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f8a:	4818      	ldr	r0, [pc, #96]	@ (8000fec <HAL_InitTick+0xe8>)
 8000f8c:	f003 f84c 	bl	8004028 <HAL_TIM_Base_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f96:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d11b      	bne.n	8000fd6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f9e:	4813      	ldr	r0, [pc, #76]	@ (8000fec <HAL_InitTick+0xe8>)
 8000fa0:	f003 f8a4 	bl	80040ec <HAL_TIM_Base_Start_IT>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000faa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d111      	bne.n	8000fd6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fb2:	2036      	movs	r0, #54	@ 0x36
 8000fb4:	f000 ff6a 	bl	8001e8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b0f      	cmp	r3, #15
 8000fbc:	d808      	bhi.n	8000fd0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	2036      	movs	r0, #54	@ 0x36
 8000fc4:	f000 ff46 	bl	8001e54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <HAL_InitTick+0xf0>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e002      	b.n	8000fd6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fd6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3738      	adds	r7, #56	@ 0x38
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	431bde83 	.word	0x431bde83
 8000fec:	2000019c 	.word	0x2000019c
 8000ff0:	40001000 	.word	0x40001000
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <NMI_Handler+0x4>

08001000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <MemManage_Handler+0x4>

08001010 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <BusFault_Handler+0x4>

08001018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <UsageFault_Handler+0x4>

08001020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <CAN1_RX0_IRQHandler+0x10>)
 8001036:	f000 fc25 	bl	8001884 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000007c 	.word	0x2000007c

08001044 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001048:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800104c:	f001 fb1a 	bl	8002684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}

08001054 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001058:	4803      	ldr	r0, [pc, #12]	@ (8001068 <TIM6_DAC_IRQHandler+0x14>)
 800105a:	f003 f8b7 	bl	80041cc <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800105e:	4803      	ldr	r0, [pc, #12]	@ (800106c <TIM6_DAC_IRQHandler+0x18>)
 8001060:	f000 ff91 	bl	8001f86 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000019c 	.word	0x2000019c
 800106c:	200000cc 	.word	0x200000cc

08001070 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <CAN2_RX0_IRQHandler+0x10>)
 8001076:	f000 fc05 	bl	8001884 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000a4 	.word	0x200000a4

08001084 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <SystemInit+0x20>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800108e:	4a05      	ldr	r2, [pc, #20]	@ (80010a4 <SystemInit+0x20>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010ac:	f7ff ffea 	bl	8001084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b0:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010b2:	490d      	ldr	r1, [pc, #52]	@ (80010e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010b4:	4a0d      	ldr	r2, [pc, #52]	@ (80010ec <LoopForever+0xe>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b8:	e002      	b.n	80010c0 <LoopCopyDataInit>

080010ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010be:	3304      	adds	r3, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c4:	d3f9      	bcc.n	80010ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c6:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010c8:	4c0a      	ldr	r4, [pc, #40]	@ (80010f4 <LoopForever+0x16>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010cc:	e001      	b.n	80010d2 <LoopFillZerobss>

080010ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d0:	3204      	adds	r2, #4

080010d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d4:	d3fb      	bcc.n	80010ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010d6:	f006 f8bd 	bl	8007254 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010da:	f7ff f97f 	bl	80003dc <main>

080010de <LoopForever>:

LoopForever:
    b LoopForever
 80010de:	e7fe      	b.n	80010de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010e0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010ec:	080074b0 	.word	0x080074b0
  ldr r2, =_sbss
 80010f0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010f4:	20001ccc 	.word	0x20001ccc

080010f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC1_2_IRQHandler>

080010fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001104:	2003      	movs	r0, #3
 8001106:	f000 fe9a 	bl	8001e3e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800110a:	200f      	movs	r0, #15
 800110c:	f7ff fefa 	bl	8000f04 <HAL_InitTick>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d002      	beq.n	800111c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	71fb      	strb	r3, [r7, #7]
 800111a:	e001      	b.n	8001120 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800111c:	f7ff fd60 	bl	8000be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001120:	79fb      	ldrb	r3, [r7, #7]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_IncTick+0x20>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <HAL_IncTick+0x24>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	4a04      	ldr	r2, [pc, #16]	@ (8001150 <HAL_IncTick+0x24>)
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008
 8001150:	200001e8 	.word	0x200001e8

08001154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <HAL_GetTick+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	200001e8 	.word	0x200001e8

0800116c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001174:	f7ff ffee 	bl	8001154 <HAL_GetTick>
 8001178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001184:	d005      	beq.n	8001192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_Delay+0x44>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	461a      	mov	r2, r3
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	4413      	add	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001192:	bf00      	nop
 8001194:	f7ff ffde 	bl	8001154 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d8f7      	bhi.n	8001194 <HAL_Delay+0x28>
  {
  }
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008

080011b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e0ed      	b.n	80013a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d102      	bne.n	80011d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff fd2c 	bl	8000c30 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f042 0201 	orr.w	r2, r2, #1
 80011e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011e8:	f7ff ffb4 	bl	8001154 <HAL_GetTick>
 80011ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ee:	e012      	b.n	8001216 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011f0:	f7ff ffb0 	bl	8001154 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b0a      	cmp	r3, #10
 80011fc:	d90b      	bls.n	8001216 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001202:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2205      	movs	r2, #5
 800120e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e0c5      	b.n	80013a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0e5      	beq.n	80011f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0202 	bic.w	r2, r2, #2
 8001232:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001234:	f7ff ff8e 	bl	8001154 <HAL_GetTick>
 8001238:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800123a:	e012      	b.n	8001262 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800123c:	f7ff ff8a 	bl	8001154 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b0a      	cmp	r3, #10
 8001248:	d90b      	bls.n	8001262 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2205      	movs	r2, #5
 800125a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e09f      	b.n	80013a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1e5      	bne.n	800123c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	7e1b      	ldrb	r3, [r3, #24]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d108      	bne.n	800128a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	e007      	b.n	800129a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001298:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7e5b      	ldrb	r3, [r3, #25]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d108      	bne.n	80012b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	e007      	b.n	80012c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80012c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7e9b      	ldrb	r3, [r3, #26]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d108      	bne.n	80012de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0220 	orr.w	r2, r2, #32
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	e007      	b.n	80012ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0220 	bic.w	r2, r2, #32
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7edb      	ldrb	r3, [r3, #27]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d108      	bne.n	8001308 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0210 	bic.w	r2, r2, #16
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e007      	b.n	8001318 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0210 	orr.w	r2, r2, #16
 8001316:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7f1b      	ldrb	r3, [r3, #28]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d108      	bne.n	8001332 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0208 	orr.w	r2, r2, #8
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	e007      	b.n	8001342 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0208 	bic.w	r2, r2, #8
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7f5b      	ldrb	r3, [r3, #29]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d108      	bne.n	800135c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f042 0204 	orr.w	r2, r2, #4
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	e007      	b.n	800136c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0204 	bic.w	r2, r2, #4
 800136a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	431a      	orrs	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	ea42 0103 	orr.w	r1, r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	1e5a      	subs	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2201      	movs	r2, #1
 800139c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013c4:	7cfb      	ldrb	r3, [r7, #19]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d003      	beq.n	80013d2 <HAL_CAN_ConfigFilter+0x26>
 80013ca:	7cfb      	ldrb	r3, [r7, #19]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	f040 80be 	bne.w	800154e <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80013d2:	4b65      	ldr	r3, [pc, #404]	@ (8001568 <HAL_CAN_ConfigFilter+0x1bc>)
 80013d4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013dc:	f043 0201 	orr.w	r2, r3, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013ec:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	431a      	orrs	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f003 031f 	and.w	r3, r3, #31
 8001412:	2201      	movs	r2, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43db      	mvns	r3, r3
 8001424:	401a      	ands	r2, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d123      	bne.n	800147c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	43db      	mvns	r3, r3
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001456:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	3248      	adds	r2, #72	@ 0x48
 800145c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001470:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001472:	6979      	ldr	r1, [r7, #20]
 8001474:	3348      	adds	r3, #72	@ 0x48
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d122      	bne.n	80014ca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	431a      	orrs	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3248      	adds	r2, #72	@ 0x48
 80014aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014c0:	6979      	ldr	r1, [r7, #20]
 80014c2:	3348      	adds	r3, #72	@ 0x48
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	440b      	add	r3, r1
 80014c8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d109      	bne.n	80014e6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	43db      	mvns	r3, r3
 80014dc:	401a      	ands	r2, r3
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80014e4:	e007      	b.n	80014f6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	431a      	orrs	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d109      	bne.n	8001512 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	43db      	mvns	r3, r3
 8001508:	401a      	ands	r2, r3
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001510:	e007      	b.n	8001522 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	431a      	orrs	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d107      	bne.n	800153a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	431a      	orrs	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001540:	f023 0201 	bic.w	r2, r3, #1
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800154a:	2300      	movs	r3, #0
 800154c:	e006      	b.n	800155c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001552:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
  }
}
 800155c:	4618      	mov	r0, r3
 800155e:	371c      	adds	r7, #28
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	40006400 	.word	0x40006400

0800156c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3020 	ldrb.w	r3, [r3, #32]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b01      	cmp	r3, #1
 800157e:	d12e      	bne.n	80015de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2202      	movs	r2, #2
 8001584:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0201 	bic.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001598:	f7ff fddc 	bl	8001154 <HAL_GetTick>
 800159c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800159e:	e012      	b.n	80015c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015a0:	f7ff fdd8 	bl	8001154 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b0a      	cmp	r3, #10
 80015ac:	d90b      	bls.n	80015c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2205      	movs	r2, #5
 80015be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e012      	b.n	80015ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1e5      	bne.n	80015a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e006      	b.n	80015ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015e2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
  }
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001608:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d003      	beq.n	8001618 <HAL_CAN_GetRxMessage+0x24>
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	2b02      	cmp	r3, #2
 8001614:	f040 8103 	bne.w	800181e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10e      	bne.n	800163c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d116      	bne.n	800165a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001630:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0f7      	b.n	800182c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d107      	bne.n	800165a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e0e8      	b.n	800182c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	331b      	adds	r3, #27
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	4413      	add	r3, r2
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0204 	and.w	r2, r3, #4
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10c      	bne.n	8001692 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	331b      	adds	r3, #27
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	4413      	add	r3, r2
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	0d5b      	lsrs	r3, r3, #21
 8001688:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	e00b      	b.n	80016aa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	331b      	adds	r3, #27
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	4413      	add	r3, r2
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	08db      	lsrs	r3, r3, #3
 80016a2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	331b      	adds	r3, #27
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	4413      	add	r3, r2
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0202 	and.w	r2, r3, #2
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	331b      	adds	r3, #27
 80016c8:	011b      	lsls	r3, r3, #4
 80016ca:	4413      	add	r3, r2
 80016cc:	3304      	adds	r3, #4
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2208      	movs	r2, #8
 80016dc:	611a      	str	r2, [r3, #16]
 80016de:	e00b      	b.n	80016f8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	331b      	adds	r3, #27
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	4413      	add	r3, r2
 80016ec:	3304      	adds	r3, #4
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 020f 	and.w	r2, r3, #15
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	331b      	adds	r3, #27
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	4413      	add	r3, r2
 8001704:	3304      	adds	r3, #4
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	b2da      	uxtb	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	331b      	adds	r3, #27
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	4413      	add	r3, r2
 800171c:	3304      	adds	r3, #4
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	0c1b      	lsrs	r3, r3, #16
 8001722:	b29a      	uxth	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	4413      	add	r3, r2
 8001732:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	4413      	add	r3, r2
 8001748:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	0a1a      	lsrs	r2, r3, #8
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	3301      	adds	r3, #1
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	4413      	add	r3, r2
 8001762:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	0c1a      	lsrs	r2, r3, #16
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	3302      	adds	r3, #2
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	4413      	add	r3, r2
 800177c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	0e1a      	lsrs	r2, r3, #24
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	3303      	adds	r3, #3
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	4413      	add	r3, r2
 8001796:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	3304      	adds	r3, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	4413      	add	r3, r2
 80017ae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0a1a      	lsrs	r2, r3, #8
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	3305      	adds	r3, #5
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	0c1a      	lsrs	r2, r3, #16
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	3306      	adds	r3, #6
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	4413      	add	r3, r2
 80017e2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0e1a      	lsrs	r2, r3, #24
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	3307      	adds	r3, #7
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d108      	bne.n	800180a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0220 	orr.w	r2, r2, #32
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	e007      	b.n	800181a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	691a      	ldr	r2, [r3, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f042 0220 	orr.w	r2, r2, #32
 8001818:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800181a:	2300      	movs	r3, #0
 800181c:	e006      	b.n	800182c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001822:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
  }
}
 800182c:	4618      	mov	r0, r3
 800182e:	371c      	adds	r7, #28
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001848:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d002      	beq.n	8001856 <HAL_CAN_ActivateNotification+0x1e>
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d109      	bne.n	800186a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6959      	ldr	r1, [r3, #20]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	e006      	b.n	8001878 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
  }
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	@ 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800188c:	2300      	movs	r3, #0
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d07c      	beq.n	80019c4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d023      	beq.n	800191c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2201      	movs	r2, #1
 80018da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f000 f983 	bl	8001bf2 <HAL_CAN_TxMailbox0CompleteCallback>
 80018ec:	e016      	b.n	800191c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d004      	beq.n	8001902 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001900:	e00c      	b.n	800191c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	2b00      	cmp	r3, #0
 800190a:	d004      	beq.n	8001916 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
 8001914:	e002      	b.n	800191c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f989 	bl	8001c2e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d024      	beq.n	8001970 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800192e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f963 	bl	8001c06 <HAL_CAN_TxMailbox1CompleteCallback>
 8001940:	e016      	b.n	8001970 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800194c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
 8001954:	e00c      	b.n	8001970 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001962:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
 8001968:	e002      	b.n	8001970 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f969 	bl	8001c42 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d024      	beq.n	80019c4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001982:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f943 	bl	8001c1a <HAL_CAN_TxMailbox2CompleteCallback>
 8001994:	e016      	b.n	80019c4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d004      	beq.n	80019aa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a8:	e00c      	b.n	80019c4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d004      	beq.n	80019be <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80019bc:	e002      	b.n	80019c4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f949 	bl	8001c56 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00c      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d007      	beq.n	80019e8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2210      	movs	r2, #16
 80019e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00b      	beq.n	8001a0a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2208      	movs	r2, #8
 8001a02:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f930 	bl	8001c6a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d009      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d002      	beq.n	8001a28 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7fe fbf0 	bl	8000208 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00c      	beq.n	8001a4c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	f003 0310 	and.w	r3, r3, #16
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d007      	beq.n	8001a4c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a42:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2210      	movs	r2, #16
 8001a4a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	f003 0320 	and.w	r3, r3, #32
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00b      	beq.n	8001a6e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2208      	movs	r2, #8
 8001a66:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f912 	bl	8001c92 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	f003 0310 	and.w	r3, r3, #16
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d009      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d002      	beq.n	8001a8c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f8f9 	bl	8001c7e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00b      	beq.n	8001aae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2210      	movs	r2, #16
 8001aa6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f8fc 	bl	8001ca6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00b      	beq.n	8001ad0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d006      	beq.n	8001ad0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f8f5 	bl	8001cba <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d07b      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d072      	beq.n	8001bca <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d008      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b00:	6a3b      	ldr	r3, [r7, #32]
 8001b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d008      	beq.n	8001b1c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b16:	f043 0302 	orr.w	r3, r3, #2
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d008      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d043      	beq.n	8001bca <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d03e      	beq.n	8001bca <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b52:	2b60      	cmp	r3, #96	@ 0x60
 8001b54:	d02b      	beq.n	8001bae <HAL_CAN_IRQHandler+0x32a>
 8001b56:	2b60      	cmp	r3, #96	@ 0x60
 8001b58:	d82e      	bhi.n	8001bb8 <HAL_CAN_IRQHandler+0x334>
 8001b5a:	2b50      	cmp	r3, #80	@ 0x50
 8001b5c:	d022      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x320>
 8001b5e:	2b50      	cmp	r3, #80	@ 0x50
 8001b60:	d82a      	bhi.n	8001bb8 <HAL_CAN_IRQHandler+0x334>
 8001b62:	2b40      	cmp	r3, #64	@ 0x40
 8001b64:	d019      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x316>
 8001b66:	2b40      	cmp	r3, #64	@ 0x40
 8001b68:	d826      	bhi.n	8001bb8 <HAL_CAN_IRQHandler+0x334>
 8001b6a:	2b30      	cmp	r3, #48	@ 0x30
 8001b6c:	d010      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x30c>
 8001b6e:	2b30      	cmp	r3, #48	@ 0x30
 8001b70:	d822      	bhi.n	8001bb8 <HAL_CAN_IRQHandler+0x334>
 8001b72:	2b10      	cmp	r3, #16
 8001b74:	d002      	beq.n	8001b7c <HAL_CAN_IRQHandler+0x2f8>
 8001b76:	2b20      	cmp	r3, #32
 8001b78:	d005      	beq.n	8001b86 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b7a:	e01d      	b.n	8001bb8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7e:	f043 0308 	orr.w	r3, r3, #8
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b84:	e019      	b.n	8001bba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	f043 0310 	orr.w	r3, r3, #16
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b8e:	e014      	b.n	8001bba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	f043 0320 	orr.w	r3, r3, #32
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b98:	e00f      	b.n	8001bba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ba2:	e00a      	b.n	8001bba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bac:	e005      	b.n	8001bba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001bb6:	e000      	b.n	8001bba <HAL_CAN_IRQHandler+0x336>
            break;
 8001bb8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699a      	ldr	r2, [r3, #24]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001bc8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2204      	movs	r2, #4
 8001bd0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f872 	bl	8001cce <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001bea:	bf00      	nop
 8001bec:	3728      	adds	r7, #40	@ 0x28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d16:	4a04      	ldr	r2, [pc, #16]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	60d3      	str	r3, [r2, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d30:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <__NVIC_GetPriorityGrouping+0x18>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0307 	and.w	r3, r3, #7
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	db0b      	blt.n	8001d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	4907      	ldr	r1, [pc, #28]	@ (8001d80 <__NVIC_EnableIRQ+0x38>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2001      	movs	r0, #1
 8001d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	@ (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	@ (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	@ 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	@ 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7ff ff4c 	bl	8001ce4 <__NVIC_SetPriorityGrouping>
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e66:	f7ff ff61 	bl	8001d2c <__NVIC_GetPriorityGrouping>
 8001e6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	6978      	ldr	r0, [r7, #20]
 8001e72:	f7ff ffb1 	bl	8001dd8 <NVIC_EncodePriority>
 8001e76:	4602      	mov	r2, r0
 8001e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff80 	bl	8001d84 <__NVIC_SetPriority>
}
 8001e84:	bf00      	nop
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff54 	bl	8001d48 <__NVIC_EnableIRQ>
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e014      	b.n	8001ee4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	791b      	ldrb	r3, [r3, #4]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d105      	bne.n	8001ed0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe ff76 	bl	8000dbc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	795b      	ldrb	r3, [r3, #5]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d101      	bne.n	8001f02 <HAL_DAC_Start+0x16>
 8001efe:	2302      	movs	r3, #2
 8001f00:	e03b      	b.n	8001f7a <HAL_DAC_Start+0x8e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6819      	ldr	r1, [r3, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	409a      	lsls	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d10f      	bne.n	8001f4c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d118      	bne.n	8001f6c <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	e00f      	b.n	8001f6c <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001f56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001f5a:	d107      	bne.n	8001f6c <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0202 	orr.w	r2, r2, #2
 8001f6a:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f9c:	d120      	bne.n	8001fe0 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fac:	d118      	bne.n	8001fe0 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f043 0201 	orr.w	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fc8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001fd8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f852 	bl	8002084 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fee:	d120      	bne.n	8002032 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ffe:	d118      	bne.n	8002032 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2204      	movs	r2, #4
 8002004:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f043 0202 	orr.w	r2, r3, #2
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800201a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800202a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f95a 	bl	80022e6 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800203a:	b480      	push	{r7}
 800203c:	b087      	sub	sp, #28
 800203e:	af00      	add	r7, sp, #0
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d105      	bne.n	8002064 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	3308      	adds	r3, #8
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	e004      	b.n	800206e <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	3314      	adds	r3, #20
 800206c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	461a      	mov	r2, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	371c      	adds	r7, #28
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	795b      	ldrb	r3, [r3, #5]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_DAC_ConfigChannel+0x1c>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e114      	b.n	80022de <HAL_DAC_ConfigChannel+0x246>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2202      	movs	r2, #2
 80020be:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	f040 8081 	bne.w	80021cc <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80020ca:	f7ff f843 	bl	8001154 <HAL_GetTick>
 80020ce:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d140      	bne.n	8002158 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80020d6:	e018      	b.n	800210a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80020d8:	f7ff f83c 	bl	8001154 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d911      	bls.n	800210a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f043 0208 	orr.w	r2, r3, #8
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2203      	movs	r2, #3
 8002104:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e0e9      	b.n	80022de <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002110:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1df      	bne.n	80020d8 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002118:	2001      	movs	r0, #1
 800211a:	f7ff f827 	bl	800116c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	6992      	ldr	r2, [r2, #24]
 8002126:	641a      	str	r2, [r3, #64]	@ 0x40
 8002128:	e023      	b.n	8002172 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800212a:	f7ff f813 	bl	8001154 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d90f      	bls.n	8002158 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800213e:	2b00      	cmp	r3, #0
 8002140:	da0a      	bge.n	8002158 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f043 0208 	orr.w	r2, r3, #8
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2203      	movs	r2, #3
 8002152:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e0c2      	b.n	80022de <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800215e:	2b00      	cmp	r3, #0
 8002160:	dbe3      	blt.n	800212a <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002162:	2001      	movs	r0, #1
 8002164:	f7ff f802 	bl	800116c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	6992      	ldr	r2, [r2, #24]
 8002170:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	ea02 0103 	and.w	r1, r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	21ff      	movs	r1, #255	@ 0xff
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	ea02 0103 	and.w	r1, r2, r3
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	6a1a      	ldr	r2, [r3, #32]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	409a      	lsls	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d11d      	bne.n	8002210 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021da:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	221f      	movs	r2, #31
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002216:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2207      	movs	r2, #7
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	431a      	orrs	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6819      	ldr	r1, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43da      	mvns	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	400a      	ands	r2, r1
 8002274:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f003 0310 	and.w	r3, r3, #16
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6819      	ldr	r1, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	22c0      	movs	r2, #192	@ 0xc0
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	400a      	ands	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230a:	e166      	b.n	80025da <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2101      	movs	r1, #1
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	4013      	ands	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 8158 	beq.w	80025d4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	2b01      	cmp	r3, #1
 800232e:	d005      	beq.n	800233c <HAL_GPIO_Init+0x40>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d130      	bne.n	800239e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002372:	2201      	movs	r2, #1
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	f003 0201 	and.w	r2, r3, #1
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d017      	beq.n	80023da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	2203      	movs	r2, #3
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d123      	bne.n	800242e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	08da      	lsrs	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3208      	adds	r2, #8
 80023ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	220f      	movs	r2, #15
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	08da      	lsrs	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3208      	adds	r2, #8
 8002428:	6939      	ldr	r1, [r7, #16]
 800242a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	2203      	movs	r2, #3
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0203 	and.w	r2, r3, #3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80b2 	beq.w	80025d4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002470:	4b61      	ldr	r3, [pc, #388]	@ (80025f8 <HAL_GPIO_Init+0x2fc>)
 8002472:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002474:	4a60      	ldr	r2, [pc, #384]	@ (80025f8 <HAL_GPIO_Init+0x2fc>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6613      	str	r3, [r2, #96]	@ 0x60
 800247c:	4b5e      	ldr	r3, [pc, #376]	@ (80025f8 <HAL_GPIO_Init+0x2fc>)
 800247e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002488:	4a5c      	ldr	r2, [pc, #368]	@ (80025fc <HAL_GPIO_Init+0x300>)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	089b      	lsrs	r3, r3, #2
 800248e:	3302      	adds	r3, #2
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	220f      	movs	r2, #15
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024b2:	d02b      	beq.n	800250c <HAL_GPIO_Init+0x210>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a52      	ldr	r2, [pc, #328]	@ (8002600 <HAL_GPIO_Init+0x304>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d025      	beq.n	8002508 <HAL_GPIO_Init+0x20c>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a51      	ldr	r2, [pc, #324]	@ (8002604 <HAL_GPIO_Init+0x308>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d01f      	beq.n	8002504 <HAL_GPIO_Init+0x208>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a50      	ldr	r2, [pc, #320]	@ (8002608 <HAL_GPIO_Init+0x30c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d019      	beq.n	8002500 <HAL_GPIO_Init+0x204>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a4f      	ldr	r2, [pc, #316]	@ (800260c <HAL_GPIO_Init+0x310>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d013      	beq.n	80024fc <HAL_GPIO_Init+0x200>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a4e      	ldr	r2, [pc, #312]	@ (8002610 <HAL_GPIO_Init+0x314>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d00d      	beq.n	80024f8 <HAL_GPIO_Init+0x1fc>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a4d      	ldr	r2, [pc, #308]	@ (8002614 <HAL_GPIO_Init+0x318>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d007      	beq.n	80024f4 <HAL_GPIO_Init+0x1f8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a4c      	ldr	r2, [pc, #304]	@ (8002618 <HAL_GPIO_Init+0x31c>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d101      	bne.n	80024f0 <HAL_GPIO_Init+0x1f4>
 80024ec:	2307      	movs	r3, #7
 80024ee:	e00e      	b.n	800250e <HAL_GPIO_Init+0x212>
 80024f0:	2308      	movs	r3, #8
 80024f2:	e00c      	b.n	800250e <HAL_GPIO_Init+0x212>
 80024f4:	2306      	movs	r3, #6
 80024f6:	e00a      	b.n	800250e <HAL_GPIO_Init+0x212>
 80024f8:	2305      	movs	r3, #5
 80024fa:	e008      	b.n	800250e <HAL_GPIO_Init+0x212>
 80024fc:	2304      	movs	r3, #4
 80024fe:	e006      	b.n	800250e <HAL_GPIO_Init+0x212>
 8002500:	2303      	movs	r3, #3
 8002502:	e004      	b.n	800250e <HAL_GPIO_Init+0x212>
 8002504:	2302      	movs	r3, #2
 8002506:	e002      	b.n	800250e <HAL_GPIO_Init+0x212>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <HAL_GPIO_Init+0x212>
 800250c:	2300      	movs	r3, #0
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	f002 0203 	and.w	r2, r2, #3
 8002514:	0092      	lsls	r2, r2, #2
 8002516:	4093      	lsls	r3, r2
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800251e:	4937      	ldr	r1, [pc, #220]	@ (80025fc <HAL_GPIO_Init+0x300>)
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	089b      	lsrs	r3, r3, #2
 8002524:	3302      	adds	r3, #2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800252c:	4b3b      	ldr	r3, [pc, #236]	@ (800261c <HAL_GPIO_Init+0x320>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002550:	4a32      	ldr	r2, [pc, #200]	@ (800261c <HAL_GPIO_Init+0x320>)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002556:	4b31      	ldr	r3, [pc, #196]	@ (800261c <HAL_GPIO_Init+0x320>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	43db      	mvns	r3, r3
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800257a:	4a28      	ldr	r2, [pc, #160]	@ (800261c <HAL_GPIO_Init+0x320>)
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002580:	4b26      	ldr	r3, [pc, #152]	@ (800261c <HAL_GPIO_Init+0x320>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	43db      	mvns	r3, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025a4:	4a1d      	ldr	r2, [pc, #116]	@ (800261c <HAL_GPIO_Init+0x320>)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80025aa:	4b1c      	ldr	r3, [pc, #112]	@ (800261c <HAL_GPIO_Init+0x320>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4013      	ands	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025ce:	4a13      	ldr	r2, [pc, #76]	@ (800261c <HAL_GPIO_Init+0x320>)
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	3301      	adds	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f47f ae91 	bne.w	800230c <HAL_GPIO_Init+0x10>
  }
}
 80025ea:	bf00      	nop
 80025ec:	bf00      	nop
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40010000 	.word	0x40010000
 8002600:	48000400 	.word	0x48000400
 8002604:	48000800 	.word	0x48000800
 8002608:	48000c00 	.word	0x48000c00
 800260c:	48001000 	.word	0x48001000
 8002610:	48001400 	.word	0x48001400
 8002614:	48001800 	.word	0x48001800
 8002618:	48001c00 	.word	0x48001c00
 800261c:	40010400 	.word	0x40010400

08002620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800263c:	e002      	b.n	8002644 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4013      	ands	r3, r2
 8002668:	041a      	lsls	r2, r3, #16
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	43d9      	mvns	r1, r3
 800266e:	887b      	ldrh	r3, [r7, #2]
 8002670:	400b      	ands	r3, r1
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	619a      	str	r2, [r3, #24]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800268e:	4b08      	ldr	r3, [pc, #32]	@ (80026b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d006      	beq.n	80026a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800269a:	4a05      	ldr	r2, [pc, #20]	@ (80026b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd fda4 	bl	80001f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40010400 	.word	0x40010400

080026b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e08d      	b.n	80027e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe fbb4 	bl	8000e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2224      	movs	r2, #36	@ 0x24
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002704:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002714:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	e006      	b.n	800273c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800273a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d108      	bne.n	8002756 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	e007      	b.n	8002766 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002764:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002778:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002788:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69d9      	ldr	r1, [r3, #28]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1a      	ldr	r2, [r3, #32]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d138      	bne.n	8002872 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800280a:	2302      	movs	r3, #2
 800280c:	e032      	b.n	8002874 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2224      	movs	r2, #36	@ 0x24
 800281a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0201 	bic.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800283c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0201 	orr.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002872:	2302      	movs	r3, #2
  }
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b20      	cmp	r3, #32
 8002894:	d139      	bne.n	800290a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e033      	b.n	800290c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2224      	movs	r2, #36	@ 0x24
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0201 	orr.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800290a:	2302      	movs	r3, #2
  }
}
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800291c:	4b04      	ldr	r3, [pc, #16]	@ (8002930 <HAL_PWREx_GetVoltageRange+0x18>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002924:	4618      	mov	r0, r3
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40007000 	.word	0x40007000

08002934 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002942:	d130      	bne.n	80029a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002944:	4b23      	ldr	r3, [pc, #140]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800294c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002950:	d038      	beq.n	80029c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002952:	4b20      	ldr	r3, [pc, #128]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800295a:	4a1e      	ldr	r2, [pc, #120]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800295c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002960:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002962:	4b1d      	ldr	r3, [pc, #116]	@ (80029d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2232      	movs	r2, #50	@ 0x32
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	4a1b      	ldr	r2, [pc, #108]	@ (80029dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800296e:	fba2 2303 	umull	r2, r3, r2, r3
 8002972:	0c9b      	lsrs	r3, r3, #18
 8002974:	3301      	adds	r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002978:	e002      	b.n	8002980 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	3b01      	subs	r3, #1
 800297e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002980:	4b14      	ldr	r3, [pc, #80]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800298c:	d102      	bne.n	8002994 <HAL_PWREx_ControlVoltageScaling+0x60>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1f2      	bne.n	800297a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002994:	4b0f      	ldr	r3, [pc, #60]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800299c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029a0:	d110      	bne.n	80029c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e00f      	b.n	80029c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029a6:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029b2:	d007      	beq.n	80029c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029b4:	4b07      	ldr	r3, [pc, #28]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029bc:	4a05      	ldr	r2, [pc, #20]	@ (80029d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	40007000 	.word	0x40007000
 80029d8:	20000000 	.word	0x20000000
 80029dc:	431bde83 	.word	0x431bde83

080029e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d102      	bne.n	80029f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f000 bc08 	b.w	8003204 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029f4:	4b96      	ldr	r3, [pc, #600]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029fe:	4b94      	ldr	r3, [pc, #592]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80e4 	beq.w	8002bde <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d007      	beq.n	8002a2c <HAL_RCC_OscConfig+0x4c>
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	f040 808b 	bne.w	8002b3a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	f040 8087 	bne.w	8002b3a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a2c:	4b88      	ldr	r3, [pc, #544]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_OscConfig+0x64>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e3df      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1a      	ldr	r2, [r3, #32]
 8002a48:	4b81      	ldr	r3, [pc, #516]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d004      	beq.n	8002a5e <HAL_RCC_OscConfig+0x7e>
 8002a54:	4b7e      	ldr	r3, [pc, #504]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a5c:	e005      	b.n	8002a6a <HAL_RCC_OscConfig+0x8a>
 8002a5e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a64:	091b      	lsrs	r3, r3, #4
 8002a66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d223      	bcs.n	8002ab6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fdae 	bl	80035d4 <RCC_SetFlashLatencyFromMSIRange>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e3c0      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a82:	4b73      	ldr	r3, [pc, #460]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a72      	ldr	r2, [pc, #456]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a88:	f043 0308 	orr.w	r3, r3, #8
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b70      	ldr	r3, [pc, #448]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	496d      	ldr	r1, [pc, #436]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa0:	4b6b      	ldr	r3, [pc, #428]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	4968      	ldr	r1, [pc, #416]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]
 8002ab4:	e025      	b.n	8002b02 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ab6:	4b66      	ldr	r3, [pc, #408]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a65      	ldr	r2, [pc, #404]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002abc:	f043 0308 	orr.w	r3, r3, #8
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b63      	ldr	r3, [pc, #396]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	4960      	ldr	r1, [pc, #384]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	495b      	ldr	r1, [pc, #364]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fd6e 	bl	80035d4 <RCC_SetFlashLatencyFromMSIRange>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e380      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b02:	f000 fc87 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 8002b06:	4602      	mov	r2, r0
 8002b08:	4b51      	ldr	r3, [pc, #324]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	4950      	ldr	r1, [pc, #320]	@ (8002c54 <HAL_RCC_OscConfig+0x274>)
 8002b14:	5ccb      	ldrb	r3, [r1, r3]
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1e:	4a4e      	ldr	r2, [pc, #312]	@ (8002c58 <HAL_RCC_OscConfig+0x278>)
 8002b20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b22:	4b4e      	ldr	r3, [pc, #312]	@ (8002c5c <HAL_RCC_OscConfig+0x27c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe f9ec 	bl	8000f04 <HAL_InitTick>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d052      	beq.n	8002bdc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	e364      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d032      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b42:	4b43      	ldr	r3, [pc, #268]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a42      	ldr	r2, [pc, #264]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b4e:	f7fe fb01 	bl	8001154 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b56:	f7fe fafd 	bl	8001154 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e34d      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b68:	4b39      	ldr	r3, [pc, #228]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b74:	4b36      	ldr	r3, [pc, #216]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a35      	ldr	r2, [pc, #212]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b7a:	f043 0308 	orr.w	r3, r3, #8
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b33      	ldr	r3, [pc, #204]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	4930      	ldr	r1, [pc, #192]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b92:	4b2f      	ldr	r3, [pc, #188]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	492b      	ldr	r1, [pc, #172]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	604b      	str	r3, [r1, #4]
 8002ba6:	e01a      	b.n	8002bde <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ba8:	4b29      	ldr	r3, [pc, #164]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a28      	ldr	r2, [pc, #160]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002bae:	f023 0301 	bic.w	r3, r3, #1
 8002bb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe face 	bl	8001154 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bbc:	f7fe faca 	bl	8001154 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e31a      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bce:	4b20      	ldr	r3, [pc, #128]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x1dc>
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bdc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d073      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d005      	beq.n	8002bfc <HAL_RCC_OscConfig+0x21c>
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	2b0c      	cmp	r3, #12
 8002bf4:	d10e      	bne.n	8002c14 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d10b      	bne.n	8002c14 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	4b14      	ldr	r3, [pc, #80]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d063      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x2f0>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d15f      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e2f7      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c1c:	d106      	bne.n	8002c2c <HAL_RCC_OscConfig+0x24c>
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a0b      	ldr	r2, [pc, #44]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	e025      	b.n	8002c78 <HAL_RCC_OscConfig+0x298>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c34:	d114      	bne.n	8002c60 <HAL_RCC_OscConfig+0x280>
 8002c36:	4b06      	ldr	r3, [pc, #24]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a05      	ldr	r2, [pc, #20]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	4b03      	ldr	r3, [pc, #12]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a02      	ldr	r2, [pc, #8]	@ (8002c50 <HAL_RCC_OscConfig+0x270>)
 8002c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	e013      	b.n	8002c78 <HAL_RCC_OscConfig+0x298>
 8002c50:	40021000 	.word	0x40021000
 8002c54:	08007460 	.word	0x08007460
 8002c58:	20000000 	.word	0x20000000
 8002c5c:	20000004 	.word	0x20000004
 8002c60:	4ba0      	ldr	r3, [pc, #640]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a9f      	ldr	r2, [pc, #636]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b9d      	ldr	r3, [pc, #628]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a9c      	ldr	r2, [pc, #624]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c80:	f7fe fa68 	bl	8001154 <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7fe fa64 	bl	8001154 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	@ 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e2b4      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c9a:	4b92      	ldr	r3, [pc, #584]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0x2a8>
 8002ca6:	e014      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fe fa54 	bl	8001154 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7fe fa50 	bl	8001154 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	@ 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e2a0      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cc2:	4b88      	ldr	r3, [pc, #544]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x2d0>
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d060      	beq.n	8002da0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x310>
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	d119      	bne.n	8002d1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d116      	bne.n	8002d1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cf0:	4b7c      	ldr	r3, [pc, #496]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_OscConfig+0x328>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e27d      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d08:	4b76      	ldr	r3, [pc, #472]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	061b      	lsls	r3, r3, #24
 8002d16:	4973      	ldr	r1, [pc, #460]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d1c:	e040      	b.n	8002da0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d023      	beq.n	8002d6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d26:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6e      	ldr	r2, [pc, #440]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d32:	f7fe fa0f 	bl	8001154 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d3a:	f7fe fa0b 	bl	8001154 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e25b      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d4c:	4b65      	ldr	r3, [pc, #404]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b62      	ldr	r3, [pc, #392]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	061b      	lsls	r3, r3, #24
 8002d66:	495f      	ldr	r1, [pc, #380]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
 8002d6c:	e018      	b.n	8002da0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6e:	4b5d      	ldr	r3, [pc, #372]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a5c      	ldr	r2, [pc, #368]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7a:	f7fe f9eb 	bl	8001154 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d82:	f7fe f9e7 	bl	8001154 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e237      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d94:	4b53      	ldr	r3, [pc, #332]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f0      	bne.n	8002d82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d03c      	beq.n	8002e26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01c      	beq.n	8002dee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dba:	4a4a      	ldr	r2, [pc, #296]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc4:	f7fe f9c6 	bl	8001154 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dcc:	f7fe f9c2 	bl	8001154 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e212      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dde:	4b41      	ldr	r3, [pc, #260]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0ef      	beq.n	8002dcc <HAL_RCC_OscConfig+0x3ec>
 8002dec:	e01b      	b.n	8002e26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dee:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002df4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dfe:	f7fe f9a9 	bl	8001154 <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e06:	f7fe f9a5 	bl	8001154 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e1f5      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e18:	4b32      	ldr	r3, [pc, #200]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1ef      	bne.n	8002e06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 80a6 	beq.w	8002f80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e34:	2300      	movs	r3, #0
 8002e36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e38:	4b2a      	ldr	r3, [pc, #168]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10d      	bne.n	8002e60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e44:	4b27      	ldr	r3, [pc, #156]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e48:	4a26      	ldr	r2, [pc, #152]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e50:	4b24      	ldr	r3, [pc, #144]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e60:	4b21      	ldr	r3, [pc, #132]	@ (8002ee8 <HAL_RCC_OscConfig+0x508>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d118      	bne.n	8002e9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ee8 <HAL_RCC_OscConfig+0x508>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1d      	ldr	r2, [pc, #116]	@ (8002ee8 <HAL_RCC_OscConfig+0x508>)
 8002e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e78:	f7fe f96c 	bl	8001154 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e80:	f7fe f968 	bl	8001154 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e1b8      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e92:	4b15      	ldr	r3, [pc, #84]	@ (8002ee8 <HAL_RCC_OscConfig+0x508>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d108      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x4d8>
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eac:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002eb6:	e029      	b.n	8002f0c <HAL_RCC_OscConfig+0x52c>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d115      	bne.n	8002eec <HAL_RCC_OscConfig+0x50c>
 8002ec0:	4b08      	ldr	r3, [pc, #32]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ec6:	4a07      	ldr	r2, [pc, #28]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ed0:	4b04      	ldr	r3, [pc, #16]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed6:	4a03      	ldr	r2, [pc, #12]	@ (8002ee4 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ee0:	e014      	b.n	8002f0c <HAL_RCC_OscConfig+0x52c>
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40007000 	.word	0x40007000
 8002eec:	4b9d      	ldr	r3, [pc, #628]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef2:	4a9c      	ldr	r2, [pc, #624]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002efc:	4b99      	ldr	r3, [pc, #612]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f02:	4a98      	ldr	r2, [pc, #608]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8002f04:	f023 0304 	bic.w	r3, r3, #4
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d016      	beq.n	8002f42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7fe f91e 	bl	8001154 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fe f91a 	bl	8001154 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e168      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f32:	4b8c      	ldr	r3, [pc, #560]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0ed      	beq.n	8002f1c <HAL_RCC_OscConfig+0x53c>
 8002f40:	e015      	b.n	8002f6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f42:	f7fe f907 	bl	8001154 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7fe f903 	bl	8001154 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e151      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f60:	4b80      	ldr	r3, [pc, #512]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1ed      	bne.n	8002f4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f6e:	7ffb      	ldrb	r3, [r7, #31]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	4b7b      	ldr	r3, [pc, #492]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f78:	4a7a      	ldr	r2, [pc, #488]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8002f7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f7e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d03c      	beq.n	8003006 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01c      	beq.n	8002fce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f94:	4b73      	ldr	r3, [pc, #460]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8002f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002f9a:	4a72      	ldr	r2, [pc, #456]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7fe f8d6 	bl	8001154 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fac:	f7fe f8d2 	bl	8001154 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e122      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fbe:	4b69      	ldr	r3, [pc, #420]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8002fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0ef      	beq.n	8002fac <HAL_RCC_OscConfig+0x5cc>
 8002fcc:	e01b      	b.n	8003006 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fce:	4b65      	ldr	r3, [pc, #404]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8002fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fd4:	4a63      	ldr	r2, [pc, #396]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fde:	f7fe f8b9 	bl	8001154 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fe6:	f7fe f8b5 	bl	8001154 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e105      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8002ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1ef      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 80f9 	beq.w	8003202 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003014:	2b02      	cmp	r3, #2
 8003016:	f040 80cf 	bne.w	80031b8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800301a:	4b52      	ldr	r3, [pc, #328]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 0203 	and.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302a:	429a      	cmp	r2, r3
 800302c:	d12c      	bne.n	8003088 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003038:	3b01      	subs	r3, #1
 800303a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800303c:	429a      	cmp	r2, r3
 800303e:	d123      	bne.n	8003088 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d11b      	bne.n	8003088 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d113      	bne.n	8003088 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306a:	085b      	lsrs	r3, r3, #1
 800306c:	3b01      	subs	r3, #1
 800306e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003070:	429a      	cmp	r2, r3
 8003072:	d109      	bne.n	8003088 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	085b      	lsrs	r3, r3, #1
 8003080:	3b01      	subs	r3, #1
 8003082:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d071      	beq.n	800316c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b0c      	cmp	r3, #12
 800308c:	d068      	beq.n	8003160 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800308e:	4b35      	ldr	r3, [pc, #212]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d105      	bne.n	80030a6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800309a:	4b32      	ldr	r3, [pc, #200]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e0ac      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030aa:	4b2e      	ldr	r3, [pc, #184]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 80030b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030b6:	f7fe f84d 	bl	8001154 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030be:	f7fe f849 	bl	8001154 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e099      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d0:	4b24      	ldr	r3, [pc, #144]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1f0      	bne.n	80030be <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030dc:	4b21      	ldr	r3, [pc, #132]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	4b21      	ldr	r3, [pc, #132]	@ (8003168 <HAL_RCC_OscConfig+0x788>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80030ec:	3a01      	subs	r2, #1
 80030ee:	0112      	lsls	r2, r2, #4
 80030f0:	4311      	orrs	r1, r2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80030f6:	0212      	lsls	r2, r2, #8
 80030f8:	4311      	orrs	r1, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030fe:	0852      	lsrs	r2, r2, #1
 8003100:	3a01      	subs	r2, #1
 8003102:	0552      	lsls	r2, r2, #21
 8003104:	4311      	orrs	r1, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800310a:	0852      	lsrs	r2, r2, #1
 800310c:	3a01      	subs	r2, #1
 800310e:	0652      	lsls	r2, r2, #25
 8003110:	4311      	orrs	r1, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003116:	06d2      	lsls	r2, r2, #27
 8003118:	430a      	orrs	r2, r1
 800311a:	4912      	ldr	r1, [pc, #72]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 800311c:	4313      	orrs	r3, r2
 800311e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003120:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0f      	ldr	r2, [pc, #60]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8003126:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800312a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800312c:	4b0d      	ldr	r3, [pc, #52]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4a0c      	ldr	r2, [pc, #48]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8003132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003136:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003138:	f7fe f80c 	bl	8001154 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003140:	f7fe f808 	bl	8001154 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e058      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003152:	4b04      	ldr	r3, [pc, #16]	@ (8003164 <HAL_RCC_OscConfig+0x784>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0f0      	beq.n	8003140 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800315e:	e050      	b.n	8003202 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e04f      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
 8003164:	40021000 	.word	0x40021000
 8003168:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316c:	4b27      	ldr	r3, [pc, #156]	@ (800320c <HAL_RCC_OscConfig+0x82c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d144      	bne.n	8003202 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003178:	4b24      	ldr	r3, [pc, #144]	@ (800320c <HAL_RCC_OscConfig+0x82c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a23      	ldr	r2, [pc, #140]	@ (800320c <HAL_RCC_OscConfig+0x82c>)
 800317e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003182:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003184:	4b21      	ldr	r3, [pc, #132]	@ (800320c <HAL_RCC_OscConfig+0x82c>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4a20      	ldr	r2, [pc, #128]	@ (800320c <HAL_RCC_OscConfig+0x82c>)
 800318a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800318e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003190:	f7fd ffe0 	bl	8001154 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003198:	f7fd ffdc 	bl	8001154 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e02c      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031aa:	4b18      	ldr	r3, [pc, #96]	@ (800320c <HAL_RCC_OscConfig+0x82c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0x7b8>
 80031b6:	e024      	b.n	8003202 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2b0c      	cmp	r3, #12
 80031bc:	d01f      	beq.n	80031fe <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031be:	4b13      	ldr	r3, [pc, #76]	@ (800320c <HAL_RCC_OscConfig+0x82c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a12      	ldr	r2, [pc, #72]	@ (800320c <HAL_RCC_OscConfig+0x82c>)
 80031c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ca:	f7fd ffc3 	bl	8001154 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d2:	f7fd ffbf 	bl	8001154 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e00f      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e4:	4b09      	ldr	r3, [pc, #36]	@ (800320c <HAL_RCC_OscConfig+0x82c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031f0:	4b06      	ldr	r3, [pc, #24]	@ (800320c <HAL_RCC_OscConfig+0x82c>)
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	4905      	ldr	r1, [pc, #20]	@ (800320c <HAL_RCC_OscConfig+0x82c>)
 80031f6:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <HAL_RCC_OscConfig+0x830>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	60cb      	str	r3, [r1, #12]
 80031fc:	e001      	b.n	8003202 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	feeefffc 	.word	0xfeeefffc

08003214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0e7      	b.n	80033f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003228:	4b75      	ldr	r3, [pc, #468]	@ (8003400 <HAL_RCC_ClockConfig+0x1ec>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0307 	and.w	r3, r3, #7
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d910      	bls.n	8003258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003236:	4b72      	ldr	r3, [pc, #456]	@ (8003400 <HAL_RCC_ClockConfig+0x1ec>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 0207 	bic.w	r2, r3, #7
 800323e:	4970      	ldr	r1, [pc, #448]	@ (8003400 <HAL_RCC_ClockConfig+0x1ec>)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b6e      	ldr	r3, [pc, #440]	@ (8003400 <HAL_RCC_ClockConfig+0x1ec>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0cf      	b.n	80033f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d010      	beq.n	8003286 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	4b66      	ldr	r3, [pc, #408]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003270:	429a      	cmp	r2, r3
 8003272:	d908      	bls.n	8003286 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003274:	4b63      	ldr	r3, [pc, #396]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	4960      	ldr	r1, [pc, #384]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 8003282:	4313      	orrs	r3, r2
 8003284:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d04c      	beq.n	800332c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b03      	cmp	r3, #3
 8003298:	d107      	bne.n	80032aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800329a:	4b5a      	ldr	r3, [pc, #360]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d121      	bne.n	80032ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0a6      	b.n	80033f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d107      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b2:	4b54      	ldr	r3, [pc, #336]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d115      	bne.n	80032ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e09a      	b.n	80033f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d107      	bne.n	80032da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032ca:	4b4e      	ldr	r3, [pc, #312]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e08e      	b.n	80033f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032da:	4b4a      	ldr	r3, [pc, #296]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e086      	b.n	80033f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032ea:	4b46      	ldr	r3, [pc, #280]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f023 0203 	bic.w	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4943      	ldr	r1, [pc, #268]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032fc:	f7fd ff2a 	bl	8001154 <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003302:	e00a      	b.n	800331a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003304:	f7fd ff26 	bl	8001154 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003312:	4293      	cmp	r3, r2
 8003314:	d901      	bls.n	800331a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e06e      	b.n	80033f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	4b3a      	ldr	r3, [pc, #232]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 020c 	and.w	r2, r3, #12
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	429a      	cmp	r2, r3
 800332a:	d1eb      	bne.n	8003304 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d010      	beq.n	800335a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	4b31      	ldr	r3, [pc, #196]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003344:	429a      	cmp	r2, r3
 8003346:	d208      	bcs.n	800335a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003348:	4b2e      	ldr	r3, [pc, #184]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	492b      	ldr	r1, [pc, #172]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 8003356:	4313      	orrs	r3, r2
 8003358:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800335a:	4b29      	ldr	r3, [pc, #164]	@ (8003400 <HAL_RCC_ClockConfig+0x1ec>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d210      	bcs.n	800338a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003368:	4b25      	ldr	r3, [pc, #148]	@ (8003400 <HAL_RCC_ClockConfig+0x1ec>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 0207 	bic.w	r2, r3, #7
 8003370:	4923      	ldr	r1, [pc, #140]	@ (8003400 <HAL_RCC_ClockConfig+0x1ec>)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	4313      	orrs	r3, r2
 8003376:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003378:	4b21      	ldr	r3, [pc, #132]	@ (8003400 <HAL_RCC_ClockConfig+0x1ec>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d001      	beq.n	800338a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e036      	b.n	80033f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d008      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003396:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	4918      	ldr	r1, [pc, #96]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0308 	and.w	r3, r3, #8
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d009      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033b4:	4b13      	ldr	r3, [pc, #76]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4910      	ldr	r1, [pc, #64]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033c8:	f000 f824 	bl	8003414 <HAL_RCC_GetSysClockFreq>
 80033cc:	4602      	mov	r2, r0
 80033ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003404 <HAL_RCC_ClockConfig+0x1f0>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	091b      	lsrs	r3, r3, #4
 80033d4:	f003 030f 	and.w	r3, r3, #15
 80033d8:	490b      	ldr	r1, [pc, #44]	@ (8003408 <HAL_RCC_ClockConfig+0x1f4>)
 80033da:	5ccb      	ldrb	r3, [r1, r3]
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
 80033e4:	4a09      	ldr	r2, [pc, #36]	@ (800340c <HAL_RCC_ClockConfig+0x1f8>)
 80033e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033e8:	4b09      	ldr	r3, [pc, #36]	@ (8003410 <HAL_RCC_ClockConfig+0x1fc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fd fd89 	bl	8000f04 <HAL_InitTick>
 80033f2:	4603      	mov	r3, r0
 80033f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80033f6:	7afb      	ldrb	r3, [r7, #11]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40022000 	.word	0x40022000
 8003404:	40021000 	.word	0x40021000
 8003408:	08007460 	.word	0x08007460
 800340c:	20000000 	.word	0x20000000
 8003410:	20000004 	.word	0x20000004

08003414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	@ 0x24
 8003418:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
 800341e:	2300      	movs	r3, #0
 8003420:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003422:	4b3e      	ldr	r3, [pc, #248]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800342c:	4b3b      	ldr	r3, [pc, #236]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x34>
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2b0c      	cmp	r3, #12
 8003440:	d121      	bne.n	8003486 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d11e      	bne.n	8003486 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003448:	4b34      	ldr	r3, [pc, #208]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b00      	cmp	r3, #0
 8003452:	d107      	bne.n	8003464 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003454:	4b31      	ldr	r3, [pc, #196]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 8003456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800345a:	0a1b      	lsrs	r3, r3, #8
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	e005      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003464:	4b2d      	ldr	r3, [pc, #180]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003470:	4a2b      	ldr	r2, [pc, #172]	@ (8003520 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003478:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10d      	bne.n	800349c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003484:	e00a      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2b04      	cmp	r3, #4
 800348a:	d102      	bne.n	8003492 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800348c:	4b25      	ldr	r3, [pc, #148]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x110>)
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	e004      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	2b08      	cmp	r3, #8
 8003496:	d101      	bne.n	800349c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003498:	4b23      	ldr	r3, [pc, #140]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x114>)
 800349a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2b0c      	cmp	r3, #12
 80034a0:	d134      	bne.n	800350c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034a2:	4b1e      	ldr	r3, [pc, #120]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d003      	beq.n	80034ba <HAL_RCC_GetSysClockFreq+0xa6>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d003      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0xac>
 80034b8:	e005      	b.n	80034c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034ba:	4b1a      	ldr	r3, [pc, #104]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x110>)
 80034bc:	617b      	str	r3, [r7, #20]
      break;
 80034be:	e005      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034c0:	4b19      	ldr	r3, [pc, #100]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x114>)
 80034c2:	617b      	str	r3, [r7, #20]
      break;
 80034c4:	e002      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	617b      	str	r3, [r7, #20]
      break;
 80034ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034cc:	4b13      	ldr	r3, [pc, #76]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	3301      	adds	r3, #1
 80034d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034da:	4b10      	ldr	r3, [pc, #64]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	0a1b      	lsrs	r3, r3, #8
 80034e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	fb03 f202 	mul.w	r2, r3, r2
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034f2:	4b0a      	ldr	r3, [pc, #40]	@ (800351c <HAL_RCC_GetSysClockFreq+0x108>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	0e5b      	lsrs	r3, r3, #25
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	3301      	adds	r3, #1
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	fbb2 f3f3 	udiv	r3, r2, r3
 800350a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800350c:	69bb      	ldr	r3, [r7, #24]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3724      	adds	r7, #36	@ 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	08007478 	.word	0x08007478
 8003524:	00f42400 	.word	0x00f42400
 8003528:	007a1200 	.word	0x007a1200

0800352c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003530:	4b03      	ldr	r3, [pc, #12]	@ (8003540 <HAL_RCC_GetHCLKFreq+0x14>)
 8003532:	681b      	ldr	r3, [r3, #0]
}
 8003534:	4618      	mov	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20000000 	.word	0x20000000

08003544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003548:	f7ff fff0 	bl	800352c <HAL_RCC_GetHCLKFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	0a1b      	lsrs	r3, r3, #8
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	4904      	ldr	r1, [pc, #16]	@ (800356c <HAL_RCC_GetPCLK1Freq+0x28>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	08007470 	.word	0x08007470

08003570 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	220f      	movs	r2, #15
 800357e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003580:	4b12      	ldr	r3, [pc, #72]	@ (80035cc <HAL_RCC_GetClockConfig+0x5c>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0203 	and.w	r2, r3, #3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800358c:	4b0f      	ldr	r3, [pc, #60]	@ (80035cc <HAL_RCC_GetClockConfig+0x5c>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003598:	4b0c      	ldr	r3, [pc, #48]	@ (80035cc <HAL_RCC_GetClockConfig+0x5c>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80035a4:	4b09      	ldr	r3, [pc, #36]	@ (80035cc <HAL_RCC_GetClockConfig+0x5c>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	08db      	lsrs	r3, r3, #3
 80035aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80035b2:	4b07      	ldr	r3, [pc, #28]	@ (80035d0 <HAL_RCC_GetClockConfig+0x60>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0207 	and.w	r2, r3, #7
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	601a      	str	r2, [r3, #0]
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40022000 	.word	0x40022000

080035d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035dc:	2300      	movs	r3, #0
 80035de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035e0:	4b2a      	ldr	r3, [pc, #168]	@ (800368c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035ec:	f7ff f994 	bl	8002918 <HAL_PWREx_GetVoltageRange>
 80035f0:	6178      	str	r0, [r7, #20]
 80035f2:	e014      	b.n	800361e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035f4:	4b25      	ldr	r3, [pc, #148]	@ (800368c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f8:	4a24      	ldr	r2, [pc, #144]	@ (800368c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003600:	4b22      	ldr	r3, [pc, #136]	@ (800368c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800360c:	f7ff f984 	bl	8002918 <HAL_PWREx_GetVoltageRange>
 8003610:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003612:	4b1e      	ldr	r3, [pc, #120]	@ (800368c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003616:	4a1d      	ldr	r2, [pc, #116]	@ (800368c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003618:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800361c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003624:	d10b      	bne.n	800363e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b80      	cmp	r3, #128	@ 0x80
 800362a:	d919      	bls.n	8003660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003630:	d902      	bls.n	8003638 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003632:	2302      	movs	r3, #2
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	e013      	b.n	8003660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003638:	2301      	movs	r3, #1
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	e010      	b.n	8003660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b80      	cmp	r3, #128	@ 0x80
 8003642:	d902      	bls.n	800364a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003644:	2303      	movs	r3, #3
 8003646:	613b      	str	r3, [r7, #16]
 8003648:	e00a      	b.n	8003660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b80      	cmp	r3, #128	@ 0x80
 800364e:	d102      	bne.n	8003656 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003650:	2302      	movs	r3, #2
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	e004      	b.n	8003660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b70      	cmp	r3, #112	@ 0x70
 800365a:	d101      	bne.n	8003660 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800365c:	2301      	movs	r3, #1
 800365e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003660:	4b0b      	ldr	r3, [pc, #44]	@ (8003690 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f023 0207 	bic.w	r2, r3, #7
 8003668:	4909      	ldr	r1, [pc, #36]	@ (8003690 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003670:	4b07      	ldr	r3, [pc, #28]	@ (8003690 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	429a      	cmp	r2, r3
 800367c:	d001      	beq.n	8003682 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000
 8003690:	40022000 	.word	0x40022000

08003694 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800369c:	2300      	movs	r3, #0
 800369e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036a0:	2300      	movs	r3, #0
 80036a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d041      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80036b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036b8:	d02a      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036be:	d824      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036c4:	d008      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036ca:	d81e      	bhi.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036d4:	d010      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036d6:	e018      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036d8:	4b86      	ldr	r3, [pc, #536]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a85      	ldr	r2, [pc, #532]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036e4:	e015      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2100      	movs	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 facd 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 80036f2:	4603      	mov	r3, r0
 80036f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036f6:	e00c      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3320      	adds	r3, #32
 80036fc:	2100      	movs	r1, #0
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fbb6 	bl	8003e70 <RCCEx_PLLSAI2_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003708:	e003      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	74fb      	strb	r3, [r7, #19]
      break;
 800370e:	e000      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10b      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003718:	4b76      	ldr	r3, [pc, #472]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800371e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003726:	4973      	ldr	r1, [pc, #460]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800372e:	e001      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d041      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003744:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003748:	d02a      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800374a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800374e:	d824      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003750:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003754:	d008      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003756:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800375a:	d81e      	bhi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003760:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003764:	d010      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003766:	e018      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003768:	4b62      	ldr	r3, [pc, #392]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a61      	ldr	r2, [pc, #388]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003772:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003774:	e015      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3304      	adds	r3, #4
 800377a:	2100      	movs	r1, #0
 800377c:	4618      	mov	r0, r3
 800377e:	f000 fa85 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003786:	e00c      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3320      	adds	r3, #32
 800378c:	2100      	movs	r1, #0
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fb6e 	bl	8003e70 <RCCEx_PLLSAI2_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003798:	e003      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	74fb      	strb	r3, [r7, #19]
      break;
 800379e:	e000      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037a2:	7cfb      	ldrb	r3, [r7, #19]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10b      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037a8:	4b52      	ldr	r3, [pc, #328]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037b6:	494f      	ldr	r1, [pc, #316]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80037be:	e001      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80a0 	beq.w	8003912 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d2:	2300      	movs	r3, #0
 80037d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037d6:	4b47      	ldr	r3, [pc, #284]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037e6:	2300      	movs	r3, #0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00d      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ec:	4b41      	ldr	r3, [pc, #260]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f0:	4a40      	ldr	r2, [pc, #256]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80037f8:	4b3e      	ldr	r3, [pc, #248]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003804:	2301      	movs	r3, #1
 8003806:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003808:	4b3b      	ldr	r3, [pc, #236]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a3a      	ldr	r2, [pc, #232]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800380e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003812:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003814:	f7fd fc9e 	bl	8001154 <HAL_GetTick>
 8003818:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800381a:	e009      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800381c:	f7fd fc9a 	bl	8001154 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d902      	bls.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	74fb      	strb	r3, [r7, #19]
        break;
 800382e:	e005      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003830:	4b31      	ldr	r3, [pc, #196]	@ (80038f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0ef      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800383c:	7cfb      	ldrb	r3, [r7, #19]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d15c      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003842:	4b2c      	ldr	r3, [pc, #176]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003848:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800384c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01f      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	429a      	cmp	r2, r3
 800385e:	d019      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003860:	4b24      	ldr	r3, [pc, #144]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003866:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800386a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800386c:	4b21      	ldr	r3, [pc, #132]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003872:	4a20      	ldr	r2, [pc, #128]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800387c:	4b1d      	ldr	r3, [pc, #116]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003882:	4a1c      	ldr	r2, [pc, #112]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003888:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800388c:	4a19      	ldr	r2, [pc, #100]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d016      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389e:	f7fd fc59 	bl	8001154 <HAL_GetTick>
 80038a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a4:	e00b      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fd fc55 	bl	8001154 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d902      	bls.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	74fb      	strb	r3, [r7, #19]
            break;
 80038bc:	e006      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038be:	4b0d      	ldr	r3, [pc, #52]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0ec      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10c      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038d2:	4b08      	ldr	r3, [pc, #32]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e2:	4904      	ldr	r1, [pc, #16]	@ (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038ea:	e009      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038ec:	7cfb      	ldrb	r3, [r7, #19]
 80038ee:	74bb      	strb	r3, [r7, #18]
 80038f0:	e006      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80038f2:	bf00      	nop
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fc:	7cfb      	ldrb	r3, [r7, #19]
 80038fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003900:	7c7b      	ldrb	r3, [r7, #17]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d105      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003906:	4ba6      	ldr	r3, [pc, #664]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390a:	4aa5      	ldr	r2, [pc, #660]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800390c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003910:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800391e:	4ba0      	ldr	r3, [pc, #640]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003924:	f023 0203 	bic.w	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392c:	499c      	ldr	r1, [pc, #624]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003940:	4b97      	ldr	r3, [pc, #604]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003946:	f023 020c 	bic.w	r2, r3, #12
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394e:	4994      	ldr	r1, [pc, #592]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003962:	4b8f      	ldr	r3, [pc, #572]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003968:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	498b      	ldr	r1, [pc, #556]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003984:	4b86      	ldr	r3, [pc, #536]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003992:	4983      	ldr	r1, [pc, #524]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039a6:	4b7e      	ldr	r3, [pc, #504]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b4:	497a      	ldr	r1, [pc, #488]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039c8:	4b75      	ldr	r3, [pc, #468]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039d6:	4972      	ldr	r1, [pc, #456]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039ea:	4b6d      	ldr	r3, [pc, #436]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039f8:	4969      	ldr	r1, [pc, #420]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00a      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a0c:	4b64      	ldr	r3, [pc, #400]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a1a:	4961      	ldr	r1, [pc, #388]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a2e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a34:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a3c:	4958      	ldr	r1, [pc, #352]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a50:	4b53      	ldr	r3, [pc, #332]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a56:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5e:	4950      	ldr	r1, [pc, #320]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a72:	4b4b      	ldr	r3, [pc, #300]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a80:	4947      	ldr	r1, [pc, #284]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003a94:	4b42      	ldr	r3, [pc, #264]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003a96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a9a:	f023 0203 	bic.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa2:	493f      	ldr	r1, [pc, #252]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d028      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003abc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac4:	4936      	ldr	r1, [pc, #216]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ad4:	d106      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad6:	4b32      	ldr	r3, [pc, #200]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	4a31      	ldr	r2, [pc, #196]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003adc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ae0:	60d3      	str	r3, [r2, #12]
 8003ae2:	e011      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003aec:	d10c      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3304      	adds	r3, #4
 8003af2:	2101      	movs	r1, #1
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 f8c9 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003afe:	7cfb      	ldrb	r3, [r7, #19]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d028      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b14:	4b22      	ldr	r3, [pc, #136]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b22:	491f      	ldr	r1, [pc, #124]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b32:	d106      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b34:	4b1a      	ldr	r3, [pc, #104]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4a19      	ldr	r2, [pc, #100]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b3e:	60d3      	str	r3, [r2, #12]
 8003b40:	e011      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b4a:	d10c      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	2101      	movs	r1, #1
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 f89a 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b5c:	7cfb      	ldrb	r3, [r7, #19]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003b62:	7cfb      	ldrb	r3, [r7, #19]
 8003b64:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d02a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b78:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b80:	4907      	ldr	r1, [pc, #28]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b90:	d108      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b92:	4b03      	ldr	r3, [pc, #12]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	4a02      	ldr	r2, [pc, #8]	@ (8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003b98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b9c:	60d3      	str	r3, [r2, #12]
 8003b9e:	e013      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003ba0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ba8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 f869 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bbe:	7cfb      	ldrb	r3, [r7, #19]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d02f      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bd4:	4b2c      	ldr	r3, [pc, #176]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bda:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003be2:	4929      	ldr	r1, [pc, #164]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bf2:	d10d      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 f846 	bl	8003c8c <RCCEx_PLLSAI1_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c04:	7cfb      	ldrb	r3, [r7, #19]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d014      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003c0a:	7cfb      	ldrb	r3, [r7, #19]
 8003c0c:	74bb      	strb	r3, [r7, #18]
 8003c0e:	e011      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3320      	adds	r3, #32
 8003c1e:	2102      	movs	r1, #2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 f925 	bl	8003e70 <RCCEx_PLLSAI2_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c2a:	7cfb      	ldrb	r3, [r7, #19]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003c30:	7cfb      	ldrb	r3, [r7, #19]
 8003c32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00b      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c40:	4b11      	ldr	r3, [pc, #68]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c46:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c50:	490d      	ldr	r1, [pc, #52]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00b      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c64:	4b08      	ldr	r3, [pc, #32]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c6a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c74:	4904      	ldr	r1, [pc, #16]	@ (8003c88 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000

08003c8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c9a:	4b74      	ldr	r3, [pc, #464]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d018      	beq.n	8003cd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ca6:	4b71      	ldr	r3, [pc, #452]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 0203 	and.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d10d      	bne.n	8003cd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
       ||
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003cbe:	4b6b      	ldr	r3, [pc, #428]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
       ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d047      	beq.n	8003d62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
 8003cd6:	e044      	b.n	8003d62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d018      	beq.n	8003d12 <RCCEx_PLLSAI1_Config+0x86>
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d825      	bhi.n	8003d30 <RCCEx_PLLSAI1_Config+0xa4>
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d002      	beq.n	8003cee <RCCEx_PLLSAI1_Config+0x62>
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d009      	beq.n	8003d00 <RCCEx_PLLSAI1_Config+0x74>
 8003cec:	e020      	b.n	8003d30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cee:	4b5f      	ldr	r3, [pc, #380]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d11d      	bne.n	8003d36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cfe:	e01a      	b.n	8003d36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d00:	4b5a      	ldr	r3, [pc, #360]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d116      	bne.n	8003d3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d10:	e013      	b.n	8003d3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d12:	4b56      	ldr	r3, [pc, #344]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10f      	bne.n	8003d3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d1e:	4b53      	ldr	r3, [pc, #332]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d109      	bne.n	8003d3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d2e:	e006      	b.n	8003d3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
      break;
 8003d34:	e004      	b.n	8003d40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d36:	bf00      	nop
 8003d38:	e002      	b.n	8003d40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d46:	4b49      	ldr	r3, [pc, #292]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6819      	ldr	r1, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	4943      	ldr	r1, [pc, #268]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d17c      	bne.n	8003e62 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d68:	4b40      	ldr	r3, [pc, #256]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a3f      	ldr	r2, [pc, #252]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d74:	f7fd f9ee 	bl	8001154 <HAL_GetTick>
 8003d78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d7a:	e009      	b.n	8003d90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d7c:	f7fd f9ea 	bl	8001154 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d902      	bls.n	8003d90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d8e:	e005      	b.n	8003d9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d90:	4b36      	ldr	r3, [pc, #216]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1ef      	bne.n	8003d7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d15f      	bne.n	8003e62 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d110      	bne.n	8003dca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003da8:	4b30      	ldr	r3, [pc, #192]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003db0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6892      	ldr	r2, [r2, #8]
 8003db8:	0211      	lsls	r1, r2, #8
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68d2      	ldr	r2, [r2, #12]
 8003dbe:	06d2      	lsls	r2, r2, #27
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	492a      	ldr	r1, [pc, #168]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	610b      	str	r3, [r1, #16]
 8003dc8:	e027      	b.n	8003e1a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d112      	bne.n	8003df6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003dd0:	4b26      	ldr	r3, [pc, #152]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003dd8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	6892      	ldr	r2, [r2, #8]
 8003de0:	0211      	lsls	r1, r2, #8
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6912      	ldr	r2, [r2, #16]
 8003de6:	0852      	lsrs	r2, r2, #1
 8003de8:	3a01      	subs	r2, #1
 8003dea:	0552      	lsls	r2, r2, #21
 8003dec:	430a      	orrs	r2, r1
 8003dee:	491f      	ldr	r1, [pc, #124]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	610b      	str	r3, [r1, #16]
 8003df4:	e011      	b.n	8003e1a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003df6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003dfe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6892      	ldr	r2, [r2, #8]
 8003e06:	0211      	lsls	r1, r2, #8
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6952      	ldr	r2, [r2, #20]
 8003e0c:	0852      	lsrs	r2, r2, #1
 8003e0e:	3a01      	subs	r2, #1
 8003e10:	0652      	lsls	r2, r2, #25
 8003e12:	430a      	orrs	r2, r1
 8003e14:	4915      	ldr	r1, [pc, #84]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e1a:	4b14      	ldr	r3, [pc, #80]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a13      	ldr	r2, [pc, #76]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e26:	f7fd f995 	bl	8001154 <HAL_GetTick>
 8003e2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e2c:	e009      	b.n	8003e42 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e2e:	f7fd f991 	bl	8001154 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d902      	bls.n	8003e42 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	73fb      	strb	r3, [r7, #15]
          break;
 8003e40:	e005      	b.n	8003e4e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e42:	4b0a      	ldr	r3, [pc, #40]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0ef      	beq.n	8003e2e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d106      	bne.n	8003e62 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e54:	4b05      	ldr	r3, [pc, #20]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	4903      	ldr	r1, [pc, #12]	@ (8003e6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40021000 	.word	0x40021000

08003e70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e7e:	4b69      	ldr	r3, [pc, #420]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d018      	beq.n	8003ebc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e8a:	4b66      	ldr	r3, [pc, #408]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f003 0203 	and.w	r2, r3, #3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d10d      	bne.n	8003eb6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
       ||
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d009      	beq.n	8003eb6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003ea2:	4b60      	ldr	r3, [pc, #384]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
       ||
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d047      	beq.n	8003f46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
 8003eba:	e044      	b.n	8003f46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d018      	beq.n	8003ef6 <RCCEx_PLLSAI2_Config+0x86>
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d825      	bhi.n	8003f14 <RCCEx_PLLSAI2_Config+0xa4>
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d002      	beq.n	8003ed2 <RCCEx_PLLSAI2_Config+0x62>
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d009      	beq.n	8003ee4 <RCCEx_PLLSAI2_Config+0x74>
 8003ed0:	e020      	b.n	8003f14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ed2:	4b54      	ldr	r3, [pc, #336]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d11d      	bne.n	8003f1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee2:	e01a      	b.n	8003f1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ee4:	4b4f      	ldr	r3, [pc, #316]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d116      	bne.n	8003f1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef4:	e013      	b.n	8003f1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ef6:	4b4b      	ldr	r3, [pc, #300]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10f      	bne.n	8003f22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f02:	4b48      	ldr	r3, [pc, #288]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f12:	e006      	b.n	8003f22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
      break;
 8003f18:	e004      	b.n	8003f24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f1a:	bf00      	nop
 8003f1c:	e002      	b.n	8003f24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f1e:	bf00      	nop
 8003f20:	e000      	b.n	8003f24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f22:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10d      	bne.n	8003f46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6819      	ldr	r1, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	430b      	orrs	r3, r1
 8003f40:	4938      	ldr	r1, [pc, #224]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d166      	bne.n	800401a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f4c:	4b35      	ldr	r3, [pc, #212]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a34      	ldr	r2, [pc, #208]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f58:	f7fd f8fc 	bl	8001154 <HAL_GetTick>
 8003f5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f5e:	e009      	b.n	8003f74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f60:	f7fd f8f8 	bl	8001154 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d902      	bls.n	8003f74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	73fb      	strb	r3, [r7, #15]
        break;
 8003f72:	e005      	b.n	8003f80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f74:	4b2b      	ldr	r3, [pc, #172]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ef      	bne.n	8003f60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d149      	bne.n	800401a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d110      	bne.n	8003fae <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f8c:	4b25      	ldr	r3, [pc, #148]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003f94:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6892      	ldr	r2, [r2, #8]
 8003f9c:	0211      	lsls	r1, r2, #8
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	68d2      	ldr	r2, [r2, #12]
 8003fa2:	06d2      	lsls	r2, r2, #27
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	491f      	ldr	r1, [pc, #124]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	614b      	str	r3, [r1, #20]
 8003fac:	e011      	b.n	8003fd2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003fae:	4b1d      	ldr	r3, [pc, #116]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003fb6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6892      	ldr	r2, [r2, #8]
 8003fbe:	0211      	lsls	r1, r2, #8
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6912      	ldr	r2, [r2, #16]
 8003fc4:	0852      	lsrs	r2, r2, #1
 8003fc6:	3a01      	subs	r2, #1
 8003fc8:	0652      	lsls	r2, r2, #25
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	4915      	ldr	r1, [pc, #84]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fd2:	4b14      	ldr	r3, [pc, #80]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a13      	ldr	r2, [pc, #76]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fdc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fde:	f7fd f8b9 	bl	8001154 <HAL_GetTick>
 8003fe2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fe4:	e009      	b.n	8003ffa <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fe6:	f7fd f8b5 	bl	8001154 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d902      	bls.n	8003ffa <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	73fb      	strb	r3, [r7, #15]
          break;
 8003ff8:	e005      	b.n	8004006 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0ef      	beq.n	8003fe6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8004006:	7bfb      	ldrb	r3, [r7, #15]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d106      	bne.n	800401a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800400c:	4b05      	ldr	r3, [pc, #20]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 800400e:	695a      	ldr	r2, [r3, #20]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	4903      	ldr	r1, [pc, #12]	@ (8004024 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800401a:	7bfb      	ldrb	r3, [r7, #15]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	40021000 	.word	0x40021000

08004028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e049      	b.n	80040ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f841 	bl	80040d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	4619      	mov	r1, r3
 8004066:	4610      	mov	r0, r2
 8004068:	f000 f9e0 	bl	800442c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
	...

080040ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d001      	beq.n	8004104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e04f      	b.n	80041a4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2202      	movs	r2, #2
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a23      	ldr	r2, [pc, #140]	@ (80041b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d01d      	beq.n	8004162 <HAL_TIM_Base_Start_IT+0x76>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800412e:	d018      	beq.n	8004162 <HAL_TIM_Base_Start_IT+0x76>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a1f      	ldr	r2, [pc, #124]	@ (80041b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <HAL_TIM_Base_Start_IT+0x76>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1e      	ldr	r2, [pc, #120]	@ (80041b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d00e      	beq.n	8004162 <HAL_TIM_Base_Start_IT+0x76>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1c      	ldr	r2, [pc, #112]	@ (80041bc <HAL_TIM_Base_Start_IT+0xd0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d009      	beq.n	8004162 <HAL_TIM_Base_Start_IT+0x76>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1b      	ldr	r2, [pc, #108]	@ (80041c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d004      	beq.n	8004162 <HAL_TIM_Base_Start_IT+0x76>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a19      	ldr	r2, [pc, #100]	@ (80041c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d115      	bne.n	800418e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	4b17      	ldr	r3, [pc, #92]	@ (80041c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800416a:	4013      	ands	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b06      	cmp	r3, #6
 8004172:	d015      	beq.n	80041a0 <HAL_TIM_Base_Start_IT+0xb4>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800417a:	d011      	beq.n	80041a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f042 0201 	orr.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418c:	e008      	b.n	80041a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 0201 	orr.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	e000      	b.n	80041a2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	40012c00 	.word	0x40012c00
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40000800 	.word	0x40000800
 80041bc:	40000c00 	.word	0x40000c00
 80041c0:	40013400 	.word	0x40013400
 80041c4:	40014000 	.word	0x40014000
 80041c8:	00010007 	.word	0x00010007

080041cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d020      	beq.n	8004230 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01b      	beq.n	8004230 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0202 	mvn.w	r2, #2
 8004200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f8e9 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
 800421c:	e005      	b.n	800422a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f8db 	bl	80043da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f8ec 	bl	8004402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	d020      	beq.n	800427c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01b      	beq.n	800427c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0204 	mvn.w	r2, #4
 800424c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2202      	movs	r2, #2
 8004252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f8c3 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
 8004268:	e005      	b.n	8004276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f8b5 	bl	80043da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f8c6 	bl	8004402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d020      	beq.n	80042c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01b      	beq.n	80042c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0208 	mvn.w	r2, #8
 8004298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2204      	movs	r2, #4
 800429e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f003 0303 	and.w	r3, r3, #3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f89d 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
 80042b4:	e005      	b.n	80042c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f88f 	bl	80043da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f8a0 	bl	8004402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d020      	beq.n	8004314 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f003 0310 	and.w	r3, r3, #16
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d01b      	beq.n	8004314 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f06f 0210 	mvn.w	r2, #16
 80042e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2208      	movs	r2, #8
 80042ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f877 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
 8004300:	e005      	b.n	800430e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f869 	bl	80043da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f87a 	bl	8004402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00c      	beq.n	8004338 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0201 	mvn.w	r2, #1
 8004330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc fc3c 	bl	8000bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00c      	beq.n	8004366 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004352:	2b00      	cmp	r3, #0
 8004354:	d007      	beq.n	8004366 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800435e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f913 	bl	800458c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00c      	beq.n	800438a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f90b 	bl	80045a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00c      	beq.n	80043ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d007      	beq.n	80043ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f834 	bl	8004416 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00c      	beq.n	80043d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d007      	beq.n	80043d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f06f 0220 	mvn.w	r2, #32
 80043ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f8d3 	bl	8004578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043d2:	bf00      	nop
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a46      	ldr	r2, [pc, #280]	@ (8004558 <TIM_Base_SetConfig+0x12c>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d013      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800444a:	d00f      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a43      	ldr	r2, [pc, #268]	@ (800455c <TIM_Base_SetConfig+0x130>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00b      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a42      	ldr	r2, [pc, #264]	@ (8004560 <TIM_Base_SetConfig+0x134>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d007      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a41      	ldr	r2, [pc, #260]	@ (8004564 <TIM_Base_SetConfig+0x138>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d003      	beq.n	800446c <TIM_Base_SetConfig+0x40>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a40      	ldr	r2, [pc, #256]	@ (8004568 <TIM_Base_SetConfig+0x13c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d108      	bne.n	800447e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a35      	ldr	r2, [pc, #212]	@ (8004558 <TIM_Base_SetConfig+0x12c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d01f      	beq.n	80044c6 <TIM_Base_SetConfig+0x9a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800448c:	d01b      	beq.n	80044c6 <TIM_Base_SetConfig+0x9a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a32      	ldr	r2, [pc, #200]	@ (800455c <TIM_Base_SetConfig+0x130>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d017      	beq.n	80044c6 <TIM_Base_SetConfig+0x9a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a31      	ldr	r2, [pc, #196]	@ (8004560 <TIM_Base_SetConfig+0x134>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d013      	beq.n	80044c6 <TIM_Base_SetConfig+0x9a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a30      	ldr	r2, [pc, #192]	@ (8004564 <TIM_Base_SetConfig+0x138>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00f      	beq.n	80044c6 <TIM_Base_SetConfig+0x9a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a2f      	ldr	r2, [pc, #188]	@ (8004568 <TIM_Base_SetConfig+0x13c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d00b      	beq.n	80044c6 <TIM_Base_SetConfig+0x9a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a2e      	ldr	r2, [pc, #184]	@ (800456c <TIM_Base_SetConfig+0x140>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d007      	beq.n	80044c6 <TIM_Base_SetConfig+0x9a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a2d      	ldr	r2, [pc, #180]	@ (8004570 <TIM_Base_SetConfig+0x144>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d003      	beq.n	80044c6 <TIM_Base_SetConfig+0x9a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a2c      	ldr	r2, [pc, #176]	@ (8004574 <TIM_Base_SetConfig+0x148>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d108      	bne.n	80044d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a16      	ldr	r2, [pc, #88]	@ (8004558 <TIM_Base_SetConfig+0x12c>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d00f      	beq.n	8004524 <TIM_Base_SetConfig+0xf8>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4a18      	ldr	r2, [pc, #96]	@ (8004568 <TIM_Base_SetConfig+0x13c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00b      	beq.n	8004524 <TIM_Base_SetConfig+0xf8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4a17      	ldr	r2, [pc, #92]	@ (800456c <TIM_Base_SetConfig+0x140>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d007      	beq.n	8004524 <TIM_Base_SetConfig+0xf8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a16      	ldr	r2, [pc, #88]	@ (8004570 <TIM_Base_SetConfig+0x144>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d003      	beq.n	8004524 <TIM_Base_SetConfig+0xf8>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a15      	ldr	r2, [pc, #84]	@ (8004574 <TIM_Base_SetConfig+0x148>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d103      	bne.n	800452c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b01      	cmp	r3, #1
 800453c:	d105      	bne.n	800454a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f023 0201 	bic.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	611a      	str	r2, [r3, #16]
  }
}
 800454a:	bf00      	nop
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40012c00 	.word	0x40012c00
 800455c:	40000400 	.word	0x40000400
 8004560:	40000800 	.word	0x40000800
 8004564:	40000c00 	.word	0x40000c00
 8004568:	40013400 	.word	0x40013400
 800456c:	40014000 	.word	0x40014000
 8004570:	40014400 	.word	0x40014400
 8004574:	40014800 	.word	0x40014800

08004578 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <__NVIC_SetPriority>:
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	6039      	str	r1, [r7, #0]
 80045be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	db0a      	blt.n	80045de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	490c      	ldr	r1, [pc, #48]	@ (8004600 <__NVIC_SetPriority+0x4c>)
 80045ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d2:	0112      	lsls	r2, r2, #4
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	440b      	add	r3, r1
 80045d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80045dc:	e00a      	b.n	80045f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	4908      	ldr	r1, [pc, #32]	@ (8004604 <__NVIC_SetPriority+0x50>)
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	3b04      	subs	r3, #4
 80045ec:	0112      	lsls	r2, r2, #4
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	440b      	add	r3, r1
 80045f2:	761a      	strb	r2, [r3, #24]
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	e000e100 	.word	0xe000e100
 8004604:	e000ed00 	.word	0xe000ed00

08004608 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800460c:	4b05      	ldr	r3, [pc, #20]	@ (8004624 <SysTick_Handler+0x1c>)
 800460e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004610:	f001 fd46 	bl	80060a0 <xTaskGetSchedulerState>
 8004614:	4603      	mov	r3, r0
 8004616:	2b01      	cmp	r3, #1
 8004618:	d001      	beq.n	800461e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800461a:	f002 fb3d 	bl	8006c98 <xPortSysTickHandler>
  }
}
 800461e:	bf00      	nop
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	e000e010 	.word	0xe000e010

08004628 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800462c:	2100      	movs	r1, #0
 800462e:	f06f 0004 	mvn.w	r0, #4
 8004632:	f7ff ffbf 	bl	80045b4 <__NVIC_SetPriority>
#endif
}
 8004636:	bf00      	nop
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004642:	f3ef 8305 	mrs	r3, IPSR
 8004646:	603b      	str	r3, [r7, #0]
  return(result);
 8004648:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800464e:	f06f 0305 	mvn.w	r3, #5
 8004652:	607b      	str	r3, [r7, #4]
 8004654:	e00c      	b.n	8004670 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004656:	4b0a      	ldr	r3, [pc, #40]	@ (8004680 <osKernelInitialize+0x44>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d105      	bne.n	800466a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800465e:	4b08      	ldr	r3, [pc, #32]	@ (8004680 <osKernelInitialize+0x44>)
 8004660:	2201      	movs	r2, #1
 8004662:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004664:	2300      	movs	r3, #0
 8004666:	607b      	str	r3, [r7, #4]
 8004668:	e002      	b.n	8004670 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800466a:	f04f 33ff 	mov.w	r3, #4294967295
 800466e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004670:	687b      	ldr	r3, [r7, #4]
}
 8004672:	4618      	mov	r0, r3
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	200001ec 	.word	0x200001ec

08004684 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800468a:	f3ef 8305 	mrs	r3, IPSR
 800468e:	603b      	str	r3, [r7, #0]
  return(result);
 8004690:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004696:	f06f 0305 	mvn.w	r3, #5
 800469a:	607b      	str	r3, [r7, #4]
 800469c:	e010      	b.n	80046c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800469e:	4b0b      	ldr	r3, [pc, #44]	@ (80046cc <osKernelStart+0x48>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d109      	bne.n	80046ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046a6:	f7ff ffbf 	bl	8004628 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046aa:	4b08      	ldr	r3, [pc, #32]	@ (80046cc <osKernelStart+0x48>)
 80046ac:	2202      	movs	r2, #2
 80046ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046b0:	f001 f892 	bl	80057d8 <vTaskStartScheduler>
      stat = osOK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	607b      	str	r3, [r7, #4]
 80046b8:	e002      	b.n	80046c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80046ba:	f04f 33ff 	mov.w	r3, #4294967295
 80046be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046c0:	687b      	ldr	r3, [r7, #4]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	200001ec 	.word	0x200001ec

080046d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08e      	sub	sp, #56	@ 0x38
 80046d4:	af04      	add	r7, sp, #16
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046e0:	f3ef 8305 	mrs	r3, IPSR
 80046e4:	617b      	str	r3, [r7, #20]
  return(result);
 80046e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d17e      	bne.n	80047ea <osThreadNew+0x11a>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d07b      	beq.n	80047ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80046f2:	2380      	movs	r3, #128	@ 0x80
 80046f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80046f6:	2318      	movs	r3, #24
 80046f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80046fa:	2300      	movs	r3, #0
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80046fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004702:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d045      	beq.n	8004796 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <osThreadNew+0x48>
        name = attr->name;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <osThreadNew+0x6e>
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b38      	cmp	r3, #56	@ 0x38
 8004730:	d805      	bhi.n	800473e <osThreadNew+0x6e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <osThreadNew+0x72>
        return (NULL);
 800473e:	2300      	movs	r3, #0
 8004740:	e054      	b.n	80047ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00e      	beq.n	8004778 <osThreadNew+0xa8>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004760:	d90a      	bls.n	8004778 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004766:	2b00      	cmp	r3, #0
 8004768:	d006      	beq.n	8004778 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <osThreadNew+0xa8>
        mem = 1;
 8004772:	2301      	movs	r3, #1
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	e010      	b.n	800479a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10c      	bne.n	800479a <osThreadNew+0xca>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d108      	bne.n	800479a <osThreadNew+0xca>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d104      	bne.n	800479a <osThreadNew+0xca>
          mem = 0;
 8004790:	2300      	movs	r3, #0
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	e001      	b.n	800479a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004796:	2300      	movs	r3, #0
 8004798:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d110      	bne.n	80047c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047a8:	9202      	str	r2, [sp, #8]
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	6a3a      	ldr	r2, [r7, #32]
 80047b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 fe1a 	bl	80053f0 <xTaskCreateStatic>
 80047bc:	4603      	mov	r3, r0
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	e013      	b.n	80047ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d110      	bne.n	80047ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	f107 0310 	add.w	r3, r7, #16
 80047d0:	9301      	str	r3, [sp, #4]
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fe68 	bl	80054b0 <xTaskCreate>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d001      	beq.n	80047ea <osThreadNew+0x11a>
            hTask = NULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80047ea:	693b      	ldr	r3, [r7, #16]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3728      	adds	r7, #40	@ 0x28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047fc:	f3ef 8305 	mrs	r3, IPSR
 8004800:	60bb      	str	r3, [r7, #8]
  return(result);
 8004802:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004804:	2b00      	cmp	r3, #0
 8004806:	d003      	beq.n	8004810 <osDelay+0x1c>
    stat = osErrorISR;
 8004808:	f06f 0305 	mvn.w	r3, #5
 800480c:	60fb      	str	r3, [r7, #12]
 800480e:	e007      	b.n	8004820 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004810:	2300      	movs	r3, #0
 8004812:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <osDelay+0x2c>
      vTaskDelay(ticks);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 ffa6 	bl	800576c <vTaskDelay>
    }
  }

  return (stat);
 8004820:	68fb      	ldr	r3, [r7, #12]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4a07      	ldr	r2, [pc, #28]	@ (8004858 <vApplicationGetIdleTaskMemory+0x2c>)
 800483c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	4a06      	ldr	r2, [pc, #24]	@ (800485c <vApplicationGetIdleTaskMemory+0x30>)
 8004842:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2280      	movs	r2, #128	@ 0x80
 8004848:	601a      	str	r2, [r3, #0]
}
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	200001f0 	.word	0x200001f0
 800485c:	20000298 	.word	0x20000298

08004860 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4a07      	ldr	r2, [pc, #28]	@ (800488c <vApplicationGetTimerTaskMemory+0x2c>)
 8004870:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4a06      	ldr	r2, [pc, #24]	@ (8004890 <vApplicationGetTimerTaskMemory+0x30>)
 8004876:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800487e:	601a      	str	r2, [r3, #0]
}
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	20000498 	.word	0x20000498
 8004890:	20000540 	.word	0x20000540

08004894 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f103 0208 	add.w	r2, r3, #8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f103 0208 	add.w	r2, r3, #8
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f103 0208 	add.w	r2, r3, #8
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048ee:	b480      	push	{r7}
 80048f0:	b085      	sub	sp, #20
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	601a      	str	r2, [r3, #0]
}
 800492a:	bf00      	nop
 800492c:	3714      	adds	r7, #20
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004936:	b480      	push	{r7}
 8004938:	b085      	sub	sp, #20
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494c:	d103      	bne.n	8004956 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	e00c      	b.n	8004970 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3308      	adds	r3, #8
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	e002      	b.n	8004964 <vListInsert+0x2e>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	429a      	cmp	r2, r3
 800496e:	d2f6      	bcs.n	800495e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	601a      	str	r2, [r3, #0]
}
 800499c:	bf00      	nop
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6892      	ldr	r2, [r2, #8]
 80049be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6852      	ldr	r2, [r2, #4]
 80049c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d103      	bne.n	80049dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	1e5a      	subs	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10b      	bne.n	8004a28 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a22:	bf00      	nop
 8004a24:	bf00      	nop
 8004a26:	e7fd      	b.n	8004a24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a28:	f002 f8a6 	bl	8006b78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a34:	68f9      	ldr	r1, [r7, #12]
 8004a36:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	441a      	add	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	68f9      	ldr	r1, [r7, #12]
 8004a5c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004a5e:	fb01 f303 	mul.w	r3, r1, r3
 8004a62:	441a      	add	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	22ff      	movs	r2, #255	@ 0xff
 8004a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	22ff      	movs	r2, #255	@ 0xff
 8004a74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d114      	bne.n	8004aa8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d01a      	beq.n	8004abc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3310      	adds	r3, #16
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f001 f942 	bl	8005d14 <xTaskRemoveFromEventList>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d012      	beq.n	8004abc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004a96:	4b0d      	ldr	r3, [pc, #52]	@ (8004acc <xQueueGenericReset+0xd0>)
 8004a98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	e009      	b.n	8004abc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3310      	adds	r3, #16
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7ff fef1 	bl	8004894 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	3324      	adds	r3, #36	@ 0x24
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff feec 	bl	8004894 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004abc:	f002 f88e 	bl	8006bdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ac0:	2301      	movs	r3, #1
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	e000ed04 	.word	0xe000ed04

08004ad0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08e      	sub	sp, #56	@ 0x38
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
 8004adc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10b      	bne.n	8004afc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004af6:	bf00      	nop
 8004af8:	bf00      	nop
 8004afa:	e7fd      	b.n	8004af8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10b      	bne.n	8004b1a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	e7fd      	b.n	8004b16 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <xQueueGenericCreateStatic+0x56>
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <xQueueGenericCreateStatic+0x5a>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <xQueueGenericCreateStatic+0x5c>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10b      	bne.n	8004b48 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	623b      	str	r3, [r7, #32]
}
 8004b42:	bf00      	nop
 8004b44:	bf00      	nop
 8004b46:	e7fd      	b.n	8004b44 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <xQueueGenericCreateStatic+0x84>
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <xQueueGenericCreateStatic+0x88>
 8004b54:	2301      	movs	r3, #1
 8004b56:	e000      	b.n	8004b5a <xQueueGenericCreateStatic+0x8a>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10b      	bne.n	8004b76 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	61fb      	str	r3, [r7, #28]
}
 8004b70:	bf00      	nop
 8004b72:	bf00      	nop
 8004b74:	e7fd      	b.n	8004b72 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004b76:	2350      	movs	r3, #80	@ 0x50
 8004b78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b50      	cmp	r3, #80	@ 0x50
 8004b7e:	d00b      	beq.n	8004b98 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	61bb      	str	r3, [r7, #24]
}
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	e7fd      	b.n	8004b94 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004b98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00d      	beq.n	8004bc0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 f805 	bl	8004bca <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3730      	adds	r7, #48	@ 0x30
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b084      	sub	sp, #16
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	607a      	str	r2, [r7, #4]
 8004bd6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d103      	bne.n	8004be6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	e002      	b.n	8004bec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	69b8      	ldr	r0, [r7, #24]
 8004bfc:	f7ff fefe 	bl	80049fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	78fa      	ldrb	r2, [r7, #3]
 8004c04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08e      	sub	sp, #56	@ 0x38
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10b      	bne.n	8004c44 <xQueueGenericSend+0x34>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004c3e:	bf00      	nop
 8004c40:	bf00      	nop
 8004c42:	e7fd      	b.n	8004c40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d103      	bne.n	8004c52 <xQueueGenericSend+0x42>
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <xQueueGenericSend+0x46>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <xQueueGenericSend+0x48>
 8004c56:	2300      	movs	r3, #0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10b      	bne.n	8004c74 <xQueueGenericSend+0x64>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004c6e:	bf00      	nop
 8004c70:	bf00      	nop
 8004c72:	e7fd      	b.n	8004c70 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d103      	bne.n	8004c82 <xQueueGenericSend+0x72>
 8004c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <xQueueGenericSend+0x76>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <xQueueGenericSend+0x78>
 8004c86:	2300      	movs	r3, #0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10b      	bne.n	8004ca4 <xQueueGenericSend+0x94>
	__asm volatile
 8004c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c90:	f383 8811 	msr	BASEPRI, r3
 8004c94:	f3bf 8f6f 	isb	sy
 8004c98:	f3bf 8f4f 	dsb	sy
 8004c9c:	623b      	str	r3, [r7, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	bf00      	nop
 8004ca2:	e7fd      	b.n	8004ca0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ca4:	f001 f9fc 	bl	80060a0 <xTaskGetSchedulerState>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d102      	bne.n	8004cb4 <xQueueGenericSend+0xa4>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <xQueueGenericSend+0xa8>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <xQueueGenericSend+0xaa>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10b      	bne.n	8004cd6 <xQueueGenericSend+0xc6>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	61fb      	str	r3, [r7, #28]
}
 8004cd0:	bf00      	nop
 8004cd2:	bf00      	nop
 8004cd4:	e7fd      	b.n	8004cd2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cd6:	f001 ff4f 	bl	8006b78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d302      	bcc.n	8004cec <xQueueGenericSend+0xdc>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d129      	bne.n	8004d40 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cf2:	f000 fa0f 	bl	8005114 <prvCopyDataToQueue>
 8004cf6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d010      	beq.n	8004d22 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d02:	3324      	adds	r3, #36	@ 0x24
 8004d04:	4618      	mov	r0, r3
 8004d06:	f001 f805 	bl	8005d14 <xTaskRemoveFromEventList>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d013      	beq.n	8004d38 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d10:	4b3f      	ldr	r3, [pc, #252]	@ (8004e10 <xQueueGenericSend+0x200>)
 8004d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	e00a      	b.n	8004d38 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d007      	beq.n	8004d38 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d28:	4b39      	ldr	r3, [pc, #228]	@ (8004e10 <xQueueGenericSend+0x200>)
 8004d2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d38:	f001 ff50 	bl	8006bdc <vPortExitCritical>
				return pdPASS;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e063      	b.n	8004e08 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d103      	bne.n	8004d4e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d46:	f001 ff49 	bl	8006bdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e05c      	b.n	8004e08 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d106      	bne.n	8004d62 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d54:	f107 0314 	add.w	r3, r7, #20
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f001 f83f 	bl	8005ddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d62:	f001 ff3b 	bl	8006bdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d66:	f000 fda7 	bl	80058b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d6a:	f001 ff05 	bl	8006b78 <vPortEnterCritical>
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d74:	b25b      	sxtb	r3, r3
 8004d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7a:	d103      	bne.n	8004d84 <xQueueGenericSend+0x174>
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d8a:	b25b      	sxtb	r3, r3
 8004d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d90:	d103      	bne.n	8004d9a <xQueueGenericSend+0x18a>
 8004d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d9a:	f001 ff1f 	bl	8006bdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d9e:	1d3a      	adds	r2, r7, #4
 8004da0:	f107 0314 	add.w	r3, r7, #20
 8004da4:	4611      	mov	r1, r2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f001 f82e 	bl	8005e08 <xTaskCheckForTimeOut>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d124      	bne.n	8004dfc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004db2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004db4:	f000 faa6 	bl	8005304 <prvIsQueueFull>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d018      	beq.n	8004df0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc0:	3310      	adds	r3, #16
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 ff52 	bl	8005c70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004dcc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004dce:	f000 fa31 	bl	8005234 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004dd2:	f000 fd7f 	bl	80058d4 <xTaskResumeAll>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f47f af7c 	bne.w	8004cd6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004dde:	4b0c      	ldr	r3, [pc, #48]	@ (8004e10 <xQueueGenericSend+0x200>)
 8004de0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	e772      	b.n	8004cd6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004df0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004df2:	f000 fa1f 	bl	8005234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004df6:	f000 fd6d 	bl	80058d4 <xTaskResumeAll>
 8004dfa:	e76c      	b.n	8004cd6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004dfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004dfe:	f000 fa19 	bl	8005234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e02:	f000 fd67 	bl	80058d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3738      	adds	r7, #56	@ 0x38
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	e000ed04 	.word	0xe000ed04

08004e14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b090      	sub	sp, #64	@ 0x40
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10b      	bne.n	8004e44 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	e7fd      	b.n	8004e40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d103      	bne.n	8004e52 <xQueueGenericSendFromISR+0x3e>
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <xQueueGenericSendFromISR+0x42>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <xQueueGenericSendFromISR+0x44>
 8004e56:	2300      	movs	r3, #0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d10b      	bne.n	8004e74 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e6e:	bf00      	nop
 8004e70:	bf00      	nop
 8004e72:	e7fd      	b.n	8004e70 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d103      	bne.n	8004e82 <xQueueGenericSendFromISR+0x6e>
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <xQueueGenericSendFromISR+0x72>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <xQueueGenericSendFromISR+0x74>
 8004e86:	2300      	movs	r3, #0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	623b      	str	r3, [r7, #32]
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	e7fd      	b.n	8004ea0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ea4:	f001 ff48 	bl	8006d38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ea8:	f3ef 8211 	mrs	r2, BASEPRI
 8004eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	61fa      	str	r2, [r7, #28]
 8004ebe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ec2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d302      	bcc.n	8004ed6 <xQueueGenericSendFromISR+0xc2>
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d12f      	bne.n	8004f36 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004edc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004eec:	f000 f912 	bl	8005114 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ef0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef8:	d112      	bne.n	8004f20 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d016      	beq.n	8004f30 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f04:	3324      	adds	r3, #36	@ 0x24
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 ff04 	bl	8005d14 <xTaskRemoveFromEventList>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00e      	beq.n	8004f30 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00b      	beq.n	8004f30 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	e007      	b.n	8004f30 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004f24:	3301      	adds	r3, #1
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	b25a      	sxtb	r2, r3
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004f30:	2301      	movs	r3, #1
 8004f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004f34:	e001      	b.n	8004f3a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f36:	2300      	movs	r3, #0
 8004f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f3c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3740      	adds	r7, #64	@ 0x40
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08c      	sub	sp, #48	@ 0x30
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10b      	bne.n	8004f82 <xQueueReceive+0x32>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	623b      	str	r3, [r7, #32]
}
 8004f7c:	bf00      	nop
 8004f7e:	bf00      	nop
 8004f80:	e7fd      	b.n	8004f7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d103      	bne.n	8004f90 <xQueueReceive+0x40>
 8004f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <xQueueReceive+0x44>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <xQueueReceive+0x46>
 8004f94:	2300      	movs	r3, #0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10b      	bne.n	8004fb2 <xQueueReceive+0x62>
	__asm volatile
 8004f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	61fb      	str	r3, [r7, #28]
}
 8004fac:	bf00      	nop
 8004fae:	bf00      	nop
 8004fb0:	e7fd      	b.n	8004fae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fb2:	f001 f875 	bl	80060a0 <xTaskGetSchedulerState>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d102      	bne.n	8004fc2 <xQueueReceive+0x72>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <xQueueReceive+0x76>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <xQueueReceive+0x78>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10b      	bne.n	8004fe4 <xQueueReceive+0x94>
	__asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	61bb      	str	r3, [r7, #24]
}
 8004fde:	bf00      	nop
 8004fe0:	bf00      	nop
 8004fe2:	e7fd      	b.n	8004fe0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fe4:	f001 fdc8 	bl	8006b78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d01f      	beq.n	8005034 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ff4:	68b9      	ldr	r1, [r7, #8]
 8004ff6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ff8:	f000 f8f6 	bl	80051e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	1e5a      	subs	r2, r3, #1
 8005000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005002:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00f      	beq.n	800502c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800500c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500e:	3310      	adds	r3, #16
 8005010:	4618      	mov	r0, r3
 8005012:	f000 fe7f 	bl	8005d14 <xTaskRemoveFromEventList>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d007      	beq.n	800502c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800501c:	4b3c      	ldr	r3, [pc, #240]	@ (8005110 <xQueueReceive+0x1c0>)
 800501e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800502c:	f001 fdd6 	bl	8006bdc <vPortExitCritical>
				return pdPASS;
 8005030:	2301      	movs	r3, #1
 8005032:	e069      	b.n	8005108 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d103      	bne.n	8005042 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800503a:	f001 fdcf 	bl	8006bdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800503e:	2300      	movs	r3, #0
 8005040:	e062      	b.n	8005108 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d106      	bne.n	8005056 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005048:	f107 0310 	add.w	r3, r7, #16
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fec5 	bl	8005ddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005052:	2301      	movs	r3, #1
 8005054:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005056:	f001 fdc1 	bl	8006bdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800505a:	f000 fc2d 	bl	80058b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800505e:	f001 fd8b 	bl	8006b78 <vPortEnterCritical>
 8005062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005064:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005068:	b25b      	sxtb	r3, r3
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	d103      	bne.n	8005078 <xQueueReceive+0x128>
 8005070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005072:	2200      	movs	r2, #0
 8005074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800507a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800507e:	b25b      	sxtb	r3, r3
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d103      	bne.n	800508e <xQueueReceive+0x13e>
 8005086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800508e:	f001 fda5 	bl	8006bdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005092:	1d3a      	adds	r2, r7, #4
 8005094:	f107 0310 	add.w	r3, r7, #16
 8005098:	4611      	mov	r1, r2
 800509a:	4618      	mov	r0, r3
 800509c:	f000 feb4 	bl	8005e08 <xTaskCheckForTimeOut>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d123      	bne.n	80050ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050a8:	f000 f916 	bl	80052d8 <prvIsQueueEmpty>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d017      	beq.n	80050e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b4:	3324      	adds	r3, #36	@ 0x24
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	4611      	mov	r1, r2
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fdd8 	bl	8005c70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050c2:	f000 f8b7 	bl	8005234 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050c6:	f000 fc05 	bl	80058d4 <xTaskResumeAll>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d189      	bne.n	8004fe4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80050d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005110 <xQueueReceive+0x1c0>)
 80050d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	e780      	b.n	8004fe4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80050e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050e4:	f000 f8a6 	bl	8005234 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050e8:	f000 fbf4 	bl	80058d4 <xTaskResumeAll>
 80050ec:	e77a      	b.n	8004fe4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80050ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050f0:	f000 f8a0 	bl	8005234 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050f4:	f000 fbee 	bl	80058d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80050fa:	f000 f8ed 	bl	80052d8 <prvIsQueueEmpty>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	f43f af6f 	beq.w	8004fe4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005106:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005108:	4618      	mov	r0, r3
 800510a:	3730      	adds	r7, #48	@ 0x30
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	e000ed04 	.word	0xe000ed04

08005114 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005120:	2300      	movs	r3, #0
 8005122:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005128:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10d      	bne.n	800514e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d14d      	bne.n	80051d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	4618      	mov	r0, r3
 8005140:	f000 ffcc 	bl	80060dc <xTaskPriorityDisinherit>
 8005144:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	609a      	str	r2, [r3, #8]
 800514c:	e043      	b.n	80051d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d119      	bne.n	8005188 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6858      	ldr	r0, [r3, #4]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515c:	461a      	mov	r2, r3
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	f002 f89e 	bl	80072a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516c:	441a      	add	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	429a      	cmp	r2, r3
 800517c:	d32b      	bcc.n	80051d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	605a      	str	r2, [r3, #4]
 8005186:	e026      	b.n	80051d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	68d8      	ldr	r0, [r3, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005190:	461a      	mov	r2, r3
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	f002 f884 	bl	80072a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a0:	425b      	negs	r3, r3
 80051a2:	441a      	add	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d207      	bcs.n	80051c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051bc:	425b      	negs	r3, r3
 80051be:	441a      	add	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d105      	bne.n	80051d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80051de:	697b      	ldr	r3, [r7, #20]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3718      	adds	r7, #24
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d018      	beq.n	800522c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	441a      	add	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	429a      	cmp	r2, r3
 8005212:	d303      	bcc.n	800521c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68d9      	ldr	r1, [r3, #12]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005224:	461a      	mov	r2, r3
 8005226:	6838      	ldr	r0, [r7, #0]
 8005228:	f002 f83a 	bl	80072a0 <memcpy>
	}
}
 800522c:	bf00      	nop
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800523c:	f001 fc9c 	bl	8006b78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005246:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005248:	e011      	b.n	800526e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524e:	2b00      	cmp	r3, #0
 8005250:	d012      	beq.n	8005278 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3324      	adds	r3, #36	@ 0x24
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fd5c 	bl	8005d14 <xTaskRemoveFromEventList>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005262:	f000 fe35 	bl	8005ed0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005266:	7bfb      	ldrb	r3, [r7, #15]
 8005268:	3b01      	subs	r3, #1
 800526a:	b2db      	uxtb	r3, r3
 800526c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800526e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005272:	2b00      	cmp	r3, #0
 8005274:	dce9      	bgt.n	800524a <prvUnlockQueue+0x16>
 8005276:	e000      	b.n	800527a <prvUnlockQueue+0x46>
					break;
 8005278:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	22ff      	movs	r2, #255	@ 0xff
 800527e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005282:	f001 fcab 	bl	8006bdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005286:	f001 fc77 	bl	8006b78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005290:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005292:	e011      	b.n	80052b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d012      	beq.n	80052c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3310      	adds	r3, #16
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fd37 	bl	8005d14 <xTaskRemoveFromEventList>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052ac:	f000 fe10 	bl	8005ed0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052b0:	7bbb      	ldrb	r3, [r7, #14]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	dce9      	bgt.n	8005294 <prvUnlockQueue+0x60>
 80052c0:	e000      	b.n	80052c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	22ff      	movs	r2, #255	@ 0xff
 80052c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80052cc:	f001 fc86 	bl	8006bdc <vPortExitCritical>
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052e0:	f001 fc4a 	bl	8006b78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d102      	bne.n	80052f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80052ec:	2301      	movs	r3, #1
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e001      	b.n	80052f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052f6:	f001 fc71 	bl	8006bdc <vPortExitCritical>

	return xReturn;
 80052fa:	68fb      	ldr	r3, [r7, #12]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800530c:	f001 fc34 	bl	8006b78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005318:	429a      	cmp	r2, r3
 800531a:	d102      	bne.n	8005322 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800531c:	2301      	movs	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	e001      	b.n	8005326 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005322:	2300      	movs	r3, #0
 8005324:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005326:	f001 fc59 	bl	8006bdc <vPortExitCritical>

	return xReturn;
 800532a:	68fb      	ldr	r3, [r7, #12]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	e014      	b.n	800536e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005344:	4a0f      	ldr	r2, [pc, #60]	@ (8005384 <vQueueAddToRegistry+0x50>)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10b      	bne.n	8005368 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005350:	490c      	ldr	r1, [pc, #48]	@ (8005384 <vQueueAddToRegistry+0x50>)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800535a:	4a0a      	ldr	r2, [pc, #40]	@ (8005384 <vQueueAddToRegistry+0x50>)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4413      	add	r3, r2
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005366:	e006      	b.n	8005376 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3301      	adds	r3, #1
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b07      	cmp	r3, #7
 8005372:	d9e7      	bls.n	8005344 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	20000940 	.word	0x20000940

08005388 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005398:	f001 fbee 	bl	8006b78 <vPortEnterCritical>
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053a2:	b25b      	sxtb	r3, r3
 80053a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a8:	d103      	bne.n	80053b2 <vQueueWaitForMessageRestricted+0x2a>
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053b8:	b25b      	sxtb	r3, r3
 80053ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053be:	d103      	bne.n	80053c8 <vQueueWaitForMessageRestricted+0x40>
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053c8:	f001 fc08 	bl	8006bdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d106      	bne.n	80053e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	3324      	adds	r3, #36	@ 0x24
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	68b9      	ldr	r1, [r7, #8]
 80053dc:	4618      	mov	r0, r3
 80053de:	f000 fc6d 	bl	8005cbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80053e2:	6978      	ldr	r0, [r7, #20]
 80053e4:	f7ff ff26 	bl	8005234 <prvUnlockQueue>
	}
 80053e8:	bf00      	nop
 80053ea:	3718      	adds	r7, #24
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b08e      	sub	sp, #56	@ 0x38
 80053f4:	af04      	add	r7, sp, #16
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	623b      	str	r3, [r7, #32]
}
 8005416:	bf00      	nop
 8005418:	bf00      	nop
 800541a:	e7fd      	b.n	8005418 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800541c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10b      	bne.n	800543a <xTaskCreateStatic+0x4a>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	61fb      	str	r3, [r7, #28]
}
 8005434:	bf00      	nop
 8005436:	bf00      	nop
 8005438:	e7fd      	b.n	8005436 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800543a:	23a8      	movs	r3, #168	@ 0xa8
 800543c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	2ba8      	cmp	r3, #168	@ 0xa8
 8005442:	d00b      	beq.n	800545c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005448:	f383 8811 	msr	BASEPRI, r3
 800544c:	f3bf 8f6f 	isb	sy
 8005450:	f3bf 8f4f 	dsb	sy
 8005454:	61bb      	str	r3, [r7, #24]
}
 8005456:	bf00      	nop
 8005458:	bf00      	nop
 800545a:	e7fd      	b.n	8005458 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800545c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800545e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005460:	2b00      	cmp	r3, #0
 8005462:	d01e      	beq.n	80054a2 <xTaskCreateStatic+0xb2>
 8005464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005466:	2b00      	cmp	r3, #0
 8005468:	d01b      	beq.n	80054a2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800546a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005472:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005476:	2202      	movs	r2, #2
 8005478:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800547c:	2300      	movs	r3, #0
 800547e:	9303      	str	r3, [sp, #12]
 8005480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005482:	9302      	str	r3, [sp, #8]
 8005484:	f107 0314 	add.w	r3, r7, #20
 8005488:	9301      	str	r3, [sp, #4]
 800548a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	68b9      	ldr	r1, [r7, #8]
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 f851 	bl	800553c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800549a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800549c:	f000 f8f6 	bl	800568c <prvAddNewTaskToReadyList>
 80054a0:	e001      	b.n	80054a6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80054a6:	697b      	ldr	r3, [r7, #20]
	}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3728      	adds	r7, #40	@ 0x28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08c      	sub	sp, #48	@ 0x30
 80054b4:	af04      	add	r7, sp, #16
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	4613      	mov	r3, r2
 80054be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054c0:	88fb      	ldrh	r3, [r7, #6]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 fc79 	bl	8006dbc <pvPortMalloc>
 80054ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00e      	beq.n	80054f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054d2:	20a8      	movs	r0, #168	@ 0xa8
 80054d4:	f001 fc72 	bl	8006dbc <pvPortMalloc>
 80054d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80054e6:	e005      	b.n	80054f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054e8:	6978      	ldr	r0, [r7, #20]
 80054ea:	f001 fd35 	bl	8006f58 <vPortFree>
 80054ee:	e001      	b.n	80054f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054f0:	2300      	movs	r3, #0
 80054f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d017      	beq.n	800552a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005502:	88fa      	ldrh	r2, [r7, #6]
 8005504:	2300      	movs	r3, #0
 8005506:	9303      	str	r3, [sp, #12]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	9302      	str	r3, [sp, #8]
 800550c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	68b9      	ldr	r1, [r7, #8]
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f80f 	bl	800553c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800551e:	69f8      	ldr	r0, [r7, #28]
 8005520:	f000 f8b4 	bl	800568c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005524:	2301      	movs	r3, #1
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	e002      	b.n	8005530 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800552a:	f04f 33ff 	mov.w	r3, #4294967295
 800552e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005530:	69bb      	ldr	r3, [r7, #24]
	}
 8005532:	4618      	mov	r0, r3
 8005534:	3720      	adds	r7, #32
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
	...

0800553c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	461a      	mov	r2, r3
 8005554:	21a5      	movs	r1, #165	@ 0xa5
 8005556:	f001 fe1f 	bl	8007198 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005564:	3b01      	subs	r3, #1
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	f023 0307 	bic.w	r3, r3, #7
 8005572:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00b      	beq.n	8005596 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	617b      	str	r3, [r7, #20]
}
 8005590:	bf00      	nop
 8005592:	bf00      	nop
 8005594:	e7fd      	b.n	8005592 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01f      	beq.n	80055dc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800559c:	2300      	movs	r3, #0
 800559e:	61fb      	str	r3, [r7, #28]
 80055a0:	e012      	b.n	80055c8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	4413      	add	r3, r2
 80055a8:	7819      	ldrb	r1, [r3, #0]
 80055aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4413      	add	r3, r2
 80055b0:	3334      	adds	r3, #52	@ 0x34
 80055b2:	460a      	mov	r2, r1
 80055b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	4413      	add	r3, r2
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d006      	beq.n	80055d0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	3301      	adds	r3, #1
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	2b0f      	cmp	r3, #15
 80055cc:	d9e9      	bls.n	80055a2 <prvInitialiseNewTask+0x66>
 80055ce:	e000      	b.n	80055d2 <prvInitialiseNewTask+0x96>
			{
				break;
 80055d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055da:	e003      	b.n	80055e4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e6:	2b37      	cmp	r3, #55	@ 0x37
 80055e8:	d901      	bls.n	80055ee <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055ea:	2337      	movs	r3, #55	@ 0x37
 80055ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055f8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80055fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fc:	2200      	movs	r2, #0
 80055fe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005602:	3304      	adds	r3, #4
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff f965 	bl	80048d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800560a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560c:	3318      	adds	r3, #24
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff f960 	bl	80048d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005616:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005618:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800561a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005622:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005628:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800562a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562c:	2200      	movs	r2, #0
 800562e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005634:	2200      	movs	r2, #0
 8005636:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800563a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563c:	3354      	adds	r3, #84	@ 0x54
 800563e:	224c      	movs	r2, #76	@ 0x4c
 8005640:	2100      	movs	r1, #0
 8005642:	4618      	mov	r0, r3
 8005644:	f001 fda8 	bl	8007198 <memset>
 8005648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564a:	4a0d      	ldr	r2, [pc, #52]	@ (8005680 <prvInitialiseNewTask+0x144>)
 800564c:	659a      	str	r2, [r3, #88]	@ 0x58
 800564e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005650:	4a0c      	ldr	r2, [pc, #48]	@ (8005684 <prvInitialiseNewTask+0x148>)
 8005652:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005656:	4a0c      	ldr	r2, [pc, #48]	@ (8005688 <prvInitialiseNewTask+0x14c>)
 8005658:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	68f9      	ldr	r1, [r7, #12]
 800565e:	69b8      	ldr	r0, [r7, #24]
 8005660:	f001 f95a 	bl	8006918 <pxPortInitialiseStack>
 8005664:	4602      	mov	r2, r0
 8005666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005668:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800566a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005676:	bf00      	nop
 8005678:	3720      	adds	r7, #32
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20001b8c 	.word	0x20001b8c
 8005684:	20001bf4 	.word	0x20001bf4
 8005688:	20001c5c 	.word	0x20001c5c

0800568c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005694:	f001 fa70 	bl	8006b78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005698:	4b2d      	ldr	r3, [pc, #180]	@ (8005750 <prvAddNewTaskToReadyList+0xc4>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3301      	adds	r3, #1
 800569e:	4a2c      	ldr	r2, [pc, #176]	@ (8005750 <prvAddNewTaskToReadyList+0xc4>)
 80056a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80056a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005754 <prvAddNewTaskToReadyList+0xc8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80056aa:	4a2a      	ldr	r2, [pc, #168]	@ (8005754 <prvAddNewTaskToReadyList+0xc8>)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80056b0:	4b27      	ldr	r3, [pc, #156]	@ (8005750 <prvAddNewTaskToReadyList+0xc4>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d110      	bne.n	80056da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056b8:	f000 fc2e 	bl	8005f18 <prvInitialiseTaskLists>
 80056bc:	e00d      	b.n	80056da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056be:	4b26      	ldr	r3, [pc, #152]	@ (8005758 <prvAddNewTaskToReadyList+0xcc>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d109      	bne.n	80056da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056c6:	4b23      	ldr	r3, [pc, #140]	@ (8005754 <prvAddNewTaskToReadyList+0xc8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d802      	bhi.n	80056da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005754 <prvAddNewTaskToReadyList+0xc8>)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056da:	4b20      	ldr	r3, [pc, #128]	@ (800575c <prvAddNewTaskToReadyList+0xd0>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3301      	adds	r3, #1
 80056e0:	4a1e      	ldr	r2, [pc, #120]	@ (800575c <prvAddNewTaskToReadyList+0xd0>)
 80056e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056e4:	4b1d      	ldr	r3, [pc, #116]	@ (800575c <prvAddNewTaskToReadyList+0xd0>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056f0:	4b1b      	ldr	r3, [pc, #108]	@ (8005760 <prvAddNewTaskToReadyList+0xd4>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d903      	bls.n	8005700 <prvAddNewTaskToReadyList+0x74>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fc:	4a18      	ldr	r2, [pc, #96]	@ (8005760 <prvAddNewTaskToReadyList+0xd4>)
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005704:	4613      	mov	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4a15      	ldr	r2, [pc, #84]	@ (8005764 <prvAddNewTaskToReadyList+0xd8>)
 800570e:	441a      	add	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3304      	adds	r3, #4
 8005714:	4619      	mov	r1, r3
 8005716:	4610      	mov	r0, r2
 8005718:	f7ff f8e9 	bl	80048ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800571c:	f001 fa5e 	bl	8006bdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005720:	4b0d      	ldr	r3, [pc, #52]	@ (8005758 <prvAddNewTaskToReadyList+0xcc>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00e      	beq.n	8005746 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005728:	4b0a      	ldr	r3, [pc, #40]	@ (8005754 <prvAddNewTaskToReadyList+0xc8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005732:	429a      	cmp	r2, r3
 8005734:	d207      	bcs.n	8005746 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005736:	4b0c      	ldr	r3, [pc, #48]	@ (8005768 <prvAddNewTaskToReadyList+0xdc>)
 8005738:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005746:	bf00      	nop
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20000e54 	.word	0x20000e54
 8005754:	20000980 	.word	0x20000980
 8005758:	20000e60 	.word	0x20000e60
 800575c:	20000e70 	.word	0x20000e70
 8005760:	20000e5c 	.word	0x20000e5c
 8005764:	20000984 	.word	0x20000984
 8005768:	e000ed04 	.word	0xe000ed04

0800576c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005774:	2300      	movs	r3, #0
 8005776:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d018      	beq.n	80057b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800577e:	4b14      	ldr	r3, [pc, #80]	@ (80057d0 <vTaskDelay+0x64>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00b      	beq.n	800579e <vTaskDelay+0x32>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	60bb      	str	r3, [r7, #8]
}
 8005798:	bf00      	nop
 800579a:	bf00      	nop
 800579c:	e7fd      	b.n	800579a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800579e:	f000 f88b 	bl	80058b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80057a2:	2100      	movs	r1, #0
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fd09 	bl	80061bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80057aa:	f000 f893 	bl	80058d4 <xTaskResumeAll>
 80057ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d107      	bne.n	80057c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80057b6:	4b07      	ldr	r3, [pc, #28]	@ (80057d4 <vTaskDelay+0x68>)
 80057b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057c6:	bf00      	nop
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000e7c 	.word	0x20000e7c
 80057d4:	e000ed04 	.word	0xe000ed04

080057d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	@ 0x28
 80057dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80057de:	2300      	movs	r3, #0
 80057e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80057e2:	2300      	movs	r3, #0
 80057e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80057e6:	463a      	mov	r2, r7
 80057e8:	1d39      	adds	r1, r7, #4
 80057ea:	f107 0308 	add.w	r3, r7, #8
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7ff f81c 	bl	800482c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80057f4:	6839      	ldr	r1, [r7, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	9202      	str	r2, [sp, #8]
 80057fc:	9301      	str	r3, [sp, #4]
 80057fe:	2300      	movs	r3, #0
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	2300      	movs	r3, #0
 8005804:	460a      	mov	r2, r1
 8005806:	4924      	ldr	r1, [pc, #144]	@ (8005898 <vTaskStartScheduler+0xc0>)
 8005808:	4824      	ldr	r0, [pc, #144]	@ (800589c <vTaskStartScheduler+0xc4>)
 800580a:	f7ff fdf1 	bl	80053f0 <xTaskCreateStatic>
 800580e:	4603      	mov	r3, r0
 8005810:	4a23      	ldr	r2, [pc, #140]	@ (80058a0 <vTaskStartScheduler+0xc8>)
 8005812:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005814:	4b22      	ldr	r3, [pc, #136]	@ (80058a0 <vTaskStartScheduler+0xc8>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800581c:	2301      	movs	r3, #1
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	e001      	b.n	8005826 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005822:	2300      	movs	r3, #0
 8005824:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d102      	bne.n	8005832 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800582c:	f000 fd1a 	bl	8006264 <xTimerCreateTimerTask>
 8005830:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d11b      	bne.n	8005870 <vTaskStartScheduler+0x98>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	613b      	str	r3, [r7, #16]
}
 800584a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800584c:	4b15      	ldr	r3, [pc, #84]	@ (80058a4 <vTaskStartScheduler+0xcc>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3354      	adds	r3, #84	@ 0x54
 8005852:	4a15      	ldr	r2, [pc, #84]	@ (80058a8 <vTaskStartScheduler+0xd0>)
 8005854:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005856:	4b15      	ldr	r3, [pc, #84]	@ (80058ac <vTaskStartScheduler+0xd4>)
 8005858:	f04f 32ff 	mov.w	r2, #4294967295
 800585c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800585e:	4b14      	ldr	r3, [pc, #80]	@ (80058b0 <vTaskStartScheduler+0xd8>)
 8005860:	2201      	movs	r2, #1
 8005862:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005864:	4b13      	ldr	r3, [pc, #76]	@ (80058b4 <vTaskStartScheduler+0xdc>)
 8005866:	2200      	movs	r2, #0
 8005868:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800586a:	f001 f8e1 	bl	8006a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800586e:	e00f      	b.n	8005890 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005876:	d10b      	bne.n	8005890 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	60fb      	str	r3, [r7, #12]
}
 800588a:	bf00      	nop
 800588c:	bf00      	nop
 800588e:	e7fd      	b.n	800588c <vTaskStartScheduler+0xb4>
}
 8005890:	bf00      	nop
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	080073b8 	.word	0x080073b8
 800589c:	08005ee9 	.word	0x08005ee9
 80058a0:	20000e78 	.word	0x20000e78
 80058a4:	20000980 	.word	0x20000980
 80058a8:	20000010 	.word	0x20000010
 80058ac:	20000e74 	.word	0x20000e74
 80058b0:	20000e60 	.word	0x20000e60
 80058b4:	20000e58 	.word	0x20000e58

080058b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80058bc:	4b04      	ldr	r3, [pc, #16]	@ (80058d0 <vTaskSuspendAll+0x18>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3301      	adds	r3, #1
 80058c2:	4a03      	ldr	r2, [pc, #12]	@ (80058d0 <vTaskSuspendAll+0x18>)
 80058c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80058c6:	bf00      	nop
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	20000e7c 	.word	0x20000e7c

080058d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80058de:	2300      	movs	r3, #0
 80058e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80058e2:	4b42      	ldr	r3, [pc, #264]	@ (80059ec <xTaskResumeAll+0x118>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10b      	bne.n	8005902 <xTaskResumeAll+0x2e>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	603b      	str	r3, [r7, #0]
}
 80058fc:	bf00      	nop
 80058fe:	bf00      	nop
 8005900:	e7fd      	b.n	80058fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005902:	f001 f939 	bl	8006b78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005906:	4b39      	ldr	r3, [pc, #228]	@ (80059ec <xTaskResumeAll+0x118>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3b01      	subs	r3, #1
 800590c:	4a37      	ldr	r2, [pc, #220]	@ (80059ec <xTaskResumeAll+0x118>)
 800590e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005910:	4b36      	ldr	r3, [pc, #216]	@ (80059ec <xTaskResumeAll+0x118>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d162      	bne.n	80059de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005918:	4b35      	ldr	r3, [pc, #212]	@ (80059f0 <xTaskResumeAll+0x11c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d05e      	beq.n	80059de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005920:	e02f      	b.n	8005982 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005922:	4b34      	ldr	r3, [pc, #208]	@ (80059f4 <xTaskResumeAll+0x120>)
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3318      	adds	r3, #24
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff f83a 	bl	80049a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3304      	adds	r3, #4
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff f835 	bl	80049a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005942:	4b2d      	ldr	r3, [pc, #180]	@ (80059f8 <xTaskResumeAll+0x124>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d903      	bls.n	8005952 <xTaskResumeAll+0x7e>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594e:	4a2a      	ldr	r2, [pc, #168]	@ (80059f8 <xTaskResumeAll+0x124>)
 8005950:	6013      	str	r3, [r2, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005956:	4613      	mov	r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4a27      	ldr	r2, [pc, #156]	@ (80059fc <xTaskResumeAll+0x128>)
 8005960:	441a      	add	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3304      	adds	r3, #4
 8005966:	4619      	mov	r1, r3
 8005968:	4610      	mov	r0, r2
 800596a:	f7fe ffc0 	bl	80048ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005972:	4b23      	ldr	r3, [pc, #140]	@ (8005a00 <xTaskResumeAll+0x12c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005978:	429a      	cmp	r2, r3
 800597a:	d302      	bcc.n	8005982 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800597c:	4b21      	ldr	r3, [pc, #132]	@ (8005a04 <xTaskResumeAll+0x130>)
 800597e:	2201      	movs	r2, #1
 8005980:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005982:	4b1c      	ldr	r3, [pc, #112]	@ (80059f4 <xTaskResumeAll+0x120>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1cb      	bne.n	8005922 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005990:	f000 fb66 	bl	8006060 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005994:	4b1c      	ldr	r3, [pc, #112]	@ (8005a08 <xTaskResumeAll+0x134>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d010      	beq.n	80059c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059a0:	f000 f846 	bl	8005a30 <xTaskIncrementTick>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80059aa:	4b16      	ldr	r3, [pc, #88]	@ (8005a04 <xTaskResumeAll+0x130>)
 80059ac:	2201      	movs	r2, #1
 80059ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1f1      	bne.n	80059a0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80059bc:	4b12      	ldr	r3, [pc, #72]	@ (8005a08 <xTaskResumeAll+0x134>)
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80059c2:	4b10      	ldr	r3, [pc, #64]	@ (8005a04 <xTaskResumeAll+0x130>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80059ca:	2301      	movs	r3, #1
 80059cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80059ce:	4b0f      	ldr	r3, [pc, #60]	@ (8005a0c <xTaskResumeAll+0x138>)
 80059d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059de:	f001 f8fd 	bl	8006bdc <vPortExitCritical>

	return xAlreadyYielded;
 80059e2:	68bb      	ldr	r3, [r7, #8]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	20000e7c 	.word	0x20000e7c
 80059f0:	20000e54 	.word	0x20000e54
 80059f4:	20000e14 	.word	0x20000e14
 80059f8:	20000e5c 	.word	0x20000e5c
 80059fc:	20000984 	.word	0x20000984
 8005a00:	20000980 	.word	0x20000980
 8005a04:	20000e68 	.word	0x20000e68
 8005a08:	20000e64 	.word	0x20000e64
 8005a0c:	e000ed04 	.word	0xe000ed04

08005a10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a16:	4b05      	ldr	r3, [pc, #20]	@ (8005a2c <xTaskGetTickCount+0x1c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a1c:	687b      	ldr	r3, [r7, #4]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	20000e58 	.word	0x20000e58

08005a30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a3a:	4b4f      	ldr	r3, [pc, #316]	@ (8005b78 <xTaskIncrementTick+0x148>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f040 8090 	bne.w	8005b64 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a44:	4b4d      	ldr	r3, [pc, #308]	@ (8005b7c <xTaskIncrementTick+0x14c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a4c:	4a4b      	ldr	r2, [pc, #300]	@ (8005b7c <xTaskIncrementTick+0x14c>)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d121      	bne.n	8005a9c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a58:	4b49      	ldr	r3, [pc, #292]	@ (8005b80 <xTaskIncrementTick+0x150>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00b      	beq.n	8005a7a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	603b      	str	r3, [r7, #0]
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	e7fd      	b.n	8005a76 <xTaskIncrementTick+0x46>
 8005a7a:	4b41      	ldr	r3, [pc, #260]	@ (8005b80 <xTaskIncrementTick+0x150>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	4b40      	ldr	r3, [pc, #256]	@ (8005b84 <xTaskIncrementTick+0x154>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a3e      	ldr	r2, [pc, #248]	@ (8005b80 <xTaskIncrementTick+0x150>)
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	4a3e      	ldr	r2, [pc, #248]	@ (8005b84 <xTaskIncrementTick+0x154>)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b88 <xTaskIncrementTick+0x158>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3301      	adds	r3, #1
 8005a94:	4a3c      	ldr	r2, [pc, #240]	@ (8005b88 <xTaskIncrementTick+0x158>)
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	f000 fae2 	bl	8006060 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8005b8c <xTaskIncrementTick+0x15c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d349      	bcc.n	8005b3a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aa6:	4b36      	ldr	r3, [pc, #216]	@ (8005b80 <xTaskIncrementTick+0x150>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d104      	bne.n	8005aba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ab0:	4b36      	ldr	r3, [pc, #216]	@ (8005b8c <xTaskIncrementTick+0x15c>)
 8005ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab6:	601a      	str	r2, [r3, #0]
					break;
 8005ab8:	e03f      	b.n	8005b3a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aba:	4b31      	ldr	r3, [pc, #196]	@ (8005b80 <xTaskIncrementTick+0x150>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d203      	bcs.n	8005ada <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ad2:	4a2e      	ldr	r2, [pc, #184]	@ (8005b8c <xTaskIncrementTick+0x15c>)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ad8:	e02f      	b.n	8005b3a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	3304      	adds	r3, #4
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fe ff62 	bl	80049a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d004      	beq.n	8005af6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	3318      	adds	r3, #24
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fe ff59 	bl	80049a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005afa:	4b25      	ldr	r3, [pc, #148]	@ (8005b90 <xTaskIncrementTick+0x160>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d903      	bls.n	8005b0a <xTaskIncrementTick+0xda>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b06:	4a22      	ldr	r2, [pc, #136]	@ (8005b90 <xTaskIncrementTick+0x160>)
 8005b08:	6013      	str	r3, [r2, #0]
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0e:	4613      	mov	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4a1f      	ldr	r2, [pc, #124]	@ (8005b94 <xTaskIncrementTick+0x164>)
 8005b18:	441a      	add	r2, r3
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4610      	mov	r0, r2
 8005b22:	f7fe fee4 	bl	80048ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005b98 <xTaskIncrementTick+0x168>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d3b8      	bcc.n	8005aa6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005b34:	2301      	movs	r3, #1
 8005b36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b38:	e7b5      	b.n	8005aa6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b3a:	4b17      	ldr	r3, [pc, #92]	@ (8005b98 <xTaskIncrementTick+0x168>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b40:	4914      	ldr	r1, [pc, #80]	@ (8005b94 <xTaskIncrementTick+0x164>)
 8005b42:	4613      	mov	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	440b      	add	r3, r1
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d901      	bls.n	8005b56 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005b52:	2301      	movs	r3, #1
 8005b54:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b56:	4b11      	ldr	r3, [pc, #68]	@ (8005b9c <xTaskIncrementTick+0x16c>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d007      	beq.n	8005b6e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	e004      	b.n	8005b6e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b64:	4b0e      	ldr	r3, [pc, #56]	@ (8005ba0 <xTaskIncrementTick+0x170>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ba0 <xTaskIncrementTick+0x170>)
 8005b6c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b6e:	697b      	ldr	r3, [r7, #20]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20000e7c 	.word	0x20000e7c
 8005b7c:	20000e58 	.word	0x20000e58
 8005b80:	20000e0c 	.word	0x20000e0c
 8005b84:	20000e10 	.word	0x20000e10
 8005b88:	20000e6c 	.word	0x20000e6c
 8005b8c:	20000e74 	.word	0x20000e74
 8005b90:	20000e5c 	.word	0x20000e5c
 8005b94:	20000984 	.word	0x20000984
 8005b98:	20000980 	.word	0x20000980
 8005b9c:	20000e68 	.word	0x20000e68
 8005ba0:	20000e64 	.word	0x20000e64

08005ba4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005baa:	4b2b      	ldr	r3, [pc, #172]	@ (8005c58 <vTaskSwitchContext+0xb4>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8005c5c <vTaskSwitchContext+0xb8>)
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bb8:	e047      	b.n	8005c4a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005bba:	4b28      	ldr	r3, [pc, #160]	@ (8005c5c <vTaskSwitchContext+0xb8>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bc0:	4b27      	ldr	r3, [pc, #156]	@ (8005c60 <vTaskSwitchContext+0xbc>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	e011      	b.n	8005bec <vTaskSwitchContext+0x48>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10b      	bne.n	8005be6 <vTaskSwitchContext+0x42>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	607b      	str	r3, [r7, #4]
}
 8005be0:	bf00      	nop
 8005be2:	bf00      	nop
 8005be4:	e7fd      	b.n	8005be2 <vTaskSwitchContext+0x3e>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	491d      	ldr	r1, [pc, #116]	@ (8005c64 <vTaskSwitchContext+0xc0>)
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d0e3      	beq.n	8005bc8 <vTaskSwitchContext+0x24>
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	4613      	mov	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4a16      	ldr	r2, [pc, #88]	@ (8005c64 <vTaskSwitchContext+0xc0>)
 8005c0c:	4413      	add	r3, r2
 8005c0e:	60bb      	str	r3, [r7, #8]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	605a      	str	r2, [r3, #4]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	3308      	adds	r3, #8
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d104      	bne.n	8005c30 <vTaskSwitchContext+0x8c>
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	605a      	str	r2, [r3, #4]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	4a0c      	ldr	r2, [pc, #48]	@ (8005c68 <vTaskSwitchContext+0xc4>)
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	4a09      	ldr	r2, [pc, #36]	@ (8005c60 <vTaskSwitchContext+0xbc>)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c40:	4b09      	ldr	r3, [pc, #36]	@ (8005c68 <vTaskSwitchContext+0xc4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	3354      	adds	r3, #84	@ 0x54
 8005c46:	4a09      	ldr	r2, [pc, #36]	@ (8005c6c <vTaskSwitchContext+0xc8>)
 8005c48:	6013      	str	r3, [r2, #0]
}
 8005c4a:	bf00      	nop
 8005c4c:	3714      	adds	r7, #20
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	20000e7c 	.word	0x20000e7c
 8005c5c:	20000e68 	.word	0x20000e68
 8005c60:	20000e5c 	.word	0x20000e5c
 8005c64:	20000984 	.word	0x20000984
 8005c68:	20000980 	.word	0x20000980
 8005c6c:	20000010 	.word	0x20000010

08005c70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10b      	bne.n	8005c98 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	60fb      	str	r3, [r7, #12]
}
 8005c92:	bf00      	nop
 8005c94:	bf00      	nop
 8005c96:	e7fd      	b.n	8005c94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c98:	4b07      	ldr	r3, [pc, #28]	@ (8005cb8 <vTaskPlaceOnEventList+0x48>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3318      	adds	r3, #24
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fe fe48 	bl	8004936 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	6838      	ldr	r0, [r7, #0]
 8005caa:	f000 fa87 	bl	80061bc <prvAddCurrentTaskToDelayedList>
}
 8005cae:	bf00      	nop
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000980 	.word	0x20000980

08005cbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10b      	bne.n	8005ce6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	617b      	str	r3, [r7, #20]
}
 8005ce0:	bf00      	nop
 8005ce2:	bf00      	nop
 8005ce4:	e7fd      	b.n	8005ce2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8005d10 <vTaskPlaceOnEventListRestricted+0x54>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	3318      	adds	r3, #24
 8005cec:	4619      	mov	r1, r3
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7fe fdfd 	bl	80048ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	68b8      	ldr	r0, [r7, #8]
 8005d04:	f000 fa5a 	bl	80061bc <prvAddCurrentTaskToDelayedList>
	}
 8005d08:	bf00      	nop
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	20000980 	.word	0x20000980

08005d14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10b      	bne.n	8005d42 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	60fb      	str	r3, [r7, #12]
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	e7fd      	b.n	8005d3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	3318      	adds	r3, #24
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fe fe2e 	bl	80049a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc4 <xTaskRemoveFromEventList+0xb0>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d11d      	bne.n	8005d90 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	3304      	adds	r3, #4
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fe fe25 	bl	80049a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d62:	4b19      	ldr	r3, [pc, #100]	@ (8005dc8 <xTaskRemoveFromEventList+0xb4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d903      	bls.n	8005d72 <xTaskRemoveFromEventList+0x5e>
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6e:	4a16      	ldr	r2, [pc, #88]	@ (8005dc8 <xTaskRemoveFromEventList+0xb4>)
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4a13      	ldr	r2, [pc, #76]	@ (8005dcc <xTaskRemoveFromEventList+0xb8>)
 8005d80:	441a      	add	r2, r3
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	3304      	adds	r3, #4
 8005d86:	4619      	mov	r1, r3
 8005d88:	4610      	mov	r0, r2
 8005d8a:	f7fe fdb0 	bl	80048ee <vListInsertEnd>
 8005d8e:	e005      	b.n	8005d9c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	3318      	adds	r3, #24
 8005d94:	4619      	mov	r1, r3
 8005d96:	480e      	ldr	r0, [pc, #56]	@ (8005dd0 <xTaskRemoveFromEventList+0xbc>)
 8005d98:	f7fe fda9 	bl	80048ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da0:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd4 <xTaskRemoveFromEventList+0xc0>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d905      	bls.n	8005db6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005daa:	2301      	movs	r3, #1
 8005dac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005dae:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd8 <xTaskRemoveFromEventList+0xc4>)
 8005db0:	2201      	movs	r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	e001      	b.n	8005dba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005dba:	697b      	ldr	r3, [r7, #20]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	20000e7c 	.word	0x20000e7c
 8005dc8:	20000e5c 	.word	0x20000e5c
 8005dcc:	20000984 	.word	0x20000984
 8005dd0:	20000e14 	.word	0x20000e14
 8005dd4:	20000980 	.word	0x20000980
 8005dd8:	20000e68 	.word	0x20000e68

08005ddc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005de4:	4b06      	ldr	r3, [pc, #24]	@ (8005e00 <vTaskInternalSetTimeOutState+0x24>)
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005dec:	4b05      	ldr	r3, [pc, #20]	@ (8005e04 <vTaskInternalSetTimeOutState+0x28>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	605a      	str	r2, [r3, #4]
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20000e6c 	.word	0x20000e6c
 8005e04:	20000e58 	.word	0x20000e58

08005e08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10b      	bne.n	8005e30 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	613b      	str	r3, [r7, #16]
}
 8005e2a:	bf00      	nop
 8005e2c:	bf00      	nop
 8005e2e:	e7fd      	b.n	8005e2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10b      	bne.n	8005e4e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	60fb      	str	r3, [r7, #12]
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	e7fd      	b.n	8005e4a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005e4e:	f000 fe93 	bl	8006b78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e52:	4b1d      	ldr	r3, [pc, #116]	@ (8005ec8 <xTaskCheckForTimeOut+0xc0>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6a:	d102      	bne.n	8005e72 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	61fb      	str	r3, [r7, #28]
 8005e70:	e023      	b.n	8005eba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4b15      	ldr	r3, [pc, #84]	@ (8005ecc <xTaskCheckForTimeOut+0xc4>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d007      	beq.n	8005e8e <xTaskCheckForTimeOut+0x86>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d302      	bcc.n	8005e8e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	61fb      	str	r3, [r7, #28]
 8005e8c:	e015      	b.n	8005eba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d20b      	bcs.n	8005eb0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	1ad2      	subs	r2, r2, r3
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff ff99 	bl	8005ddc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61fb      	str	r3, [r7, #28]
 8005eae:	e004      	b.n	8005eba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005eba:	f000 fe8f 	bl	8006bdc <vPortExitCritical>

	return xReturn;
 8005ebe:	69fb      	ldr	r3, [r7, #28]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3720      	adds	r7, #32
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	20000e58 	.word	0x20000e58
 8005ecc:	20000e6c 	.word	0x20000e6c

08005ed0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ed4:	4b03      	ldr	r3, [pc, #12]	@ (8005ee4 <vTaskMissedYield+0x14>)
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]
}
 8005eda:	bf00      	nop
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	20000e68 	.word	0x20000e68

08005ee8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ef0:	f000 f852 	bl	8005f98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ef4:	4b06      	ldr	r3, [pc, #24]	@ (8005f10 <prvIdleTask+0x28>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d9f9      	bls.n	8005ef0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005efc:	4b05      	ldr	r3, [pc, #20]	@ (8005f14 <prvIdleTask+0x2c>)
 8005efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f0c:	e7f0      	b.n	8005ef0 <prvIdleTask+0x8>
 8005f0e:	bf00      	nop
 8005f10:	20000984 	.word	0x20000984
 8005f14:	e000ed04 	.word	0xe000ed04

08005f18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f1e:	2300      	movs	r3, #0
 8005f20:	607b      	str	r3, [r7, #4]
 8005f22:	e00c      	b.n	8005f3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	4613      	mov	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4413      	add	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4a12      	ldr	r2, [pc, #72]	@ (8005f78 <prvInitialiseTaskLists+0x60>)
 8005f30:	4413      	add	r3, r2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fe fcae 	bl	8004894 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	607b      	str	r3, [r7, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b37      	cmp	r3, #55	@ 0x37
 8005f42:	d9ef      	bls.n	8005f24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f44:	480d      	ldr	r0, [pc, #52]	@ (8005f7c <prvInitialiseTaskLists+0x64>)
 8005f46:	f7fe fca5 	bl	8004894 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f4a:	480d      	ldr	r0, [pc, #52]	@ (8005f80 <prvInitialiseTaskLists+0x68>)
 8005f4c:	f7fe fca2 	bl	8004894 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f50:	480c      	ldr	r0, [pc, #48]	@ (8005f84 <prvInitialiseTaskLists+0x6c>)
 8005f52:	f7fe fc9f 	bl	8004894 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f56:	480c      	ldr	r0, [pc, #48]	@ (8005f88 <prvInitialiseTaskLists+0x70>)
 8005f58:	f7fe fc9c 	bl	8004894 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f5c:	480b      	ldr	r0, [pc, #44]	@ (8005f8c <prvInitialiseTaskLists+0x74>)
 8005f5e:	f7fe fc99 	bl	8004894 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f62:	4b0b      	ldr	r3, [pc, #44]	@ (8005f90 <prvInitialiseTaskLists+0x78>)
 8005f64:	4a05      	ldr	r2, [pc, #20]	@ (8005f7c <prvInitialiseTaskLists+0x64>)
 8005f66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f68:	4b0a      	ldr	r3, [pc, #40]	@ (8005f94 <prvInitialiseTaskLists+0x7c>)
 8005f6a:	4a05      	ldr	r2, [pc, #20]	@ (8005f80 <prvInitialiseTaskLists+0x68>)
 8005f6c:	601a      	str	r2, [r3, #0]
}
 8005f6e:	bf00      	nop
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000984 	.word	0x20000984
 8005f7c:	20000de4 	.word	0x20000de4
 8005f80:	20000df8 	.word	0x20000df8
 8005f84:	20000e14 	.word	0x20000e14
 8005f88:	20000e28 	.word	0x20000e28
 8005f8c:	20000e40 	.word	0x20000e40
 8005f90:	20000e0c 	.word	0x20000e0c
 8005f94:	20000e10 	.word	0x20000e10

08005f98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f9e:	e019      	b.n	8005fd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005fa0:	f000 fdea 	bl	8006b78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fa4:	4b10      	ldr	r3, [pc, #64]	@ (8005fe8 <prvCheckTasksWaitingTermination+0x50>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe fcf9 	bl	80049a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005fec <prvCheckTasksWaitingTermination+0x54>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	4a0b      	ldr	r2, [pc, #44]	@ (8005fec <prvCheckTasksWaitingTermination+0x54>)
 8005fbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff0 <prvCheckTasksWaitingTermination+0x58>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ff0 <prvCheckTasksWaitingTermination+0x58>)
 8005fc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fca:	f000 fe07 	bl	8006bdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f810 	bl	8005ff4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fd4:	4b06      	ldr	r3, [pc, #24]	@ (8005ff0 <prvCheckTasksWaitingTermination+0x58>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1e1      	bne.n	8005fa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000e28 	.word	0x20000e28
 8005fec:	20000e54 	.word	0x20000e54
 8005ff0:	20000e3c 	.word	0x20000e3c

08005ff4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3354      	adds	r3, #84	@ 0x54
 8006000:	4618      	mov	r0, r3
 8006002:	f001 f8d1 	bl	80071a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800600c:	2b00      	cmp	r3, #0
 800600e:	d108      	bne.n	8006022 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006014:	4618      	mov	r0, r3
 8006016:	f000 ff9f 	bl	8006f58 <vPortFree>
				vPortFree( pxTCB );
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 ff9c 	bl	8006f58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006020:	e019      	b.n	8006056 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006028:	2b01      	cmp	r3, #1
 800602a:	d103      	bne.n	8006034 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 ff93 	bl	8006f58 <vPortFree>
	}
 8006032:	e010      	b.n	8006056 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800603a:	2b02      	cmp	r3, #2
 800603c:	d00b      	beq.n	8006056 <prvDeleteTCB+0x62>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	60fb      	str	r3, [r7, #12]
}
 8006050:	bf00      	nop
 8006052:	bf00      	nop
 8006054:	e7fd      	b.n	8006052 <prvDeleteTCB+0x5e>
	}
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006066:	4b0c      	ldr	r3, [pc, #48]	@ (8006098 <prvResetNextTaskUnblockTime+0x38>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d104      	bne.n	800607a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006070:	4b0a      	ldr	r3, [pc, #40]	@ (800609c <prvResetNextTaskUnblockTime+0x3c>)
 8006072:	f04f 32ff 	mov.w	r2, #4294967295
 8006076:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006078:	e008      	b.n	800608c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800607a:	4b07      	ldr	r3, [pc, #28]	@ (8006098 <prvResetNextTaskUnblockTime+0x38>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	4a04      	ldr	r2, [pc, #16]	@ (800609c <prvResetNextTaskUnblockTime+0x3c>)
 800608a:	6013      	str	r3, [r2, #0]
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	20000e0c 	.word	0x20000e0c
 800609c:	20000e74 	.word	0x20000e74

080060a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80060a6:	4b0b      	ldr	r3, [pc, #44]	@ (80060d4 <xTaskGetSchedulerState+0x34>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d102      	bne.n	80060b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80060ae:	2301      	movs	r3, #1
 80060b0:	607b      	str	r3, [r7, #4]
 80060b2:	e008      	b.n	80060c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060b4:	4b08      	ldr	r3, [pc, #32]	@ (80060d8 <xTaskGetSchedulerState+0x38>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d102      	bne.n	80060c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060bc:	2302      	movs	r3, #2
 80060be:	607b      	str	r3, [r7, #4]
 80060c0:	e001      	b.n	80060c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060c2:	2300      	movs	r3, #0
 80060c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060c6:	687b      	ldr	r3, [r7, #4]
	}
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	20000e60 	.word	0x20000e60
 80060d8:	20000e7c 	.word	0x20000e7c

080060dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060e8:	2300      	movs	r3, #0
 80060ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d058      	beq.n	80061a4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060f2:	4b2f      	ldr	r3, [pc, #188]	@ (80061b0 <xTaskPriorityDisinherit+0xd4>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d00b      	beq.n	8006114 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	60fb      	str	r3, [r7, #12]
}
 800610e:	bf00      	nop
 8006110:	bf00      	nop
 8006112:	e7fd      	b.n	8006110 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10b      	bne.n	8006134 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	60bb      	str	r3, [r7, #8]
}
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	e7fd      	b.n	8006130 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006138:	1e5a      	subs	r2, r3, #1
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006146:	429a      	cmp	r2, r3
 8006148:	d02c      	beq.n	80061a4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800614e:	2b00      	cmp	r3, #0
 8006150:	d128      	bne.n	80061a4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	3304      	adds	r3, #4
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe fc26 	bl	80049a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006168:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006174:	4b0f      	ldr	r3, [pc, #60]	@ (80061b4 <xTaskPriorityDisinherit+0xd8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	429a      	cmp	r2, r3
 800617a:	d903      	bls.n	8006184 <xTaskPriorityDisinherit+0xa8>
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	4a0c      	ldr	r2, [pc, #48]	@ (80061b4 <xTaskPriorityDisinherit+0xd8>)
 8006182:	6013      	str	r3, [r2, #0]
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4a09      	ldr	r2, [pc, #36]	@ (80061b8 <xTaskPriorityDisinherit+0xdc>)
 8006192:	441a      	add	r2, r3
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	3304      	adds	r3, #4
 8006198:	4619      	mov	r1, r3
 800619a:	4610      	mov	r0, r2
 800619c:	f7fe fba7 	bl	80048ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061a0:	2301      	movs	r3, #1
 80061a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061a4:	697b      	ldr	r3, [r7, #20]
	}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20000980 	.word	0x20000980
 80061b4:	20000e5c 	.word	0x20000e5c
 80061b8:	20000984 	.word	0x20000984

080061bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061c6:	4b21      	ldr	r3, [pc, #132]	@ (800624c <prvAddCurrentTaskToDelayedList+0x90>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061cc:	4b20      	ldr	r3, [pc, #128]	@ (8006250 <prvAddCurrentTaskToDelayedList+0x94>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3304      	adds	r3, #4
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe fbe8 	bl	80049a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061de:	d10a      	bne.n	80061f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d007      	beq.n	80061f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061e6:	4b1a      	ldr	r3, [pc, #104]	@ (8006250 <prvAddCurrentTaskToDelayedList+0x94>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4819      	ldr	r0, [pc, #100]	@ (8006254 <prvAddCurrentTaskToDelayedList+0x98>)
 80061f0:	f7fe fb7d 	bl	80048ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061f4:	e026      	b.n	8006244 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4413      	add	r3, r2
 80061fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061fe:	4b14      	ldr	r3, [pc, #80]	@ (8006250 <prvAddCurrentTaskToDelayedList+0x94>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	429a      	cmp	r2, r3
 800620c:	d209      	bcs.n	8006222 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800620e:	4b12      	ldr	r3, [pc, #72]	@ (8006258 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	4b0f      	ldr	r3, [pc, #60]	@ (8006250 <prvAddCurrentTaskToDelayedList+0x94>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3304      	adds	r3, #4
 8006218:	4619      	mov	r1, r3
 800621a:	4610      	mov	r0, r2
 800621c:	f7fe fb8b 	bl	8004936 <vListInsert>
}
 8006220:	e010      	b.n	8006244 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006222:	4b0e      	ldr	r3, [pc, #56]	@ (800625c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	4b0a      	ldr	r3, [pc, #40]	@ (8006250 <prvAddCurrentTaskToDelayedList+0x94>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	3304      	adds	r3, #4
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f7fe fb81 	bl	8004936 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006234:	4b0a      	ldr	r3, [pc, #40]	@ (8006260 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	429a      	cmp	r2, r3
 800623c:	d202      	bcs.n	8006244 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800623e:	4a08      	ldr	r2, [pc, #32]	@ (8006260 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	6013      	str	r3, [r2, #0]
}
 8006244:	bf00      	nop
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	20000e58 	.word	0x20000e58
 8006250:	20000980 	.word	0x20000980
 8006254:	20000e40 	.word	0x20000e40
 8006258:	20000e10 	.word	0x20000e10
 800625c:	20000e0c 	.word	0x20000e0c
 8006260:	20000e74 	.word	0x20000e74

08006264 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08a      	sub	sp, #40	@ 0x28
 8006268:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800626e:	f000 fb13 	bl	8006898 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006272:	4b1d      	ldr	r3, [pc, #116]	@ (80062e8 <xTimerCreateTimerTask+0x84>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d021      	beq.n	80062be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800627e:	2300      	movs	r3, #0
 8006280:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006282:	1d3a      	adds	r2, r7, #4
 8006284:	f107 0108 	add.w	r1, r7, #8
 8006288:	f107 030c 	add.w	r3, r7, #12
 800628c:	4618      	mov	r0, r3
 800628e:	f7fe fae7 	bl	8004860 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	9202      	str	r2, [sp, #8]
 800629a:	9301      	str	r3, [sp, #4]
 800629c:	2302      	movs	r3, #2
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	2300      	movs	r3, #0
 80062a2:	460a      	mov	r2, r1
 80062a4:	4911      	ldr	r1, [pc, #68]	@ (80062ec <xTimerCreateTimerTask+0x88>)
 80062a6:	4812      	ldr	r0, [pc, #72]	@ (80062f0 <xTimerCreateTimerTask+0x8c>)
 80062a8:	f7ff f8a2 	bl	80053f0 <xTaskCreateStatic>
 80062ac:	4603      	mov	r3, r0
 80062ae:	4a11      	ldr	r2, [pc, #68]	@ (80062f4 <xTimerCreateTimerTask+0x90>)
 80062b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80062b2:	4b10      	ldr	r3, [pc, #64]	@ (80062f4 <xTimerCreateTimerTask+0x90>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80062ba:	2301      	movs	r3, #1
 80062bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10b      	bne.n	80062dc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	613b      	str	r3, [r7, #16]
}
 80062d6:	bf00      	nop
 80062d8:	bf00      	nop
 80062da:	e7fd      	b.n	80062d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80062dc:	697b      	ldr	r3, [r7, #20]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20000eb0 	.word	0x20000eb0
 80062ec:	080073c0 	.word	0x080073c0
 80062f0:	08006431 	.word	0x08006431
 80062f4:	20000eb4 	.word	0x20000eb4

080062f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b08a      	sub	sp, #40	@ 0x28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
 8006304:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006306:	2300      	movs	r3, #0
 8006308:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10b      	bne.n	8006328 <xTimerGenericCommand+0x30>
	__asm volatile
 8006310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	623b      	str	r3, [r7, #32]
}
 8006322:	bf00      	nop
 8006324:	bf00      	nop
 8006326:	e7fd      	b.n	8006324 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006328:	4b19      	ldr	r3, [pc, #100]	@ (8006390 <xTimerGenericCommand+0x98>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d02a      	beq.n	8006386 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b05      	cmp	r3, #5
 8006340:	dc18      	bgt.n	8006374 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006342:	f7ff fead 	bl	80060a0 <xTaskGetSchedulerState>
 8006346:	4603      	mov	r3, r0
 8006348:	2b02      	cmp	r3, #2
 800634a:	d109      	bne.n	8006360 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800634c:	4b10      	ldr	r3, [pc, #64]	@ (8006390 <xTimerGenericCommand+0x98>)
 800634e:	6818      	ldr	r0, [r3, #0]
 8006350:	f107 0110 	add.w	r1, r7, #16
 8006354:	2300      	movs	r3, #0
 8006356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006358:	f7fe fc5a 	bl	8004c10 <xQueueGenericSend>
 800635c:	6278      	str	r0, [r7, #36]	@ 0x24
 800635e:	e012      	b.n	8006386 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006360:	4b0b      	ldr	r3, [pc, #44]	@ (8006390 <xTimerGenericCommand+0x98>)
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	f107 0110 	add.w	r1, r7, #16
 8006368:	2300      	movs	r3, #0
 800636a:	2200      	movs	r2, #0
 800636c:	f7fe fc50 	bl	8004c10 <xQueueGenericSend>
 8006370:	6278      	str	r0, [r7, #36]	@ 0x24
 8006372:	e008      	b.n	8006386 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006374:	4b06      	ldr	r3, [pc, #24]	@ (8006390 <xTimerGenericCommand+0x98>)
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	f107 0110 	add.w	r1, r7, #16
 800637c:	2300      	movs	r3, #0
 800637e:	683a      	ldr	r2, [r7, #0]
 8006380:	f7fe fd48 	bl	8004e14 <xQueueGenericSendFromISR>
 8006384:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006388:	4618      	mov	r0, r3
 800638a:	3728      	adds	r7, #40	@ 0x28
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	20000eb0 	.word	0x20000eb0

08006394 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af02      	add	r7, sp, #8
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800639e:	4b23      	ldr	r3, [pc, #140]	@ (800642c <prvProcessExpiredTimer+0x98>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	3304      	adds	r3, #4
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fe fafb 	bl	80049a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d023      	beq.n	8006408 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	699a      	ldr	r2, [r3, #24]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	18d1      	adds	r1, r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	6978      	ldr	r0, [r7, #20]
 80063ce:	f000 f8d5 	bl	800657c <prvInsertTimerInActiveList>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d020      	beq.n	800641a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063d8:	2300      	movs	r3, #0
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	2300      	movs	r3, #0
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	2100      	movs	r1, #0
 80063e2:	6978      	ldr	r0, [r7, #20]
 80063e4:	f7ff ff88 	bl	80062f8 <xTimerGenericCommand>
 80063e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d114      	bne.n	800641a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	60fb      	str	r3, [r7, #12]
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	e7fd      	b.n	8006404 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800640e:	f023 0301 	bic.w	r3, r3, #1
 8006412:	b2da      	uxtb	r2, r3
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	6978      	ldr	r0, [r7, #20]
 8006420:	4798      	blx	r3
}
 8006422:	bf00      	nop
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20000ea8 	.word	0x20000ea8

08006430 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006438:	f107 0308 	add.w	r3, r7, #8
 800643c:	4618      	mov	r0, r3
 800643e:	f000 f859 	bl	80064f4 <prvGetNextExpireTime>
 8006442:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4619      	mov	r1, r3
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 f805 	bl	8006458 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800644e:	f000 f8d7 	bl	8006600 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006452:	bf00      	nop
 8006454:	e7f0      	b.n	8006438 <prvTimerTask+0x8>
	...

08006458 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006462:	f7ff fa29 	bl	80058b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006466:	f107 0308 	add.w	r3, r7, #8
 800646a:	4618      	mov	r0, r3
 800646c:	f000 f866 	bl	800653c <prvSampleTimeNow>
 8006470:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d130      	bne.n	80064da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10a      	bne.n	8006494 <prvProcessTimerOrBlockTask+0x3c>
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	429a      	cmp	r2, r3
 8006484:	d806      	bhi.n	8006494 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006486:	f7ff fa25 	bl	80058d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800648a:	68f9      	ldr	r1, [r7, #12]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f7ff ff81 	bl	8006394 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006492:	e024      	b.n	80064de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d008      	beq.n	80064ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800649a:	4b13      	ldr	r3, [pc, #76]	@ (80064e8 <prvProcessTimerOrBlockTask+0x90>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <prvProcessTimerOrBlockTask+0x50>
 80064a4:	2301      	movs	r3, #1
 80064a6:	e000      	b.n	80064aa <prvProcessTimerOrBlockTask+0x52>
 80064a8:	2300      	movs	r3, #0
 80064aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80064ac:	4b0f      	ldr	r3, [pc, #60]	@ (80064ec <prvProcessTimerOrBlockTask+0x94>)
 80064ae:	6818      	ldr	r0, [r3, #0]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	4619      	mov	r1, r3
 80064ba:	f7fe ff65 	bl	8005388 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80064be:	f7ff fa09 	bl	80058d4 <xTaskResumeAll>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10a      	bne.n	80064de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80064c8:	4b09      	ldr	r3, [pc, #36]	@ (80064f0 <prvProcessTimerOrBlockTask+0x98>)
 80064ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	f3bf 8f6f 	isb	sy
}
 80064d8:	e001      	b.n	80064de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80064da:	f7ff f9fb 	bl	80058d4 <xTaskResumeAll>
}
 80064de:	bf00      	nop
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20000eac 	.word	0x20000eac
 80064ec:	20000eb0 	.word	0x20000eb0
 80064f0:	e000ed04 	.word	0xe000ed04

080064f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006538 <prvGetNextExpireTime+0x44>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <prvGetNextExpireTime+0x16>
 8006506:	2201      	movs	r2, #1
 8006508:	e000      	b.n	800650c <prvGetNextExpireTime+0x18>
 800650a:	2200      	movs	r2, #0
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d105      	bne.n	8006524 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006518:	4b07      	ldr	r3, [pc, #28]	@ (8006538 <prvGetNextExpireTime+0x44>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	e001      	b.n	8006528 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006528:	68fb      	ldr	r3, [r7, #12]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	20000ea8 	.word	0x20000ea8

0800653c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006544:	f7ff fa64 	bl	8005a10 <xTaskGetTickCount>
 8006548:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800654a:	4b0b      	ldr	r3, [pc, #44]	@ (8006578 <prvSampleTimeNow+0x3c>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	429a      	cmp	r2, r3
 8006552:	d205      	bcs.n	8006560 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006554:	f000 f93a 	bl	80067cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	e002      	b.n	8006566 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006566:	4a04      	ldr	r2, [pc, #16]	@ (8006578 <prvSampleTimeNow+0x3c>)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800656c:	68fb      	ldr	r3, [r7, #12]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20000eb8 	.word	0x20000eb8

0800657c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]
 8006588:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800658a:	2300      	movs	r3, #0
 800658c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d812      	bhi.n	80065c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	1ad2      	subs	r2, r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d302      	bcc.n	80065b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80065b0:	2301      	movs	r3, #1
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	e01b      	b.n	80065ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80065b6:	4b10      	ldr	r3, [pc, #64]	@ (80065f8 <prvInsertTimerInActiveList+0x7c>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3304      	adds	r3, #4
 80065be:	4619      	mov	r1, r3
 80065c0:	4610      	mov	r0, r2
 80065c2:	f7fe f9b8 	bl	8004936 <vListInsert>
 80065c6:	e012      	b.n	80065ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d206      	bcs.n	80065de <prvInsertTimerInActiveList+0x62>
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d302      	bcc.n	80065de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80065d8:	2301      	movs	r3, #1
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	e007      	b.n	80065ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065de:	4b07      	ldr	r3, [pc, #28]	@ (80065fc <prvInsertTimerInActiveList+0x80>)
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3304      	adds	r3, #4
 80065e6:	4619      	mov	r1, r3
 80065e8:	4610      	mov	r0, r2
 80065ea:	f7fe f9a4 	bl	8004936 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065ee:	697b      	ldr	r3, [r7, #20]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	20000eac 	.word	0x20000eac
 80065fc:	20000ea8 	.word	0x20000ea8

08006600 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08e      	sub	sp, #56	@ 0x38
 8006604:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006606:	e0ce      	b.n	80067a6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2b00      	cmp	r3, #0
 800660c:	da19      	bge.n	8006642 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800660e:	1d3b      	adds	r3, r7, #4
 8006610:	3304      	adds	r3, #4
 8006612:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10b      	bne.n	8006632 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	61fb      	str	r3, [r7, #28]
}
 800662c:	bf00      	nop
 800662e:	bf00      	nop
 8006630:	e7fd      	b.n	800662e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006638:	6850      	ldr	r0, [r2, #4]
 800663a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800663c:	6892      	ldr	r2, [r2, #8]
 800663e:	4611      	mov	r1, r2
 8006640:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	f2c0 80ae 	blt.w	80067a6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800664e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d004      	beq.n	8006660 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006658:	3304      	adds	r3, #4
 800665a:	4618      	mov	r0, r3
 800665c:	f7fe f9a4 	bl	80049a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006660:	463b      	mov	r3, r7
 8006662:	4618      	mov	r0, r3
 8006664:	f7ff ff6a 	bl	800653c <prvSampleTimeNow>
 8006668:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b09      	cmp	r3, #9
 800666e:	f200 8097 	bhi.w	80067a0 <prvProcessReceivedCommands+0x1a0>
 8006672:	a201      	add	r2, pc, #4	@ (adr r2, 8006678 <prvProcessReceivedCommands+0x78>)
 8006674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006678:	080066a1 	.word	0x080066a1
 800667c:	080066a1 	.word	0x080066a1
 8006680:	080066a1 	.word	0x080066a1
 8006684:	08006717 	.word	0x08006717
 8006688:	0800672b 	.word	0x0800672b
 800668c:	08006777 	.word	0x08006777
 8006690:	080066a1 	.word	0x080066a1
 8006694:	080066a1 	.word	0x080066a1
 8006698:	08006717 	.word	0x08006717
 800669c:	0800672b 	.word	0x0800672b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066a6:	f043 0301 	orr.w	r3, r3, #1
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	18d1      	adds	r1, r2, r3
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066c0:	f7ff ff5c 	bl	800657c <prvInsertTimerInActiveList>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d06c      	beq.n	80067a4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d061      	beq.n	80067a4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	441a      	add	r2, r3
 80066e8:	2300      	movs	r3, #0
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	2300      	movs	r3, #0
 80066ee:	2100      	movs	r1, #0
 80066f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066f2:	f7ff fe01 	bl	80062f8 <xTimerGenericCommand>
 80066f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d152      	bne.n	80067a4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	61bb      	str	r3, [r7, #24]
}
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	e7fd      	b.n	8006712 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006718:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800671c:	f023 0301 	bic.w	r3, r3, #1
 8006720:	b2da      	uxtb	r2, r3
 8006722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006724:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006728:	e03d      	b.n	80067a6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800672a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006730:	f043 0301 	orr.w	r3, r3, #1
 8006734:	b2da      	uxtb	r2, r3
 8006736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006738:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006740:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10b      	bne.n	8006762 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	617b      	str	r3, [r7, #20]
}
 800675c:	bf00      	nop
 800675e:	bf00      	nop
 8006760:	e7fd      	b.n	800675e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006768:	18d1      	adds	r1, r2, r3
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800676e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006770:	f7ff ff04 	bl	800657c <prvInsertTimerInActiveList>
					break;
 8006774:	e017      	b.n	80067a6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006778:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800677c:	f003 0302 	and.w	r3, r3, #2
 8006780:	2b00      	cmp	r3, #0
 8006782:	d103      	bne.n	800678c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006784:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006786:	f000 fbe7 	bl	8006f58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800678a:	e00c      	b.n	80067a6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800678c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006792:	f023 0301 	bic.w	r3, r3, #1
 8006796:	b2da      	uxtb	r2, r3
 8006798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800679e:	e002      	b.n	80067a6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80067a0:	bf00      	nop
 80067a2:	e000      	b.n	80067a6 <prvProcessReceivedCommands+0x1a6>
					break;
 80067a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067a6:	4b08      	ldr	r3, [pc, #32]	@ (80067c8 <prvProcessReceivedCommands+0x1c8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	1d39      	adds	r1, r7, #4
 80067ac:	2200      	movs	r2, #0
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe fbce 	bl	8004f50 <xQueueReceive>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f47f af26 	bne.w	8006608 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80067bc:	bf00      	nop
 80067be:	bf00      	nop
 80067c0:	3730      	adds	r7, #48	@ 0x30
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	20000eb0 	.word	0x20000eb0

080067cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067d2:	e049      	b.n	8006868 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006890 <prvSwitchTimerLists+0xc4>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067de:	4b2c      	ldr	r3, [pc, #176]	@ (8006890 <prvSwitchTimerLists+0xc4>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3304      	adds	r3, #4
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fe f8db 	bl	80049a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d02f      	beq.n	8006868 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4413      	add	r3, r2
 8006810:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	429a      	cmp	r2, r3
 8006818:	d90e      	bls.n	8006838 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006826:	4b1a      	ldr	r3, [pc, #104]	@ (8006890 <prvSwitchTimerLists+0xc4>)
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	3304      	adds	r3, #4
 800682e:	4619      	mov	r1, r3
 8006830:	4610      	mov	r0, r2
 8006832:	f7fe f880 	bl	8004936 <vListInsert>
 8006836:	e017      	b.n	8006868 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006838:	2300      	movs	r3, #0
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	2300      	movs	r3, #0
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	2100      	movs	r1, #0
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f7ff fd58 	bl	80062f8 <xTimerGenericCommand>
 8006848:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10b      	bne.n	8006868 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	603b      	str	r3, [r7, #0]
}
 8006862:	bf00      	nop
 8006864:	bf00      	nop
 8006866:	e7fd      	b.n	8006864 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006868:	4b09      	ldr	r3, [pc, #36]	@ (8006890 <prvSwitchTimerLists+0xc4>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1b0      	bne.n	80067d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006872:	4b07      	ldr	r3, [pc, #28]	@ (8006890 <prvSwitchTimerLists+0xc4>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006878:	4b06      	ldr	r3, [pc, #24]	@ (8006894 <prvSwitchTimerLists+0xc8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a04      	ldr	r2, [pc, #16]	@ (8006890 <prvSwitchTimerLists+0xc4>)
 800687e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006880:	4a04      	ldr	r2, [pc, #16]	@ (8006894 <prvSwitchTimerLists+0xc8>)
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	6013      	str	r3, [r2, #0]
}
 8006886:	bf00      	nop
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20000ea8 	.word	0x20000ea8
 8006894:	20000eac 	.word	0x20000eac

08006898 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800689e:	f000 f96b 	bl	8006b78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80068a2:	4b15      	ldr	r3, [pc, #84]	@ (80068f8 <prvCheckForValidListAndQueue+0x60>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d120      	bne.n	80068ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80068aa:	4814      	ldr	r0, [pc, #80]	@ (80068fc <prvCheckForValidListAndQueue+0x64>)
 80068ac:	f7fd fff2 	bl	8004894 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80068b0:	4813      	ldr	r0, [pc, #76]	@ (8006900 <prvCheckForValidListAndQueue+0x68>)
 80068b2:	f7fd ffef 	bl	8004894 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80068b6:	4b13      	ldr	r3, [pc, #76]	@ (8006904 <prvCheckForValidListAndQueue+0x6c>)
 80068b8:	4a10      	ldr	r2, [pc, #64]	@ (80068fc <prvCheckForValidListAndQueue+0x64>)
 80068ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80068bc:	4b12      	ldr	r3, [pc, #72]	@ (8006908 <prvCheckForValidListAndQueue+0x70>)
 80068be:	4a10      	ldr	r2, [pc, #64]	@ (8006900 <prvCheckForValidListAndQueue+0x68>)
 80068c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80068c2:	2300      	movs	r3, #0
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	4b11      	ldr	r3, [pc, #68]	@ (800690c <prvCheckForValidListAndQueue+0x74>)
 80068c8:	4a11      	ldr	r2, [pc, #68]	@ (8006910 <prvCheckForValidListAndQueue+0x78>)
 80068ca:	2110      	movs	r1, #16
 80068cc:	200a      	movs	r0, #10
 80068ce:	f7fe f8ff 	bl	8004ad0 <xQueueGenericCreateStatic>
 80068d2:	4603      	mov	r3, r0
 80068d4:	4a08      	ldr	r2, [pc, #32]	@ (80068f8 <prvCheckForValidListAndQueue+0x60>)
 80068d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80068d8:	4b07      	ldr	r3, [pc, #28]	@ (80068f8 <prvCheckForValidListAndQueue+0x60>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d005      	beq.n	80068ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068e0:	4b05      	ldr	r3, [pc, #20]	@ (80068f8 <prvCheckForValidListAndQueue+0x60>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	490b      	ldr	r1, [pc, #44]	@ (8006914 <prvCheckForValidListAndQueue+0x7c>)
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe fd24 	bl	8005334 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80068ec:	f000 f976 	bl	8006bdc <vPortExitCritical>
}
 80068f0:	bf00      	nop
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20000eb0 	.word	0x20000eb0
 80068fc:	20000e80 	.word	0x20000e80
 8006900:	20000e94 	.word	0x20000e94
 8006904:	20000ea8 	.word	0x20000ea8
 8006908:	20000eac 	.word	0x20000eac
 800690c:	20000f5c 	.word	0x20000f5c
 8006910:	20000ebc 	.word	0x20000ebc
 8006914:	080073c8 	.word	0x080073c8

08006918 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3b04      	subs	r3, #4
 8006928:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3b04      	subs	r3, #4
 8006936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f023 0201 	bic.w	r2, r3, #1
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3b04      	subs	r3, #4
 8006946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006948:	4a0c      	ldr	r2, [pc, #48]	@ (800697c <pxPortInitialiseStack+0x64>)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3b14      	subs	r3, #20
 8006952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3b04      	subs	r3, #4
 800695e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f06f 0202 	mvn.w	r2, #2
 8006966:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	3b20      	subs	r3, #32
 800696c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800696e:	68fb      	ldr	r3, [r7, #12]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	08006981 	.word	0x08006981

08006980 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800698a:	4b13      	ldr	r3, [pc, #76]	@ (80069d8 <prvTaskExitError+0x58>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006992:	d00b      	beq.n	80069ac <prvTaskExitError+0x2c>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	60fb      	str	r3, [r7, #12]
}
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
 80069aa:	e7fd      	b.n	80069a8 <prvTaskExitError+0x28>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	60bb      	str	r3, [r7, #8]
}
 80069be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069c0:	bf00      	nop
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0fc      	beq.n	80069c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069c8:	bf00      	nop
 80069ca:	bf00      	nop
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	2000000c 	.word	0x2000000c
 80069dc:	00000000 	.word	0x00000000

080069e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069e0:	4b07      	ldr	r3, [pc, #28]	@ (8006a00 <pxCurrentTCBConst2>)
 80069e2:	6819      	ldr	r1, [r3, #0]
 80069e4:	6808      	ldr	r0, [r1, #0]
 80069e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ea:	f380 8809 	msr	PSP, r0
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f04f 0000 	mov.w	r0, #0
 80069f6:	f380 8811 	msr	BASEPRI, r0
 80069fa:	4770      	bx	lr
 80069fc:	f3af 8000 	nop.w

08006a00 <pxCurrentTCBConst2>:
 8006a00:	20000980 	.word	0x20000980
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop

08006a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a08:	4808      	ldr	r0, [pc, #32]	@ (8006a2c <prvPortStartFirstTask+0x24>)
 8006a0a:	6800      	ldr	r0, [r0, #0]
 8006a0c:	6800      	ldr	r0, [r0, #0]
 8006a0e:	f380 8808 	msr	MSP, r0
 8006a12:	f04f 0000 	mov.w	r0, #0
 8006a16:	f380 8814 	msr	CONTROL, r0
 8006a1a:	b662      	cpsie	i
 8006a1c:	b661      	cpsie	f
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	df00      	svc	0
 8006a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a2a:	bf00      	nop
 8006a2c:	e000ed08 	.word	0xe000ed08

08006a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a36:	4b47      	ldr	r3, [pc, #284]	@ (8006b54 <xPortStartScheduler+0x124>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a47      	ldr	r2, [pc, #284]	@ (8006b58 <xPortStartScheduler+0x128>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d10b      	bne.n	8006a58 <xPortStartScheduler+0x28>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	613b      	str	r3, [r7, #16]
}
 8006a52:	bf00      	nop
 8006a54:	bf00      	nop
 8006a56:	e7fd      	b.n	8006a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a58:	4b3e      	ldr	r3, [pc, #248]	@ (8006b54 <xPortStartScheduler+0x124>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a3f      	ldr	r2, [pc, #252]	@ (8006b5c <xPortStartScheduler+0x12c>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d10b      	bne.n	8006a7a <xPortStartScheduler+0x4a>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	60fb      	str	r3, [r7, #12]
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop
 8006a78:	e7fd      	b.n	8006a76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a7a:	4b39      	ldr	r3, [pc, #228]	@ (8006b60 <xPortStartScheduler+0x130>)
 8006a7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	22ff      	movs	r2, #255	@ 0xff
 8006a8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	4b31      	ldr	r3, [pc, #196]	@ (8006b64 <xPortStartScheduler+0x134>)
 8006aa0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006aa2:	4b31      	ldr	r3, [pc, #196]	@ (8006b68 <xPortStartScheduler+0x138>)
 8006aa4:	2207      	movs	r2, #7
 8006aa6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006aa8:	e009      	b.n	8006abe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8006b68 <xPortStartScheduler+0x138>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8006b68 <xPortStartScheduler+0x138>)
 8006ab2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006abe:	78fb      	ldrb	r3, [r7, #3]
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ac6:	2b80      	cmp	r3, #128	@ 0x80
 8006ac8:	d0ef      	beq.n	8006aaa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006aca:	4b27      	ldr	r3, [pc, #156]	@ (8006b68 <xPortStartScheduler+0x138>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f1c3 0307 	rsb	r3, r3, #7
 8006ad2:	2b04      	cmp	r3, #4
 8006ad4:	d00b      	beq.n	8006aee <xPortStartScheduler+0xbe>
	__asm volatile
 8006ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ada:	f383 8811 	msr	BASEPRI, r3
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f3bf 8f4f 	dsb	sy
 8006ae6:	60bb      	str	r3, [r7, #8]
}
 8006ae8:	bf00      	nop
 8006aea:	bf00      	nop
 8006aec:	e7fd      	b.n	8006aea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006aee:	4b1e      	ldr	r3, [pc, #120]	@ (8006b68 <xPortStartScheduler+0x138>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	4a1c      	ldr	r2, [pc, #112]	@ (8006b68 <xPortStartScheduler+0x138>)
 8006af6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006af8:	4b1b      	ldr	r3, [pc, #108]	@ (8006b68 <xPortStartScheduler+0x138>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b00:	4a19      	ldr	r2, [pc, #100]	@ (8006b68 <xPortStartScheduler+0x138>)
 8006b02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b0c:	4b17      	ldr	r3, [pc, #92]	@ (8006b6c <xPortStartScheduler+0x13c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a16      	ldr	r2, [pc, #88]	@ (8006b6c <xPortStartScheduler+0x13c>)
 8006b12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006b16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b18:	4b14      	ldr	r3, [pc, #80]	@ (8006b6c <xPortStartScheduler+0x13c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a13      	ldr	r2, [pc, #76]	@ (8006b6c <xPortStartScheduler+0x13c>)
 8006b1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006b22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b24:	f000 f8da 	bl	8006cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b28:	4b11      	ldr	r3, [pc, #68]	@ (8006b70 <xPortStartScheduler+0x140>)
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b2e:	f000 f8f9 	bl	8006d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b32:	4b10      	ldr	r3, [pc, #64]	@ (8006b74 <xPortStartScheduler+0x144>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a0f      	ldr	r2, [pc, #60]	@ (8006b74 <xPortStartScheduler+0x144>)
 8006b38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006b3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b3e:	f7ff ff63 	bl	8006a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b42:	f7ff f82f 	bl	8005ba4 <vTaskSwitchContext>
	prvTaskExitError();
 8006b46:	f7ff ff1b 	bl	8006980 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	e000ed00 	.word	0xe000ed00
 8006b58:	410fc271 	.word	0x410fc271
 8006b5c:	410fc270 	.word	0x410fc270
 8006b60:	e000e400 	.word	0xe000e400
 8006b64:	20000fac 	.word	0x20000fac
 8006b68:	20000fb0 	.word	0x20000fb0
 8006b6c:	e000ed20 	.word	0xe000ed20
 8006b70:	2000000c 	.word	0x2000000c
 8006b74:	e000ef34 	.word	0xe000ef34

08006b78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	607b      	str	r3, [r7, #4]
}
 8006b90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b92:	4b10      	ldr	r3, [pc, #64]	@ (8006bd4 <vPortEnterCritical+0x5c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	3301      	adds	r3, #1
 8006b98:	4a0e      	ldr	r2, [pc, #56]	@ (8006bd4 <vPortEnterCritical+0x5c>)
 8006b9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006bd4 <vPortEnterCritical+0x5c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d110      	bne.n	8006bc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd8 <vPortEnterCritical+0x60>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00b      	beq.n	8006bc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	603b      	str	r3, [r7, #0]
}
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	e7fd      	b.n	8006bc2 <vPortEnterCritical+0x4a>
	}
}
 8006bc6:	bf00      	nop
 8006bc8:	370c      	adds	r7, #12
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	2000000c 	.word	0x2000000c
 8006bd8:	e000ed04 	.word	0xe000ed04

08006bdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006be2:	4b12      	ldr	r3, [pc, #72]	@ (8006c2c <vPortExitCritical+0x50>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10b      	bne.n	8006c02 <vPortExitCritical+0x26>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	607b      	str	r3, [r7, #4]
}
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
 8006c00:	e7fd      	b.n	8006bfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c02:	4b0a      	ldr	r3, [pc, #40]	@ (8006c2c <vPortExitCritical+0x50>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	4a08      	ldr	r2, [pc, #32]	@ (8006c2c <vPortExitCritical+0x50>)
 8006c0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c0c:	4b07      	ldr	r3, [pc, #28]	@ (8006c2c <vPortExitCritical+0x50>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d105      	bne.n	8006c20 <vPortExitCritical+0x44>
 8006c14:	2300      	movs	r3, #0
 8006c16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	f383 8811 	msr	BASEPRI, r3
}
 8006c1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr
 8006c2c:	2000000c 	.word	0x2000000c

08006c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c30:	f3ef 8009 	mrs	r0, PSP
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	4b15      	ldr	r3, [pc, #84]	@ (8006c90 <pxCurrentTCBConst>)
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	f01e 0f10 	tst.w	lr, #16
 8006c40:	bf08      	it	eq
 8006c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4a:	6010      	str	r0, [r2, #0]
 8006c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006c54:	f380 8811 	msr	BASEPRI, r0
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f7fe ffa0 	bl	8005ba4 <vTaskSwitchContext>
 8006c64:	f04f 0000 	mov.w	r0, #0
 8006c68:	f380 8811 	msr	BASEPRI, r0
 8006c6c:	bc09      	pop	{r0, r3}
 8006c6e:	6819      	ldr	r1, [r3, #0]
 8006c70:	6808      	ldr	r0, [r1, #0]
 8006c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c76:	f01e 0f10 	tst.w	lr, #16
 8006c7a:	bf08      	it	eq
 8006c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c80:	f380 8809 	msr	PSP, r0
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	f3af 8000 	nop.w

08006c90 <pxCurrentTCBConst>:
 8006c90:	20000980 	.word	0x20000980
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop

08006c98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	607b      	str	r3, [r7, #4]
}
 8006cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006cb2:	f7fe febd 	bl	8005a30 <xTaskIncrementTick>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d003      	beq.n	8006cc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cbc:	4b06      	ldr	r3, [pc, #24]	@ (8006cd8 <xPortSysTickHandler+0x40>)
 8006cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	f383 8811 	msr	BASEPRI, r3
}
 8006cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	e000ed04 	.word	0xe000ed04

08006cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8006d10 <vPortSetupTimerInterrupt+0x34>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8006d14 <vPortSetupTimerInterrupt+0x38>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cec:	4b0a      	ldr	r3, [pc, #40]	@ (8006d18 <vPortSetupTimerInterrupt+0x3c>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a0a      	ldr	r2, [pc, #40]	@ (8006d1c <vPortSetupTimerInterrupt+0x40>)
 8006cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf6:	099b      	lsrs	r3, r3, #6
 8006cf8:	4a09      	ldr	r2, [pc, #36]	@ (8006d20 <vPortSetupTimerInterrupt+0x44>)
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cfe:	4b04      	ldr	r3, [pc, #16]	@ (8006d10 <vPortSetupTimerInterrupt+0x34>)
 8006d00:	2207      	movs	r2, #7
 8006d02:	601a      	str	r2, [r3, #0]
}
 8006d04:	bf00      	nop
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	e000e010 	.word	0xe000e010
 8006d14:	e000e018 	.word	0xe000e018
 8006d18:	20000000 	.word	0x20000000
 8006d1c:	10624dd3 	.word	0x10624dd3
 8006d20:	e000e014 	.word	0xe000e014

08006d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006d34 <vPortEnableVFP+0x10>
 8006d28:	6801      	ldr	r1, [r0, #0]
 8006d2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006d2e:	6001      	str	r1, [r0, #0]
 8006d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d32:	bf00      	nop
 8006d34:	e000ed88 	.word	0xe000ed88

08006d38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006d3e:	f3ef 8305 	mrs	r3, IPSR
 8006d42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b0f      	cmp	r3, #15
 8006d48:	d915      	bls.n	8006d76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d4a:	4a18      	ldr	r2, [pc, #96]	@ (8006dac <vPortValidateInterruptPriority+0x74>)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d54:	4b16      	ldr	r3, [pc, #88]	@ (8006db0 <vPortValidateInterruptPriority+0x78>)
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	7afa      	ldrb	r2, [r7, #11]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d20b      	bcs.n	8006d76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d62:	f383 8811 	msr	BASEPRI, r3
 8006d66:	f3bf 8f6f 	isb	sy
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	607b      	str	r3, [r7, #4]
}
 8006d70:	bf00      	nop
 8006d72:	bf00      	nop
 8006d74:	e7fd      	b.n	8006d72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d76:	4b0f      	ldr	r3, [pc, #60]	@ (8006db4 <vPortValidateInterruptPriority+0x7c>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006db8 <vPortValidateInterruptPriority+0x80>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d90b      	bls.n	8006d9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	603b      	str	r3, [r7, #0]
}
 8006d98:	bf00      	nop
 8006d9a:	bf00      	nop
 8006d9c:	e7fd      	b.n	8006d9a <vPortValidateInterruptPriority+0x62>
	}
 8006d9e:	bf00      	nop
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	e000e3f0 	.word	0xe000e3f0
 8006db0:	20000fac 	.word	0x20000fac
 8006db4:	e000ed0c 	.word	0xe000ed0c
 8006db8:	20000fb0 	.word	0x20000fb0

08006dbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08a      	sub	sp, #40	@ 0x28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006dc8:	f7fe fd76 	bl	80058b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8006f40 <pvPortMalloc+0x184>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d101      	bne.n	8006dd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006dd4:	f000 f924 	bl	8007020 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006dd8:	4b5a      	ldr	r3, [pc, #360]	@ (8006f44 <pvPortMalloc+0x188>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4013      	ands	r3, r2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f040 8095 	bne.w	8006f10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d01e      	beq.n	8006e2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006dec:	2208      	movs	r2, #8
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4413      	add	r3, r2
 8006df2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f003 0307 	and.w	r3, r3, #7
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d015      	beq.n	8006e2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f023 0307 	bic.w	r3, r3, #7
 8006e04:	3308      	adds	r3, #8
 8006e06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00b      	beq.n	8006e2a <pvPortMalloc+0x6e>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	617b      	str	r3, [r7, #20]
}
 8006e24:	bf00      	nop
 8006e26:	bf00      	nop
 8006e28:	e7fd      	b.n	8006e26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d06f      	beq.n	8006f10 <pvPortMalloc+0x154>
 8006e30:	4b45      	ldr	r3, [pc, #276]	@ (8006f48 <pvPortMalloc+0x18c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d86a      	bhi.n	8006f10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e3a:	4b44      	ldr	r3, [pc, #272]	@ (8006f4c <pvPortMalloc+0x190>)
 8006e3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e3e:	4b43      	ldr	r3, [pc, #268]	@ (8006f4c <pvPortMalloc+0x190>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e44:	e004      	b.n	8006e50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d903      	bls.n	8006e62 <pvPortMalloc+0xa6>
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1f1      	bne.n	8006e46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e62:	4b37      	ldr	r3, [pc, #220]	@ (8006f40 <pvPortMalloc+0x184>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d051      	beq.n	8006f10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2208      	movs	r2, #8
 8006e72:	4413      	add	r3, r2
 8006e74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	1ad2      	subs	r2, r2, r3
 8006e86:	2308      	movs	r3, #8
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d920      	bls.n	8006ed0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4413      	add	r3, r2
 8006e94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	f003 0307 	and.w	r3, r3, #7
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <pvPortMalloc+0xfc>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	613b      	str	r3, [r7, #16]
}
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	e7fd      	b.n	8006eb4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	1ad2      	subs	r2, r2, r3
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006eca:	69b8      	ldr	r0, [r7, #24]
 8006ecc:	f000 f90a 	bl	80070e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ed0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f48 <pvPortMalloc+0x18c>)
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	4a1b      	ldr	r2, [pc, #108]	@ (8006f48 <pvPortMalloc+0x18c>)
 8006edc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ede:	4b1a      	ldr	r3, [pc, #104]	@ (8006f48 <pvPortMalloc+0x18c>)
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f50 <pvPortMalloc+0x194>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d203      	bcs.n	8006ef2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006eea:	4b17      	ldr	r3, [pc, #92]	@ (8006f48 <pvPortMalloc+0x18c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a18      	ldr	r2, [pc, #96]	@ (8006f50 <pvPortMalloc+0x194>)
 8006ef0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	4b13      	ldr	r3, [pc, #76]	@ (8006f44 <pvPortMalloc+0x188>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	431a      	orrs	r2, r3
 8006efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	2200      	movs	r2, #0
 8006f04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f06:	4b13      	ldr	r3, [pc, #76]	@ (8006f54 <pvPortMalloc+0x198>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	4a11      	ldr	r2, [pc, #68]	@ (8006f54 <pvPortMalloc+0x198>)
 8006f0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f10:	f7fe fce0 	bl	80058d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00b      	beq.n	8006f36 <pvPortMalloc+0x17a>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	60fb      	str	r3, [r7, #12]
}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	e7fd      	b.n	8006f32 <pvPortMalloc+0x176>
	return pvReturn;
 8006f36:	69fb      	ldr	r3, [r7, #28]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3728      	adds	r7, #40	@ 0x28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	20001b74 	.word	0x20001b74
 8006f44:	20001b88 	.word	0x20001b88
 8006f48:	20001b78 	.word	0x20001b78
 8006f4c:	20001b6c 	.word	0x20001b6c
 8006f50:	20001b7c 	.word	0x20001b7c
 8006f54:	20001b80 	.word	0x20001b80

08006f58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d04f      	beq.n	800700a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f6a:	2308      	movs	r3, #8
 8006f6c:	425b      	negs	r3, r3
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	4413      	add	r3, r2
 8006f72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	4b25      	ldr	r3, [pc, #148]	@ (8007014 <vPortFree+0xbc>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4013      	ands	r3, r2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10b      	bne.n	8006f9e <vPortFree+0x46>
	__asm volatile
 8006f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	60fb      	str	r3, [r7, #12]
}
 8006f98:	bf00      	nop
 8006f9a:	bf00      	nop
 8006f9c:	e7fd      	b.n	8006f9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00b      	beq.n	8006fbe <vPortFree+0x66>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	60bb      	str	r3, [r7, #8]
}
 8006fb8:	bf00      	nop
 8006fba:	bf00      	nop
 8006fbc:	e7fd      	b.n	8006fba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	4b14      	ldr	r3, [pc, #80]	@ (8007014 <vPortFree+0xbc>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d01e      	beq.n	800700a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d11a      	bne.n	800700a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8007014 <vPortFree+0xbc>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	43db      	mvns	r3, r3
 8006fde:	401a      	ands	r2, r3
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fe4:	f7fe fc68 	bl	80058b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	4b0a      	ldr	r3, [pc, #40]	@ (8007018 <vPortFree+0xc0>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	4a09      	ldr	r2, [pc, #36]	@ (8007018 <vPortFree+0xc0>)
 8006ff4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ff6:	6938      	ldr	r0, [r7, #16]
 8006ff8:	f000 f874 	bl	80070e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006ffc:	4b07      	ldr	r3, [pc, #28]	@ (800701c <vPortFree+0xc4>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3301      	adds	r3, #1
 8007002:	4a06      	ldr	r2, [pc, #24]	@ (800701c <vPortFree+0xc4>)
 8007004:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007006:	f7fe fc65 	bl	80058d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800700a:	bf00      	nop
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20001b88 	.word	0x20001b88
 8007018:	20001b78 	.word	0x20001b78
 800701c:	20001b84 	.word	0x20001b84

08007020 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007026:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800702a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800702c:	4b27      	ldr	r3, [pc, #156]	@ (80070cc <prvHeapInit+0xac>)
 800702e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f003 0307 	and.w	r3, r3, #7
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00c      	beq.n	8007054 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3307      	adds	r3, #7
 800703e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f023 0307 	bic.w	r3, r3, #7
 8007046:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	4a1f      	ldr	r2, [pc, #124]	@ (80070cc <prvHeapInit+0xac>)
 8007050:	4413      	add	r3, r2
 8007052:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007058:	4a1d      	ldr	r2, [pc, #116]	@ (80070d0 <prvHeapInit+0xb0>)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800705e:	4b1c      	ldr	r3, [pc, #112]	@ (80070d0 <prvHeapInit+0xb0>)
 8007060:	2200      	movs	r2, #0
 8007062:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	4413      	add	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800706c:	2208      	movs	r2, #8
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	1a9b      	subs	r3, r3, r2
 8007072:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 0307 	bic.w	r3, r3, #7
 800707a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4a15      	ldr	r2, [pc, #84]	@ (80070d4 <prvHeapInit+0xb4>)
 8007080:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007082:	4b14      	ldr	r3, [pc, #80]	@ (80070d4 <prvHeapInit+0xb4>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2200      	movs	r2, #0
 8007088:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800708a:	4b12      	ldr	r3, [pc, #72]	@ (80070d4 <prvHeapInit+0xb4>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2200      	movs	r2, #0
 8007090:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	1ad2      	subs	r2, r2, r3
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070a0:	4b0c      	ldr	r3, [pc, #48]	@ (80070d4 <prvHeapInit+0xb4>)
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	4a0a      	ldr	r2, [pc, #40]	@ (80070d8 <prvHeapInit+0xb8>)
 80070ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	4a09      	ldr	r2, [pc, #36]	@ (80070dc <prvHeapInit+0xbc>)
 80070b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070b8:	4b09      	ldr	r3, [pc, #36]	@ (80070e0 <prvHeapInit+0xc0>)
 80070ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80070be:	601a      	str	r2, [r3, #0]
}
 80070c0:	bf00      	nop
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	20000fb4 	.word	0x20000fb4
 80070d0:	20001b6c 	.word	0x20001b6c
 80070d4:	20001b74 	.word	0x20001b74
 80070d8:	20001b7c 	.word	0x20001b7c
 80070dc:	20001b78 	.word	0x20001b78
 80070e0:	20001b88 	.word	0x20001b88

080070e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070ec:	4b28      	ldr	r3, [pc, #160]	@ (8007190 <prvInsertBlockIntoFreeList+0xac>)
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	e002      	b.n	80070f8 <prvInsertBlockIntoFreeList+0x14>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d8f7      	bhi.n	80070f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	4413      	add	r3, r2
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	429a      	cmp	r2, r3
 8007112:	d108      	bne.n	8007126 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	441a      	add	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	441a      	add	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	429a      	cmp	r2, r3
 8007138:	d118      	bne.n	800716c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	4b15      	ldr	r3, [pc, #84]	@ (8007194 <prvInsertBlockIntoFreeList+0xb0>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	429a      	cmp	r2, r3
 8007144:	d00d      	beq.n	8007162 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685a      	ldr	r2, [r3, #4]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	441a      	add	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	e008      	b.n	8007174 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007162:	4b0c      	ldr	r3, [pc, #48]	@ (8007194 <prvInsertBlockIntoFreeList+0xb0>)
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	e003      	b.n	8007174 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	429a      	cmp	r2, r3
 800717a:	d002      	beq.n	8007182 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007182:	bf00      	nop
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	20001b6c 	.word	0x20001b6c
 8007194:	20001b74 	.word	0x20001b74

08007198 <memset>:
 8007198:	4402      	add	r2, r0
 800719a:	4603      	mov	r3, r0
 800719c:	4293      	cmp	r3, r2
 800719e:	d100      	bne.n	80071a2 <memset+0xa>
 80071a0:	4770      	bx	lr
 80071a2:	f803 1b01 	strb.w	r1, [r3], #1
 80071a6:	e7f9      	b.n	800719c <memset+0x4>

080071a8 <_reclaim_reent>:
 80071a8:	4b29      	ldr	r3, [pc, #164]	@ (8007250 <_reclaim_reent+0xa8>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4283      	cmp	r3, r0
 80071ae:	b570      	push	{r4, r5, r6, lr}
 80071b0:	4604      	mov	r4, r0
 80071b2:	d04b      	beq.n	800724c <_reclaim_reent+0xa4>
 80071b4:	69c3      	ldr	r3, [r0, #28]
 80071b6:	b1ab      	cbz	r3, 80071e4 <_reclaim_reent+0x3c>
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	b16b      	cbz	r3, 80071d8 <_reclaim_reent+0x30>
 80071bc:	2500      	movs	r5, #0
 80071be:	69e3      	ldr	r3, [r4, #28]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	5959      	ldr	r1, [r3, r5]
 80071c4:	2900      	cmp	r1, #0
 80071c6:	d13b      	bne.n	8007240 <_reclaim_reent+0x98>
 80071c8:	3504      	adds	r5, #4
 80071ca:	2d80      	cmp	r5, #128	@ 0x80
 80071cc:	d1f7      	bne.n	80071be <_reclaim_reent+0x16>
 80071ce:	69e3      	ldr	r3, [r4, #28]
 80071d0:	4620      	mov	r0, r4
 80071d2:	68d9      	ldr	r1, [r3, #12]
 80071d4:	f000 f872 	bl	80072bc <_free_r>
 80071d8:	69e3      	ldr	r3, [r4, #28]
 80071da:	6819      	ldr	r1, [r3, #0]
 80071dc:	b111      	cbz	r1, 80071e4 <_reclaim_reent+0x3c>
 80071de:	4620      	mov	r0, r4
 80071e0:	f000 f86c 	bl	80072bc <_free_r>
 80071e4:	6961      	ldr	r1, [r4, #20]
 80071e6:	b111      	cbz	r1, 80071ee <_reclaim_reent+0x46>
 80071e8:	4620      	mov	r0, r4
 80071ea:	f000 f867 	bl	80072bc <_free_r>
 80071ee:	69e1      	ldr	r1, [r4, #28]
 80071f0:	b111      	cbz	r1, 80071f8 <_reclaim_reent+0x50>
 80071f2:	4620      	mov	r0, r4
 80071f4:	f000 f862 	bl	80072bc <_free_r>
 80071f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80071fa:	b111      	cbz	r1, 8007202 <_reclaim_reent+0x5a>
 80071fc:	4620      	mov	r0, r4
 80071fe:	f000 f85d 	bl	80072bc <_free_r>
 8007202:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007204:	b111      	cbz	r1, 800720c <_reclaim_reent+0x64>
 8007206:	4620      	mov	r0, r4
 8007208:	f000 f858 	bl	80072bc <_free_r>
 800720c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800720e:	b111      	cbz	r1, 8007216 <_reclaim_reent+0x6e>
 8007210:	4620      	mov	r0, r4
 8007212:	f000 f853 	bl	80072bc <_free_r>
 8007216:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007218:	b111      	cbz	r1, 8007220 <_reclaim_reent+0x78>
 800721a:	4620      	mov	r0, r4
 800721c:	f000 f84e 	bl	80072bc <_free_r>
 8007220:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007222:	b111      	cbz	r1, 800722a <_reclaim_reent+0x82>
 8007224:	4620      	mov	r0, r4
 8007226:	f000 f849 	bl	80072bc <_free_r>
 800722a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800722c:	b111      	cbz	r1, 8007234 <_reclaim_reent+0x8c>
 800722e:	4620      	mov	r0, r4
 8007230:	f000 f844 	bl	80072bc <_free_r>
 8007234:	6a23      	ldr	r3, [r4, #32]
 8007236:	b14b      	cbz	r3, 800724c <_reclaim_reent+0xa4>
 8007238:	4620      	mov	r0, r4
 800723a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800723e:	4718      	bx	r3
 8007240:	680e      	ldr	r6, [r1, #0]
 8007242:	4620      	mov	r0, r4
 8007244:	f000 f83a 	bl	80072bc <_free_r>
 8007248:	4631      	mov	r1, r6
 800724a:	e7bb      	b.n	80071c4 <_reclaim_reent+0x1c>
 800724c:	bd70      	pop	{r4, r5, r6, pc}
 800724e:	bf00      	nop
 8007250:	20000010 	.word	0x20000010

08007254 <__libc_init_array>:
 8007254:	b570      	push	{r4, r5, r6, lr}
 8007256:	4d0d      	ldr	r5, [pc, #52]	@ (800728c <__libc_init_array+0x38>)
 8007258:	4c0d      	ldr	r4, [pc, #52]	@ (8007290 <__libc_init_array+0x3c>)
 800725a:	1b64      	subs	r4, r4, r5
 800725c:	10a4      	asrs	r4, r4, #2
 800725e:	2600      	movs	r6, #0
 8007260:	42a6      	cmp	r6, r4
 8007262:	d109      	bne.n	8007278 <__libc_init_array+0x24>
 8007264:	4d0b      	ldr	r5, [pc, #44]	@ (8007294 <__libc_init_array+0x40>)
 8007266:	4c0c      	ldr	r4, [pc, #48]	@ (8007298 <__libc_init_array+0x44>)
 8007268:	f000 f87e 	bl	8007368 <_init>
 800726c:	1b64      	subs	r4, r4, r5
 800726e:	10a4      	asrs	r4, r4, #2
 8007270:	2600      	movs	r6, #0
 8007272:	42a6      	cmp	r6, r4
 8007274:	d105      	bne.n	8007282 <__libc_init_array+0x2e>
 8007276:	bd70      	pop	{r4, r5, r6, pc}
 8007278:	f855 3b04 	ldr.w	r3, [r5], #4
 800727c:	4798      	blx	r3
 800727e:	3601      	adds	r6, #1
 8007280:	e7ee      	b.n	8007260 <__libc_init_array+0xc>
 8007282:	f855 3b04 	ldr.w	r3, [r5], #4
 8007286:	4798      	blx	r3
 8007288:	3601      	adds	r6, #1
 800728a:	e7f2      	b.n	8007272 <__libc_init_array+0x1e>
 800728c:	080074a8 	.word	0x080074a8
 8007290:	080074a8 	.word	0x080074a8
 8007294:	080074a8 	.word	0x080074a8
 8007298:	080074ac 	.word	0x080074ac

0800729c <__retarget_lock_acquire_recursive>:
 800729c:	4770      	bx	lr

0800729e <__retarget_lock_release_recursive>:
 800729e:	4770      	bx	lr

080072a0 <memcpy>:
 80072a0:	440a      	add	r2, r1
 80072a2:	4291      	cmp	r1, r2
 80072a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80072a8:	d100      	bne.n	80072ac <memcpy+0xc>
 80072aa:	4770      	bx	lr
 80072ac:	b510      	push	{r4, lr}
 80072ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072b6:	4291      	cmp	r1, r2
 80072b8:	d1f9      	bne.n	80072ae <memcpy+0xe>
 80072ba:	bd10      	pop	{r4, pc}

080072bc <_free_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4605      	mov	r5, r0
 80072c0:	2900      	cmp	r1, #0
 80072c2:	d041      	beq.n	8007348 <_free_r+0x8c>
 80072c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072c8:	1f0c      	subs	r4, r1, #4
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	bfb8      	it	lt
 80072ce:	18e4      	addlt	r4, r4, r3
 80072d0:	f000 f83e 	bl	8007350 <__malloc_lock>
 80072d4:	4a1d      	ldr	r2, [pc, #116]	@ (800734c <_free_r+0x90>)
 80072d6:	6813      	ldr	r3, [r2, #0]
 80072d8:	b933      	cbnz	r3, 80072e8 <_free_r+0x2c>
 80072da:	6063      	str	r3, [r4, #4]
 80072dc:	6014      	str	r4, [r2, #0]
 80072de:	4628      	mov	r0, r5
 80072e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072e4:	f000 b83a 	b.w	800735c <__malloc_unlock>
 80072e8:	42a3      	cmp	r3, r4
 80072ea:	d908      	bls.n	80072fe <_free_r+0x42>
 80072ec:	6820      	ldr	r0, [r4, #0]
 80072ee:	1821      	adds	r1, r4, r0
 80072f0:	428b      	cmp	r3, r1
 80072f2:	bf01      	itttt	eq
 80072f4:	6819      	ldreq	r1, [r3, #0]
 80072f6:	685b      	ldreq	r3, [r3, #4]
 80072f8:	1809      	addeq	r1, r1, r0
 80072fa:	6021      	streq	r1, [r4, #0]
 80072fc:	e7ed      	b.n	80072da <_free_r+0x1e>
 80072fe:	461a      	mov	r2, r3
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	b10b      	cbz	r3, 8007308 <_free_r+0x4c>
 8007304:	42a3      	cmp	r3, r4
 8007306:	d9fa      	bls.n	80072fe <_free_r+0x42>
 8007308:	6811      	ldr	r1, [r2, #0]
 800730a:	1850      	adds	r0, r2, r1
 800730c:	42a0      	cmp	r0, r4
 800730e:	d10b      	bne.n	8007328 <_free_r+0x6c>
 8007310:	6820      	ldr	r0, [r4, #0]
 8007312:	4401      	add	r1, r0
 8007314:	1850      	adds	r0, r2, r1
 8007316:	4283      	cmp	r3, r0
 8007318:	6011      	str	r1, [r2, #0]
 800731a:	d1e0      	bne.n	80072de <_free_r+0x22>
 800731c:	6818      	ldr	r0, [r3, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	6053      	str	r3, [r2, #4]
 8007322:	4408      	add	r0, r1
 8007324:	6010      	str	r0, [r2, #0]
 8007326:	e7da      	b.n	80072de <_free_r+0x22>
 8007328:	d902      	bls.n	8007330 <_free_r+0x74>
 800732a:	230c      	movs	r3, #12
 800732c:	602b      	str	r3, [r5, #0]
 800732e:	e7d6      	b.n	80072de <_free_r+0x22>
 8007330:	6820      	ldr	r0, [r4, #0]
 8007332:	1821      	adds	r1, r4, r0
 8007334:	428b      	cmp	r3, r1
 8007336:	bf04      	itt	eq
 8007338:	6819      	ldreq	r1, [r3, #0]
 800733a:	685b      	ldreq	r3, [r3, #4]
 800733c:	6063      	str	r3, [r4, #4]
 800733e:	bf04      	itt	eq
 8007340:	1809      	addeq	r1, r1, r0
 8007342:	6021      	streq	r1, [r4, #0]
 8007344:	6054      	str	r4, [r2, #4]
 8007346:	e7ca      	b.n	80072de <_free_r+0x22>
 8007348:	bd38      	pop	{r3, r4, r5, pc}
 800734a:	bf00      	nop
 800734c:	20001cc8 	.word	0x20001cc8

08007350 <__malloc_lock>:
 8007350:	4801      	ldr	r0, [pc, #4]	@ (8007358 <__malloc_lock+0x8>)
 8007352:	f7ff bfa3 	b.w	800729c <__retarget_lock_acquire_recursive>
 8007356:	bf00      	nop
 8007358:	20001cc4 	.word	0x20001cc4

0800735c <__malloc_unlock>:
 800735c:	4801      	ldr	r0, [pc, #4]	@ (8007364 <__malloc_unlock+0x8>)
 800735e:	f7ff bf9e 	b.w	800729e <__retarget_lock_release_recursive>
 8007362:	bf00      	nop
 8007364:	20001cc4 	.word	0x20001cc4

08007368 <_init>:
 8007368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736a:	bf00      	nop
 800736c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800736e:	bc08      	pop	{r3}
 8007370:	469e      	mov	lr, r3
 8007372:	4770      	bx	lr

08007374 <_fini>:
 8007374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007376:	bf00      	nop
 8007378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800737a:	bc08      	pop	{r3}
 800737c:	469e      	mov	lr, r3
 800737e:	4770      	bx	lr
