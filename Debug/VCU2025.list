
VCU2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006340  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080064f0  080064f0  000074f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006618  08006618  00008060  2**0
                  CONTENTS
  4 .ARM          00000000  08006618  08006618  00008060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006618  08006618  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006618  08006618  00007618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800661c  0800661c  0000761c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006620  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c18  20000060  08006680  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c78  08006680  00008c78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019404  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000378f  00000000  00000000  00021494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  00024c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000110c  00000000  00000000  00026258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003530  00000000  00000000  00027364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001766b  00000000  00000000  0002a894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001099e4  00000000  00000000  00041eff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b8e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006034  00000000  00000000  0014b928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0015195c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080064d8 	.word	0x080064d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	080064d8 	.word	0x080064d8

080001f0 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}
}

// Can reception
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80001f8:	4b4e      	ldr	r3, [pc, #312]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 80001fa:	4a4f      	ldr	r2, [pc, #316]	@ (8000338 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 80001fc:	2100      	movs	r1, #0
 80001fe:	6878      	ldr	r0, [r7, #4]
 8000200:	f001 f8c0 	bl	8001384 <HAL_CAN_GetRxMessage>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    Error_Handler();
 800020a:	f000 fc11 	bl	8000a30 <Error_Handler>
  }
  if (RxHeader.StdId == 0x000)
 800020e:	4b4a      	ldr	r3, [pc, #296]	@ (8000338 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d10f      	bne.n	8000236 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
  {
	  if (RxData[0] == 0) {
 8000216:	4b47      	ldr	r3, [pc, #284]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d10b      	bne.n	8000236 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
		throttle = (uint16_t)RxData[2]<<8 | RxData[1];
 800021e:	4b45      	ldr	r3, [pc, #276]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000220:	789b      	ldrb	r3, [r3, #2]
 8000222:	021b      	lsls	r3, r3, #8
 8000224:	b21a      	sxth	r2, r3
 8000226:	4b43      	ldr	r3, [pc, #268]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000228:	785b      	ldrb	r3, [r3, #1]
 800022a:	b21b      	sxth	r3, r3
 800022c:	4313      	orrs	r3, r2
 800022e:	b21b      	sxth	r3, r3
 8000230:	b29a      	uxth	r2, r3
 8000232:	4b42      	ldr	r3, [pc, #264]	@ (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000234:	801a      	strh	r2, [r3, #0]
	  }
  }
  if (RxHeader.StdId == 0x7FF){
 8000236:	4b40      	ldr	r3, [pc, #256]	@ (8000338 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800023e:	4293      	cmp	r3, r2
 8000240:	d173      	bne.n	800032a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
	  if(RxData[0] == 1){
 8000242:	4b3c      	ldr	r3, [pc, #240]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b01      	cmp	r3, #1
 8000248:	d16f      	bne.n	800032a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
		  //ignition switch
		  if((RxData[1] & 0x80) != 0x00){
			  //preform shut down sequence
		  }

		  if((RxData[1] & 0x40) != 0x00){
 800024a:	4b3a      	ldr	r3, [pc, #232]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 800024c:	785b      	ldrb	r3, [r3, #1]
 800024e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000252:	2b00      	cmp	r3, #0
 8000254:	d003      	beq.n	800025e <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
			  brakes_active = true; // turn brakes on
 8000256:	4b3a      	ldr	r3, [pc, #232]	@ (8000340 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000258:	2201      	movs	r2, #1
 800025a:	701a      	strb	r2, [r3, #0]
 800025c:	e002      	b.n	8000264 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
		  }else{
			  brakes_active = false; // turn breaks off
 800025e:	4b38      	ldr	r3, [pc, #224]	@ (8000340 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000260:	2200      	movs	r2, #0
 8000262:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x20) != 0x00){
 8000264:	4b33      	ldr	r3, [pc, #204]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000266:	785b      	ldrb	r3, [r3, #1]
 8000268:	f003 0320 	and.w	r3, r3, #32
 800026c:	2b00      	cmp	r3, #0
 800026e:	d003      	beq.n	8000278 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
			  dirrection = true; //Forward
 8000270:	4b34      	ldr	r3, [pc, #208]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000272:	2201      	movs	r2, #1
 8000274:	701a      	strb	r2, [r3, #0]
 8000276:	e002      	b.n	800027e <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
		  }else{
			  dirrection = false;
 8000278:	4b32      	ldr	r3, [pc, #200]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x10) != 0x00){
 800027e:	4b2d      	ldr	r3, [pc, #180]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000280:	785b      	ldrb	r3, [r3, #1]
 8000282:	f003 0310 	and.w	r3, r3, #16
 8000286:	2b00      	cmp	r3, #0
 8000288:	d003      	beq.n	8000292 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
			  mc_main_ctrl = true;
 800028a:	4b2f      	ldr	r3, [pc, #188]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 800028c:	2201      	movs	r2, #1
 800028e:	701a      	strb	r2, [r3, #0]
 8000290:	e002      	b.n	8000298 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
		  }else{
			  mc_main_ctrl = false;
 8000292:	4b2d      	ldr	r3, [pc, #180]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 8000294:	2200      	movs	r2, #0
 8000296:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x08) != 0x00){
 8000298:	4b26      	ldr	r3, [pc, #152]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 800029a:	785b      	ldrb	r3, [r3, #1]
 800029c:	f003 0308 	and.w	r3, r3, #8
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d003      	beq.n	80002ac <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
			  array = true;
 80002a4:	4b29      	ldr	r3, [pc, #164]	@ (800034c <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	701a      	strb	r2, [r3, #0]
 80002aa:	e002      	b.n	80002b2 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
		  }else{
			  array = false;
 80002ac:	4b27      	ldr	r3, [pc, #156]	@ (800034c <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x04) != 0x00){
 80002b2:	4b20      	ldr	r3, [pc, #128]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 80002b4:	785b      	ldrb	r3, [r3, #1]
 80002b6:	f003 0304 	and.w	r3, r3, #4
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d003      	beq.n	80002c6 <HAL_CAN_RxFifo0MsgPendingCallback+0xd6>
			  array_precharge = true;
 80002be:	4b24      	ldr	r3, [pc, #144]	@ (8000350 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	701a      	strb	r2, [r3, #0]
 80002c4:	e002      	b.n	80002cc <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>
		  }else{
			  array_precharge = false;
 80002c6:	4b22      	ldr	r3, [pc, #136]	@ (8000350 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	701a      	strb	r2, [r3, #0]
		  }


		  //byte #2
		  if((RxData[2] & 0x80) != 0x00){
 80002cc:	4b19      	ldr	r3, [pc, #100]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 80002ce:	789b      	ldrb	r3, [r3, #2]
 80002d0:	b25b      	sxtb	r3, r3
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	da06      	bge.n	80002e4 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>
			  blinkers_active = true; // turn brakes on
 80002d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000354 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 80002d8:	2201      	movs	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
			  signal_counter = 0;
 80002dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	e002      	b.n	80002ea <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
		  }else{
			  blinkers_active = false; // turn breaks off
 80002e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000354 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[2] & 0x40) != 0x00){
 80002ea:	4b12      	ldr	r3, [pc, #72]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 80002ec:	789b      	ldrb	r3, [r3, #2]
 80002ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d006      	beq.n	8000304 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>
			  left_turn_active = true; // turn brakes on
 80002f6:	4b19      	ldr	r3, [pc, #100]	@ (800035c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	701a      	strb	r2, [r3, #0]
			  signal_counter = 0;
 80002fc:	4b16      	ldr	r3, [pc, #88]	@ (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	e002      	b.n	800030a <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>

		  }else{
			  left_turn_active = false; // turn breaks off
 8000304:	4b15      	ldr	r3, [pc, #84]	@ (800035c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[2] & 0x20) != 0x00){
 800030a:	4b0a      	ldr	r3, [pc, #40]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 800030c:	789b      	ldrb	r3, [r3, #2]
 800030e:	f003 0320 	and.w	r3, r3, #32
 8000312:	2b00      	cmp	r3, #0
 8000314:	d006      	beq.n	8000324 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
			  right_turn_active = true; //Forward
 8000316:	4b12      	ldr	r3, [pc, #72]	@ (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8000318:	2201      	movs	r2, #1
 800031a:	701a      	strb	r2, [r3, #0]
			  signal_counter = 0;
 800031c:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
		  }


	  }
  }
}
 8000322:	e002      	b.n	800032a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
			  right_turn_active = false;
 8000324:	4b0e      	ldr	r3, [pc, #56]	@ (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8000326:	2200      	movs	r2, #0
 8000328:	701a      	strb	r2, [r3, #0]
}
 800032a:	bf00      	nop
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	2000013c 	.word	0x2000013c
 8000338:	20000120 	.word	0x20000120
 800033c:	200000f0 	.word	0x200000f0
 8000340:	200000f4 	.word	0x200000f4
 8000344:	200000f8 	.word	0x200000f8
 8000348:	200000f9 	.word	0x200000f9
 800034c:	200000fa 	.word	0x200000fa
 8000350:	200000fb 	.word	0x200000fb
 8000354:	200000f5 	.word	0x200000f5
 8000358:	20000100 	.word	0x20000100
 800035c:	200000f6 	.word	0x200000f6
 8000360:	200000f7 	.word	0x200000f7

08000364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

  brakes_active = false;
 8000368:	4b32      	ldr	r3, [pc, #200]	@ (8000434 <main+0xd0>)
 800036a:	2200      	movs	r2, #0
 800036c:	701a      	strb	r2, [r3, #0]
  blinkers_active = false;
 800036e:	4b32      	ldr	r3, [pc, #200]	@ (8000438 <main+0xd4>)
 8000370:	2200      	movs	r2, #0
 8000372:	701a      	strb	r2, [r3, #0]
  left_turn_active = false;
 8000374:	4b31      	ldr	r3, [pc, #196]	@ (800043c <main+0xd8>)
 8000376:	2200      	movs	r2, #0
 8000378:	701a      	strb	r2, [r3, #0]
  right_turn_active = false;
 800037a:	4b31      	ldr	r3, [pc, #196]	@ (8000440 <main+0xdc>)
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]


  dirrection = false;
 8000380:	4b30      	ldr	r3, [pc, #192]	@ (8000444 <main+0xe0>)
 8000382:	2200      	movs	r2, #0
 8000384:	701a      	strb	r2, [r3, #0]
  mc_pwreco_ctrl = false;
 8000386:	4b30      	ldr	r3, [pc, #192]	@ (8000448 <main+0xe4>)
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]
  mc_main_ctrl = false;
 800038c:	4b2f      	ldr	r3, [pc, #188]	@ (800044c <main+0xe8>)
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]
  array = false;
 8000392:	4b2f      	ldr	r3, [pc, #188]	@ (8000450 <main+0xec>)
 8000394:	2200      	movs	r2, #0
 8000396:	701a      	strb	r2, [r3, #0]
  array_precharge = false;
 8000398:	4b2e      	ldr	r3, [pc, #184]	@ (8000454 <main+0xf0>)
 800039a:	2200      	movs	r2, #0
 800039c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800039e:	f000 fd74 	bl	8000e8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a2:	f000 f875 	bl	8000490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a6:	f000 f97d 	bl	80006a4 <MX_GPIO_Init>
  MX_DAC1_Init();
 80003aa:	f000 f93f 	bl	800062c <MX_DAC1_Init>
  MX_CAN1_Init();
 80003ae:	f000 f8b5 	bl	800051c <MX_CAN1_Init>
  MX_CAN2_Init();
 80003b2:	f000 f905 	bl	80005c0 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80003b6:	4828      	ldr	r0, [pc, #160]	@ (8000458 <main+0xf4>)
 80003b8:	f000 ffa0 	bl	80012fc <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80003bc:	2102      	movs	r1, #2
 80003be:	4826      	ldr	r0, [pc, #152]	@ (8000458 <main+0xf4>)
 80003c0:	f001 f902 	bl	80015c8 <HAL_CAN_ActivateNotification>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <main+0x6a>
  {
	  Error_Handler();
 80003ca:	f000 fb31 	bl	8000a30 <Error_Handler>
  }



  //hdac1.State = HAL_DAC_STATE_RESET;
  TxHeader.IDE = CAN_ID_STD;
 80003ce:	4b23      	ldr	r3, [pc, #140]	@ (800045c <main+0xf8>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x446;
 80003d4:	4b21      	ldr	r3, [pc, #132]	@ (800045c <main+0xf8>)
 80003d6:	f240 4246 	movw	r2, #1094	@ 0x446
 80003da:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 80003dc:	4b1f      	ldr	r3, [pc, #124]	@ (800045c <main+0xf8>)
 80003de:	2200      	movs	r2, #0
 80003e0:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 2;
 80003e2:	4b1e      	ldr	r3, [pc, #120]	@ (800045c <main+0xf8>)
 80003e4:	2202      	movs	r2, #2
 80003e6:	611a      	str	r2, [r3, #16]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80003e8:	f003 f9dc 	bl	80037a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(Heart_Beat, NULL, &HeartBeat_attributes);
 80003ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000460 <main+0xfc>)
 80003ee:	2100      	movs	r1, #0
 80003f0:	481c      	ldr	r0, [pc, #112]	@ (8000464 <main+0x100>)
 80003f2:	f003 fa21 	bl	8003838 <osThreadNew>
 80003f6:	4603      	mov	r3, r0
 80003f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000468 <main+0x104>)
 80003fa:	6013      	str	r3, [r2, #0]

  /* creation of UpdateThrottle */
  UpdateThrottleHandle = osThreadNew(Update_Throttle, NULL, &UpdateThrottle_attributes);
 80003fc:	4a1b      	ldr	r2, [pc, #108]	@ (800046c <main+0x108>)
 80003fe:	2100      	movs	r1, #0
 8000400:	481b      	ldr	r0, [pc, #108]	@ (8000470 <main+0x10c>)
 8000402:	f003 fa19 	bl	8003838 <osThreadNew>
 8000406:	4603      	mov	r3, r0
 8000408:	4a1a      	ldr	r2, [pc, #104]	@ (8000474 <main+0x110>)
 800040a:	6013      	str	r3, [r2, #0]

  /* creation of LightsControl */
  LightsControlHandle = osThreadNew(Lights_Control, NULL, &LightsControl_attributes);
 800040c:	4a1a      	ldr	r2, [pc, #104]	@ (8000478 <main+0x114>)
 800040e:	2100      	movs	r1, #0
 8000410:	481a      	ldr	r0, [pc, #104]	@ (800047c <main+0x118>)
 8000412:	f003 fa11 	bl	8003838 <osThreadNew>
 8000416:	4603      	mov	r3, r0
 8000418:	4a19      	ldr	r2, [pc, #100]	@ (8000480 <main+0x11c>)
 800041a:	6013      	str	r3, [r2, #0]

  /* creation of ReadSensors */
  ReadSensorsHandle = osThreadNew(Read_Sensors, NULL, &ReadSensors_attributes);
 800041c:	4a19      	ldr	r2, [pc, #100]	@ (8000484 <main+0x120>)
 800041e:	2100      	movs	r1, #0
 8000420:	4819      	ldr	r0, [pc, #100]	@ (8000488 <main+0x124>)
 8000422:	f003 fa09 	bl	8003838 <osThreadNew>
 8000426:	4603      	mov	r3, r0
 8000428:	4a18      	ldr	r2, [pc, #96]	@ (800048c <main+0x128>)
 800042a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800042c:	f003 f9de 	bl	80037ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <main+0xcc>
 8000434:	200000f4 	.word	0x200000f4
 8000438:	200000f5 	.word	0x200000f5
 800043c:	200000f6 	.word	0x200000f6
 8000440:	200000f7 	.word	0x200000f7
 8000444:	200000f8 	.word	0x200000f8
 8000448:	200000fc 	.word	0x200000fc
 800044c:	200000f9 	.word	0x200000f9
 8000450:	200000fa 	.word	0x200000fa
 8000454:	200000fb 	.word	0x200000fb
 8000458:	2000007c 	.word	0x2000007c
 800045c:	20000108 	.word	0x20000108
 8000460:	08006540 	.word	0x08006540
 8000464:	080007ad 	.word	0x080007ad
 8000468:	200000e0 	.word	0x200000e0
 800046c:	08006564 	.word	0x08006564
 8000470:	080007d1 	.word	0x080007d1
 8000474:	200000e4 	.word	0x200000e4
 8000478:	08006588 	.word	0x08006588
 800047c:	080008f5 	.word	0x080008f5
 8000480:	200000e8 	.word	0x200000e8
 8000484:	080065ac 	.word	0x080065ac
 8000488:	080009fd 	.word	0x080009fd
 800048c:	200000ec 	.word	0x200000ec

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b096      	sub	sp, #88	@ 0x58
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	2244      	movs	r2, #68	@ 0x44
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f005 ff32 	bl	8006308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	463b      	mov	r3, r7
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004b6:	f001 ffbb 	bl	8002430 <HAL_PWREx_ControlVoltageScaling>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80004c0:	f000 fab6 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004c4:	2310      	movs	r3, #16
 80004c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004c8:	2301      	movs	r3, #1
 80004ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004cc:	2300      	movs	r3, #0
 80004ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80004d0:	2360      	movs	r3, #96	@ 0x60
 80004d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4618      	mov	r0, r3
 80004de:	f001 fffd 	bl	80024dc <HAL_RCC_OscConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004e8:	f000 faa2 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ec:	230f      	movs	r3, #15
 80004ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004f0:	2300      	movs	r3, #0
 80004f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000500:	463b      	mov	r3, r7
 8000502:	2100      	movs	r1, #0
 8000504:	4618      	mov	r0, r3
 8000506:	f002 fc03 	bl	8002d10 <HAL_RCC_ClockConfig>
 800050a:	4603      	mov	r3, r0
 800050c:	2b00      	cmp	r3, #0
 800050e:	d001      	beq.n	8000514 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000510:	f000 fa8e 	bl	8000a30 <Error_Handler>
  }
}
 8000514:	bf00      	nop
 8000516:	3758      	adds	r7, #88	@ 0x58
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	@ 0x28
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000522:	4b25      	ldr	r3, [pc, #148]	@ (80005b8 <MX_CAN1_Init+0x9c>)
 8000524:	4a25      	ldr	r2, [pc, #148]	@ (80005bc <MX_CAN1_Init+0xa0>)
 8000526:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000528:	4b23      	ldr	r3, [pc, #140]	@ (80005b8 <MX_CAN1_Init+0x9c>)
 800052a:	2202      	movs	r2, #2
 800052c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800052e:	4b22      	ldr	r3, [pc, #136]	@ (80005b8 <MX_CAN1_Init+0x9c>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000534:	4b20      	ldr	r3, [pc, #128]	@ (80005b8 <MX_CAN1_Init+0x9c>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800053a:	4b1f      	ldr	r3, [pc, #124]	@ (80005b8 <MX_CAN1_Init+0x9c>)
 800053c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000540:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000542:	4b1d      	ldr	r3, [pc, #116]	@ (80005b8 <MX_CAN1_Init+0x9c>)
 8000544:	2200      	movs	r2, #0
 8000546:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000548:	4b1b      	ldr	r3, [pc, #108]	@ (80005b8 <MX_CAN1_Init+0x9c>)
 800054a:	2200      	movs	r2, #0
 800054c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800054e:	4b1a      	ldr	r3, [pc, #104]	@ (80005b8 <MX_CAN1_Init+0x9c>)
 8000550:	2200      	movs	r2, #0
 8000552:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000554:	4b18      	ldr	r3, [pc, #96]	@ (80005b8 <MX_CAN1_Init+0x9c>)
 8000556:	2200      	movs	r2, #0
 8000558:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800055a:	4b17      	ldr	r3, [pc, #92]	@ (80005b8 <MX_CAN1_Init+0x9c>)
 800055c:	2200      	movs	r2, #0
 800055e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000560:	4b15      	ldr	r3, [pc, #84]	@ (80005b8 <MX_CAN1_Init+0x9c>)
 8000562:	2200      	movs	r2, #0
 8000564:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000566:	4b14      	ldr	r3, [pc, #80]	@ (80005b8 <MX_CAN1_Init+0x9c>)
 8000568:	2200      	movs	r2, #0
 800056a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800056c:	4812      	ldr	r0, [pc, #72]	@ (80005b8 <MX_CAN1_Init+0x9c>)
 800056e:	f000 fce9 	bl	8000f44 <HAL_CAN_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000578:	f000 fa5a 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800057c:	2301      	movs	r3, #1
 800057e:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8000580:	2312      	movs	r3, #18
 8000582:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000584:	2300      	movs	r3, #0
 8000586:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x000<<5;
 8000588:	2300      	movs	r3, #0
 800058a:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x000<<5;
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800059c:	2301      	movs	r3, #1
 800059e:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 80005a0:	2314      	movs	r3, #20
 80005a2:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80005a4:	463b      	mov	r3, r7
 80005a6:	4619      	mov	r1, r3
 80005a8:	4803      	ldr	r0, [pc, #12]	@ (80005b8 <MX_CAN1_Init+0x9c>)
 80005aa:	f000 fdc7 	bl	800113c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80005ae:	bf00      	nop
 80005b0:	3728      	adds	r7, #40	@ 0x28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	2000007c 	.word	0x2000007c
 80005bc:	40006400 	.word	0x40006400

080005c0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80005c4:	4b17      	ldr	r3, [pc, #92]	@ (8000624 <MX_CAN2_Init+0x64>)
 80005c6:	4a18      	ldr	r2, [pc, #96]	@ (8000628 <MX_CAN2_Init+0x68>)
 80005c8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 80005ca:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <MX_CAN2_Init+0x64>)
 80005cc:	2202      	movs	r2, #2
 80005ce:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005d0:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <MX_CAN2_Init+0x64>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005d6:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <MX_CAN2_Init+0x64>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80005dc:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <MX_CAN2_Init+0x64>)
 80005de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005e2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <MX_CAN2_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <MX_CAN2_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <MX_CAN2_Init+0x64>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000624 <MX_CAN2_Init+0x64>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <MX_CAN2_Init+0x64>)
 80005fe:	2200      	movs	r2, #0
 8000600:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000602:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <MX_CAN2_Init+0x64>)
 8000604:	2200      	movs	r2, #0
 8000606:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <MX_CAN2_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	@ (8000624 <MX_CAN2_Init+0x64>)
 8000610:	f000 fc98 	bl	8000f44 <HAL_CAN_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 800061a:	f000 fa09 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000a4 	.word	0x200000a4
 8000628:	40006800 	.word	0x40006800

0800062c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	@ 0x28
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2224      	movs	r2, #36	@ 0x24
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f005 fe65 	bl	8006308 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800063e:	4b17      	ldr	r3, [pc, #92]	@ (800069c <MX_DAC1_Init+0x70>)
 8000640:	4a17      	ldr	r2, [pc, #92]	@ (80006a0 <MX_DAC1_Init+0x74>)
 8000642:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000644:	4815      	ldr	r0, [pc, #84]	@ (800069c <MX_DAC1_Init+0x70>)
 8000646:	f001 faf7 	bl	8001c38 <HAL_DAC_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000650:	f000 f9ee 	bl	8000a30 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	4619      	mov	r1, r3
 800066e:	480b      	ldr	r0, [pc, #44]	@ (800069c <MX_DAC1_Init+0x70>)
 8000670:	f001 fbda 	bl	8001e28 <HAL_DAC_ConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800067a:	f000 f9d9 	bl	8000a30 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2210      	movs	r2, #16
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	@ (800069c <MX_DAC1_Init+0x70>)
 8000686:	f001 fbcf 	bl	8001e28 <HAL_DAC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000690:	f000 f9ce 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	@ 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000cc 	.word	0x200000cc
 80006a0:	40007400 	.word	0x40007400

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b39      	ldr	r3, [pc, #228]	@ (80007a0 <MX_GPIO_Init+0xfc>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	4a38      	ldr	r2, [pc, #224]	@ (80007a0 <MX_GPIO_Init+0xfc>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c6:	4b36      	ldr	r3, [pc, #216]	@ (80007a0 <MX_GPIO_Init+0xfc>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b33      	ldr	r3, [pc, #204]	@ (80007a0 <MX_GPIO_Init+0xfc>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d6:	4a32      	ldr	r2, [pc, #200]	@ (80007a0 <MX_GPIO_Init+0xfc>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006de:	4b30      	ldr	r3, [pc, #192]	@ (80007a0 <MX_GPIO_Init+0xfc>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	4b2d      	ldr	r3, [pc, #180]	@ (80007a0 <MX_GPIO_Init+0xfc>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	4a2c      	ldr	r2, [pc, #176]	@ (80007a0 <MX_GPIO_Init+0xfc>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f6:	4b2a      	ldr	r3, [pc, #168]	@ (80007a0 <MX_GPIO_Init+0xfc>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	210f      	movs	r1, #15
 8000706:	4827      	ldr	r0, [pc, #156]	@ (80007a4 <MX_GPIO_Init+0x100>)
 8000708:	f001 fe52 	bl	80023b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2107      	movs	r1, #7
 8000710:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000714:	f001 fe4c 	bl	80023b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f242 0102 	movw	r1, #8194	@ 0x2002
 800071e:	4822      	ldr	r0, [pc, #136]	@ (80007a8 <MX_GPIO_Init+0x104>)
 8000720:	f001 fe46 	bl	80023b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000724:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800072a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800072e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	4619      	mov	r1, r3
 800073a:	481a      	ldr	r0, [pc, #104]	@ (80007a4 <MX_GPIO_Init+0x100>)
 800073c:	f001 fca6 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000740:	230f      	movs	r3, #15
 8000742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4619      	mov	r1, r3
 8000756:	4813      	ldr	r0, [pc, #76]	@ (80007a4 <MX_GPIO_Init+0x100>)
 8000758:	f001 fc98 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pins : MC_Main_Pin PA1 PA2 */
  GPIO_InitStruct.Pin = MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2;
 800075c:	2307      	movs	r3, #7
 800075e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4619      	mov	r1, r3
 8000772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000776:	f001 fc89 	bl	800208c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 800077a:	f242 0302 	movw	r3, #8194	@ 0x2002
 800077e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	2301      	movs	r3, #1
 8000782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <MX_GPIO_Init+0x104>)
 8000794:	f001 fc7a 	bl	800208c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000
 80007a4:	48000800 	.word	0x48000800
 80007a8:	48000400 	.word	0x48000400

080007ac <Heart_Beat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Heart_Beat */
void Heart_Beat(void *argument)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80007b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007b8:	4804      	ldr	r0, [pc, #16]	@ (80007cc <Heart_Beat+0x20>)
 80007ba:	f001 fe11 	bl	80023e0 <HAL_GPIO_TogglePin>
    osDelay(500);
 80007be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007c2:	f003 f8cb 	bl	800395c <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 80007c6:	bf00      	nop
 80007c8:	e7f4      	b.n	80007b4 <Heart_Beat+0x8>
 80007ca:	bf00      	nop
 80007cc:	48000400 	.word	0x48000400

080007d0 <Update_Throttle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Update_Throttle */
void Update_Throttle(void *argument)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Update_Throttle */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2104      	movs	r1, #4
 80007dc:	483c      	ldr	r0, [pc, #240]	@ (80008d0 <Update_Throttle+0x100>)
 80007de:	f001 fde7 	bl	80023b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2104      	movs	r1, #4
 80007e6:	483a      	ldr	r0, [pc, #232]	@ (80008d0 <Update_Throttle+0x100>)
 80007e8:	f001 fde2 	bl	80023b0 <HAL_GPIO_WritePin>



  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1); //Start DAC 1 and 2
 80007ec:	2100      	movs	r1, #0
 80007ee:	4839      	ldr	r0, [pc, #228]	@ (80008d4 <Update_Throttle+0x104>)
 80007f0:	f001 fa44 	bl	8001c7c <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 80007f4:	2110      	movs	r1, #16
 80007f6:	4837      	ldr	r0, [pc, #220]	@ (80008d4 <Update_Throttle+0x104>)
 80007f8:	f001 fa40 	bl	8001c7c <HAL_DAC_Start>
  array = 1;
 80007fc:	4b36      	ldr	r3, [pc, #216]	@ (80008d8 <Update_Throttle+0x108>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
  array_precharge = 1;
 8000802:	4b36      	ldr	r3, [pc, #216]	@ (80008dc <Update_Throttle+0x10c>)
 8000804:	2201      	movs	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, throttle);
 8000808:	4b35      	ldr	r3, [pc, #212]	@ (80008e0 <Update_Throttle+0x110>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	2200      	movs	r2, #0
 800080e:	2110      	movs	r1, #16
 8000810:	4830      	ldr	r0, [pc, #192]	@ (80008d4 <Update_Throttle+0x104>)
 8000812:	f001 fada 	bl	8001dca <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, regen);
 8000816:	4b33      	ldr	r3, [pc, #204]	@ (80008e4 <Update_Throttle+0x114>)
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	482d      	ldr	r0, [pc, #180]	@ (80008d4 <Update_Throttle+0x104>)
 8000820:	f001 fad3 	bl	8001dca <HAL_DAC_SetValue>

	  //updates gpio pins with states from global variables

	  //change for bistable relay
	  //gonna have to think about this section
	  if(mc_main_ctrl){
 8000824:	4b30      	ldr	r3, [pc, #192]	@ (80008e8 <Update_Throttle+0x118>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d006      	beq.n	800083a <Update_Throttle+0x6a>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	2101      	movs	r1, #1
 8000830:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000834:	f001 fdbc 	bl	80023b0 <HAL_GPIO_WritePin>
 8000838:	e005      	b.n	8000846 <Update_Throttle+0x76>
	  }else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2101      	movs	r1, #1
 800083e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000842:	f001 fdb5 	bl	80023b0 <HAL_GPIO_WritePin>
	  }

	  if(mc_pwreco_ctrl){
 8000846:	4b29      	ldr	r3, [pc, #164]	@ (80008ec <Update_Throttle+0x11c>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d006      	beq.n	800085c <Update_Throttle+0x8c>
		  //closed power
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800084e:	2201      	movs	r2, #1
 8000850:	2102      	movs	r1, #2
 8000852:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000856:	f001 fdab 	bl	80023b0 <HAL_GPIO_WritePin>
 800085a:	e005      	b.n	8000868 <Update_Throttle+0x98>
	  }else{
		  //open eco
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2102      	movs	r1, #2
 8000860:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000864:	f001 fda4 	bl	80023b0 <HAL_GPIO_WritePin>
	  }


	  if(dirrection == true){
 8000868:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <Update_Throttle+0x120>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d006      	beq.n	800087e <Update_Throttle+0xae>
		  //closed forward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2104      	movs	r1, #4
 8000874:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000878:	f001 fd9a 	bl	80023b0 <HAL_GPIO_WritePin>
 800087c:	e005      	b.n	800088a <Update_Throttle+0xba>
	  }else{
		  //open backward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2104      	movs	r1, #4
 8000882:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000886:	f001 fd93 	bl	80023b0 <HAL_GPIO_WritePin>
	  }

	  if(array_precharge == true){
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <Update_Throttle+0x10c>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d005      	beq.n	800089e <Update_Throttle+0xce>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2104      	movs	r1, #4
 8000896:	480e      	ldr	r0, [pc, #56]	@ (80008d0 <Update_Throttle+0x100>)
 8000898:	f001 fd8a 	bl	80023b0 <HAL_GPIO_WritePin>
 800089c:	e004      	b.n	80008a8 <Update_Throttle+0xd8>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	2104      	movs	r1, #4
 80008a2:	480b      	ldr	r0, [pc, #44]	@ (80008d0 <Update_Throttle+0x100>)
 80008a4:	f001 fd84 	bl	80023b0 <HAL_GPIO_WritePin>
	  }

	  if(array == true){
 80008a8:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <Update_Throttle+0x108>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d005      	beq.n	80008bc <Update_Throttle+0xec>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2108      	movs	r1, #8
 80008b4:	4806      	ldr	r0, [pc, #24]	@ (80008d0 <Update_Throttle+0x100>)
 80008b6:	f001 fd7b 	bl	80023b0 <HAL_GPIO_WritePin>
 80008ba:	e004      	b.n	80008c6 <Update_Throttle+0xf6>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	2108      	movs	r1, #8
 80008c0:	4803      	ldr	r0, [pc, #12]	@ (80008d0 <Update_Throttle+0x100>)
 80008c2:	f001 fd75 	bl	80023b0 <HAL_GPIO_WritePin>
	  }


	  osDelay(20);
 80008c6:	2014      	movs	r0, #20
 80008c8:	f003 f848 	bl	800395c <osDelay>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, throttle);
 80008cc:	e79c      	b.n	8000808 <Update_Throttle+0x38>
 80008ce:	bf00      	nop
 80008d0:	48000800 	.word	0x48000800
 80008d4:	200000cc 	.word	0x200000cc
 80008d8:	200000fa 	.word	0x200000fa
 80008dc:	200000fb 	.word	0x200000fb
 80008e0:	200000f0 	.word	0x200000f0
 80008e4:	200000f2 	.word	0x200000f2
 80008e8:	200000f9 	.word	0x200000f9
 80008ec:	200000fc 	.word	0x200000fc
 80008f0:	200000f8 	.word	0x200000f8

080008f4 <Lights_Control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Lights_Control */
void Lights_Control(void *argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Lights_Control */
  left_turn_active = true;
 80008fc:	4b38      	ldr	r3, [pc, #224]	@ (80009e0 <Lights_Control+0xec>)
 80008fe:	2201      	movs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {


	  if(left_turn_active){
 8000902:	4b37      	ldr	r3, [pc, #220]	@ (80009e0 <Lights_Control+0xec>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d016      	beq.n	8000938 <Lights_Control+0x44>
		  if(signal_counter < 5){
 800090a:	4b36      	ldr	r3, [pc, #216]	@ (80009e4 <Lights_Control+0xf0>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b04      	cmp	r3, #4
 8000910:	dc06      	bgt.n	8000920 <Lights_Control+0x2c>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000912:	2201      	movs	r2, #1
 8000914:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000918:	4833      	ldr	r0, [pc, #204]	@ (80009e8 <Lights_Control+0xf4>)
 800091a:	f001 fd49 	bl	80023b0 <HAL_GPIO_WritePin>
 800091e:	e005      	b.n	800092c <Lights_Control+0x38>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000926:	4830      	ldr	r0, [pc, #192]	@ (80009e8 <Lights_Control+0xf4>)
 8000928:	f001 fd42 	bl	80023b0 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 800092c:	4b2d      	ldr	r3, [pc, #180]	@ (80009e4 <Lights_Control+0xf0>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	3301      	adds	r3, #1
 8000932:	4a2c      	ldr	r2, [pc, #176]	@ (80009e4 <Lights_Control+0xf0>)
 8000934:	6013      	str	r3, [r2, #0]
 8000936:	e010      	b.n	800095a <Lights_Control+0x66>

	  }else{
		  if(brakes_active){
 8000938:	4b2c      	ldr	r3, [pc, #176]	@ (80009ec <Lights_Control+0xf8>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d006      	beq.n	800094e <Lights_Control+0x5a>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000946:	4828      	ldr	r0, [pc, #160]	@ (80009e8 <Lights_Control+0xf4>)
 8000948:	f001 fd32 	bl	80023b0 <HAL_GPIO_WritePin>
 800094c:	e005      	b.n	800095a <Lights_Control+0x66>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000954:	4824      	ldr	r0, [pc, #144]	@ (80009e8 <Lights_Control+0xf4>)
 8000956:	f001 fd2b 	bl	80023b0 <HAL_GPIO_WritePin>
		  }
	  }

	  if(right_turn_active){
 800095a:	4b25      	ldr	r3, [pc, #148]	@ (80009f0 <Lights_Control+0xfc>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d014      	beq.n	800098c <Lights_Control+0x98>
		  if(signal_counter < 5){
 8000962:	4b20      	ldr	r3, [pc, #128]	@ (80009e4 <Lights_Control+0xf0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b04      	cmp	r3, #4
 8000968:	dc05      	bgt.n	8000976 <Lights_Control+0x82>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 800096a:	2201      	movs	r2, #1
 800096c:	2101      	movs	r1, #1
 800096e:	481e      	ldr	r0, [pc, #120]	@ (80009e8 <Lights_Control+0xf4>)
 8000970:	f001 fd1e 	bl	80023b0 <HAL_GPIO_WritePin>
 8000974:	e004      	b.n	8000980 <Lights_Control+0x8c>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2101      	movs	r1, #1
 800097a:	481b      	ldr	r0, [pc, #108]	@ (80009e8 <Lights_Control+0xf4>)
 800097c:	f001 fd18 	bl	80023b0 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 8000980:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <Lights_Control+0xf0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	4a17      	ldr	r2, [pc, #92]	@ (80009e4 <Lights_Control+0xf0>)
 8000988:	6013      	str	r3, [r2, #0]
 800098a:	e00e      	b.n	80009aa <Lights_Control+0xb6>

	  }else{
		  if(brakes_active){
 800098c:	4b17      	ldr	r3, [pc, #92]	@ (80009ec <Lights_Control+0xf8>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d005      	beq.n	80009a0 <Lights_Control+0xac>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2101      	movs	r1, #1
 8000998:	4813      	ldr	r0, [pc, #76]	@ (80009e8 <Lights_Control+0xf4>)
 800099a:	f001 fd09 	bl	80023b0 <HAL_GPIO_WritePin>
 800099e:	e004      	b.n	80009aa <Lights_Control+0xb6>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2101      	movs	r1, #1
 80009a4:	4810      	ldr	r0, [pc, #64]	@ (80009e8 <Lights_Control+0xf4>)
 80009a6:	f001 fd03 	bl	80023b0 <HAL_GPIO_WritePin>
		  }
	  }

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, rc_light_en); //sets center rear light (brake light)
 80009aa:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <Lights_Control+0x100>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	2101      	movs	r1, #1
 80009b2:	480d      	ldr	r0, [pc, #52]	@ (80009e8 <Lights_Control+0xf4>)
 80009b4:	f001 fcfc 	bl	80023b0 <HAL_GPIO_WritePin>

	  signal_counter = signal_counter%10;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <Lights_Control+0xf0>)
 80009ba:	6819      	ldr	r1, [r3, #0]
 80009bc:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <Lights_Control+0x104>)
 80009be:	fb83 2301 	smull	r2, r3, r3, r1
 80009c2:	109a      	asrs	r2, r3, #2
 80009c4:	17cb      	asrs	r3, r1, #31
 80009c6:	1ad2      	subs	r2, r2, r3
 80009c8:	4613      	mov	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4413      	add	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	1aca      	subs	r2, r1, r3
 80009d2:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <Lights_Control+0xf0>)
 80009d4:	601a      	str	r2, [r3, #0]





	  osDelay(100);
 80009d6:	2064      	movs	r0, #100	@ 0x64
 80009d8:	f002 ffc0 	bl	800395c <osDelay>
	  if(left_turn_active){
 80009dc:	e791      	b.n	8000902 <Lights_Control+0xe>
 80009de:	bf00      	nop
 80009e0:	200000f6 	.word	0x200000f6
 80009e4:	20000100 	.word	0x20000100
 80009e8:	48000800 	.word	0x48000800
 80009ec:	200000f4 	.word	0x200000f4
 80009f0:	200000f7 	.word	0x200000f7
 80009f4:	20000104 	.word	0x20000104
 80009f8:	66666667 	.word	0x66666667

080009fc <Read_Sensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Read_Sensors */
void Read_Sensors(void *argument)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


    osDelay(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f002 ffa9 	bl	800395c <osDelay>
 8000a0a:	e7fb      	b.n	8000a04 <Read_Sensors+0x8>

08000a0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d101      	bne.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a1e:	f000 fa4d 	bl	8000ebc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40001000 	.word	0x40001000

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <Error_Handler+0x8>

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a46:	4a10      	ldr	r2, [pc, #64]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a64:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <HAL_MspInit+0x4c>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	210f      	movs	r1, #15
 8000a76:	f06f 0001 	mvn.w	r0, #1
 8000a7a:	f001 f8b3 	bl	8001be4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	@ 0x30
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a56      	ldr	r2, [pc, #344]	@ (8000c04 <HAL_CAN_MspInit+0x178>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d14b      	bne.n	8000b46 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000aae:	4b56      	ldr	r3, [pc, #344]	@ (8000c08 <HAL_CAN_MspInit+0x17c>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	4a54      	ldr	r2, [pc, #336]	@ (8000c08 <HAL_CAN_MspInit+0x17c>)
 8000ab6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000ab8:	4b53      	ldr	r3, [pc, #332]	@ (8000c08 <HAL_CAN_MspInit+0x17c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d10b      	bne.n	8000ad8 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000ac0:	4b52      	ldr	r3, [pc, #328]	@ (8000c0c <HAL_CAN_MspInit+0x180>)
 8000ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac4:	4a51      	ldr	r2, [pc, #324]	@ (8000c0c <HAL_CAN_MspInit+0x180>)
 8000ac6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aca:	6593      	str	r3, [r2, #88]	@ 0x58
 8000acc:	4b4f      	ldr	r3, [pc, #316]	@ (8000c0c <HAL_CAN_MspInit+0x180>)
 8000ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad8:	4b4c      	ldr	r3, [pc, #304]	@ (8000c0c <HAL_CAN_MspInit+0x180>)
 8000ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000adc:	4a4b      	ldr	r2, [pc, #300]	@ (8000c0c <HAL_CAN_MspInit+0x180>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae4:	4b49      	ldr	r3, [pc, #292]	@ (8000c0c <HAL_CAN_MspInit+0x180>)
 8000ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000af0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b02:	2309      	movs	r3, #9
 8000b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4840      	ldr	r0, [pc, #256]	@ (8000c10 <HAL_CAN_MspInit+0x184>)
 8000b0e:	f001 fabd 	bl	800208c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b24:	2309      	movs	r3, #9
 8000b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4838      	ldr	r0, [pc, #224]	@ (8000c10 <HAL_CAN_MspInit+0x184>)
 8000b30:	f001 faac 	bl	800208c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2105      	movs	r1, #5
 8000b38:	2014      	movs	r0, #20
 8000b3a:	f001 f853 	bl	8001be4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b3e:	2014      	movs	r0, #20
 8000b40:	f001 f86c 	bl	8001c1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000b44:	e059      	b.n	8000bfa <HAL_CAN_MspInit+0x16e>
  else if(hcan->Instance==CAN2)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a32      	ldr	r2, [pc, #200]	@ (8000c14 <HAL_CAN_MspInit+0x188>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d154      	bne.n	8000bfa <HAL_CAN_MspInit+0x16e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000b50:	4b2e      	ldr	r3, [pc, #184]	@ (8000c0c <HAL_CAN_MspInit+0x180>)
 8000b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b54:	4a2d      	ldr	r2, [pc, #180]	@ (8000c0c <HAL_CAN_MspInit+0x180>)
 8000b56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000c0c <HAL_CAN_MspInit+0x180>)
 8000b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000b68:	4b27      	ldr	r3, [pc, #156]	@ (8000c08 <HAL_CAN_MspInit+0x17c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	4a26      	ldr	r2, [pc, #152]	@ (8000c08 <HAL_CAN_MspInit+0x17c>)
 8000b70:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000b72:	4b25      	ldr	r3, [pc, #148]	@ (8000c08 <HAL_CAN_MspInit+0x17c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d10b      	bne.n	8000b92 <HAL_CAN_MspInit+0x106>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000b7a:	4b24      	ldr	r3, [pc, #144]	@ (8000c0c <HAL_CAN_MspInit+0x180>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b7e:	4a23      	ldr	r2, [pc, #140]	@ (8000c0c <HAL_CAN_MspInit+0x180>)
 8000b80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b86:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <HAL_CAN_MspInit+0x180>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <HAL_CAN_MspInit+0x180>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b96:	4a1d      	ldr	r2, [pc, #116]	@ (8000c0c <HAL_CAN_MspInit+0x180>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c0c <HAL_CAN_MspInit+0x180>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000baa:	2320      	movs	r3, #32
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4812      	ldr	r0, [pc, #72]	@ (8000c10 <HAL_CAN_MspInit+0x184>)
 8000bc6:	f001 fa61 	bl	800208c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bca:	2340      	movs	r3, #64	@ 0x40
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8000bda:	2308      	movs	r3, #8
 8000bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	480a      	ldr	r0, [pc, #40]	@ (8000c10 <HAL_CAN_MspInit+0x184>)
 8000be6:	f001 fa51 	bl	800208c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2105      	movs	r1, #5
 8000bee:	2057      	movs	r0, #87	@ 0x57
 8000bf0:	f000 fff8 	bl	8001be4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8000bf4:	2057      	movs	r0, #87	@ 0x57
 8000bf6:	f001 f811 	bl	8001c1c <HAL_NVIC_EnableIRQ>
}
 8000bfa:	bf00      	nop
 8000bfc:	3730      	adds	r7, #48	@ 0x30
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40006400 	.word	0x40006400
 8000c08:	20000144 	.word	0x20000144
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	48000400 	.word	0x48000400
 8000c14:	40006800 	.word	0x40006800

08000c18 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	@ 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a19      	ldr	r2, [pc, #100]	@ (8000c9c <HAL_DAC_MspInit+0x84>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12c      	bne.n	8000c94 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <HAL_DAC_MspInit+0x88>)
 8000c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c3e:	4a18      	ldr	r2, [pc, #96]	@ (8000ca0 <HAL_DAC_MspInit+0x88>)
 8000c40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000c44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <HAL_DAC_MspInit+0x88>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c4a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <HAL_DAC_MspInit+0x88>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	4a12      	ldr	r2, [pc, #72]	@ (8000ca0 <HAL_DAC_MspInit+0x88>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <HAL_DAC_MspInit+0x88>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c6a:	2330      	movs	r3, #48	@ 0x30
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c80:	f001 fa04 	bl	800208c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	210f      	movs	r1, #15
 8000c88:	2036      	movs	r0, #54	@ 0x36
 8000c8a:	f000 ffab 	bl	8001be4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c8e:	2036      	movs	r0, #54	@ 0x36
 8000c90:	f000 ffc4 	bl	8001c1c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	@ 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40007400 	.word	0x40007400
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08e      	sub	sp, #56	@ 0x38
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cb2:	4b34      	ldr	r3, [pc, #208]	@ (8000d84 <HAL_InitTick+0xe0>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb6:	4a33      	ldr	r2, [pc, #204]	@ (8000d84 <HAL_InitTick+0xe0>)
 8000cb8:	f043 0310 	orr.w	r3, r3, #16
 8000cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cbe:	4b31      	ldr	r3, [pc, #196]	@ (8000d84 <HAL_InitTick+0xe0>)
 8000cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cca:	f107 0210 	add.w	r2, r7, #16
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 f9c9 	bl	800306c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d103      	bne.n	8000cec <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ce4:	f002 f9ac 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8000ce8:	6378      	str	r0, [r7, #52]	@ 0x34
 8000cea:	e004      	b.n	8000cf6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cec:	f002 f9a8 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cf8:	4a23      	ldr	r2, [pc, #140]	@ (8000d88 <HAL_InitTick+0xe4>)
 8000cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfe:	0c9b      	lsrs	r3, r3, #18
 8000d00:	3b01      	subs	r3, #1
 8000d02:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d04:	4b21      	ldr	r3, [pc, #132]	@ (8000d8c <HAL_InitTick+0xe8>)
 8000d06:	4a22      	ldr	r2, [pc, #136]	@ (8000d90 <HAL_InitTick+0xec>)
 8000d08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d0a:	4b20      	ldr	r3, [pc, #128]	@ (8000d8c <HAL_InitTick+0xe8>)
 8000d0c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d12:	4a1e      	ldr	r2, [pc, #120]	@ (8000d8c <HAL_InitTick+0xe8>)
 8000d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <HAL_InitTick+0xe8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d8c <HAL_InitTick+0xe8>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <HAL_InitTick+0xe8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d2a:	4818      	ldr	r0, [pc, #96]	@ (8000d8c <HAL_InitTick+0xe8>)
 8000d2c:	f002 fa30 	bl	8003190 <HAL_TIM_Base_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d36:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d11b      	bne.n	8000d76 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d3e:	4813      	ldr	r0, [pc, #76]	@ (8000d8c <HAL_InitTick+0xe8>)
 8000d40:	f002 fa88 	bl	8003254 <HAL_TIM_Base_Start_IT>
 8000d44:	4603      	mov	r3, r0
 8000d46:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d4a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d111      	bne.n	8000d76 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d52:	2036      	movs	r0, #54	@ 0x36
 8000d54:	f000 ff62 	bl	8001c1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b0f      	cmp	r3, #15
 8000d5c:	d808      	bhi.n	8000d70 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	6879      	ldr	r1, [r7, #4]
 8000d62:	2036      	movs	r0, #54	@ 0x36
 8000d64:	f000 ff3e 	bl	8001be4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d68:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <HAL_InitTick+0xf0>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	e002      	b.n	8000d76 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d76:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3738      	adds	r7, #56	@ 0x38
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40021000 	.word	0x40021000
 8000d88:	431bde83 	.word	0x431bde83
 8000d8c:	20000148 	.word	0x20000148
 8000d90:	40001000 	.word	0x40001000
 8000d94:	20000004 	.word	0x20000004

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <NMI_Handler+0x4>

08000da0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <MemManage_Handler+0x4>

08000db0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000dd4:	4802      	ldr	r0, [pc, #8]	@ (8000de0 <CAN1_RX0_IRQHandler+0x10>)
 8000dd6:	f000 fc1d 	bl	8001614 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000007c 	.word	0x2000007c

08000de4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000de8:	4803      	ldr	r0, [pc, #12]	@ (8000df8 <TIM6_DAC_IRQHandler+0x14>)
 8000dea:	f002 faa3 	bl	8003334 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8000dee:	4803      	ldr	r0, [pc, #12]	@ (8000dfc <TIM6_DAC_IRQHandler+0x18>)
 8000df0:	f000 ff91 	bl	8001d16 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20000148 	.word	0x20000148
 8000dfc:	200000cc 	.word	0x200000cc

08000e00 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000e04:	4802      	ldr	r0, [pc, #8]	@ (8000e10 <CAN2_RX0_IRQHandler+0x10>)
 8000e06:	f000 fc05 	bl	8001614 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200000a4 	.word	0x200000a4

08000e14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <SystemInit+0x20>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e1e:	4a05      	ldr	r2, [pc, #20]	@ (8000e34 <SystemInit+0x20>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e3c:	f7ff ffea 	bl	8000e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e40:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e42:	490d      	ldr	r1, [pc, #52]	@ (8000e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e44:	4a0d      	ldr	r2, [pc, #52]	@ (8000e7c <LoopForever+0xe>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e58:	4c0a      	ldr	r4, [pc, #40]	@ (8000e84 <LoopForever+0x16>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e66:	f005 faad 	bl	80063c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e6a:	f7ff fa7b 	bl	8000364 <main>

08000e6e <LoopForever>:

LoopForever:
    b LoopForever
 8000e6e:	e7fe      	b.n	8000e6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e70:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e7c:	08006620 	.word	0x08006620
  ldr r2, =_sbss
 8000e80:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e84:	20001c78 	.word	0x20001c78

08000e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC1_2_IRQHandler>

08000e8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 fe9a 	bl	8001bce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e9a:	200f      	movs	r0, #15
 8000e9c:	f7ff ff02 	bl	8000ca4 <HAL_InitTick>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d002      	beq.n	8000eac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	71fb      	strb	r3, [r7, #7]
 8000eaa:	e001      	b.n	8000eb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eac:	f7ff fdc6 	bl	8000a3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_IncTick+0x20>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_IncTick+0x24>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a04      	ldr	r2, [pc, #16]	@ (8000ee0 <HAL_IncTick+0x24>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000194 	.word	0x20000194

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	@ (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000194 	.word	0x20000194

08000efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff ffee 	bl	8000ee4 <HAL_GetTick>
 8000f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f14:	d005      	beq.n	8000f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f16:	4b0a      	ldr	r3, [pc, #40]	@ (8000f40 <HAL_Delay+0x44>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f22:	bf00      	nop
 8000f24:	f7ff ffde 	bl	8000ee4 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d8f7      	bhi.n	8000f24 <HAL_Delay+0x28>
  {
  }
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008

08000f44 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d101      	bne.n	8000f56 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e0ed      	b.n	8001132 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d102      	bne.n	8000f68 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff fd92 	bl	8000a8c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f042 0201 	orr.w	r2, r2, #1
 8000f76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f78:	f7ff ffb4 	bl	8000ee4 <HAL_GetTick>
 8000f7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f7e:	e012      	b.n	8000fa6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f80:	f7ff ffb0 	bl	8000ee4 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b0a      	cmp	r3, #10
 8000f8c:	d90b      	bls.n	8000fa6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f92:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2205      	movs	r2, #5
 8000f9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e0c5      	b.n	8001132 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0e5      	beq.n	8000f80 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0202 	bic.w	r2, r2, #2
 8000fc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fc4:	f7ff ff8e 	bl	8000ee4 <HAL_GetTick>
 8000fc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fca:	e012      	b.n	8000ff2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fcc:	f7ff ff8a 	bl	8000ee4 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b0a      	cmp	r3, #10
 8000fd8:	d90b      	bls.n	8000ff2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fde:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2205      	movs	r2, #5
 8000fea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e09f      	b.n	8001132 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1e5      	bne.n	8000fcc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	7e1b      	ldrb	r3, [r3, #24]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d108      	bne.n	800101a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	e007      	b.n	800102a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001028:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7e5b      	ldrb	r3, [r3, #25]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d108      	bne.n	8001044 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	e007      	b.n	8001054 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001052:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	7e9b      	ldrb	r3, [r3, #26]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d108      	bne.n	800106e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f042 0220 	orr.w	r2, r2, #32
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	e007      	b.n	800107e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f022 0220 	bic.w	r2, r2, #32
 800107c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7edb      	ldrb	r3, [r3, #27]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d108      	bne.n	8001098 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f022 0210 	bic.w	r2, r2, #16
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	e007      	b.n	80010a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0210 	orr.w	r2, r2, #16
 80010a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7f1b      	ldrb	r3, [r3, #28]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d108      	bne.n	80010c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0208 	orr.w	r2, r2, #8
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e007      	b.n	80010d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0208 	bic.w	r2, r2, #8
 80010d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7f5b      	ldrb	r3, [r3, #29]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d108      	bne.n	80010ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f042 0204 	orr.w	r2, r2, #4
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	e007      	b.n	80010fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 0204 	bic.w	r2, r2, #4
 80010fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	ea42 0103 	orr.w	r1, r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	1e5a      	subs	r2, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	430a      	orrs	r2, r1
 8001120:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800113c:	b480      	push	{r7}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001152:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001154:	7cfb      	ldrb	r3, [r7, #19]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d003      	beq.n	8001162 <HAL_CAN_ConfigFilter+0x26>
 800115a:	7cfb      	ldrb	r3, [r7, #19]
 800115c:	2b02      	cmp	r3, #2
 800115e:	f040 80be 	bne.w	80012de <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001162:	4b65      	ldr	r3, [pc, #404]	@ (80012f8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001164:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800116c:	f043 0201 	orr.w	r2, r3, #1
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800117c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	431a      	orrs	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f003 031f 	and.w	r3, r3, #31
 80011a2:	2201      	movs	r2, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	401a      	ands	r2, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	69db      	ldr	r3, [r3, #28]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d123      	bne.n	800120c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	401a      	ands	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3248      	adds	r2, #72	@ 0x48
 80011ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001200:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001202:	6979      	ldr	r1, [r7, #20]
 8001204:	3348      	adds	r3, #72	@ 0x48
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	440b      	add	r3, r1
 800120a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d122      	bne.n	800125a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	431a      	orrs	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001234:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3248      	adds	r2, #72	@ 0x48
 800123a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800124e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001250:	6979      	ldr	r1, [r7, #20]
 8001252:	3348      	adds	r3, #72	@ 0x48
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	440b      	add	r3, r1
 8001258:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d109      	bne.n	8001276 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43db      	mvns	r3, r3
 800126c:	401a      	ands	r2, r3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001274:	e007      	b.n	8001286 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	431a      	orrs	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d109      	bne.n	80012a2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43db      	mvns	r3, r3
 8001298:	401a      	ands	r2, r3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80012a0:	e007      	b.n	80012b2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	431a      	orrs	r2, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d107      	bne.n	80012ca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	431a      	orrs	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80012d0:	f023 0201 	bic.w	r2, r3, #1
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e006      	b.n	80012ec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
  }
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	371c      	adds	r7, #28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40006400 	.word	0x40006400

080012fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3020 	ldrb.w	r3, [r3, #32]
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d12e      	bne.n	800136e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2202      	movs	r2, #2
 8001314:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001328:	f7ff fddc 	bl	8000ee4 <HAL_GetTick>
 800132c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800132e:	e012      	b.n	8001356 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001330:	f7ff fdd8 	bl	8000ee4 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b0a      	cmp	r3, #10
 800133c:	d90b      	bls.n	8001356 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001342:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2205      	movs	r2, #5
 800134e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e012      	b.n	800137c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1e5      	bne.n	8001330 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e006      	b.n	800137c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001372:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
  }
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001398:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d003      	beq.n	80013a8 <HAL_CAN_GetRxMessage+0x24>
 80013a0:	7dfb      	ldrb	r3, [r7, #23]
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	f040 8103 	bne.w	80015ae <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10e      	bne.n	80013cc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d116      	bne.n	80013ea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0f7      	b.n	80015bc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d107      	bne.n	80013ea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e0e8      	b.n	80015bc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	331b      	adds	r3, #27
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0204 	and.w	r2, r3, #4
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10c      	bne.n	8001422 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	331b      	adds	r3, #27
 8001410:	011b      	lsls	r3, r3, #4
 8001412:	4413      	add	r3, r2
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	0d5b      	lsrs	r3, r3, #21
 8001418:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	e00b      	b.n	800143a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	331b      	adds	r3, #27
 800142a:	011b      	lsls	r3, r3, #4
 800142c:	4413      	add	r3, r2
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	331b      	adds	r3, #27
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	4413      	add	r3, r2
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0202 	and.w	r2, r3, #2
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	331b      	adds	r3, #27
 8001458:	011b      	lsls	r3, r3, #4
 800145a:	4413      	add	r3, r2
 800145c:	3304      	adds	r3, #4
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2208      	movs	r2, #8
 800146c:	611a      	str	r2, [r3, #16]
 800146e:	e00b      	b.n	8001488 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	331b      	adds	r3, #27
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	4413      	add	r3, r2
 800147c:	3304      	adds	r3, #4
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 020f 	and.w	r2, r3, #15
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	331b      	adds	r3, #27
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	4413      	add	r3, r2
 8001494:	3304      	adds	r3, #4
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	b2da      	uxtb	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	331b      	adds	r3, #27
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	4413      	add	r3, r2
 80014ac:	3304      	adds	r3, #4
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	0c1b      	lsrs	r3, r3, #16
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	011b      	lsls	r3, r3, #4
 80014c0:	4413      	add	r3, r2
 80014c2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	4413      	add	r3, r2
 80014d8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	0a1a      	lsrs	r2, r3, #8
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	4413      	add	r3, r2
 80014f2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0c1a      	lsrs	r2, r3, #16
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	3302      	adds	r3, #2
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	4413      	add	r3, r2
 800150c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	0e1a      	lsrs	r2, r3, #24
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	3303      	adds	r3, #3
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	4413      	add	r3, r2
 8001526:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	3304      	adds	r3, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	4413      	add	r3, r2
 800153e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	0a1a      	lsrs	r2, r3, #8
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	3305      	adds	r3, #5
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	4413      	add	r3, r2
 8001558:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	0c1a      	lsrs	r2, r3, #16
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	3306      	adds	r3, #6
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	4413      	add	r3, r2
 8001572:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	0e1a      	lsrs	r2, r3, #24
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	3307      	adds	r3, #7
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d108      	bne.n	800159a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0220 	orr.w	r2, r2, #32
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	e007      	b.n	80015aa <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	691a      	ldr	r2, [r3, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 0220 	orr.w	r2, r2, #32
 80015a8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e006      	b.n	80015bc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
  }
}
 80015bc:	4618      	mov	r0, r3
 80015be:	371c      	adds	r7, #28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d002      	beq.n	80015e6 <HAL_CAN_ActivateNotification+0x1e>
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d109      	bne.n	80015fa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6959      	ldr	r1, [r3, #20]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	430a      	orrs	r2, r1
 80015f4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e006      	b.n	8001608 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
  }
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	@ 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001650:	6a3b      	ldr	r3, [r7, #32]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d07c      	beq.n	8001754 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	d023      	beq.n	80016ac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2201      	movs	r2, #1
 800166a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f983 	bl	8001982 <HAL_CAN_TxMailbox0CompleteCallback>
 800167c:	e016      	b.n	80016ac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	2b00      	cmp	r3, #0
 8001686:	d004      	beq.n	8001692 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800168e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001690:	e00c      	b.n	80016ac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800169c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016a4:	e002      	b.n	80016ac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f989 	bl	80019be <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d024      	beq.n	8001700 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f963 	bl	8001996 <HAL_CAN_TxMailbox1CompleteCallback>
 80016d0:	e016      	b.n	8001700 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d004      	beq.n	80016e6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80016dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016e4:	e00c      	b.n	8001700 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80016f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80016f8:	e002      	b.n	8001700 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f969 	bl	80019d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d024      	beq.n	8001754 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001712:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f943 	bl	80019aa <HAL_CAN_TxMailbox2CompleteCallback>
 8001724:	e016      	b.n	8001754 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d004      	beq.n	800173a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
 8001738:	e00c      	b.n	8001754 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001746:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
 800174c:	e002      	b.n	8001754 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f949 	bl	80019e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001754:	6a3b      	ldr	r3, [r7, #32]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00c      	beq.n	8001778 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2210      	movs	r2, #16
 8001776:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00b      	beq.n	800179a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2208      	movs	r2, #8
 8001792:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f930 	bl	80019fa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d009      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7fe fd1c 	bl	80001f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00c      	beq.n	80017dc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2210      	movs	r2, #16
 80017da:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	f003 0320 	and.w	r3, r3, #32
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	f003 0308 	and.w	r3, r3, #8
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d006      	beq.n	80017fe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2208      	movs	r2, #8
 80017f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f912 	bl	8001a22 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	f003 0310 	and.w	r3, r3, #16
 8001804:	2b00      	cmp	r3, #0
 8001806:	d009      	beq.n	800181c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f8f9 	bl	8001a0e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00b      	beq.n	800183e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2210      	movs	r2, #16
 8001836:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f8fc 	bl	8001a36 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00b      	beq.n	8001860 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2208      	movs	r2, #8
 8001858:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f8f5 	bl	8001a4a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d07b      	beq.n	8001962 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d072      	beq.n	800195a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800187a:	2b00      	cmp	r3, #0
 800187c:	d008      	beq.n	8001890 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80018a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a6:	f043 0302 	orr.w	r3, r3, #2
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018ac:	6a3b      	ldr	r3, [r7, #32]
 80018ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d008      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80018c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d043      	beq.n	800195a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d03e      	beq.n	800195a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80018e2:	2b60      	cmp	r3, #96	@ 0x60
 80018e4:	d02b      	beq.n	800193e <HAL_CAN_IRQHandler+0x32a>
 80018e6:	2b60      	cmp	r3, #96	@ 0x60
 80018e8:	d82e      	bhi.n	8001948 <HAL_CAN_IRQHandler+0x334>
 80018ea:	2b50      	cmp	r3, #80	@ 0x50
 80018ec:	d022      	beq.n	8001934 <HAL_CAN_IRQHandler+0x320>
 80018ee:	2b50      	cmp	r3, #80	@ 0x50
 80018f0:	d82a      	bhi.n	8001948 <HAL_CAN_IRQHandler+0x334>
 80018f2:	2b40      	cmp	r3, #64	@ 0x40
 80018f4:	d019      	beq.n	800192a <HAL_CAN_IRQHandler+0x316>
 80018f6:	2b40      	cmp	r3, #64	@ 0x40
 80018f8:	d826      	bhi.n	8001948 <HAL_CAN_IRQHandler+0x334>
 80018fa:	2b30      	cmp	r3, #48	@ 0x30
 80018fc:	d010      	beq.n	8001920 <HAL_CAN_IRQHandler+0x30c>
 80018fe:	2b30      	cmp	r3, #48	@ 0x30
 8001900:	d822      	bhi.n	8001948 <HAL_CAN_IRQHandler+0x334>
 8001902:	2b10      	cmp	r3, #16
 8001904:	d002      	beq.n	800190c <HAL_CAN_IRQHandler+0x2f8>
 8001906:	2b20      	cmp	r3, #32
 8001908:	d005      	beq.n	8001916 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800190a:	e01d      	b.n	8001948 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800190c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190e:	f043 0308 	orr.w	r3, r3, #8
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001914:	e019      	b.n	800194a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001918:	f043 0310 	orr.w	r3, r3, #16
 800191c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800191e:	e014      	b.n	800194a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001922:	f043 0320 	orr.w	r3, r3, #32
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001928:	e00f      	b.n	800194a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001930:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001932:	e00a      	b.n	800194a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800193c:	e005      	b.n	800194a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001946:	e000      	b.n	800194a <HAL_CAN_IRQHandler+0x336>
            break;
 8001948:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	699a      	ldr	r2, [r3, #24]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001958:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2204      	movs	r2, #4
 8001960:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f872 	bl	8001a5e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	@ 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a84:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a90:	4013      	ands	r3, r2
 8001a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa6:	4a04      	ldr	r2, [pc, #16]	@ (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	60d3      	str	r3, [r2, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac0:	4b04      	ldr	r3, [pc, #16]	@ (8001ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	f003 0307 	and.w	r3, r3, #7
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	db0b      	blt.n	8001b02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	f003 021f 	and.w	r2, r3, #31
 8001af0:	4907      	ldr	r1, [pc, #28]	@ (8001b10 <__NVIC_EnableIRQ+0x38>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	2001      	movs	r0, #1
 8001afa:	fa00 f202 	lsl.w	r2, r0, r2
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000e100 	.word	0xe000e100

08001b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	db0a      	blt.n	8001b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	490c      	ldr	r1, [pc, #48]	@ (8001b60 <__NVIC_SetPriority+0x4c>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	0112      	lsls	r2, r2, #4
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b3c:	e00a      	b.n	8001b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4908      	ldr	r1, [pc, #32]	@ (8001b64 <__NVIC_SetPriority+0x50>)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3b04      	subs	r3, #4
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	761a      	strb	r2, [r3, #24]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	@ 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f1c3 0307 	rsb	r3, r3, #7
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	bf28      	it	cs
 8001b86:	2304      	movcs	r3, #4
 8001b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d902      	bls.n	8001b98 <NVIC_EncodePriority+0x30>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3b03      	subs	r3, #3
 8001b96:	e000      	b.n	8001b9a <NVIC_EncodePriority+0x32>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	4313      	orrs	r3, r2
         );
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	@ 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ff4c 	bl	8001a74 <__NVIC_SetPriorityGrouping>
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf6:	f7ff ff61 	bl	8001abc <__NVIC_GetPriorityGrouping>
 8001bfa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	6978      	ldr	r0, [r7, #20]
 8001c02:	f7ff ffb1 	bl	8001b68 <NVIC_EncodePriority>
 8001c06:	4602      	mov	r2, r0
 8001c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff80 	bl	8001b14 <__NVIC_SetPriority>
}
 8001c14:	bf00      	nop
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff54 	bl	8001ad8 <__NVIC_EnableIRQ>
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e014      	b.n	8001c74 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	791b      	ldrb	r3, [r3, #4]
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7fe ffdc 	bl	8000c18 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2202      	movs	r2, #2
 8001c64:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	795b      	ldrb	r3, [r3, #5]
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_DAC_Start+0x16>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e03b      	b.n	8001d0a <HAL_DAC_Start+0x8e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6819      	ldr	r1, [r3, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	2201      	movs	r2, #1
 8001cac:	409a      	lsls	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10f      	bne.n	8001cdc <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d118      	bne.n	8001cfc <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0201 	orr.w	r2, r2, #1
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	e00f      	b.n	8001cfc <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001ce6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001cea:	d107      	bne.n	8001cfc <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0202 	orr.w	r2, r2, #2
 8001cfa:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d2c:	d120      	bne.n	8001d70 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d3c:	d118      	bne.n	8001d70 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2204      	movs	r2, #4
 8001d42:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	f043 0201 	orr.w	r2, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d58:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d68:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f852 	bl	8001e14 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d7e:	d120      	bne.n	8001dc2 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d86:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d8e:	d118      	bne.n	8001dc2 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2204      	movs	r2, #4
 8001d94:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	691b      	ldr	r3, [r3, #16]
 8001d9a:	f043 0202 	orr.w	r2, r3, #2
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001daa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001dba:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f95a 	bl	8002076 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b087      	sub	sp, #28
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d105      	bne.n	8001df4 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	3308      	adds	r3, #8
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	e004      	b.n	8001dfe <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	3314      	adds	r3, #20
 8001dfc:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	461a      	mov	r2, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	795b      	ldrb	r3, [r3, #5]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_DAC_ConfigChannel+0x1c>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e114      	b.n	800206e <HAL_DAC_ConfigChannel+0x246>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2201      	movs	r2, #1
 8001e48:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	f040 8081 	bne.w	8001f5c <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001e5a:	f7ff f843 	bl	8000ee4 <HAL_GetTick>
 8001e5e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d140      	bne.n	8001ee8 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001e66:	e018      	b.n	8001e9a <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001e68:	f7ff f83c 	bl	8000ee4 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d911      	bls.n	8001e9a <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00a      	beq.n	8001e9a <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	f043 0208 	orr.w	r2, r3, #8
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2203      	movs	r2, #3
 8001e94:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e0e9      	b.n	800206e <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1df      	bne.n	8001e68 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f7ff f827 	bl	8000efc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	6992      	ldr	r2, [r2, #24]
 8001eb6:	641a      	str	r2, [r3, #64]	@ 0x40
 8001eb8:	e023      	b.n	8001f02 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001eba:	f7ff f813 	bl	8000ee4 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d90f      	bls.n	8001ee8 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	da0a      	bge.n	8001ee8 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	f043 0208 	orr.w	r2, r3, #8
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e0c2      	b.n	800206e <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	dbe3      	blt.n	8001eba <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001ef2:	2001      	movs	r0, #1
 8001ef4:	f7ff f802 	bl	8000efc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	6992      	ldr	r2, [r2, #24]
 8001f00:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	ea02 0103 	and.w	r1, r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	69da      	ldr	r2, [r3, #28]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f003 0310 	and.w	r3, r3, #16
 8001f3c:	21ff      	movs	r1, #255	@ 0xff
 8001f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	ea02 0103 	and.w	r1, r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	6a1a      	ldr	r2, [r3, #32]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	409a      	lsls	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d11d      	bne.n	8001fa0 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f6a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	221f      	movs	r2, #31
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f003 0310 	and.w	r3, r3, #16
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2207      	movs	r2, #7
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6819      	ldr	r1, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43da      	mvns	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	400a      	ands	r2, r1
 8002004:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6819      	ldr	r1, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f003 0310 	and.w	r3, r3, #16
 8002050:	22c0      	movs	r2, #192	@ 0xc0
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	400a      	ands	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2201      	movs	r2, #1
 8002064:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209a:	e166      	b.n	800236a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	2101      	movs	r1, #1
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	fa01 f303 	lsl.w	r3, r1, r3
 80020a8:	4013      	ands	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8158 	beq.w	8002364 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d005      	beq.n	80020cc <HAL_GPIO_Init+0x40>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d130      	bne.n	800212e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	2203      	movs	r2, #3
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002102:	2201      	movs	r2, #1
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	091b      	lsrs	r3, r3, #4
 8002118:	f003 0201 	and.w	r2, r3, #1
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b03      	cmp	r3, #3
 8002138:	d017      	beq.n	800216a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	2203      	movs	r2, #3
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d123      	bne.n	80021be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	08da      	lsrs	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3208      	adds	r2, #8
 800217e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002182:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	220f      	movs	r2, #15
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	08da      	lsrs	r2, r3, #3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3208      	adds	r2, #8
 80021b8:	6939      	ldr	r1, [r7, #16]
 80021ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	2203      	movs	r2, #3
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0203 	and.w	r2, r3, #3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80b2 	beq.w	8002364 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002200:	4b61      	ldr	r3, [pc, #388]	@ (8002388 <HAL_GPIO_Init+0x2fc>)
 8002202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002204:	4a60      	ldr	r2, [pc, #384]	@ (8002388 <HAL_GPIO_Init+0x2fc>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	6613      	str	r3, [r2, #96]	@ 0x60
 800220c:	4b5e      	ldr	r3, [pc, #376]	@ (8002388 <HAL_GPIO_Init+0x2fc>)
 800220e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002218:	4a5c      	ldr	r2, [pc, #368]	@ (800238c <HAL_GPIO_Init+0x300>)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	089b      	lsrs	r3, r3, #2
 800221e:	3302      	adds	r3, #2
 8002220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002224:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	220f      	movs	r2, #15
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002242:	d02b      	beq.n	800229c <HAL_GPIO_Init+0x210>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a52      	ldr	r2, [pc, #328]	@ (8002390 <HAL_GPIO_Init+0x304>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d025      	beq.n	8002298 <HAL_GPIO_Init+0x20c>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a51      	ldr	r2, [pc, #324]	@ (8002394 <HAL_GPIO_Init+0x308>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d01f      	beq.n	8002294 <HAL_GPIO_Init+0x208>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a50      	ldr	r2, [pc, #320]	@ (8002398 <HAL_GPIO_Init+0x30c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d019      	beq.n	8002290 <HAL_GPIO_Init+0x204>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a4f      	ldr	r2, [pc, #316]	@ (800239c <HAL_GPIO_Init+0x310>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d013      	beq.n	800228c <HAL_GPIO_Init+0x200>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a4e      	ldr	r2, [pc, #312]	@ (80023a0 <HAL_GPIO_Init+0x314>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d00d      	beq.n	8002288 <HAL_GPIO_Init+0x1fc>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a4d      	ldr	r2, [pc, #308]	@ (80023a4 <HAL_GPIO_Init+0x318>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d007      	beq.n	8002284 <HAL_GPIO_Init+0x1f8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a4c      	ldr	r2, [pc, #304]	@ (80023a8 <HAL_GPIO_Init+0x31c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d101      	bne.n	8002280 <HAL_GPIO_Init+0x1f4>
 800227c:	2307      	movs	r3, #7
 800227e:	e00e      	b.n	800229e <HAL_GPIO_Init+0x212>
 8002280:	2308      	movs	r3, #8
 8002282:	e00c      	b.n	800229e <HAL_GPIO_Init+0x212>
 8002284:	2306      	movs	r3, #6
 8002286:	e00a      	b.n	800229e <HAL_GPIO_Init+0x212>
 8002288:	2305      	movs	r3, #5
 800228a:	e008      	b.n	800229e <HAL_GPIO_Init+0x212>
 800228c:	2304      	movs	r3, #4
 800228e:	e006      	b.n	800229e <HAL_GPIO_Init+0x212>
 8002290:	2303      	movs	r3, #3
 8002292:	e004      	b.n	800229e <HAL_GPIO_Init+0x212>
 8002294:	2302      	movs	r3, #2
 8002296:	e002      	b.n	800229e <HAL_GPIO_Init+0x212>
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <HAL_GPIO_Init+0x212>
 800229c:	2300      	movs	r3, #0
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	f002 0203 	and.w	r2, r2, #3
 80022a4:	0092      	lsls	r2, r2, #2
 80022a6:	4093      	lsls	r3, r2
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022ae:	4937      	ldr	r1, [pc, #220]	@ (800238c <HAL_GPIO_Init+0x300>)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	089b      	lsrs	r3, r3, #2
 80022b4:	3302      	adds	r3, #2
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022bc:	4b3b      	ldr	r3, [pc, #236]	@ (80023ac <HAL_GPIO_Init+0x320>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022e0:	4a32      	ldr	r2, [pc, #200]	@ (80023ac <HAL_GPIO_Init+0x320>)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022e6:	4b31      	ldr	r3, [pc, #196]	@ (80023ac <HAL_GPIO_Init+0x320>)
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800230a:	4a28      	ldr	r2, [pc, #160]	@ (80023ac <HAL_GPIO_Init+0x320>)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002310:	4b26      	ldr	r3, [pc, #152]	@ (80023ac <HAL_GPIO_Init+0x320>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	43db      	mvns	r3, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002334:	4a1d      	ldr	r2, [pc, #116]	@ (80023ac <HAL_GPIO_Init+0x320>)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800233a:	4b1c      	ldr	r3, [pc, #112]	@ (80023ac <HAL_GPIO_Init+0x320>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800235e:	4a13      	ldr	r2, [pc, #76]	@ (80023ac <HAL_GPIO_Init+0x320>)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3301      	adds	r3, #1
 8002368:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	f47f ae91 	bne.w	800209c <HAL_GPIO_Init+0x10>
  }
}
 800237a:	bf00      	nop
 800237c:	bf00      	nop
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40021000 	.word	0x40021000
 800238c:	40010000 	.word	0x40010000
 8002390:	48000400 	.word	0x48000400
 8002394:	48000800 	.word	0x48000800
 8002398:	48000c00 	.word	0x48000c00
 800239c:	48001000 	.word	0x48001000
 80023a0:	48001400 	.word	0x48001400
 80023a4:	48001800 	.word	0x48001800
 80023a8:	48001c00 	.word	0x48001c00
 80023ac:	40010400 	.word	0x40010400

080023b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
 80023bc:	4613      	mov	r3, r2
 80023be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c0:	787b      	ldrb	r3, [r7, #1]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023cc:	e002      	b.n	80023d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4013      	ands	r3, r2
 80023f8:	041a      	lsls	r2, r3, #16
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	43d9      	mvns	r1, r3
 80023fe:	887b      	ldrh	r3, [r7, #2]
 8002400:	400b      	ands	r3, r1
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	619a      	str	r2, [r3, #24]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002418:	4b04      	ldr	r3, [pc, #16]	@ (800242c <HAL_PWREx_GetVoltageRange+0x18>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40007000 	.word	0x40007000

08002430 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800243e:	d130      	bne.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002440:	4b23      	ldr	r3, [pc, #140]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800244c:	d038      	beq.n	80024c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800244e:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002456:	4a1e      	ldr	r2, [pc, #120]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002458:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800245c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800245e:	4b1d      	ldr	r3, [pc, #116]	@ (80024d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2232      	movs	r2, #50	@ 0x32
 8002464:	fb02 f303 	mul.w	r3, r2, r3
 8002468:	4a1b      	ldr	r2, [pc, #108]	@ (80024d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	0c9b      	lsrs	r3, r3, #18
 8002470:	3301      	adds	r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002474:	e002      	b.n	800247c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	3b01      	subs	r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800247c:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002484:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002488:	d102      	bne.n	8002490 <HAL_PWREx_ControlVoltageScaling+0x60>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f2      	bne.n	8002476 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002490:	4b0f      	ldr	r3, [pc, #60]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800249c:	d110      	bne.n	80024c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e00f      	b.n	80024c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024a2:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ae:	d007      	beq.n	80024c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024b0:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024b8:	4a05      	ldr	r2, [pc, #20]	@ (80024d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40007000 	.word	0x40007000
 80024d4:	20000000 	.word	0x20000000
 80024d8:	431bde83 	.word	0x431bde83

080024dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d102      	bne.n	80024f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	f000 bc08 	b.w	8002d00 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f0:	4b96      	ldr	r3, [pc, #600]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024fa:	4b94      	ldr	r3, [pc, #592]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 80e4 	beq.w	80026da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d007      	beq.n	8002528 <HAL_RCC_OscConfig+0x4c>
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	f040 808b 	bne.w	8002636 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2b01      	cmp	r3, #1
 8002524:	f040 8087 	bne.w	8002636 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002528:	4b88      	ldr	r3, [pc, #544]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_OscConfig+0x64>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e3df      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1a      	ldr	r2, [r3, #32]
 8002544:	4b81      	ldr	r3, [pc, #516]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d004      	beq.n	800255a <HAL_RCC_OscConfig+0x7e>
 8002550:	4b7e      	ldr	r3, [pc, #504]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002558:	e005      	b.n	8002566 <HAL_RCC_OscConfig+0x8a>
 800255a:	4b7c      	ldr	r3, [pc, #496]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 800255c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002566:	4293      	cmp	r3, r2
 8002568:	d223      	bcs.n	80025b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fdae 	bl	80030d0 <RCC_SetFlashLatencyFromMSIRange>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e3c0      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800257e:	4b73      	ldr	r3, [pc, #460]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a72      	ldr	r2, [pc, #456]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002584:	f043 0308 	orr.w	r3, r3, #8
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b70      	ldr	r3, [pc, #448]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	496d      	ldr	r1, [pc, #436]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800259c:	4b6b      	ldr	r3, [pc, #428]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	4968      	ldr	r1, [pc, #416]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
 80025b0:	e025      	b.n	80025fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b2:	4b66      	ldr	r3, [pc, #408]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a65      	ldr	r2, [pc, #404]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 80025b8:	f043 0308 	orr.w	r3, r3, #8
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	4b63      	ldr	r3, [pc, #396]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	4960      	ldr	r1, [pc, #384]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025d0:	4b5e      	ldr	r3, [pc, #376]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	495b      	ldr	r1, [pc, #364]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fd6e 	bl	80030d0 <RCC_SetFlashLatencyFromMSIRange>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e380      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025fe:	f000 fc87 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002602:	4602      	mov	r2, r0
 8002604:	4b51      	ldr	r3, [pc, #324]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	4950      	ldr	r1, [pc, #320]	@ (8002750 <HAL_RCC_OscConfig+0x274>)
 8002610:	5ccb      	ldrb	r3, [r1, r3]
 8002612:	f003 031f 	and.w	r3, r3, #31
 8002616:	fa22 f303 	lsr.w	r3, r2, r3
 800261a:	4a4e      	ldr	r2, [pc, #312]	@ (8002754 <HAL_RCC_OscConfig+0x278>)
 800261c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800261e:	4b4e      	ldr	r3, [pc, #312]	@ (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe fb3e 	bl	8000ca4 <HAL_InitTick>
 8002628:	4603      	mov	r3, r0
 800262a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d052      	beq.n	80026d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	e364      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d032      	beq.n	80026a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800263e:	4b43      	ldr	r3, [pc, #268]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a42      	ldr	r2, [pc, #264]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800264a:	f7fe fc4b 	bl	8000ee4 <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002650:	e008      	b.n	8002664 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002652:	f7fe fc47 	bl	8000ee4 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e34d      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002664:	4b39      	ldr	r3, [pc, #228]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0f0      	beq.n	8002652 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002670:	4b36      	ldr	r3, [pc, #216]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a35      	ldr	r2, [pc, #212]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002676:	f043 0308 	orr.w	r3, r3, #8
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b33      	ldr	r3, [pc, #204]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4930      	ldr	r1, [pc, #192]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 800268a:	4313      	orrs	r3, r2
 800268c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800268e:	4b2f      	ldr	r3, [pc, #188]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	492b      	ldr	r1, [pc, #172]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
 80026a2:	e01a      	b.n	80026da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026a4:	4b29      	ldr	r3, [pc, #164]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a28      	ldr	r2, [pc, #160]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026b0:	f7fe fc18 	bl	8000ee4 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026b8:	f7fe fc14 	bl	8000ee4 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e31a      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026ca:	4b20      	ldr	r3, [pc, #128]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x1dc>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d073      	beq.n	80027ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_OscConfig+0x21c>
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	d10e      	bne.n	8002710 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d10b      	bne.n	8002710 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	4b14      	ldr	r3, [pc, #80]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d063      	beq.n	80027cc <HAL_RCC_OscConfig+0x2f0>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d15f      	bne.n	80027cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e2f7      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x24c>
 800271a:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a0b      	ldr	r2, [pc, #44]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e025      	b.n	8002774 <HAL_RCC_OscConfig+0x298>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002730:	d114      	bne.n	800275c <HAL_RCC_OscConfig+0x280>
 8002732:	4b06      	ldr	r3, [pc, #24]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a05      	ldr	r2, [pc, #20]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b03      	ldr	r3, [pc, #12]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a02      	ldr	r2, [pc, #8]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e013      	b.n	8002774 <HAL_RCC_OscConfig+0x298>
 800274c:	40021000 	.word	0x40021000
 8002750:	080065d0 	.word	0x080065d0
 8002754:	20000000 	.word	0x20000000
 8002758:	20000004 	.word	0x20000004
 800275c:	4ba0      	ldr	r3, [pc, #640]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a9f      	ldr	r2, [pc, #636]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b9d      	ldr	r3, [pc, #628]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a9c      	ldr	r2, [pc, #624]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe fbb2 	bl	8000ee4 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe fbae 	bl	8000ee4 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	@ 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e2b4      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002796:	4b92      	ldr	r3, [pc, #584]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0x2a8>
 80027a2:	e014      	b.n	80027ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fb9e 	bl	8000ee4 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe fb9a 	bl	8000ee4 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	@ 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e2a0      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027be:	4b88      	ldr	r3, [pc, #544]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x2d0>
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d060      	beq.n	800289c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d005      	beq.n	80027ec <HAL_RCC_OscConfig+0x310>
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d119      	bne.n	800281a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d116      	bne.n	800281a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ec:	4b7c      	ldr	r3, [pc, #496]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_OscConfig+0x328>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e27d      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b76      	ldr	r3, [pc, #472]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	4973      	ldr	r1, [pc, #460]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002818:	e040      	b.n	800289c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d023      	beq.n	800286a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002822:	4b6f      	ldr	r3, [pc, #444]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a6e      	ldr	r2, [pc, #440]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800282c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe fb59 	bl	8000ee4 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002836:	f7fe fb55 	bl	8000ee4 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e25b      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002848:	4b65      	ldr	r3, [pc, #404]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002854:	4b62      	ldr	r3, [pc, #392]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	495f      	ldr	r1, [pc, #380]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002864:	4313      	orrs	r3, r2
 8002866:	604b      	str	r3, [r1, #4]
 8002868:	e018      	b.n	800289c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800286a:	4b5d      	ldr	r3, [pc, #372]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a5c      	ldr	r2, [pc, #368]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002876:	f7fe fb35 	bl	8000ee4 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800287e:	f7fe fb31 	bl	8000ee4 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e237      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002890:	4b53      	ldr	r3, [pc, #332]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d03c      	beq.n	8002922 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01c      	beq.n	80028ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b0:	4b4b      	ldr	r3, [pc, #300]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 80028b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028b6:	4a4a      	ldr	r2, [pc, #296]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c0:	f7fe fb10 	bl	8000ee4 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c8:	f7fe fb0c 	bl	8000ee4 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e212      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028da:	4b41      	ldr	r3, [pc, #260]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 80028dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ef      	beq.n	80028c8 <HAL_RCC_OscConfig+0x3ec>
 80028e8:	e01b      	b.n	8002922 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ea:	4b3d      	ldr	r3, [pc, #244]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 80028ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028f0:	4a3b      	ldr	r2, [pc, #236]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fa:	f7fe faf3 	bl	8000ee4 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002902:	f7fe faef 	bl	8000ee4 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e1f5      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002914:	4b32      	ldr	r3, [pc, #200]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002916:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ef      	bne.n	8002902 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 80a6 	beq.w	8002a7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002930:	2300      	movs	r3, #0
 8002932:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002934:	4b2a      	ldr	r3, [pc, #168]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10d      	bne.n	800295c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002940:	4b27      	ldr	r3, [pc, #156]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002944:	4a26      	ldr	r2, [pc, #152]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800294a:	6593      	str	r3, [r2, #88]	@ 0x58
 800294c:	4b24      	ldr	r3, [pc, #144]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 800294e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002958:	2301      	movs	r3, #1
 800295a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295c:	4b21      	ldr	r3, [pc, #132]	@ (80029e4 <HAL_RCC_OscConfig+0x508>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d118      	bne.n	800299a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002968:	4b1e      	ldr	r3, [pc, #120]	@ (80029e4 <HAL_RCC_OscConfig+0x508>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a1d      	ldr	r2, [pc, #116]	@ (80029e4 <HAL_RCC_OscConfig+0x508>)
 800296e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002972:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002974:	f7fe fab6 	bl	8000ee4 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297c:	f7fe fab2 	bl	8000ee4 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e1b8      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800298e:	4b15      	ldr	r3, [pc, #84]	@ (80029e4 <HAL_RCC_OscConfig+0x508>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d108      	bne.n	80029b4 <HAL_RCC_OscConfig+0x4d8>
 80029a2:	4b0f      	ldr	r3, [pc, #60]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a8:	4a0d      	ldr	r2, [pc, #52]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029b2:	e029      	b.n	8002a08 <HAL_RCC_OscConfig+0x52c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	d115      	bne.n	80029e8 <HAL_RCC_OscConfig+0x50c>
 80029bc:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c2:	4a07      	ldr	r2, [pc, #28]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029cc:	4b04      	ldr	r3, [pc, #16]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d2:	4a03      	ldr	r2, [pc, #12]	@ (80029e0 <HAL_RCC_OscConfig+0x504>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029dc:	e014      	b.n	8002a08 <HAL_RCC_OscConfig+0x52c>
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40007000 	.word	0x40007000
 80029e8:	4b9d      	ldr	r3, [pc, #628]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ee:	4a9c      	ldr	r2, [pc, #624]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 80029f0:	f023 0301 	bic.w	r3, r3, #1
 80029f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029f8:	4b99      	ldr	r3, [pc, #612]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fe:	4a98      	ldr	r2, [pc, #608]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d016      	beq.n	8002a3e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a10:	f7fe fa68 	bl	8000ee4 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a18:	f7fe fa64 	bl	8000ee4 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e168      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a2e:	4b8c      	ldr	r3, [pc, #560]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0ed      	beq.n	8002a18 <HAL_RCC_OscConfig+0x53c>
 8002a3c:	e015      	b.n	8002a6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fa51 	bl	8000ee4 <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a44:	e00a      	b.n	8002a5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7fe fa4d 	bl	8000ee4 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e151      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a5c:	4b80      	ldr	r3, [pc, #512]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1ed      	bne.n	8002a46 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a6a:	7ffb      	ldrb	r3, [r7, #31]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d105      	bne.n	8002a7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a70:	4b7b      	ldr	r3, [pc, #492]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a74:	4a7a      	ldr	r2, [pc, #488]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002a76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a7a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d03c      	beq.n	8002b02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01c      	beq.n	8002aca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a90:	4b73      	ldr	r3, [pc, #460]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a96:	4a72      	ldr	r2, [pc, #456]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002a98:	f043 0301 	orr.w	r3, r3, #1
 8002a9c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fa20 	bl	8000ee4 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aa8:	f7fe fa1c 	bl	8000ee4 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e122      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aba:	4b69      	ldr	r3, [pc, #420]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0ef      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x5cc>
 8002ac8:	e01b      	b.n	8002b02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aca:	4b65      	ldr	r3, [pc, #404]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ad0:	4a63      	ldr	r2, [pc, #396]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002ad2:	f023 0301 	bic.w	r3, r3, #1
 8002ad6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ada:	f7fe fa03 	bl	8000ee4 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ae2:	f7fe f9ff 	bl	8000ee4 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e105      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002af4:	4b5a      	ldr	r3, [pc, #360]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1ef      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80f9 	beq.w	8002cfe <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	f040 80cf 	bne.w	8002cb4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b16:	4b52      	ldr	r3, [pc, #328]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 0203 	and.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d12c      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b34:	3b01      	subs	r3, #1
 8002b36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d123      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d11b      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d113      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b66:	085b      	lsrs	r3, r3, #1
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d109      	bne.n	8002b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d071      	beq.n	8002c68 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d068      	beq.n	8002c5c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b8a:	4b35      	ldr	r3, [pc, #212]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d105      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b96:	4b32      	ldr	r3, [pc, #200]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0ac      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a2d      	ldr	r2, [pc, #180]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002bac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bb0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bb2:	f7fe f997 	bl	8000ee4 <HAL_GetTick>
 8002bb6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bba:	f7fe f993 	bl	8000ee4 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e099      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bcc:	4b24      	ldr	r3, [pc, #144]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1f0      	bne.n	8002bba <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd8:	4b21      	ldr	r3, [pc, #132]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	4b21      	ldr	r3, [pc, #132]	@ (8002c64 <HAL_RCC_OscConfig+0x788>)
 8002bde:	4013      	ands	r3, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002be8:	3a01      	subs	r2, #1
 8002bea:	0112      	lsls	r2, r2, #4
 8002bec:	4311      	orrs	r1, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002bf2:	0212      	lsls	r2, r2, #8
 8002bf4:	4311      	orrs	r1, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002bfa:	0852      	lsrs	r2, r2, #1
 8002bfc:	3a01      	subs	r2, #1
 8002bfe:	0552      	lsls	r2, r2, #21
 8002c00:	4311      	orrs	r1, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c06:	0852      	lsrs	r2, r2, #1
 8002c08:	3a01      	subs	r2, #1
 8002c0a:	0652      	lsls	r2, r2, #25
 8002c0c:	4311      	orrs	r1, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c12:	06d2      	lsls	r2, r2, #27
 8002c14:	430a      	orrs	r2, r1
 8002c16:	4912      	ldr	r1, [pc, #72]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c1c:	4b10      	ldr	r3, [pc, #64]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0f      	ldr	r2, [pc, #60]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002c22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c28:	4b0d      	ldr	r3, [pc, #52]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4a0c      	ldr	r2, [pc, #48]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002c2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c34:	f7fe f956 	bl	8000ee4 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7fe f952 	bl	8000ee4 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e058      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4e:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <HAL_RCC_OscConfig+0x784>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c5a:	e050      	b.n	8002cfe <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e04f      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
 8002c60:	40021000 	.word	0x40021000
 8002c64:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c68:	4b27      	ldr	r3, [pc, #156]	@ (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d144      	bne.n	8002cfe <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c74:	4b24      	ldr	r3, [pc, #144]	@ (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a23      	ldr	r2, [pc, #140]	@ (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c80:	4b21      	ldr	r3, [pc, #132]	@ (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4a20      	ldr	r2, [pc, #128]	@ (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002c86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c8c:	f7fe f92a 	bl	8000ee4 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c94:	f7fe f926 	bl	8000ee4 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e02c      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca6:	4b18      	ldr	r3, [pc, #96]	@ (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0x7b8>
 8002cb2:	e024      	b.n	8002cfe <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2b0c      	cmp	r3, #12
 8002cb8:	d01f      	beq.n	8002cfa <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cba:	4b13      	ldr	r3, [pc, #76]	@ (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a12      	ldr	r2, [pc, #72]	@ (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002cc0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7fe f90d 	bl	8000ee4 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cce:	f7fe f909 	bl	8000ee4 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e00f      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce0:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f0      	bne.n	8002cce <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cec:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002cee:	68da      	ldr	r2, [r3, #12]
 8002cf0:	4905      	ldr	r1, [pc, #20]	@ (8002d08 <HAL_RCC_OscConfig+0x82c>)
 8002cf2:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <HAL_RCC_OscConfig+0x830>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60cb      	str	r3, [r1, #12]
 8002cf8:	e001      	b.n	8002cfe <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3720      	adds	r7, #32
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	feeefffc 	.word	0xfeeefffc

08002d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0e7      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d24:	4b75      	ldr	r3, [pc, #468]	@ (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d910      	bls.n	8002d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b72      	ldr	r3, [pc, #456]	@ (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 0207 	bic.w	r2, r3, #7
 8002d3a:	4970      	ldr	r1, [pc, #448]	@ (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b6e      	ldr	r3, [pc, #440]	@ (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0cf      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d010      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	4b66      	ldr	r3, [pc, #408]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d908      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d70:	4b63      	ldr	r3, [pc, #396]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	4960      	ldr	r1, [pc, #384]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d04c      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d107      	bne.n	8002da6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d96:	4b5a      	ldr	r3, [pc, #360]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d121      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e0a6      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dae:	4b54      	ldr	r3, [pc, #336]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d115      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e09a      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dc6:	4b4e      	ldr	r3, [pc, #312]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e08e      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e086      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002de6:	4b46      	ldr	r3, [pc, #280]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f023 0203 	bic.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4943      	ldr	r1, [pc, #268]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002df8:	f7fe f874 	bl	8000ee4 <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e00:	f7fe f870 	bl	8000ee4 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e06e      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	4b3a      	ldr	r3, [pc, #232]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 020c 	and.w	r2, r3, #12
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d1eb      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d010      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	4b31      	ldr	r3, [pc, #196]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d208      	bcs.n	8002e56 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e44:	4b2e      	ldr	r3, [pc, #184]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	492b      	ldr	r1, [pc, #172]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e56:	4b29      	ldr	r3, [pc, #164]	@ (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d210      	bcs.n	8002e86 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e64:	4b25      	ldr	r3, [pc, #148]	@ (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 0207 	bic.w	r2, r3, #7
 8002e6c:	4923      	ldr	r1, [pc, #140]	@ (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e74:	4b21      	ldr	r3, [pc, #132]	@ (8002efc <HAL_RCC_ClockConfig+0x1ec>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d001      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e036      	b.n	8002ef4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e92:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	4918      	ldr	r1, [pc, #96]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0308 	and.w	r3, r3, #8
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d009      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eb0:	4b13      	ldr	r3, [pc, #76]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4910      	ldr	r1, [pc, #64]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ec4:	f000 f824 	bl	8002f10 <HAL_RCC_GetSysClockFreq>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	4b0d      	ldr	r3, [pc, #52]	@ (8002f00 <HAL_RCC_ClockConfig+0x1f0>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	091b      	lsrs	r3, r3, #4
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	490b      	ldr	r1, [pc, #44]	@ (8002f04 <HAL_RCC_ClockConfig+0x1f4>)
 8002ed6:	5ccb      	ldrb	r3, [r1, r3]
 8002ed8:	f003 031f 	and.w	r3, r3, #31
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee0:	4a09      	ldr	r2, [pc, #36]	@ (8002f08 <HAL_RCC_ClockConfig+0x1f8>)
 8002ee2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ee4:	4b09      	ldr	r3, [pc, #36]	@ (8002f0c <HAL_RCC_ClockConfig+0x1fc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fedb 	bl	8000ca4 <HAL_InitTick>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ef2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40022000 	.word	0x40022000
 8002f00:	40021000 	.word	0x40021000
 8002f04:	080065d0 	.word	0x080065d0
 8002f08:	20000000 	.word	0x20000000
 8002f0c:	20000004 	.word	0x20000004

08002f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b089      	sub	sp, #36	@ 0x24
 8002f14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f1e:	4b3e      	ldr	r3, [pc, #248]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f28:	4b3b      	ldr	r3, [pc, #236]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0x34>
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	d121      	bne.n	8002f82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d11e      	bne.n	8002f82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f44:	4b34      	ldr	r3, [pc, #208]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d107      	bne.n	8002f60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f50:	4b31      	ldr	r3, [pc, #196]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f56:	0a1b      	lsrs	r3, r3, #8
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	61fb      	str	r3, [r7, #28]
 8002f5e:	e005      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f60:	4b2d      	ldr	r3, [pc, #180]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800301c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10d      	bne.n	8002f98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f80:	e00a      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d102      	bne.n	8002f8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f88:	4b25      	ldr	r3, [pc, #148]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f8a:	61bb      	str	r3, [r7, #24]
 8002f8c:	e004      	b.n	8002f98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d101      	bne.n	8002f98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f94:	4b23      	ldr	r3, [pc, #140]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	2b0c      	cmp	r3, #12
 8002f9c:	d134      	bne.n	8003008 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d003      	beq.n	8002fb6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	d003      	beq.n	8002fbc <HAL_RCC_GetSysClockFreq+0xac>
 8002fb4:	e005      	b.n	8002fc2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8003020 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fb8:	617b      	str	r3, [r7, #20]
      break;
 8002fba:	e005      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fbc:	4b19      	ldr	r3, [pc, #100]	@ (8003024 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fbe:	617b      	str	r3, [r7, #20]
      break;
 8002fc0:	e002      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	617b      	str	r3, [r7, #20]
      break;
 8002fc6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fc8:	4b13      	ldr	r3, [pc, #76]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	091b      	lsrs	r3, r3, #4
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002fd6:	4b10      	ldr	r3, [pc, #64]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	fb03 f202 	mul.w	r2, r3, r2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fee:	4b0a      	ldr	r3, [pc, #40]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	0e5b      	lsrs	r3, r3, #25
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	fbb2 f3f3 	udiv	r3, r2, r3
 8003006:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003008:	69bb      	ldr	r3, [r7, #24]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3724      	adds	r7, #36	@ 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000
 800301c:	080065e8 	.word	0x080065e8
 8003020:	00f42400 	.word	0x00f42400
 8003024:	007a1200 	.word	0x007a1200

08003028 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800302c:	4b03      	ldr	r3, [pc, #12]	@ (800303c <HAL_RCC_GetHCLKFreq+0x14>)
 800302e:	681b      	ldr	r3, [r3, #0]
}
 8003030:	4618      	mov	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000000 	.word	0x20000000

08003040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003044:	f7ff fff0 	bl	8003028 <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b06      	ldr	r3, [pc, #24]	@ (8003064 <HAL_RCC_GetPCLK1Freq+0x24>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	0a1b      	lsrs	r3, r3, #8
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4904      	ldr	r1, [pc, #16]	@ (8003068 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40021000 	.word	0x40021000
 8003068:	080065e0 	.word	0x080065e0

0800306c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	220f      	movs	r2, #15
 800307a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800307c:	4b12      	ldr	r3, [pc, #72]	@ (80030c8 <HAL_RCC_GetClockConfig+0x5c>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0203 	and.w	r2, r3, #3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003088:	4b0f      	ldr	r3, [pc, #60]	@ (80030c8 <HAL_RCC_GetClockConfig+0x5c>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003094:	4b0c      	ldr	r3, [pc, #48]	@ (80030c8 <HAL_RCC_GetClockConfig+0x5c>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80030a0:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <HAL_RCC_GetClockConfig+0x5c>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	08db      	lsrs	r3, r3, #3
 80030a6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80030ae:	4b07      	ldr	r3, [pc, #28]	@ (80030cc <HAL_RCC_GetClockConfig+0x60>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0207 	and.w	r2, r3, #7
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	601a      	str	r2, [r3, #0]
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40022000 	.word	0x40022000

080030d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030e8:	f7ff f994 	bl	8002414 <HAL_PWREx_GetVoltageRange>
 80030ec:	6178      	str	r0, [r7, #20]
 80030ee:	e014      	b.n	800311a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030f0:	4b25      	ldr	r3, [pc, #148]	@ (8003188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f4:	4a24      	ldr	r2, [pc, #144]	@ (8003188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80030fc:	4b22      	ldr	r3, [pc, #136]	@ (8003188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003108:	f7ff f984 	bl	8002414 <HAL_PWREx_GetVoltageRange>
 800310c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800310e:	4b1e      	ldr	r3, [pc, #120]	@ (8003188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003112:	4a1d      	ldr	r2, [pc, #116]	@ (8003188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003114:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003118:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003120:	d10b      	bne.n	800313a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b80      	cmp	r3, #128	@ 0x80
 8003126:	d919      	bls.n	800315c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2ba0      	cmp	r3, #160	@ 0xa0
 800312c:	d902      	bls.n	8003134 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800312e:	2302      	movs	r3, #2
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	e013      	b.n	800315c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003134:	2301      	movs	r3, #1
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	e010      	b.n	800315c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b80      	cmp	r3, #128	@ 0x80
 800313e:	d902      	bls.n	8003146 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003140:	2303      	movs	r3, #3
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	e00a      	b.n	800315c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b80      	cmp	r3, #128	@ 0x80
 800314a:	d102      	bne.n	8003152 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800314c:	2302      	movs	r3, #2
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	e004      	b.n	800315c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b70      	cmp	r3, #112	@ 0x70
 8003156:	d101      	bne.n	800315c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003158:	2301      	movs	r3, #1
 800315a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800315c:	4b0b      	ldr	r3, [pc, #44]	@ (800318c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 0207 	bic.w	r2, r3, #7
 8003164:	4909      	ldr	r1, [pc, #36]	@ (800318c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800316c:	4b07      	ldr	r3, [pc, #28]	@ (800318c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	429a      	cmp	r2, r3
 8003178:	d001      	beq.n	800317e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e000      	b.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40021000 	.word	0x40021000
 800318c:	40022000 	.word	0x40022000

08003190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e049      	b.n	8003236 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d106      	bne.n	80031bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f841 	bl	800323e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3304      	adds	r3, #4
 80031cc:	4619      	mov	r1, r3
 80031ce:	4610      	mov	r0, r2
 80031d0:	f000 f9e0 	bl	8003594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	d001      	beq.n	800326c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e04f      	b.n	800330c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0201 	orr.w	r2, r2, #1
 8003282:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a23      	ldr	r2, [pc, #140]	@ (8003318 <HAL_TIM_Base_Start_IT+0xc4>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01d      	beq.n	80032ca <HAL_TIM_Base_Start_IT+0x76>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003296:	d018      	beq.n	80032ca <HAL_TIM_Base_Start_IT+0x76>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1f      	ldr	r2, [pc, #124]	@ (800331c <HAL_TIM_Base_Start_IT+0xc8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_TIM_Base_Start_IT+0x76>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003320 <HAL_TIM_Base_Start_IT+0xcc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00e      	beq.n	80032ca <HAL_TIM_Base_Start_IT+0x76>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003324 <HAL_TIM_Base_Start_IT+0xd0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_TIM_Base_Start_IT+0x76>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003328 <HAL_TIM_Base_Start_IT+0xd4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_TIM_Base_Start_IT+0x76>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a19      	ldr	r2, [pc, #100]	@ (800332c <HAL_TIM_Base_Start_IT+0xd8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d115      	bne.n	80032f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	4b17      	ldr	r3, [pc, #92]	@ (8003330 <HAL_TIM_Base_Start_IT+0xdc>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b06      	cmp	r3, #6
 80032da:	d015      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0xb4>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032e2:	d011      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f4:	e008      	b.n	8003308 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e000      	b.n	800330a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003308:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800
 8003324:	40000c00 	.word	0x40000c00
 8003328:	40013400 	.word	0x40013400
 800332c:	40014000 	.word	0x40014000
 8003330:	00010007 	.word	0x00010007

08003334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d020      	beq.n	8003398 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01b      	beq.n	8003398 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0202 	mvn.w	r2, #2
 8003368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f8e9 	bl	8003556 <HAL_TIM_IC_CaptureCallback>
 8003384:	e005      	b.n	8003392 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f8db 	bl	8003542 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f8ec 	bl	800356a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d020      	beq.n	80033e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01b      	beq.n	80033e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0204 	mvn.w	r2, #4
 80033b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f8c3 	bl	8003556 <HAL_TIM_IC_CaptureCallback>
 80033d0:	e005      	b.n	80033de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f8b5 	bl	8003542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f8c6 	bl	800356a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d020      	beq.n	8003430 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01b      	beq.n	8003430 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0208 	mvn.w	r2, #8
 8003400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2204      	movs	r2, #4
 8003406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f89d 	bl	8003556 <HAL_TIM_IC_CaptureCallback>
 800341c:	e005      	b.n	800342a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f88f 	bl	8003542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f8a0 	bl	800356a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b00      	cmp	r3, #0
 8003438:	d020      	beq.n	800347c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01b      	beq.n	800347c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0210 	mvn.w	r2, #16
 800344c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2208      	movs	r2, #8
 8003452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f877 	bl	8003556 <HAL_TIM_IC_CaptureCallback>
 8003468:	e005      	b.n	8003476 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f869 	bl	8003542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f87a 	bl	800356a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00c      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d007      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0201 	mvn.w	r2, #1
 8003498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fd fab6 	bl	8000a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d104      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00c      	beq.n	80034ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d007      	beq.n	80034ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80034c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f913 	bl	80036f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00c      	beq.n	80034f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80034ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f90b 	bl	8003708 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00c      	beq.n	8003516 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d007      	beq.n	8003516 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800350e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f834 	bl	800357e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00c      	beq.n	800353a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b00      	cmp	r3, #0
 8003528:	d007      	beq.n	800353a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f06f 0220 	mvn.w	r2, #32
 8003532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f8d3 	bl	80036e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a46      	ldr	r2, [pc, #280]	@ (80036c0 <TIM_Base_SetConfig+0x12c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d013      	beq.n	80035d4 <TIM_Base_SetConfig+0x40>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035b2:	d00f      	beq.n	80035d4 <TIM_Base_SetConfig+0x40>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a43      	ldr	r2, [pc, #268]	@ (80036c4 <TIM_Base_SetConfig+0x130>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00b      	beq.n	80035d4 <TIM_Base_SetConfig+0x40>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a42      	ldr	r2, [pc, #264]	@ (80036c8 <TIM_Base_SetConfig+0x134>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d007      	beq.n	80035d4 <TIM_Base_SetConfig+0x40>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a41      	ldr	r2, [pc, #260]	@ (80036cc <TIM_Base_SetConfig+0x138>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d003      	beq.n	80035d4 <TIM_Base_SetConfig+0x40>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a40      	ldr	r2, [pc, #256]	@ (80036d0 <TIM_Base_SetConfig+0x13c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d108      	bne.n	80035e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a35      	ldr	r2, [pc, #212]	@ (80036c0 <TIM_Base_SetConfig+0x12c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01f      	beq.n	800362e <TIM_Base_SetConfig+0x9a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f4:	d01b      	beq.n	800362e <TIM_Base_SetConfig+0x9a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a32      	ldr	r2, [pc, #200]	@ (80036c4 <TIM_Base_SetConfig+0x130>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d017      	beq.n	800362e <TIM_Base_SetConfig+0x9a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a31      	ldr	r2, [pc, #196]	@ (80036c8 <TIM_Base_SetConfig+0x134>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d013      	beq.n	800362e <TIM_Base_SetConfig+0x9a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a30      	ldr	r2, [pc, #192]	@ (80036cc <TIM_Base_SetConfig+0x138>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00f      	beq.n	800362e <TIM_Base_SetConfig+0x9a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a2f      	ldr	r2, [pc, #188]	@ (80036d0 <TIM_Base_SetConfig+0x13c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00b      	beq.n	800362e <TIM_Base_SetConfig+0x9a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a2e      	ldr	r2, [pc, #184]	@ (80036d4 <TIM_Base_SetConfig+0x140>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d007      	beq.n	800362e <TIM_Base_SetConfig+0x9a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a2d      	ldr	r2, [pc, #180]	@ (80036d8 <TIM_Base_SetConfig+0x144>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d003      	beq.n	800362e <TIM_Base_SetConfig+0x9a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a2c      	ldr	r2, [pc, #176]	@ (80036dc <TIM_Base_SetConfig+0x148>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d108      	bne.n	8003640 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a16      	ldr	r2, [pc, #88]	@ (80036c0 <TIM_Base_SetConfig+0x12c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00f      	beq.n	800368c <TIM_Base_SetConfig+0xf8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a18      	ldr	r2, [pc, #96]	@ (80036d0 <TIM_Base_SetConfig+0x13c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00b      	beq.n	800368c <TIM_Base_SetConfig+0xf8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a17      	ldr	r2, [pc, #92]	@ (80036d4 <TIM_Base_SetConfig+0x140>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d007      	beq.n	800368c <TIM_Base_SetConfig+0xf8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a16      	ldr	r2, [pc, #88]	@ (80036d8 <TIM_Base_SetConfig+0x144>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d003      	beq.n	800368c <TIM_Base_SetConfig+0xf8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a15      	ldr	r2, [pc, #84]	@ (80036dc <TIM_Base_SetConfig+0x148>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d103      	bne.n	8003694 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d105      	bne.n	80036b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f023 0201 	bic.w	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	611a      	str	r2, [r3, #16]
  }
}
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40012c00 	.word	0x40012c00
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40000800 	.word	0x40000800
 80036cc:	40000c00 	.word	0x40000c00
 80036d0:	40013400 	.word	0x40013400
 80036d4:	40014000 	.word	0x40014000
 80036d8:	40014400 	.word	0x40014400
 80036dc:	40014800 	.word	0x40014800

080036e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <__NVIC_SetPriority>:
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	6039      	str	r1, [r7, #0]
 8003726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372c:	2b00      	cmp	r3, #0
 800372e:	db0a      	blt.n	8003746 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	b2da      	uxtb	r2, r3
 8003734:	490c      	ldr	r1, [pc, #48]	@ (8003768 <__NVIC_SetPriority+0x4c>)
 8003736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373a:	0112      	lsls	r2, r2, #4
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	440b      	add	r3, r1
 8003740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003744:	e00a      	b.n	800375c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	b2da      	uxtb	r2, r3
 800374a:	4908      	ldr	r1, [pc, #32]	@ (800376c <__NVIC_SetPriority+0x50>)
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	3b04      	subs	r3, #4
 8003754:	0112      	lsls	r2, r2, #4
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	440b      	add	r3, r1
 800375a:	761a      	strb	r2, [r3, #24]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000e100 	.word	0xe000e100
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003774:	4b05      	ldr	r3, [pc, #20]	@ (800378c <SysTick_Handler+0x1c>)
 8003776:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003778:	f001 fd46 	bl	8005208 <xTaskGetSchedulerState>
 800377c:	4603      	mov	r3, r0
 800377e:	2b01      	cmp	r3, #1
 8003780:	d001      	beq.n	8003786 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003782:	f002 fb41 	bl	8005e08 <xPortSysTickHandler>
  }
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	e000e010 	.word	0xe000e010

08003790 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003794:	2100      	movs	r1, #0
 8003796:	f06f 0004 	mvn.w	r0, #4
 800379a:	f7ff ffbf 	bl	800371c <__NVIC_SetPriority>
#endif
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037aa:	f3ef 8305 	mrs	r3, IPSR
 80037ae:	603b      	str	r3, [r7, #0]
  return(result);
 80037b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80037b6:	f06f 0305 	mvn.w	r3, #5
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	e00c      	b.n	80037d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80037be:	4b0a      	ldr	r3, [pc, #40]	@ (80037e8 <osKernelInitialize+0x44>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d105      	bne.n	80037d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80037c6:	4b08      	ldr	r3, [pc, #32]	@ (80037e8 <osKernelInitialize+0x44>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80037cc:	2300      	movs	r3, #0
 80037ce:	607b      	str	r3, [r7, #4]
 80037d0:	e002      	b.n	80037d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80037d2:	f04f 33ff 	mov.w	r3, #4294967295
 80037d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037d8:	687b      	ldr	r3, [r7, #4]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000198 	.word	0x20000198

080037ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037f2:	f3ef 8305 	mrs	r3, IPSR
 80037f6:	603b      	str	r3, [r7, #0]
  return(result);
 80037f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <osKernelStart+0x1a>
    stat = osErrorISR;
 80037fe:	f06f 0305 	mvn.w	r3, #5
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	e010      	b.n	8003828 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003806:	4b0b      	ldr	r3, [pc, #44]	@ (8003834 <osKernelStart+0x48>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d109      	bne.n	8003822 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800380e:	f7ff ffbf 	bl	8003790 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003812:	4b08      	ldr	r3, [pc, #32]	@ (8003834 <osKernelStart+0x48>)
 8003814:	2202      	movs	r2, #2
 8003816:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003818:	f001 f892 	bl	8004940 <vTaskStartScheduler>
      stat = osOK;
 800381c:	2300      	movs	r3, #0
 800381e:	607b      	str	r3, [r7, #4]
 8003820:	e002      	b.n	8003828 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003822:	f04f 33ff 	mov.w	r3, #4294967295
 8003826:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003828:	687b      	ldr	r3, [r7, #4]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000198 	.word	0x20000198

08003838 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b08e      	sub	sp, #56	@ 0x38
 800383c:	af04      	add	r7, sp, #16
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003844:	2300      	movs	r3, #0
 8003846:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003848:	f3ef 8305 	mrs	r3, IPSR
 800384c:	617b      	str	r3, [r7, #20]
  return(result);
 800384e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003850:	2b00      	cmp	r3, #0
 8003852:	d17e      	bne.n	8003952 <osThreadNew+0x11a>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d07b      	beq.n	8003952 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800385a:	2380      	movs	r3, #128	@ 0x80
 800385c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800385e:	2318      	movs	r3, #24
 8003860:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003862:	2300      	movs	r3, #0
 8003864:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295
 800386a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d045      	beq.n	80038fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <osThreadNew+0x48>
        name = attr->name;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <osThreadNew+0x6e>
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	2b38      	cmp	r3, #56	@ 0x38
 8003898:	d805      	bhi.n	80038a6 <osThreadNew+0x6e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <osThreadNew+0x72>
        return (NULL);
 80038a6:	2300      	movs	r3, #0
 80038a8:	e054      	b.n	8003954 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	089b      	lsrs	r3, r3, #2
 80038b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00e      	beq.n	80038e0 <osThreadNew+0xa8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2ba7      	cmp	r3, #167	@ 0xa7
 80038c8:	d90a      	bls.n	80038e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d006      	beq.n	80038e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <osThreadNew+0xa8>
        mem = 1;
 80038da:	2301      	movs	r3, #1
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	e010      	b.n	8003902 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10c      	bne.n	8003902 <osThreadNew+0xca>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d108      	bne.n	8003902 <osThreadNew+0xca>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <osThreadNew+0xca>
          mem = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	e001      	b.n	8003902 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d110      	bne.n	800392a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003910:	9202      	str	r2, [sp, #8]
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	6a3a      	ldr	r2, [r7, #32]
 800391c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 fe1a 	bl	8004558 <xTaskCreateStatic>
 8003924:	4603      	mov	r3, r0
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	e013      	b.n	8003952 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d110      	bne.n	8003952 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	b29a      	uxth	r2, r3
 8003934:	f107 0310 	add.w	r3, r7, #16
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 fe68 	bl	8004618 <xTaskCreate>
 8003948:	4603      	mov	r3, r0
 800394a:	2b01      	cmp	r3, #1
 800394c:	d001      	beq.n	8003952 <osThreadNew+0x11a>
            hTask = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003952:	693b      	ldr	r3, [r7, #16]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3728      	adds	r7, #40	@ 0x28
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003964:	f3ef 8305 	mrs	r3, IPSR
 8003968:	60bb      	str	r3, [r7, #8]
  return(result);
 800396a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <osDelay+0x1c>
    stat = osErrorISR;
 8003970:	f06f 0305 	mvn.w	r3, #5
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	e007      	b.n	8003988 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 ffa6 	bl	80048d4 <vTaskDelay>
    }
  }

  return (stat);
 8003988:	68fb      	ldr	r3, [r7, #12]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4a07      	ldr	r2, [pc, #28]	@ (80039c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80039a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	4a06      	ldr	r2, [pc, #24]	@ (80039c4 <vApplicationGetIdleTaskMemory+0x30>)
 80039aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2280      	movs	r2, #128	@ 0x80
 80039b0:	601a      	str	r2, [r3, #0]
}
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	2000019c 	.word	0x2000019c
 80039c4:	20000244 	.word	0x20000244

080039c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4a07      	ldr	r2, [pc, #28]	@ (80039f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80039d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	4a06      	ldr	r2, [pc, #24]	@ (80039f8 <vApplicationGetTimerTaskMemory+0x30>)
 80039de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039e6:	601a      	str	r2, [r3, #0]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	20000444 	.word	0x20000444
 80039f8:	200004ec 	.word	0x200004ec

080039fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f103 0208 	add.w	r2, r3, #8
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f04f 32ff 	mov.w	r2, #4294967295
 8003a14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f103 0208 	add.w	r2, r3, #8
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f103 0208 	add.w	r2, r3, #8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	601a      	str	r2, [r3, #0]
}
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab4:	d103      	bne.n	8003abe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	e00c      	b.n	8003ad8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	e002      	b.n	8003acc <vListInsert+0x2e>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d2f6      	bcs.n	8003ac6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	1c5a      	adds	r2, r3, #1
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	601a      	str	r2, [r3, #0]
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6892      	ldr	r2, [r2, #8]
 8003b26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6852      	ldr	r2, [r2, #4]
 8003b30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d103      	bne.n	8003b44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	1e5a      	subs	r2, r3, #1
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10b      	bne.n	8003b90 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b8a:	bf00      	nop
 8003b8c:	bf00      	nop
 8003b8e:	e7fd      	b.n	8003b8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b90:	f002 f8aa 	bl	8005ce8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9c:	68f9      	ldr	r1, [r7, #12]
 8003b9e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	441a      	add	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	68f9      	ldr	r1, [r7, #12]
 8003bc4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003bc6:	fb01 f303 	mul.w	r3, r1, r3
 8003bca:	441a      	add	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	22ff      	movs	r2, #255	@ 0xff
 8003bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	22ff      	movs	r2, #255	@ 0xff
 8003bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d114      	bne.n	8003c10 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d01a      	beq.n	8003c24 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3310      	adds	r3, #16
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f001 f942 	bl	8004e7c <xTaskRemoveFromEventList>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d012      	beq.n	8003c24 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8003c34 <xQueueGenericReset+0xd0>)
 8003c00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	e009      	b.n	8003c24 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	3310      	adds	r3, #16
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff fef1 	bl	80039fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3324      	adds	r3, #36	@ 0x24
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff feec 	bl	80039fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c24:	f002 f892 	bl	8005d4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c28:	2301      	movs	r3, #1
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	e000ed04 	.word	0xe000ed04

08003c38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08e      	sub	sp, #56	@ 0x38
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10b      	bne.n	8003c64 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c5e:	bf00      	nop
 8003c60:	bf00      	nop
 8003c62:	e7fd      	b.n	8003c60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10b      	bne.n	8003c82 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c6e:	f383 8811 	msr	BASEPRI, r3
 8003c72:	f3bf 8f6f 	isb	sy
 8003c76:	f3bf 8f4f 	dsb	sy
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	e7fd      	b.n	8003c7e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <xQueueGenericCreateStatic+0x56>
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <xQueueGenericCreateStatic+0x5a>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <xQueueGenericCreateStatic+0x5c>
 8003c92:	2300      	movs	r3, #0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10b      	bne.n	8003cb0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	623b      	str	r3, [r7, #32]
}
 8003caa:	bf00      	nop
 8003cac:	bf00      	nop
 8003cae:	e7fd      	b.n	8003cac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <xQueueGenericCreateStatic+0x84>
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <xQueueGenericCreateStatic+0x88>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <xQueueGenericCreateStatic+0x8a>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10b      	bne.n	8003cde <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	61fb      	str	r3, [r7, #28]
}
 8003cd8:	bf00      	nop
 8003cda:	bf00      	nop
 8003cdc:	e7fd      	b.n	8003cda <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003cde:	2350      	movs	r3, #80	@ 0x50
 8003ce0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b50      	cmp	r3, #80	@ 0x50
 8003ce6:	d00b      	beq.n	8003d00 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	61bb      	str	r3, [r7, #24]
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	e7fd      	b.n	8003cfc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00d      	beq.n	8003d28 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d14:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	68f8      	ldr	r0, [r7, #12]
 8003d24:	f000 f805 	bl	8003d32 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3730      	adds	r7, #48	@ 0x30
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
 8003d3e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d103      	bne.n	8003d4e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	e002      	b.n	8003d54 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d60:	2101      	movs	r1, #1
 8003d62:	69b8      	ldr	r0, [r7, #24]
 8003d64:	f7ff fefe 	bl	8003b64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	78fa      	ldrb	r2, [r7, #3]
 8003d6c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d70:	bf00      	nop
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08e      	sub	sp, #56	@ 0x38
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d86:	2300      	movs	r3, #0
 8003d88:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <xQueueGenericSend+0x34>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	e7fd      	b.n	8003da8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <xQueueGenericSend+0x42>
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <xQueueGenericSend+0x46>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <xQueueGenericSend+0x48>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10b      	bne.n	8003ddc <xQueueGenericSend+0x64>
	__asm volatile
 8003dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003dd6:	bf00      	nop
 8003dd8:	bf00      	nop
 8003dda:	e7fd      	b.n	8003dd8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d103      	bne.n	8003dea <xQueueGenericSend+0x72>
 8003de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <xQueueGenericSend+0x76>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <xQueueGenericSend+0x78>
 8003dee:	2300      	movs	r3, #0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10b      	bne.n	8003e0c <xQueueGenericSend+0x94>
	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	623b      	str	r3, [r7, #32]
}
 8003e06:	bf00      	nop
 8003e08:	bf00      	nop
 8003e0a:	e7fd      	b.n	8003e08 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e0c:	f001 f9fc 	bl	8005208 <xTaskGetSchedulerState>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d102      	bne.n	8003e1c <xQueueGenericSend+0xa4>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <xQueueGenericSend+0xa8>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <xQueueGenericSend+0xaa>
 8003e20:	2300      	movs	r3, #0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10b      	bne.n	8003e3e <xQueueGenericSend+0xc6>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	61fb      	str	r3, [r7, #28]
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	e7fd      	b.n	8003e3a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e3e:	f001 ff53 	bl	8005ce8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d302      	bcc.n	8003e54 <xQueueGenericSend+0xdc>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d129      	bne.n	8003ea8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	68b9      	ldr	r1, [r7, #8]
 8003e58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e5a:	f000 fa0f 	bl	800427c <prvCopyDataToQueue>
 8003e5e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d010      	beq.n	8003e8a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6a:	3324      	adds	r3, #36	@ 0x24
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f001 f805 	bl	8004e7c <xTaskRemoveFromEventList>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d013      	beq.n	8003ea0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e78:	4b3f      	ldr	r3, [pc, #252]	@ (8003f78 <xQueueGenericSend+0x200>)
 8003e7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	e00a      	b.n	8003ea0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d007      	beq.n	8003ea0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e90:	4b39      	ldr	r3, [pc, #228]	@ (8003f78 <xQueueGenericSend+0x200>)
 8003e92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ea0:	f001 ff54 	bl	8005d4c <vPortExitCritical>
				return pdPASS;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e063      	b.n	8003f70 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003eae:	f001 ff4d 	bl	8005d4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e05c      	b.n	8003f70 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d106      	bne.n	8003eca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ebc:	f107 0314 	add.w	r3, r7, #20
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f001 f83f 	bl	8004f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003eca:	f001 ff3f 	bl	8005d4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ece:	f000 fda7 	bl	8004a20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ed2:	f001 ff09 	bl	8005ce8 <vPortEnterCritical>
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003edc:	b25b      	sxtb	r3, r3
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee2:	d103      	bne.n	8003eec <xQueueGenericSend+0x174>
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ef2:	b25b      	sxtb	r3, r3
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d103      	bne.n	8003f02 <xQueueGenericSend+0x18a>
 8003efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f02:	f001 ff23 	bl	8005d4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f06:	1d3a      	adds	r2, r7, #4
 8003f08:	f107 0314 	add.w	r3, r7, #20
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 f82e 	bl	8004f70 <xTaskCheckForTimeOut>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d124      	bne.n	8003f64 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f1c:	f000 faa6 	bl	800446c <prvIsQueueFull>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d018      	beq.n	8003f58 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f28:	3310      	adds	r3, #16
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 ff52 	bl	8004dd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f36:	f000 fa31 	bl	800439c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f3a:	f000 fd7f 	bl	8004a3c <xTaskResumeAll>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f47f af7c 	bne.w	8003e3e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003f46:	4b0c      	ldr	r3, [pc, #48]	@ (8003f78 <xQueueGenericSend+0x200>)
 8003f48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	e772      	b.n	8003e3e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f5a:	f000 fa1f 	bl	800439c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f5e:	f000 fd6d 	bl	8004a3c <xTaskResumeAll>
 8003f62:	e76c      	b.n	8003e3e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f66:	f000 fa19 	bl	800439c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f6a:	f000 fd67 	bl	8004a3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3738      	adds	r7, #56	@ 0x38
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	e000ed04 	.word	0xe000ed04

08003f7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b090      	sub	sp, #64	@ 0x40
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10b      	bne.n	8003fac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003fa6:	bf00      	nop
 8003fa8:	bf00      	nop
 8003faa:	e7fd      	b.n	8003fa8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d103      	bne.n	8003fba <xQueueGenericSendFromISR+0x3e>
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <xQueueGenericSendFromISR+0x42>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <xQueueGenericSendFromISR+0x44>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10b      	bne.n	8003fdc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003fd6:	bf00      	nop
 8003fd8:	bf00      	nop
 8003fda:	e7fd      	b.n	8003fd8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d103      	bne.n	8003fea <xQueueGenericSendFromISR+0x6e>
 8003fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d101      	bne.n	8003fee <xQueueGenericSendFromISR+0x72>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <xQueueGenericSendFromISR+0x74>
 8003fee:	2300      	movs	r3, #0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10b      	bne.n	800400c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	623b      	str	r3, [r7, #32]
}
 8004006:	bf00      	nop
 8004008:	bf00      	nop
 800400a:	e7fd      	b.n	8004008 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800400c:	f001 ff4c 	bl	8005ea8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004010:	f3ef 8211 	mrs	r2, BASEPRI
 8004014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	61fa      	str	r2, [r7, #28]
 8004026:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004028:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800402a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800402c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004034:	429a      	cmp	r2, r3
 8004036:	d302      	bcc.n	800403e <xQueueGenericSendFromISR+0xc2>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d12f      	bne.n	800409e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800403e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004040:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004044:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800404a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004054:	f000 f912 	bl	800427c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004058:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d112      	bne.n	8004088 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	2b00      	cmp	r3, #0
 8004068:	d016      	beq.n	8004098 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800406a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800406c:	3324      	adds	r3, #36	@ 0x24
 800406e:	4618      	mov	r0, r3
 8004070:	f000 ff04 	bl	8004e7c <xTaskRemoveFromEventList>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00e      	beq.n	8004098 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00b      	beq.n	8004098 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	e007      	b.n	8004098 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004088:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800408c:	3301      	adds	r3, #1
 800408e:	b2db      	uxtb	r3, r3
 8004090:	b25a      	sxtb	r2, r3
 8004092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004094:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004098:	2301      	movs	r3, #1
 800409a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800409c:	e001      	b.n	80040a2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3740      	adds	r7, #64	@ 0x40
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08c      	sub	sp, #48	@ 0x30
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80040c4:	2300      	movs	r3, #0
 80040c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10b      	bne.n	80040ea <xQueueReceive+0x32>
	__asm volatile
 80040d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	623b      	str	r3, [r7, #32]
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	e7fd      	b.n	80040e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d103      	bne.n	80040f8 <xQueueReceive+0x40>
 80040f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <xQueueReceive+0x44>
 80040f8:	2301      	movs	r3, #1
 80040fa:	e000      	b.n	80040fe <xQueueReceive+0x46>
 80040fc:	2300      	movs	r3, #0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10b      	bne.n	800411a <xQueueReceive+0x62>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	61fb      	str	r3, [r7, #28]
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop
 8004118:	e7fd      	b.n	8004116 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800411a:	f001 f875 	bl	8005208 <xTaskGetSchedulerState>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d102      	bne.n	800412a <xQueueReceive+0x72>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <xQueueReceive+0x76>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <xQueueReceive+0x78>
 800412e:	2300      	movs	r3, #0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10b      	bne.n	800414c <xQueueReceive+0x94>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	61bb      	str	r3, [r7, #24]
}
 8004146:	bf00      	nop
 8004148:	bf00      	nop
 800414a:	e7fd      	b.n	8004148 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800414c:	f001 fdcc 	bl	8005ce8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004154:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004158:	2b00      	cmp	r3, #0
 800415a:	d01f      	beq.n	800419c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004160:	f000 f8f6 	bl	8004350 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004166:	1e5a      	subs	r2, r3, #1
 8004168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800416c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00f      	beq.n	8004194 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004176:	3310      	adds	r3, #16
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fe7f 	bl	8004e7c <xTaskRemoveFromEventList>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d007      	beq.n	8004194 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004184:	4b3c      	ldr	r3, [pc, #240]	@ (8004278 <xQueueReceive+0x1c0>)
 8004186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004194:	f001 fdda 	bl	8005d4c <vPortExitCritical>
				return pdPASS;
 8004198:	2301      	movs	r3, #1
 800419a:	e069      	b.n	8004270 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d103      	bne.n	80041aa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041a2:	f001 fdd3 	bl	8005d4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041a6:	2300      	movs	r3, #0
 80041a8:	e062      	b.n	8004270 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d106      	bne.n	80041be <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041b0:	f107 0310 	add.w	r3, r7, #16
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fec5 	bl	8004f44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041ba:	2301      	movs	r3, #1
 80041bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041be:	f001 fdc5 	bl	8005d4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041c2:	f000 fc2d 	bl	8004a20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041c6:	f001 fd8f 	bl	8005ce8 <vPortEnterCritical>
 80041ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041d0:	b25b      	sxtb	r3, r3
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d6:	d103      	bne.n	80041e0 <xQueueReceive+0x128>
 80041d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041e6:	b25b      	sxtb	r3, r3
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d103      	bne.n	80041f6 <xQueueReceive+0x13e>
 80041ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041f6:	f001 fda9 	bl	8005d4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041fa:	1d3a      	adds	r2, r7, #4
 80041fc:	f107 0310 	add.w	r3, r7, #16
 8004200:	4611      	mov	r1, r2
 8004202:	4618      	mov	r0, r3
 8004204:	f000 feb4 	bl	8004f70 <xTaskCheckForTimeOut>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d123      	bne.n	8004256 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800420e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004210:	f000 f916 	bl	8004440 <prvIsQueueEmpty>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d017      	beq.n	800424a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800421a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421c:	3324      	adds	r3, #36	@ 0x24
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	4611      	mov	r1, r2
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fdd8 	bl	8004dd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004228:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800422a:	f000 f8b7 	bl	800439c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800422e:	f000 fc05 	bl	8004a3c <xTaskResumeAll>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d189      	bne.n	800414c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004238:	4b0f      	ldr	r3, [pc, #60]	@ (8004278 <xQueueReceive+0x1c0>)
 800423a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	e780      	b.n	800414c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800424a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800424c:	f000 f8a6 	bl	800439c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004250:	f000 fbf4 	bl	8004a3c <xTaskResumeAll>
 8004254:	e77a      	b.n	800414c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004258:	f000 f8a0 	bl	800439c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800425c:	f000 fbee 	bl	8004a3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004262:	f000 f8ed 	bl	8004440 <prvIsQueueEmpty>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	f43f af6f 	beq.w	800414c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800426e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004270:	4618      	mov	r0, r3
 8004272:	3730      	adds	r7, #48	@ 0x30
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	e000ed04 	.word	0xe000ed04

0800427c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004290:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10d      	bne.n	80042b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d14d      	bne.n	800433e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 ffcc 	bl	8005244 <xTaskPriorityDisinherit>
 80042ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	609a      	str	r2, [r3, #8]
 80042b4:	e043      	b.n	800433e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d119      	bne.n	80042f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6858      	ldr	r0, [r3, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	461a      	mov	r2, r3
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	f002 f8a2 	bl	8006410 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d4:	441a      	add	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d32b      	bcc.n	800433e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	605a      	str	r2, [r3, #4]
 80042ee:	e026      	b.n	800433e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	68d8      	ldr	r0, [r3, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f8:	461a      	mov	r2, r3
 80042fa:	68b9      	ldr	r1, [r7, #8]
 80042fc:	f002 f888 	bl	8006410 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004308:	425b      	negs	r3, r3
 800430a:	441a      	add	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d207      	bcs.n	800432c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004324:	425b      	negs	r3, r3
 8004326:	441a      	add	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d105      	bne.n	800433e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	3b01      	subs	r3, #1
 800433c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004346:	697b      	ldr	r3, [r7, #20]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d018      	beq.n	8004394 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436a:	441a      	add	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	429a      	cmp	r2, r3
 800437a:	d303      	bcc.n	8004384 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68d9      	ldr	r1, [r3, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438c:	461a      	mov	r2, r3
 800438e:	6838      	ldr	r0, [r7, #0]
 8004390:	f002 f83e 	bl	8006410 <memcpy>
	}
}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80043a4:	f001 fca0 	bl	8005ce8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043b0:	e011      	b.n	80043d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d012      	beq.n	80043e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3324      	adds	r3, #36	@ 0x24
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fd5c 	bl	8004e7c <xTaskRemoveFromEventList>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80043ca:	f000 fe35 	bl	8005038 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	dce9      	bgt.n	80043b2 <prvUnlockQueue+0x16>
 80043de:	e000      	b.n	80043e2 <prvUnlockQueue+0x46>
					break;
 80043e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	22ff      	movs	r2, #255	@ 0xff
 80043e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80043ea:	f001 fcaf 	bl	8005d4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80043ee:	f001 fc7b 	bl	8005ce8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043fa:	e011      	b.n	8004420 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d012      	beq.n	800442a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3310      	adds	r3, #16
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fd37 	bl	8004e7c <xTaskRemoveFromEventList>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004414:	f000 fe10 	bl	8005038 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004418:	7bbb      	ldrb	r3, [r7, #14]
 800441a:	3b01      	subs	r3, #1
 800441c:	b2db      	uxtb	r3, r3
 800441e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004424:	2b00      	cmp	r3, #0
 8004426:	dce9      	bgt.n	80043fc <prvUnlockQueue+0x60>
 8004428:	e000      	b.n	800442c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800442a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	22ff      	movs	r2, #255	@ 0xff
 8004430:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004434:	f001 fc8a 	bl	8005d4c <vPortExitCritical>
}
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004448:	f001 fc4e 	bl	8005ce8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004450:	2b00      	cmp	r3, #0
 8004452:	d102      	bne.n	800445a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004454:	2301      	movs	r3, #1
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	e001      	b.n	800445e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800445e:	f001 fc75 	bl	8005d4c <vPortExitCritical>

	return xReturn;
 8004462:	68fb      	ldr	r3, [r7, #12]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004474:	f001 fc38 	bl	8005ce8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004480:	429a      	cmp	r2, r3
 8004482:	d102      	bne.n	800448a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004484:	2301      	movs	r3, #1
 8004486:	60fb      	str	r3, [r7, #12]
 8004488:	e001      	b.n	800448e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800448a:	2300      	movs	r3, #0
 800448c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800448e:	f001 fc5d 	bl	8005d4c <vPortExitCritical>

	return xReturn;
 8004492:	68fb      	ldr	r3, [r7, #12]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	e014      	b.n	80044d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80044ac:	4a0f      	ldr	r2, [pc, #60]	@ (80044ec <vQueueAddToRegistry+0x50>)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10b      	bne.n	80044d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80044b8:	490c      	ldr	r1, [pc, #48]	@ (80044ec <vQueueAddToRegistry+0x50>)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80044c2:	4a0a      	ldr	r2, [pc, #40]	@ (80044ec <vQueueAddToRegistry+0x50>)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4413      	add	r3, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80044ce:	e006      	b.n	80044de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3301      	adds	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b07      	cmp	r3, #7
 80044da:	d9e7      	bls.n	80044ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80044dc:	bf00      	nop
 80044de:	bf00      	nop
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	200008ec 	.word	0x200008ec

080044f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004500:	f001 fbf2 	bl	8005ce8 <vPortEnterCritical>
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800450a:	b25b      	sxtb	r3, r3
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004510:	d103      	bne.n	800451a <vQueueWaitForMessageRestricted+0x2a>
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004520:	b25b      	sxtb	r3, r3
 8004522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004526:	d103      	bne.n	8004530 <vQueueWaitForMessageRestricted+0x40>
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004530:	f001 fc0c 	bl	8005d4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004538:	2b00      	cmp	r3, #0
 800453a:	d106      	bne.n	800454a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	3324      	adds	r3, #36	@ 0x24
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	4618      	mov	r0, r3
 8004546:	f000 fc6d 	bl	8004e24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800454a:	6978      	ldr	r0, [r7, #20]
 800454c:	f7ff ff26 	bl	800439c <prvUnlockQueue>
	}
 8004550:	bf00      	nop
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004558:	b580      	push	{r7, lr}
 800455a:	b08e      	sub	sp, #56	@ 0x38
 800455c:	af04      	add	r7, sp, #16
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10b      	bne.n	8004584 <xTaskCreateStatic+0x2c>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	623b      	str	r3, [r7, #32]
}
 800457e:	bf00      	nop
 8004580:	bf00      	nop
 8004582:	e7fd      	b.n	8004580 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10b      	bne.n	80045a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800458a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	61fb      	str	r3, [r7, #28]
}
 800459c:	bf00      	nop
 800459e:	bf00      	nop
 80045a0:	e7fd      	b.n	800459e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045a2:	23a8      	movs	r3, #168	@ 0xa8
 80045a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2ba8      	cmp	r3, #168	@ 0xa8
 80045aa:	d00b      	beq.n	80045c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	61bb      	str	r3, [r7, #24]
}
 80045be:	bf00      	nop
 80045c0:	bf00      	nop
 80045c2:	e7fd      	b.n	80045c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80045c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01e      	beq.n	800460a <xTaskCreateStatic+0xb2>
 80045cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d01b      	beq.n	800460a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045e4:	2300      	movs	r3, #0
 80045e6:	9303      	str	r3, [sp, #12]
 80045e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ea:	9302      	str	r3, [sp, #8]
 80045ec:	f107 0314 	add.w	r3, r7, #20
 80045f0:	9301      	str	r3, [sp, #4]
 80045f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f851 	bl	80046a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004602:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004604:	f000 f8f6 	bl	80047f4 <prvAddNewTaskToReadyList>
 8004608:	e001      	b.n	800460e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800460e:	697b      	ldr	r3, [r7, #20]
	}
 8004610:	4618      	mov	r0, r3
 8004612:	3728      	adds	r7, #40	@ 0x28
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08c      	sub	sp, #48	@ 0x30
 800461c:	af04      	add	r7, sp, #16
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	603b      	str	r3, [r7, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4618      	mov	r0, r3
 800462e:	f001 fc7d 	bl	8005f2c <pvPortMalloc>
 8004632:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00e      	beq.n	8004658 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800463a:	20a8      	movs	r0, #168	@ 0xa8
 800463c:	f001 fc76 	bl	8005f2c <pvPortMalloc>
 8004640:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	631a      	str	r2, [r3, #48]	@ 0x30
 800464e:	e005      	b.n	800465c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004650:	6978      	ldr	r0, [r7, #20]
 8004652:	f001 fd39 	bl	80060c8 <vPortFree>
 8004656:	e001      	b.n	800465c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004658:	2300      	movs	r3, #0
 800465a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d017      	beq.n	8004692 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800466a:	88fa      	ldrh	r2, [r7, #6]
 800466c:	2300      	movs	r3, #0
 800466e:	9303      	str	r3, [sp, #12]
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	9302      	str	r3, [sp, #8]
 8004674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004676:	9301      	str	r3, [sp, #4]
 8004678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f80f 	bl	80046a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004686:	69f8      	ldr	r0, [r7, #28]
 8004688:	f000 f8b4 	bl	80047f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800468c:	2301      	movs	r3, #1
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	e002      	b.n	8004698 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004692:	f04f 33ff 	mov.w	r3, #4294967295
 8004696:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004698:	69bb      	ldr	r3, [r7, #24]
	}
 800469a:	4618      	mov	r0, r3
 800469c:	3720      	adds	r7, #32
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80046b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	461a      	mov	r2, r3
 80046bc:	21a5      	movs	r1, #165	@ 0xa5
 80046be:	f001 fe23 	bl	8006308 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80046c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046cc:	3b01      	subs	r3, #1
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	f023 0307 	bic.w	r3, r3, #7
 80046da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00b      	beq.n	80046fe <prvInitialiseNewTask+0x5a>
	__asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	617b      	str	r3, [r7, #20]
}
 80046f8:	bf00      	nop
 80046fa:	bf00      	nop
 80046fc:	e7fd      	b.n	80046fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01f      	beq.n	8004744 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004704:	2300      	movs	r3, #0
 8004706:	61fb      	str	r3, [r7, #28]
 8004708:	e012      	b.n	8004730 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	4413      	add	r3, r2
 8004710:	7819      	ldrb	r1, [r3, #0]
 8004712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	4413      	add	r3, r2
 8004718:	3334      	adds	r3, #52	@ 0x34
 800471a:	460a      	mov	r2, r1
 800471c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	4413      	add	r3, r2
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d006      	beq.n	8004738 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3301      	adds	r3, #1
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	2b0f      	cmp	r3, #15
 8004734:	d9e9      	bls.n	800470a <prvInitialiseNewTask+0x66>
 8004736:	e000      	b.n	800473a <prvInitialiseNewTask+0x96>
			{
				break;
 8004738:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800473a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004742:	e003      	b.n	800474c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800474c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474e:	2b37      	cmp	r3, #55	@ 0x37
 8004750:	d901      	bls.n	8004756 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004752:	2337      	movs	r3, #55	@ 0x37
 8004754:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800475a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800475c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004760:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004764:	2200      	movs	r2, #0
 8004766:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	3304      	adds	r3, #4
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff f965 	bl	8003a3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004774:	3318      	adds	r3, #24
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff f960 	bl	8003a3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800477c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004780:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004784:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800478c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004790:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004794:	2200      	movs	r2, #0
 8004796:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800479a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479c:	2200      	movs	r2, #0
 800479e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a4:	3354      	adds	r3, #84	@ 0x54
 80047a6:	224c      	movs	r2, #76	@ 0x4c
 80047a8:	2100      	movs	r1, #0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f001 fdac 	bl	8006308 <memset>
 80047b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b2:	4a0d      	ldr	r2, [pc, #52]	@ (80047e8 <prvInitialiseNewTask+0x144>)
 80047b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80047b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b8:	4a0c      	ldr	r2, [pc, #48]	@ (80047ec <prvInitialiseNewTask+0x148>)
 80047ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047be:	4a0c      	ldr	r2, [pc, #48]	@ (80047f0 <prvInitialiseNewTask+0x14c>)
 80047c0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	68f9      	ldr	r1, [r7, #12]
 80047c6:	69b8      	ldr	r0, [r7, #24]
 80047c8:	f001 f95a 	bl	8005a80 <pxPortInitialiseStack>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047de:	bf00      	nop
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20001b38 	.word	0x20001b38
 80047ec:	20001ba0 	.word	0x20001ba0
 80047f0:	20001c08 	.word	0x20001c08

080047f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047fc:	f001 fa74 	bl	8005ce8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004800:	4b2d      	ldr	r3, [pc, #180]	@ (80048b8 <prvAddNewTaskToReadyList+0xc4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3301      	adds	r3, #1
 8004806:	4a2c      	ldr	r2, [pc, #176]	@ (80048b8 <prvAddNewTaskToReadyList+0xc4>)
 8004808:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800480a:	4b2c      	ldr	r3, [pc, #176]	@ (80048bc <prvAddNewTaskToReadyList+0xc8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d109      	bne.n	8004826 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004812:	4a2a      	ldr	r2, [pc, #168]	@ (80048bc <prvAddNewTaskToReadyList+0xc8>)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004818:	4b27      	ldr	r3, [pc, #156]	@ (80048b8 <prvAddNewTaskToReadyList+0xc4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d110      	bne.n	8004842 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004820:	f000 fc2e 	bl	8005080 <prvInitialiseTaskLists>
 8004824:	e00d      	b.n	8004842 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004826:	4b26      	ldr	r3, [pc, #152]	@ (80048c0 <prvAddNewTaskToReadyList+0xcc>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d109      	bne.n	8004842 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800482e:	4b23      	ldr	r3, [pc, #140]	@ (80048bc <prvAddNewTaskToReadyList+0xc8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004838:	429a      	cmp	r2, r3
 800483a:	d802      	bhi.n	8004842 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800483c:	4a1f      	ldr	r2, [pc, #124]	@ (80048bc <prvAddNewTaskToReadyList+0xc8>)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004842:	4b20      	ldr	r3, [pc, #128]	@ (80048c4 <prvAddNewTaskToReadyList+0xd0>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3301      	adds	r3, #1
 8004848:	4a1e      	ldr	r2, [pc, #120]	@ (80048c4 <prvAddNewTaskToReadyList+0xd0>)
 800484a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800484c:	4b1d      	ldr	r3, [pc, #116]	@ (80048c4 <prvAddNewTaskToReadyList+0xd0>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004858:	4b1b      	ldr	r3, [pc, #108]	@ (80048c8 <prvAddNewTaskToReadyList+0xd4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d903      	bls.n	8004868 <prvAddNewTaskToReadyList+0x74>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004864:	4a18      	ldr	r2, [pc, #96]	@ (80048c8 <prvAddNewTaskToReadyList+0xd4>)
 8004866:	6013      	str	r3, [r2, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4a15      	ldr	r2, [pc, #84]	@ (80048cc <prvAddNewTaskToReadyList+0xd8>)
 8004876:	441a      	add	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	4619      	mov	r1, r3
 800487e:	4610      	mov	r0, r2
 8004880:	f7ff f8e9 	bl	8003a56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004884:	f001 fa62 	bl	8005d4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004888:	4b0d      	ldr	r3, [pc, #52]	@ (80048c0 <prvAddNewTaskToReadyList+0xcc>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00e      	beq.n	80048ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004890:	4b0a      	ldr	r3, [pc, #40]	@ (80048bc <prvAddNewTaskToReadyList+0xc8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489a:	429a      	cmp	r2, r3
 800489c:	d207      	bcs.n	80048ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800489e:	4b0c      	ldr	r3, [pc, #48]	@ (80048d0 <prvAddNewTaskToReadyList+0xdc>)
 80048a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048ae:	bf00      	nop
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	20000e00 	.word	0x20000e00
 80048bc:	2000092c 	.word	0x2000092c
 80048c0:	20000e0c 	.word	0x20000e0c
 80048c4:	20000e1c 	.word	0x20000e1c
 80048c8:	20000e08 	.word	0x20000e08
 80048cc:	20000930 	.word	0x20000930
 80048d0:	e000ed04 	.word	0xe000ed04

080048d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d018      	beq.n	8004918 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048e6:	4b14      	ldr	r3, [pc, #80]	@ (8004938 <vTaskDelay+0x64>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00b      	beq.n	8004906 <vTaskDelay+0x32>
	__asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	60bb      	str	r3, [r7, #8]
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop
 8004904:	e7fd      	b.n	8004902 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004906:	f000 f88b 	bl	8004a20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800490a:	2100      	movs	r1, #0
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 fd09 	bl	8005324 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004912:	f000 f893 	bl	8004a3c <xTaskResumeAll>
 8004916:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d107      	bne.n	800492e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800491e:	4b07      	ldr	r3, [pc, #28]	@ (800493c <vTaskDelay+0x68>)
 8004920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800492e:	bf00      	nop
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000e28 	.word	0x20000e28
 800493c:	e000ed04 	.word	0xe000ed04

08004940 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	@ 0x28
 8004944:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800494a:	2300      	movs	r3, #0
 800494c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800494e:	463a      	mov	r2, r7
 8004950:	1d39      	adds	r1, r7, #4
 8004952:	f107 0308 	add.w	r3, r7, #8
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff f81c 	bl	8003994 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	9202      	str	r2, [sp, #8]
 8004964:	9301      	str	r3, [sp, #4]
 8004966:	2300      	movs	r3, #0
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	2300      	movs	r3, #0
 800496c:	460a      	mov	r2, r1
 800496e:	4924      	ldr	r1, [pc, #144]	@ (8004a00 <vTaskStartScheduler+0xc0>)
 8004970:	4824      	ldr	r0, [pc, #144]	@ (8004a04 <vTaskStartScheduler+0xc4>)
 8004972:	f7ff fdf1 	bl	8004558 <xTaskCreateStatic>
 8004976:	4603      	mov	r3, r0
 8004978:	4a23      	ldr	r2, [pc, #140]	@ (8004a08 <vTaskStartScheduler+0xc8>)
 800497a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800497c:	4b22      	ldr	r3, [pc, #136]	@ (8004a08 <vTaskStartScheduler+0xc8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d002      	beq.n	800498a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004984:	2301      	movs	r3, #1
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	e001      	b.n	800498e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800498a:	2300      	movs	r3, #0
 800498c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d102      	bne.n	800499a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004994:	f000 fd1a 	bl	80053cc <xTimerCreateTimerTask>
 8004998:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d11b      	bne.n	80049d8 <vTaskStartScheduler+0x98>
	__asm volatile
 80049a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a4:	f383 8811 	msr	BASEPRI, r3
 80049a8:	f3bf 8f6f 	isb	sy
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	613b      	str	r3, [r7, #16]
}
 80049b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80049b4:	4b15      	ldr	r3, [pc, #84]	@ (8004a0c <vTaskStartScheduler+0xcc>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3354      	adds	r3, #84	@ 0x54
 80049ba:	4a15      	ldr	r2, [pc, #84]	@ (8004a10 <vTaskStartScheduler+0xd0>)
 80049bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049be:	4b15      	ldr	r3, [pc, #84]	@ (8004a14 <vTaskStartScheduler+0xd4>)
 80049c0:	f04f 32ff 	mov.w	r2, #4294967295
 80049c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049c6:	4b14      	ldr	r3, [pc, #80]	@ (8004a18 <vTaskStartScheduler+0xd8>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049cc:	4b13      	ldr	r3, [pc, #76]	@ (8004a1c <vTaskStartScheduler+0xdc>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049d2:	f001 f8e5 	bl	8005ba0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049d6:	e00f      	b.n	80049f8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049de:	d10b      	bne.n	80049f8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	60fb      	str	r3, [r7, #12]
}
 80049f2:	bf00      	nop
 80049f4:	bf00      	nop
 80049f6:	e7fd      	b.n	80049f4 <vTaskStartScheduler+0xb4>
}
 80049f8:	bf00      	nop
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	08006528 	.word	0x08006528
 8004a04:	08005051 	.word	0x08005051
 8004a08:	20000e24 	.word	0x20000e24
 8004a0c:	2000092c 	.word	0x2000092c
 8004a10:	20000010 	.word	0x20000010
 8004a14:	20000e20 	.word	0x20000e20
 8004a18:	20000e0c 	.word	0x20000e0c
 8004a1c:	20000e04 	.word	0x20000e04

08004a20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a24:	4b04      	ldr	r3, [pc, #16]	@ (8004a38 <vTaskSuspendAll+0x18>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	4a03      	ldr	r2, [pc, #12]	@ (8004a38 <vTaskSuspendAll+0x18>)
 8004a2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a2e:	bf00      	nop
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	20000e28 	.word	0x20000e28

08004a3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a46:	2300      	movs	r3, #0
 8004a48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a4a:	4b42      	ldr	r3, [pc, #264]	@ (8004b54 <xTaskResumeAll+0x118>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10b      	bne.n	8004a6a <xTaskResumeAll+0x2e>
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	603b      	str	r3, [r7, #0]
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop
 8004a68:	e7fd      	b.n	8004a66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a6a:	f001 f93d 	bl	8005ce8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a6e:	4b39      	ldr	r3, [pc, #228]	@ (8004b54 <xTaskResumeAll+0x118>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	4a37      	ldr	r2, [pc, #220]	@ (8004b54 <xTaskResumeAll+0x118>)
 8004a76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a78:	4b36      	ldr	r3, [pc, #216]	@ (8004b54 <xTaskResumeAll+0x118>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d162      	bne.n	8004b46 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a80:	4b35      	ldr	r3, [pc, #212]	@ (8004b58 <xTaskResumeAll+0x11c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d05e      	beq.n	8004b46 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a88:	e02f      	b.n	8004aea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a8a:	4b34      	ldr	r3, [pc, #208]	@ (8004b5c <xTaskResumeAll+0x120>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3318      	adds	r3, #24
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff f83a 	bl	8003b10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff f835 	bl	8003b10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8004b60 <xTaskResumeAll+0x124>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d903      	bls.n	8004aba <xTaskResumeAll+0x7e>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8004b60 <xTaskResumeAll+0x124>)
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4a27      	ldr	r2, [pc, #156]	@ (8004b64 <xTaskResumeAll+0x128>)
 8004ac8:	441a      	add	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3304      	adds	r3, #4
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f7fe ffc0 	bl	8003a56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ada:	4b23      	ldr	r3, [pc, #140]	@ (8004b68 <xTaskResumeAll+0x12c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d302      	bcc.n	8004aea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004ae4:	4b21      	ldr	r3, [pc, #132]	@ (8004b6c <xTaskResumeAll+0x130>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004aea:	4b1c      	ldr	r3, [pc, #112]	@ (8004b5c <xTaskResumeAll+0x120>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1cb      	bne.n	8004a8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004af8:	f000 fb66 	bl	80051c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004afc:	4b1c      	ldr	r3, [pc, #112]	@ (8004b70 <xTaskResumeAll+0x134>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d010      	beq.n	8004b2a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b08:	f000 f846 	bl	8004b98 <xTaskIncrementTick>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d002      	beq.n	8004b18 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004b12:	4b16      	ldr	r3, [pc, #88]	@ (8004b6c <xTaskResumeAll+0x130>)
 8004b14:	2201      	movs	r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1f1      	bne.n	8004b08 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004b24:	4b12      	ldr	r3, [pc, #72]	@ (8004b70 <xTaskResumeAll+0x134>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b2a:	4b10      	ldr	r3, [pc, #64]	@ (8004b6c <xTaskResumeAll+0x130>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b32:	2301      	movs	r3, #1
 8004b34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b36:	4b0f      	ldr	r3, [pc, #60]	@ (8004b74 <xTaskResumeAll+0x138>)
 8004b38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b46:	f001 f901 	bl	8005d4c <vPortExitCritical>

	return xAlreadyYielded;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	20000e28 	.word	0x20000e28
 8004b58:	20000e00 	.word	0x20000e00
 8004b5c:	20000dc0 	.word	0x20000dc0
 8004b60:	20000e08 	.word	0x20000e08
 8004b64:	20000930 	.word	0x20000930
 8004b68:	2000092c 	.word	0x2000092c
 8004b6c:	20000e14 	.word	0x20000e14
 8004b70:	20000e10 	.word	0x20000e10
 8004b74:	e000ed04 	.word	0xe000ed04

08004b78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b7e:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <xTaskGetTickCount+0x1c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b84:	687b      	ldr	r3, [r7, #4]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20000e04 	.word	0x20000e04

08004b98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba2:	4b4f      	ldr	r3, [pc, #316]	@ (8004ce0 <xTaskIncrementTick+0x148>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f040 8090 	bne.w	8004ccc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bac:	4b4d      	ldr	r3, [pc, #308]	@ (8004ce4 <xTaskIncrementTick+0x14c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bb4:	4a4b      	ldr	r2, [pc, #300]	@ (8004ce4 <xTaskIncrementTick+0x14c>)
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d121      	bne.n	8004c04 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bc0:	4b49      	ldr	r3, [pc, #292]	@ (8004ce8 <xTaskIncrementTick+0x150>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00b      	beq.n	8004be2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	603b      	str	r3, [r7, #0]
}
 8004bdc:	bf00      	nop
 8004bde:	bf00      	nop
 8004be0:	e7fd      	b.n	8004bde <xTaskIncrementTick+0x46>
 8004be2:	4b41      	ldr	r3, [pc, #260]	@ (8004ce8 <xTaskIncrementTick+0x150>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	4b40      	ldr	r3, [pc, #256]	@ (8004cec <xTaskIncrementTick+0x154>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a3e      	ldr	r2, [pc, #248]	@ (8004ce8 <xTaskIncrementTick+0x150>)
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	4a3e      	ldr	r2, [pc, #248]	@ (8004cec <xTaskIncrementTick+0x154>)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf0 <xTaskIncrementTick+0x158>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	4a3c      	ldr	r2, [pc, #240]	@ (8004cf0 <xTaskIncrementTick+0x158>)
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	f000 fae2 	bl	80051c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c04:	4b3b      	ldr	r3, [pc, #236]	@ (8004cf4 <xTaskIncrementTick+0x15c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d349      	bcc.n	8004ca2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c0e:	4b36      	ldr	r3, [pc, #216]	@ (8004ce8 <xTaskIncrementTick+0x150>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d104      	bne.n	8004c22 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c18:	4b36      	ldr	r3, [pc, #216]	@ (8004cf4 <xTaskIncrementTick+0x15c>)
 8004c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004c1e:	601a      	str	r2, [r3, #0]
					break;
 8004c20:	e03f      	b.n	8004ca2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c22:	4b31      	ldr	r3, [pc, #196]	@ (8004ce8 <xTaskIncrementTick+0x150>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d203      	bcs.n	8004c42 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c3a:	4a2e      	ldr	r2, [pc, #184]	@ (8004cf4 <xTaskIncrementTick+0x15c>)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c40:	e02f      	b.n	8004ca2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	3304      	adds	r3, #4
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fe ff62 	bl	8003b10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d004      	beq.n	8004c5e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	3318      	adds	r3, #24
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fe ff59 	bl	8003b10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c62:	4b25      	ldr	r3, [pc, #148]	@ (8004cf8 <xTaskIncrementTick+0x160>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d903      	bls.n	8004c72 <xTaskIncrementTick+0xda>
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6e:	4a22      	ldr	r2, [pc, #136]	@ (8004cf8 <xTaskIncrementTick+0x160>)
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c76:	4613      	mov	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8004cfc <xTaskIncrementTick+0x164>)
 8004c80:	441a      	add	r2, r3
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	3304      	adds	r3, #4
 8004c86:	4619      	mov	r1, r3
 8004c88:	4610      	mov	r0, r2
 8004c8a:	f7fe fee4 	bl	8003a56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c92:	4b1b      	ldr	r3, [pc, #108]	@ (8004d00 <xTaskIncrementTick+0x168>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d3b8      	bcc.n	8004c0e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ca0:	e7b5      	b.n	8004c0e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ca2:	4b17      	ldr	r3, [pc, #92]	@ (8004d00 <xTaskIncrementTick+0x168>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca8:	4914      	ldr	r1, [pc, #80]	@ (8004cfc <xTaskIncrementTick+0x164>)
 8004caa:	4613      	mov	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d901      	bls.n	8004cbe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004cbe:	4b11      	ldr	r3, [pc, #68]	@ (8004d04 <xTaskIncrementTick+0x16c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	e004      	b.n	8004cd6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8004d08 <xTaskIncrementTick+0x170>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8004d08 <xTaskIncrementTick+0x170>)
 8004cd4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004cd6:	697b      	ldr	r3, [r7, #20]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	20000e28 	.word	0x20000e28
 8004ce4:	20000e04 	.word	0x20000e04
 8004ce8:	20000db8 	.word	0x20000db8
 8004cec:	20000dbc 	.word	0x20000dbc
 8004cf0:	20000e18 	.word	0x20000e18
 8004cf4:	20000e20 	.word	0x20000e20
 8004cf8:	20000e08 	.word	0x20000e08
 8004cfc:	20000930 	.word	0x20000930
 8004d00:	2000092c 	.word	0x2000092c
 8004d04:	20000e14 	.word	0x20000e14
 8004d08:	20000e10 	.word	0x20000e10

08004d0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d12:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc0 <vTaskSwitchContext+0xb4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc4 <vTaskSwitchContext+0xb8>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d20:	e047      	b.n	8004db2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004d22:	4b28      	ldr	r3, [pc, #160]	@ (8004dc4 <vTaskSwitchContext+0xb8>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d28:	4b27      	ldr	r3, [pc, #156]	@ (8004dc8 <vTaskSwitchContext+0xbc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	e011      	b.n	8004d54 <vTaskSwitchContext+0x48>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10b      	bne.n	8004d4e <vTaskSwitchContext+0x42>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	607b      	str	r3, [r7, #4]
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	e7fd      	b.n	8004d4a <vTaskSwitchContext+0x3e>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	491d      	ldr	r1, [pc, #116]	@ (8004dcc <vTaskSwitchContext+0xc0>)
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0e3      	beq.n	8004d30 <vTaskSwitchContext+0x24>
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4a16      	ldr	r2, [pc, #88]	@ (8004dcc <vTaskSwitchContext+0xc0>)
 8004d74:	4413      	add	r3, r2
 8004d76:	60bb      	str	r3, [r7, #8]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	605a      	str	r2, [r3, #4]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d104      	bne.n	8004d98 <vTaskSwitchContext+0x8c>
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	685a      	ldr	r2, [r3, #4]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	605a      	str	r2, [r3, #4]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd0 <vTaskSwitchContext+0xc4>)
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	4a09      	ldr	r2, [pc, #36]	@ (8004dc8 <vTaskSwitchContext+0xbc>)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004da8:	4b09      	ldr	r3, [pc, #36]	@ (8004dd0 <vTaskSwitchContext+0xc4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3354      	adds	r3, #84	@ 0x54
 8004dae:	4a09      	ldr	r2, [pc, #36]	@ (8004dd4 <vTaskSwitchContext+0xc8>)
 8004db0:	6013      	str	r3, [r2, #0]
}
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000e28 	.word	0x20000e28
 8004dc4:	20000e14 	.word	0x20000e14
 8004dc8:	20000e08 	.word	0x20000e08
 8004dcc:	20000930 	.word	0x20000930
 8004dd0:	2000092c 	.word	0x2000092c
 8004dd4:	20000010 	.word	0x20000010

08004dd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	60fb      	str	r3, [r7, #12]
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	e7fd      	b.n	8004dfc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e00:	4b07      	ldr	r3, [pc, #28]	@ (8004e20 <vTaskPlaceOnEventList+0x48>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3318      	adds	r3, #24
 8004e06:	4619      	mov	r1, r3
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7fe fe48 	bl	8003a9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e0e:	2101      	movs	r1, #1
 8004e10:	6838      	ldr	r0, [r7, #0]
 8004e12:	f000 fa87 	bl	8005324 <prvAddCurrentTaskToDelayedList>
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	2000092c 	.word	0x2000092c

08004e24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b086      	sub	sp, #24
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10b      	bne.n	8004e4e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	617b      	str	r3, [r7, #20]
}
 8004e48:	bf00      	nop
 8004e4a:	bf00      	nop
 8004e4c:	e7fd      	b.n	8004e4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e78 <vTaskPlaceOnEventListRestricted+0x54>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3318      	adds	r3, #24
 8004e54:	4619      	mov	r1, r3
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f7fe fdfd 	bl	8003a56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004e62:	f04f 33ff 	mov.w	r3, #4294967295
 8004e66:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	68b8      	ldr	r0, [r7, #8]
 8004e6c:	f000 fa5a 	bl	8005324 <prvAddCurrentTaskToDelayedList>
	}
 8004e70:	bf00      	nop
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	2000092c 	.word	0x2000092c

08004e7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10b      	bne.n	8004eaa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	60fb      	str	r3, [r7, #12]
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop
 8004ea8:	e7fd      	b.n	8004ea6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	3318      	adds	r3, #24
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fe fe2e 	bl	8003b10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f2c <xTaskRemoveFromEventList+0xb0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d11d      	bne.n	8004ef8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fe fe25 	bl	8003b10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eca:	4b19      	ldr	r3, [pc, #100]	@ (8004f30 <xTaskRemoveFromEventList+0xb4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d903      	bls.n	8004eda <xTaskRemoveFromEventList+0x5e>
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed6:	4a16      	ldr	r2, [pc, #88]	@ (8004f30 <xTaskRemoveFromEventList+0xb4>)
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4a13      	ldr	r2, [pc, #76]	@ (8004f34 <xTaskRemoveFromEventList+0xb8>)
 8004ee8:	441a      	add	r2, r3
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	3304      	adds	r3, #4
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	f7fe fdb0 	bl	8003a56 <vListInsertEnd>
 8004ef6:	e005      	b.n	8004f04 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	3318      	adds	r3, #24
 8004efc:	4619      	mov	r1, r3
 8004efe:	480e      	ldr	r0, [pc, #56]	@ (8004f38 <xTaskRemoveFromEventList+0xbc>)
 8004f00:	f7fe fda9 	bl	8003a56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f08:	4b0c      	ldr	r3, [pc, #48]	@ (8004f3c <xTaskRemoveFromEventList+0xc0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d905      	bls.n	8004f1e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f12:	2301      	movs	r3, #1
 8004f14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f16:	4b0a      	ldr	r3, [pc, #40]	@ (8004f40 <xTaskRemoveFromEventList+0xc4>)
 8004f18:	2201      	movs	r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	e001      	b.n	8004f22 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f22:	697b      	ldr	r3, [r7, #20]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20000e28 	.word	0x20000e28
 8004f30:	20000e08 	.word	0x20000e08
 8004f34:	20000930 	.word	0x20000930
 8004f38:	20000dc0 	.word	0x20000dc0
 8004f3c:	2000092c 	.word	0x2000092c
 8004f40:	20000e14 	.word	0x20000e14

08004f44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f4c:	4b06      	ldr	r3, [pc, #24]	@ (8004f68 <vTaskInternalSetTimeOutState+0x24>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f54:	4b05      	ldr	r3, [pc, #20]	@ (8004f6c <vTaskInternalSetTimeOutState+0x28>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	605a      	str	r2, [r3, #4]
}
 8004f5c:	bf00      	nop
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	20000e18 	.word	0x20000e18
 8004f6c:	20000e04 	.word	0x20000e04

08004f70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b088      	sub	sp, #32
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10b      	bne.n	8004f98 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	613b      	str	r3, [r7, #16]
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	e7fd      	b.n	8004f94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10b      	bne.n	8004fb6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	60fb      	str	r3, [r7, #12]
}
 8004fb0:	bf00      	nop
 8004fb2:	bf00      	nop
 8004fb4:	e7fd      	b.n	8004fb2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004fb6:	f000 fe97 	bl	8005ce8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fba:	4b1d      	ldr	r3, [pc, #116]	@ (8005030 <xTaskCheckForTimeOut+0xc0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	d102      	bne.n	8004fda <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	61fb      	str	r3, [r7, #28]
 8004fd8:	e023      	b.n	8005022 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	4b15      	ldr	r3, [pc, #84]	@ (8005034 <xTaskCheckForTimeOut+0xc4>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d007      	beq.n	8004ff6 <xTaskCheckForTimeOut+0x86>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d302      	bcc.n	8004ff6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	e015      	b.n	8005022 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d20b      	bcs.n	8005018 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	1ad2      	subs	r2, r2, r3
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7ff ff99 	bl	8004f44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005012:	2300      	movs	r3, #0
 8005014:	61fb      	str	r3, [r7, #28]
 8005016:	e004      	b.n	8005022 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800501e:	2301      	movs	r3, #1
 8005020:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005022:	f000 fe93 	bl	8005d4c <vPortExitCritical>

	return xReturn;
 8005026:	69fb      	ldr	r3, [r7, #28]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3720      	adds	r7, #32
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	20000e04 	.word	0x20000e04
 8005034:	20000e18 	.word	0x20000e18

08005038 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005038:	b480      	push	{r7}
 800503a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800503c:	4b03      	ldr	r3, [pc, #12]	@ (800504c <vTaskMissedYield+0x14>)
 800503e:	2201      	movs	r2, #1
 8005040:	601a      	str	r2, [r3, #0]
}
 8005042:	bf00      	nop
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr
 800504c:	20000e14 	.word	0x20000e14

08005050 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005058:	f000 f852 	bl	8005100 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800505c:	4b06      	ldr	r3, [pc, #24]	@ (8005078 <prvIdleTask+0x28>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d9f9      	bls.n	8005058 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005064:	4b05      	ldr	r3, [pc, #20]	@ (800507c <prvIdleTask+0x2c>)
 8005066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005074:	e7f0      	b.n	8005058 <prvIdleTask+0x8>
 8005076:	bf00      	nop
 8005078:	20000930 	.word	0x20000930
 800507c:	e000ed04 	.word	0xe000ed04

08005080 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005086:	2300      	movs	r3, #0
 8005088:	607b      	str	r3, [r7, #4]
 800508a:	e00c      	b.n	80050a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4a12      	ldr	r2, [pc, #72]	@ (80050e0 <prvInitialiseTaskLists+0x60>)
 8005098:	4413      	add	r3, r2
 800509a:	4618      	mov	r0, r3
 800509c:	f7fe fcae 	bl	80039fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3301      	adds	r3, #1
 80050a4:	607b      	str	r3, [r7, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b37      	cmp	r3, #55	@ 0x37
 80050aa:	d9ef      	bls.n	800508c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050ac:	480d      	ldr	r0, [pc, #52]	@ (80050e4 <prvInitialiseTaskLists+0x64>)
 80050ae:	f7fe fca5 	bl	80039fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050b2:	480d      	ldr	r0, [pc, #52]	@ (80050e8 <prvInitialiseTaskLists+0x68>)
 80050b4:	f7fe fca2 	bl	80039fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050b8:	480c      	ldr	r0, [pc, #48]	@ (80050ec <prvInitialiseTaskLists+0x6c>)
 80050ba:	f7fe fc9f 	bl	80039fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050be:	480c      	ldr	r0, [pc, #48]	@ (80050f0 <prvInitialiseTaskLists+0x70>)
 80050c0:	f7fe fc9c 	bl	80039fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050c4:	480b      	ldr	r0, [pc, #44]	@ (80050f4 <prvInitialiseTaskLists+0x74>)
 80050c6:	f7fe fc99 	bl	80039fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050ca:	4b0b      	ldr	r3, [pc, #44]	@ (80050f8 <prvInitialiseTaskLists+0x78>)
 80050cc:	4a05      	ldr	r2, [pc, #20]	@ (80050e4 <prvInitialiseTaskLists+0x64>)
 80050ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050d0:	4b0a      	ldr	r3, [pc, #40]	@ (80050fc <prvInitialiseTaskLists+0x7c>)
 80050d2:	4a05      	ldr	r2, [pc, #20]	@ (80050e8 <prvInitialiseTaskLists+0x68>)
 80050d4:	601a      	str	r2, [r3, #0]
}
 80050d6:	bf00      	nop
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000930 	.word	0x20000930
 80050e4:	20000d90 	.word	0x20000d90
 80050e8:	20000da4 	.word	0x20000da4
 80050ec:	20000dc0 	.word	0x20000dc0
 80050f0:	20000dd4 	.word	0x20000dd4
 80050f4:	20000dec 	.word	0x20000dec
 80050f8:	20000db8 	.word	0x20000db8
 80050fc:	20000dbc 	.word	0x20000dbc

08005100 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005106:	e019      	b.n	800513c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005108:	f000 fdee 	bl	8005ce8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800510c:	4b10      	ldr	r3, [pc, #64]	@ (8005150 <prvCheckTasksWaitingTermination+0x50>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3304      	adds	r3, #4
 8005118:	4618      	mov	r0, r3
 800511a:	f7fe fcf9 	bl	8003b10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800511e:	4b0d      	ldr	r3, [pc, #52]	@ (8005154 <prvCheckTasksWaitingTermination+0x54>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3b01      	subs	r3, #1
 8005124:	4a0b      	ldr	r2, [pc, #44]	@ (8005154 <prvCheckTasksWaitingTermination+0x54>)
 8005126:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005128:	4b0b      	ldr	r3, [pc, #44]	@ (8005158 <prvCheckTasksWaitingTermination+0x58>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3b01      	subs	r3, #1
 800512e:	4a0a      	ldr	r2, [pc, #40]	@ (8005158 <prvCheckTasksWaitingTermination+0x58>)
 8005130:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005132:	f000 fe0b 	bl	8005d4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f810 	bl	800515c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800513c:	4b06      	ldr	r3, [pc, #24]	@ (8005158 <prvCheckTasksWaitingTermination+0x58>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1e1      	bne.n	8005108 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000dd4 	.word	0x20000dd4
 8005154:	20000e00 	.word	0x20000e00
 8005158:	20000de8 	.word	0x20000de8

0800515c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3354      	adds	r3, #84	@ 0x54
 8005168:	4618      	mov	r0, r3
 800516a:	f001 f8d5 	bl	8006318 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005174:	2b00      	cmp	r3, #0
 8005176:	d108      	bne.n	800518a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517c:	4618      	mov	r0, r3
 800517e:	f000 ffa3 	bl	80060c8 <vPortFree>
				vPortFree( pxTCB );
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 ffa0 	bl	80060c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005188:	e019      	b.n	80051be <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005190:	2b01      	cmp	r3, #1
 8005192:	d103      	bne.n	800519c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 ff97 	bl	80060c8 <vPortFree>
	}
 800519a:	e010      	b.n	80051be <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d00b      	beq.n	80051be <prvDeleteTCB+0x62>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	60fb      	str	r3, [r7, #12]
}
 80051b8:	bf00      	nop
 80051ba:	bf00      	nop
 80051bc:	e7fd      	b.n	80051ba <prvDeleteTCB+0x5e>
	}
 80051be:	bf00      	nop
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005200 <prvResetNextTaskUnblockTime+0x38>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d104      	bne.n	80051e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005204 <prvResetNextTaskUnblockTime+0x3c>)
 80051da:	f04f 32ff 	mov.w	r2, #4294967295
 80051de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051e0:	e008      	b.n	80051f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e2:	4b07      	ldr	r3, [pc, #28]	@ (8005200 <prvResetNextTaskUnblockTime+0x38>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	4a04      	ldr	r2, [pc, #16]	@ (8005204 <prvResetNextTaskUnblockTime+0x3c>)
 80051f2:	6013      	str	r3, [r2, #0]
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	20000db8 	.word	0x20000db8
 8005204:	20000e20 	.word	0x20000e20

08005208 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800520e:	4b0b      	ldr	r3, [pc, #44]	@ (800523c <xTaskGetSchedulerState+0x34>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d102      	bne.n	800521c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005216:	2301      	movs	r3, #1
 8005218:	607b      	str	r3, [r7, #4]
 800521a:	e008      	b.n	800522e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800521c:	4b08      	ldr	r3, [pc, #32]	@ (8005240 <xTaskGetSchedulerState+0x38>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d102      	bne.n	800522a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005224:	2302      	movs	r3, #2
 8005226:	607b      	str	r3, [r7, #4]
 8005228:	e001      	b.n	800522e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800522a:	2300      	movs	r3, #0
 800522c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800522e:	687b      	ldr	r3, [r7, #4]
	}
 8005230:	4618      	mov	r0, r3
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	20000e0c 	.word	0x20000e0c
 8005240:	20000e28 	.word	0x20000e28

08005244 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d058      	beq.n	800530c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800525a:	4b2f      	ldr	r3, [pc, #188]	@ (8005318 <xTaskPriorityDisinherit+0xd4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	429a      	cmp	r2, r3
 8005262:	d00b      	beq.n	800527c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005268:	f383 8811 	msr	BASEPRI, r3
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f3bf 8f4f 	dsb	sy
 8005274:	60fb      	str	r3, [r7, #12]
}
 8005276:	bf00      	nop
 8005278:	bf00      	nop
 800527a:	e7fd      	b.n	8005278 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10b      	bne.n	800529c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	60bb      	str	r3, [r7, #8]
}
 8005296:	bf00      	nop
 8005298:	bf00      	nop
 800529a:	e7fd      	b.n	8005298 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052a0:	1e5a      	subs	r2, r3, #1
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d02c      	beq.n	800530c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d128      	bne.n	800530c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	3304      	adds	r3, #4
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe fc26 	bl	8003b10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052dc:	4b0f      	ldr	r3, [pc, #60]	@ (800531c <xTaskPriorityDisinherit+0xd8>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d903      	bls.n	80052ec <xTaskPriorityDisinherit+0xa8>
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e8:	4a0c      	ldr	r2, [pc, #48]	@ (800531c <xTaskPriorityDisinherit+0xd8>)
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4a09      	ldr	r2, [pc, #36]	@ (8005320 <xTaskPriorityDisinherit+0xdc>)
 80052fa:	441a      	add	r2, r3
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	3304      	adds	r3, #4
 8005300:	4619      	mov	r1, r3
 8005302:	4610      	mov	r0, r2
 8005304:	f7fe fba7 	bl	8003a56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005308:	2301      	movs	r3, #1
 800530a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800530c:	697b      	ldr	r3, [r7, #20]
	}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	2000092c 	.word	0x2000092c
 800531c:	20000e08 	.word	0x20000e08
 8005320:	20000930 	.word	0x20000930

08005324 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800532e:	4b21      	ldr	r3, [pc, #132]	@ (80053b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005334:	4b20      	ldr	r3, [pc, #128]	@ (80053b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3304      	adds	r3, #4
 800533a:	4618      	mov	r0, r3
 800533c:	f7fe fbe8 	bl	8003b10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005346:	d10a      	bne.n	800535e <prvAddCurrentTaskToDelayedList+0x3a>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d007      	beq.n	800535e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800534e:	4b1a      	ldr	r3, [pc, #104]	@ (80053b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3304      	adds	r3, #4
 8005354:	4619      	mov	r1, r3
 8005356:	4819      	ldr	r0, [pc, #100]	@ (80053bc <prvAddCurrentTaskToDelayedList+0x98>)
 8005358:	f7fe fb7d 	bl	8003a56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800535c:	e026      	b.n	80053ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4413      	add	r3, r2
 8005364:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005366:	4b14      	ldr	r3, [pc, #80]	@ (80053b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	429a      	cmp	r2, r3
 8005374:	d209      	bcs.n	800538a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005376:	4b12      	ldr	r3, [pc, #72]	@ (80053c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4b0f      	ldr	r3, [pc, #60]	@ (80053b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3304      	adds	r3, #4
 8005380:	4619      	mov	r1, r3
 8005382:	4610      	mov	r0, r2
 8005384:	f7fe fb8b 	bl	8003a9e <vListInsert>
}
 8005388:	e010      	b.n	80053ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800538a:	4b0e      	ldr	r3, [pc, #56]	@ (80053c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	4b0a      	ldr	r3, [pc, #40]	@ (80053b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3304      	adds	r3, #4
 8005394:	4619      	mov	r1, r3
 8005396:	4610      	mov	r0, r2
 8005398:	f7fe fb81 	bl	8003a9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800539c:	4b0a      	ldr	r3, [pc, #40]	@ (80053c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d202      	bcs.n	80053ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80053a6:	4a08      	ldr	r2, [pc, #32]	@ (80053c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	6013      	str	r3, [r2, #0]
}
 80053ac:	bf00      	nop
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20000e04 	.word	0x20000e04
 80053b8:	2000092c 	.word	0x2000092c
 80053bc:	20000dec 	.word	0x20000dec
 80053c0:	20000dbc 	.word	0x20000dbc
 80053c4:	20000db8 	.word	0x20000db8
 80053c8:	20000e20 	.word	0x20000e20

080053cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08a      	sub	sp, #40	@ 0x28
 80053d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80053d6:	f000 fb13 	bl	8005a00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80053da:	4b1d      	ldr	r3, [pc, #116]	@ (8005450 <xTimerCreateTimerTask+0x84>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d021      	beq.n	8005426 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80053e6:	2300      	movs	r3, #0
 80053e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053ea:	1d3a      	adds	r2, r7, #4
 80053ec:	f107 0108 	add.w	r1, r7, #8
 80053f0:	f107 030c 	add.w	r3, r7, #12
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fe fae7 	bl	80039c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	9202      	str	r2, [sp, #8]
 8005402:	9301      	str	r3, [sp, #4]
 8005404:	2302      	movs	r3, #2
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	2300      	movs	r3, #0
 800540a:	460a      	mov	r2, r1
 800540c:	4911      	ldr	r1, [pc, #68]	@ (8005454 <xTimerCreateTimerTask+0x88>)
 800540e:	4812      	ldr	r0, [pc, #72]	@ (8005458 <xTimerCreateTimerTask+0x8c>)
 8005410:	f7ff f8a2 	bl	8004558 <xTaskCreateStatic>
 8005414:	4603      	mov	r3, r0
 8005416:	4a11      	ldr	r2, [pc, #68]	@ (800545c <xTimerCreateTimerTask+0x90>)
 8005418:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800541a:	4b10      	ldr	r3, [pc, #64]	@ (800545c <xTimerCreateTimerTask+0x90>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005422:	2301      	movs	r3, #1
 8005424:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10b      	bne.n	8005444 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	613b      	str	r3, [r7, #16]
}
 800543e:	bf00      	nop
 8005440:	bf00      	nop
 8005442:	e7fd      	b.n	8005440 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005444:	697b      	ldr	r3, [r7, #20]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20000e5c 	.word	0x20000e5c
 8005454:	08006530 	.word	0x08006530
 8005458:	08005599 	.word	0x08005599
 800545c:	20000e60 	.word	0x20000e60

08005460 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08a      	sub	sp, #40	@ 0x28
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]
 800546c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800546e:	2300      	movs	r3, #0
 8005470:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10b      	bne.n	8005490 <xTimerGenericCommand+0x30>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	623b      	str	r3, [r7, #32]
}
 800548a:	bf00      	nop
 800548c:	bf00      	nop
 800548e:	e7fd      	b.n	800548c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005490:	4b19      	ldr	r3, [pc, #100]	@ (80054f8 <xTimerGenericCommand+0x98>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d02a      	beq.n	80054ee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b05      	cmp	r3, #5
 80054a8:	dc18      	bgt.n	80054dc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80054aa:	f7ff fead 	bl	8005208 <xTaskGetSchedulerState>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d109      	bne.n	80054c8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80054b4:	4b10      	ldr	r3, [pc, #64]	@ (80054f8 <xTimerGenericCommand+0x98>)
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	f107 0110 	add.w	r1, r7, #16
 80054bc:	2300      	movs	r3, #0
 80054be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c0:	f7fe fc5a 	bl	8003d78 <xQueueGenericSend>
 80054c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80054c6:	e012      	b.n	80054ee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80054c8:	4b0b      	ldr	r3, [pc, #44]	@ (80054f8 <xTimerGenericCommand+0x98>)
 80054ca:	6818      	ldr	r0, [r3, #0]
 80054cc:	f107 0110 	add.w	r1, r7, #16
 80054d0:	2300      	movs	r3, #0
 80054d2:	2200      	movs	r2, #0
 80054d4:	f7fe fc50 	bl	8003d78 <xQueueGenericSend>
 80054d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80054da:	e008      	b.n	80054ee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80054dc:	4b06      	ldr	r3, [pc, #24]	@ (80054f8 <xTimerGenericCommand+0x98>)
 80054de:	6818      	ldr	r0, [r3, #0]
 80054e0:	f107 0110 	add.w	r1, r7, #16
 80054e4:	2300      	movs	r3, #0
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	f7fe fd48 	bl	8003f7c <xQueueGenericSendFromISR>
 80054ec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3728      	adds	r7, #40	@ 0x28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	20000e5c 	.word	0x20000e5c

080054fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af02      	add	r7, sp, #8
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005506:	4b23      	ldr	r3, [pc, #140]	@ (8005594 <prvProcessExpiredTimer+0x98>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	3304      	adds	r3, #4
 8005514:	4618      	mov	r0, r3
 8005516:	f7fe fafb 	bl	8003b10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d023      	beq.n	8005570 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	699a      	ldr	r2, [r3, #24]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	18d1      	adds	r1, r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	6978      	ldr	r0, [r7, #20]
 8005536:	f000 f8d5 	bl	80056e4 <prvInsertTimerInActiveList>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d020      	beq.n	8005582 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005540:	2300      	movs	r3, #0
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	2300      	movs	r3, #0
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	2100      	movs	r1, #0
 800554a:	6978      	ldr	r0, [r7, #20]
 800554c:	f7ff ff88 	bl	8005460 <xTimerGenericCommand>
 8005550:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d114      	bne.n	8005582 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	60fb      	str	r3, [r7, #12]
}
 800556a:	bf00      	nop
 800556c:	bf00      	nop
 800556e:	e7fd      	b.n	800556c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005576:	f023 0301 	bic.w	r3, r3, #1
 800557a:	b2da      	uxtb	r2, r3
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	6978      	ldr	r0, [r7, #20]
 8005588:	4798      	blx	r3
}
 800558a:	bf00      	nop
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000e54 	.word	0x20000e54

08005598 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055a0:	f107 0308 	add.w	r3, r7, #8
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 f859 	bl	800565c <prvGetNextExpireTime>
 80055aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4619      	mov	r1, r3
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 f805 	bl	80055c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80055b6:	f000 f8d7 	bl	8005768 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055ba:	bf00      	nop
 80055bc:	e7f0      	b.n	80055a0 <prvTimerTask+0x8>
	...

080055c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80055ca:	f7ff fa29 	bl	8004a20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055ce:	f107 0308 	add.w	r3, r7, #8
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 f866 	bl	80056a4 <prvSampleTimeNow>
 80055d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d130      	bne.n	8005642 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10a      	bne.n	80055fc <prvProcessTimerOrBlockTask+0x3c>
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d806      	bhi.n	80055fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055ee:	f7ff fa25 	bl	8004a3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055f2:	68f9      	ldr	r1, [r7, #12]
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff ff81 	bl	80054fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055fa:	e024      	b.n	8005646 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d008      	beq.n	8005614 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005602:	4b13      	ldr	r3, [pc, #76]	@ (8005650 <prvProcessTimerOrBlockTask+0x90>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <prvProcessTimerOrBlockTask+0x50>
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <prvProcessTimerOrBlockTask+0x52>
 8005610:	2300      	movs	r3, #0
 8005612:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005614:	4b0f      	ldr	r3, [pc, #60]	@ (8005654 <prvProcessTimerOrBlockTask+0x94>)
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	4619      	mov	r1, r3
 8005622:	f7fe ff65 	bl	80044f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005626:	f7ff fa09 	bl	8004a3c <xTaskResumeAll>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10a      	bne.n	8005646 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005630:	4b09      	ldr	r3, [pc, #36]	@ (8005658 <prvProcessTimerOrBlockTask+0x98>)
 8005632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	f3bf 8f6f 	isb	sy
}
 8005640:	e001      	b.n	8005646 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005642:	f7ff f9fb 	bl	8004a3c <xTaskResumeAll>
}
 8005646:	bf00      	nop
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20000e58 	.word	0x20000e58
 8005654:	20000e5c 	.word	0x20000e5c
 8005658:	e000ed04 	.word	0xe000ed04

0800565c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005664:	4b0e      	ldr	r3, [pc, #56]	@ (80056a0 <prvGetNextExpireTime+0x44>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <prvGetNextExpireTime+0x16>
 800566e:	2201      	movs	r2, #1
 8005670:	e000      	b.n	8005674 <prvGetNextExpireTime+0x18>
 8005672:	2200      	movs	r2, #0
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d105      	bne.n	800568c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005680:	4b07      	ldr	r3, [pc, #28]	@ (80056a0 <prvGetNextExpireTime+0x44>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60fb      	str	r3, [r7, #12]
 800568a:	e001      	b.n	8005690 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005690:	68fb      	ldr	r3, [r7, #12]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	20000e54 	.word	0x20000e54

080056a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80056ac:	f7ff fa64 	bl	8004b78 <xTaskGetTickCount>
 80056b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80056b2:	4b0b      	ldr	r3, [pc, #44]	@ (80056e0 <prvSampleTimeNow+0x3c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d205      	bcs.n	80056c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80056bc:	f000 f93a 	bl	8005934 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	e002      	b.n	80056ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80056ce:	4a04      	ldr	r2, [pc, #16]	@ (80056e0 <prvSampleTimeNow+0x3c>)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80056d4:	68fb      	ldr	r3, [r7, #12]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000e64 	.word	0x20000e64

080056e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	429a      	cmp	r2, r3
 8005708:	d812      	bhi.n	8005730 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	1ad2      	subs	r2, r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	429a      	cmp	r2, r3
 8005716:	d302      	bcc.n	800571e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005718:	2301      	movs	r3, #1
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	e01b      	b.n	8005756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800571e:	4b10      	ldr	r3, [pc, #64]	@ (8005760 <prvInsertTimerInActiveList+0x7c>)
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	3304      	adds	r3, #4
 8005726:	4619      	mov	r1, r3
 8005728:	4610      	mov	r0, r2
 800572a:	f7fe f9b8 	bl	8003a9e <vListInsert>
 800572e:	e012      	b.n	8005756 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	429a      	cmp	r2, r3
 8005736:	d206      	bcs.n	8005746 <prvInsertTimerInActiveList+0x62>
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d302      	bcc.n	8005746 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005740:	2301      	movs	r3, #1
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	e007      	b.n	8005756 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005746:	4b07      	ldr	r3, [pc, #28]	@ (8005764 <prvInsertTimerInActiveList+0x80>)
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3304      	adds	r3, #4
 800574e:	4619      	mov	r1, r3
 8005750:	4610      	mov	r0, r2
 8005752:	f7fe f9a4 	bl	8003a9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005756:	697b      	ldr	r3, [r7, #20]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3718      	adds	r7, #24
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	20000e58 	.word	0x20000e58
 8005764:	20000e54 	.word	0x20000e54

08005768 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08e      	sub	sp, #56	@ 0x38
 800576c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800576e:	e0ce      	b.n	800590e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	da19      	bge.n	80057aa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005776:	1d3b      	adds	r3, r7, #4
 8005778:	3304      	adds	r3, #4
 800577a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800577c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10b      	bne.n	800579a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	61fb      	str	r3, [r7, #28]
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop
 8005798:	e7fd      	b.n	8005796 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800579a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057a0:	6850      	ldr	r0, [r2, #4]
 80057a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057a4:	6892      	ldr	r2, [r2, #8]
 80057a6:	4611      	mov	r1, r2
 80057a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f2c0 80ae 	blt.w	800590e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80057b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d004      	beq.n	80057c8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c0:	3304      	adds	r3, #4
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe f9a4 	bl	8003b10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057c8:	463b      	mov	r3, r7
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff ff6a 	bl	80056a4 <prvSampleTimeNow>
 80057d0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b09      	cmp	r3, #9
 80057d6:	f200 8097 	bhi.w	8005908 <prvProcessReceivedCommands+0x1a0>
 80057da:	a201      	add	r2, pc, #4	@ (adr r2, 80057e0 <prvProcessReceivedCommands+0x78>)
 80057dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e0:	08005809 	.word	0x08005809
 80057e4:	08005809 	.word	0x08005809
 80057e8:	08005809 	.word	0x08005809
 80057ec:	0800587f 	.word	0x0800587f
 80057f0:	08005893 	.word	0x08005893
 80057f4:	080058df 	.word	0x080058df
 80057f8:	08005809 	.word	0x08005809
 80057fc:	08005809 	.word	0x08005809
 8005800:	0800587f 	.word	0x0800587f
 8005804:	08005893 	.word	0x08005893
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800580e:	f043 0301 	orr.w	r3, r3, #1
 8005812:	b2da      	uxtb	r2, r3
 8005814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005816:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	18d1      	adds	r1, r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005826:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005828:	f7ff ff5c 	bl	80056e4 <prvInsertTimerInActiveList>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d06c      	beq.n	800590c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005838:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800583a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d061      	beq.n	800590c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	441a      	add	r2, r3
 8005850:	2300      	movs	r3, #0
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	2300      	movs	r3, #0
 8005856:	2100      	movs	r1, #0
 8005858:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800585a:	f7ff fe01 	bl	8005460 <xTimerGenericCommand>
 800585e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d152      	bne.n	800590c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	61bb      	str	r3, [r7, #24]
}
 8005878:	bf00      	nop
 800587a:	bf00      	nop
 800587c:	e7fd      	b.n	800587a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800587e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005880:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005884:	f023 0301 	bic.w	r3, r3, #1
 8005888:	b2da      	uxtb	r2, r3
 800588a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005890:	e03d      	b.n	800590e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005894:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005898:	f043 0301 	orr.w	r3, r3, #1
 800589c:	b2da      	uxtb	r2, r3
 800589e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80058aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10b      	bne.n	80058ca <prvProcessReceivedCommands+0x162>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	617b      	str	r3, [r7, #20]
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop
 80058c8:	e7fd      	b.n	80058c6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80058ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	18d1      	adds	r1, r2, r3
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058d8:	f7ff ff04 	bl	80056e4 <prvInsertTimerInActiveList>
					break;
 80058dc:	e017      	b.n	800590e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80058de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d103      	bne.n	80058f4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80058ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058ee:	f000 fbeb 	bl	80060c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058f2:	e00c      	b.n	800590e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058fa:	f023 0301 	bic.w	r3, r3, #1
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005902:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005906:	e002      	b.n	800590e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005908:	bf00      	nop
 800590a:	e000      	b.n	800590e <prvProcessReceivedCommands+0x1a6>
					break;
 800590c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800590e:	4b08      	ldr	r3, [pc, #32]	@ (8005930 <prvProcessReceivedCommands+0x1c8>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	1d39      	adds	r1, r7, #4
 8005914:	2200      	movs	r2, #0
 8005916:	4618      	mov	r0, r3
 8005918:	f7fe fbce 	bl	80040b8 <xQueueReceive>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	f47f af26 	bne.w	8005770 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop
 8005928:	3730      	adds	r7, #48	@ 0x30
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000e5c 	.word	0x20000e5c

08005934 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b088      	sub	sp, #32
 8005938:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800593a:	e049      	b.n	80059d0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800593c:	4b2e      	ldr	r3, [pc, #184]	@ (80059f8 <prvSwitchTimerLists+0xc4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005946:	4b2c      	ldr	r3, [pc, #176]	@ (80059f8 <prvSwitchTimerLists+0xc4>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3304      	adds	r3, #4
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe f8db 	bl	8003b10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d02f      	beq.n	80059d0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	4413      	add	r3, r2
 8005978:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	429a      	cmp	r2, r3
 8005980:	d90e      	bls.n	80059a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800598e:	4b1a      	ldr	r3, [pc, #104]	@ (80059f8 <prvSwitchTimerLists+0xc4>)
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3304      	adds	r3, #4
 8005996:	4619      	mov	r1, r3
 8005998:	4610      	mov	r0, r2
 800599a:	f7fe f880 	bl	8003a9e <vListInsert>
 800599e:	e017      	b.n	80059d0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059a0:	2300      	movs	r3, #0
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	2300      	movs	r3, #0
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	2100      	movs	r1, #0
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f7ff fd58 	bl	8005460 <xTimerGenericCommand>
 80059b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10b      	bne.n	80059d0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	603b      	str	r3, [r7, #0]
}
 80059ca:	bf00      	nop
 80059cc:	bf00      	nop
 80059ce:	e7fd      	b.n	80059cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059d0:	4b09      	ldr	r3, [pc, #36]	@ (80059f8 <prvSwitchTimerLists+0xc4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1b0      	bne.n	800593c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80059da:	4b07      	ldr	r3, [pc, #28]	@ (80059f8 <prvSwitchTimerLists+0xc4>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80059e0:	4b06      	ldr	r3, [pc, #24]	@ (80059fc <prvSwitchTimerLists+0xc8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a04      	ldr	r2, [pc, #16]	@ (80059f8 <prvSwitchTimerLists+0xc4>)
 80059e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80059e8:	4a04      	ldr	r2, [pc, #16]	@ (80059fc <prvSwitchTimerLists+0xc8>)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	6013      	str	r3, [r2, #0]
}
 80059ee:	bf00      	nop
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000e54 	.word	0x20000e54
 80059fc:	20000e58 	.word	0x20000e58

08005a00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a06:	f000 f96f 	bl	8005ce8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a0a:	4b15      	ldr	r3, [pc, #84]	@ (8005a60 <prvCheckForValidListAndQueue+0x60>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d120      	bne.n	8005a54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a12:	4814      	ldr	r0, [pc, #80]	@ (8005a64 <prvCheckForValidListAndQueue+0x64>)
 8005a14:	f7fd fff2 	bl	80039fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a18:	4813      	ldr	r0, [pc, #76]	@ (8005a68 <prvCheckForValidListAndQueue+0x68>)
 8005a1a:	f7fd ffef 	bl	80039fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a1e:	4b13      	ldr	r3, [pc, #76]	@ (8005a6c <prvCheckForValidListAndQueue+0x6c>)
 8005a20:	4a10      	ldr	r2, [pc, #64]	@ (8005a64 <prvCheckForValidListAndQueue+0x64>)
 8005a22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a24:	4b12      	ldr	r3, [pc, #72]	@ (8005a70 <prvCheckForValidListAndQueue+0x70>)
 8005a26:	4a10      	ldr	r2, [pc, #64]	@ (8005a68 <prvCheckForValidListAndQueue+0x68>)
 8005a28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	4b11      	ldr	r3, [pc, #68]	@ (8005a74 <prvCheckForValidListAndQueue+0x74>)
 8005a30:	4a11      	ldr	r2, [pc, #68]	@ (8005a78 <prvCheckForValidListAndQueue+0x78>)
 8005a32:	2110      	movs	r1, #16
 8005a34:	200a      	movs	r0, #10
 8005a36:	f7fe f8ff 	bl	8003c38 <xQueueGenericCreateStatic>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	4a08      	ldr	r2, [pc, #32]	@ (8005a60 <prvCheckForValidListAndQueue+0x60>)
 8005a3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a40:	4b07      	ldr	r3, [pc, #28]	@ (8005a60 <prvCheckForValidListAndQueue+0x60>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a48:	4b05      	ldr	r3, [pc, #20]	@ (8005a60 <prvCheckForValidListAndQueue+0x60>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	490b      	ldr	r1, [pc, #44]	@ (8005a7c <prvCheckForValidListAndQueue+0x7c>)
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fe fd24 	bl	800449c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a54:	f000 f97a 	bl	8005d4c <vPortExitCritical>
}
 8005a58:	bf00      	nop
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20000e5c 	.word	0x20000e5c
 8005a64:	20000e2c 	.word	0x20000e2c
 8005a68:	20000e40 	.word	0x20000e40
 8005a6c:	20000e54 	.word	0x20000e54
 8005a70:	20000e58 	.word	0x20000e58
 8005a74:	20000f08 	.word	0x20000f08
 8005a78:	20000e68 	.word	0x20000e68
 8005a7c:	08006538 	.word	0x08006538

08005a80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3b04      	subs	r3, #4
 8005a90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3b04      	subs	r3, #4
 8005a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	f023 0201 	bic.w	r2, r3, #1
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3b04      	subs	r3, #4
 8005aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8005ae4 <pxPortInitialiseStack+0x64>)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3b14      	subs	r3, #20
 8005aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3b04      	subs	r3, #4
 8005ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f06f 0202 	mvn.w	r2, #2
 8005ace:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3b20      	subs	r3, #32
 8005ad4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	08005ae9 	.word	0x08005ae9

08005ae8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005af2:	4b13      	ldr	r3, [pc, #76]	@ (8005b40 <prvTaskExitError+0x58>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005afa:	d00b      	beq.n	8005b14 <prvTaskExitError+0x2c>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	60fb      	str	r3, [r7, #12]
}
 8005b0e:	bf00      	nop
 8005b10:	bf00      	nop
 8005b12:	e7fd      	b.n	8005b10 <prvTaskExitError+0x28>
	__asm volatile
 8005b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b18:	f383 8811 	msr	BASEPRI, r3
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	60bb      	str	r3, [r7, #8]
}
 8005b26:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b28:	bf00      	nop
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d0fc      	beq.n	8005b2a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b30:	bf00      	nop
 8005b32:	bf00      	nop
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	2000000c 	.word	0x2000000c
	...

08005b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b50:	4b07      	ldr	r3, [pc, #28]	@ (8005b70 <pxCurrentTCBConst2>)
 8005b52:	6819      	ldr	r1, [r3, #0]
 8005b54:	6808      	ldr	r0, [r1, #0]
 8005b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b5a:	f380 8809 	msr	PSP, r0
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f04f 0000 	mov.w	r0, #0
 8005b66:	f380 8811 	msr	BASEPRI, r0
 8005b6a:	4770      	bx	lr
 8005b6c:	f3af 8000 	nop.w

08005b70 <pxCurrentTCBConst2>:
 8005b70:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop

08005b78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b78:	4808      	ldr	r0, [pc, #32]	@ (8005b9c <prvPortStartFirstTask+0x24>)
 8005b7a:	6800      	ldr	r0, [r0, #0]
 8005b7c:	6800      	ldr	r0, [r0, #0]
 8005b7e:	f380 8808 	msr	MSP, r0
 8005b82:	f04f 0000 	mov.w	r0, #0
 8005b86:	f380 8814 	msr	CONTROL, r0
 8005b8a:	b662      	cpsie	i
 8005b8c:	b661      	cpsie	f
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	df00      	svc	0
 8005b98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b9a:	bf00      	nop
 8005b9c:	e000ed08 	.word	0xe000ed08

08005ba0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ba6:	4b47      	ldr	r3, [pc, #284]	@ (8005cc4 <xPortStartScheduler+0x124>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a47      	ldr	r2, [pc, #284]	@ (8005cc8 <xPortStartScheduler+0x128>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d10b      	bne.n	8005bc8 <xPortStartScheduler+0x28>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	613b      	str	r3, [r7, #16]
}
 8005bc2:	bf00      	nop
 8005bc4:	bf00      	nop
 8005bc6:	e7fd      	b.n	8005bc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005bc8:	4b3e      	ldr	r3, [pc, #248]	@ (8005cc4 <xPortStartScheduler+0x124>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a3f      	ldr	r2, [pc, #252]	@ (8005ccc <xPortStartScheduler+0x12c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d10b      	bne.n	8005bea <xPortStartScheduler+0x4a>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	60fb      	str	r3, [r7, #12]
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop
 8005be8:	e7fd      	b.n	8005be6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bea:	4b39      	ldr	r3, [pc, #228]	@ (8005cd0 <xPortStartScheduler+0x130>)
 8005bec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	22ff      	movs	r2, #255	@ 0xff
 8005bfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	4b31      	ldr	r3, [pc, #196]	@ (8005cd4 <xPortStartScheduler+0x134>)
 8005c10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c12:	4b31      	ldr	r3, [pc, #196]	@ (8005cd8 <xPortStartScheduler+0x138>)
 8005c14:	2207      	movs	r2, #7
 8005c16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c18:	e009      	b.n	8005c2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8005cd8 <xPortStartScheduler+0x138>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	4a2d      	ldr	r2, [pc, #180]	@ (8005cd8 <xPortStartScheduler+0x138>)
 8005c22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c24:	78fb      	ldrb	r3, [r7, #3]
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	005b      	lsls	r3, r3, #1
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c36:	2b80      	cmp	r3, #128	@ 0x80
 8005c38:	d0ef      	beq.n	8005c1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c3a:	4b27      	ldr	r3, [pc, #156]	@ (8005cd8 <xPortStartScheduler+0x138>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f1c3 0307 	rsb	r3, r3, #7
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	d00b      	beq.n	8005c5e <xPortStartScheduler+0xbe>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	60bb      	str	r3, [r7, #8]
}
 8005c58:	bf00      	nop
 8005c5a:	bf00      	nop
 8005c5c:	e7fd      	b.n	8005c5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd8 <xPortStartScheduler+0x138>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	4a1c      	ldr	r2, [pc, #112]	@ (8005cd8 <xPortStartScheduler+0x138>)
 8005c66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c68:	4b1b      	ldr	r3, [pc, #108]	@ (8005cd8 <xPortStartScheduler+0x138>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c70:	4a19      	ldr	r2, [pc, #100]	@ (8005cd8 <xPortStartScheduler+0x138>)
 8005c72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c7c:	4b17      	ldr	r3, [pc, #92]	@ (8005cdc <xPortStartScheduler+0x13c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a16      	ldr	r2, [pc, #88]	@ (8005cdc <xPortStartScheduler+0x13c>)
 8005c82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c88:	4b14      	ldr	r3, [pc, #80]	@ (8005cdc <xPortStartScheduler+0x13c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a13      	ldr	r2, [pc, #76]	@ (8005cdc <xPortStartScheduler+0x13c>)
 8005c8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005c92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c94:	f000 f8da 	bl	8005e4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c98:	4b11      	ldr	r3, [pc, #68]	@ (8005ce0 <xPortStartScheduler+0x140>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c9e:	f000 f8f9 	bl	8005e94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ca2:	4b10      	ldr	r3, [pc, #64]	@ (8005ce4 <xPortStartScheduler+0x144>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8005ce4 <xPortStartScheduler+0x144>)
 8005ca8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005cac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005cae:	f7ff ff63 	bl	8005b78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005cb2:	f7ff f82b 	bl	8004d0c <vTaskSwitchContext>
	prvTaskExitError();
 8005cb6:	f7ff ff17 	bl	8005ae8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	e000ed00 	.word	0xe000ed00
 8005cc8:	410fc271 	.word	0x410fc271
 8005ccc:	410fc270 	.word	0x410fc270
 8005cd0:	e000e400 	.word	0xe000e400
 8005cd4:	20000f58 	.word	0x20000f58
 8005cd8:	20000f5c 	.word	0x20000f5c
 8005cdc:	e000ed20 	.word	0xe000ed20
 8005ce0:	2000000c 	.word	0x2000000c
 8005ce4:	e000ef34 	.word	0xe000ef34

08005ce8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	607b      	str	r3, [r7, #4]
}
 8005d00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d02:	4b10      	ldr	r3, [pc, #64]	@ (8005d44 <vPortEnterCritical+0x5c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3301      	adds	r3, #1
 8005d08:	4a0e      	ldr	r2, [pc, #56]	@ (8005d44 <vPortEnterCritical+0x5c>)
 8005d0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005d44 <vPortEnterCritical+0x5c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d110      	bne.n	8005d36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d14:	4b0c      	ldr	r3, [pc, #48]	@ (8005d48 <vPortEnterCritical+0x60>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <vPortEnterCritical+0x4e>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	603b      	str	r3, [r7, #0]
}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	e7fd      	b.n	8005d32 <vPortEnterCritical+0x4a>
	}
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	2000000c 	.word	0x2000000c
 8005d48:	e000ed04 	.word	0xe000ed04

08005d4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d52:	4b12      	ldr	r3, [pc, #72]	@ (8005d9c <vPortExitCritical+0x50>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10b      	bne.n	8005d72 <vPortExitCritical+0x26>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	607b      	str	r3, [r7, #4]
}
 8005d6c:	bf00      	nop
 8005d6e:	bf00      	nop
 8005d70:	e7fd      	b.n	8005d6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d72:	4b0a      	ldr	r3, [pc, #40]	@ (8005d9c <vPortExitCritical+0x50>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	4a08      	ldr	r2, [pc, #32]	@ (8005d9c <vPortExitCritical+0x50>)
 8005d7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d7c:	4b07      	ldr	r3, [pc, #28]	@ (8005d9c <vPortExitCritical+0x50>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d105      	bne.n	8005d90 <vPortExitCritical+0x44>
 8005d84:	2300      	movs	r3, #0
 8005d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	f383 8811 	msr	BASEPRI, r3
}
 8005d8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	2000000c 	.word	0x2000000c

08005da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005da0:	f3ef 8009 	mrs	r0, PSP
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	4b15      	ldr	r3, [pc, #84]	@ (8005e00 <pxCurrentTCBConst>)
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	f01e 0f10 	tst.w	lr, #16
 8005db0:	bf08      	it	eq
 8005db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dba:	6010      	str	r0, [r2, #0]
 8005dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005dc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005dc4:	f380 8811 	msr	BASEPRI, r0
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f7fe ff9c 	bl	8004d0c <vTaskSwitchContext>
 8005dd4:	f04f 0000 	mov.w	r0, #0
 8005dd8:	f380 8811 	msr	BASEPRI, r0
 8005ddc:	bc09      	pop	{r0, r3}
 8005dde:	6819      	ldr	r1, [r3, #0]
 8005de0:	6808      	ldr	r0, [r1, #0]
 8005de2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de6:	f01e 0f10 	tst.w	lr, #16
 8005dea:	bf08      	it	eq
 8005dec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005df0:	f380 8809 	msr	PSP, r0
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	f3af 8000 	nop.w

08005e00 <pxCurrentTCBConst>:
 8005e00:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e04:	bf00      	nop
 8005e06:	bf00      	nop

08005e08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	607b      	str	r3, [r7, #4]
}
 8005e20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e22:	f7fe feb9 	bl	8004b98 <xTaskIncrementTick>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e2c:	4b06      	ldr	r3, [pc, #24]	@ (8005e48 <xPortSysTickHandler+0x40>)
 8005e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e32:	601a      	str	r2, [r3, #0]
 8005e34:	2300      	movs	r3, #0
 8005e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	f383 8811 	msr	BASEPRI, r3
}
 8005e3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	e000ed04 	.word	0xe000ed04

08005e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e50:	4b0b      	ldr	r3, [pc, #44]	@ (8005e80 <vPortSetupTimerInterrupt+0x34>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e56:	4b0b      	ldr	r3, [pc, #44]	@ (8005e84 <vPortSetupTimerInterrupt+0x38>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e88 <vPortSetupTimerInterrupt+0x3c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a0a      	ldr	r2, [pc, #40]	@ (8005e8c <vPortSetupTimerInterrupt+0x40>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	099b      	lsrs	r3, r3, #6
 8005e68:	4a09      	ldr	r2, [pc, #36]	@ (8005e90 <vPortSetupTimerInterrupt+0x44>)
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e6e:	4b04      	ldr	r3, [pc, #16]	@ (8005e80 <vPortSetupTimerInterrupt+0x34>)
 8005e70:	2207      	movs	r2, #7
 8005e72:	601a      	str	r2, [r3, #0]
}
 8005e74:	bf00      	nop
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	e000e010 	.word	0xe000e010
 8005e84:	e000e018 	.word	0xe000e018
 8005e88:	20000000 	.word	0x20000000
 8005e8c:	10624dd3 	.word	0x10624dd3
 8005e90:	e000e014 	.word	0xe000e014

08005e94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005ea4 <vPortEnableVFP+0x10>
 8005e98:	6801      	ldr	r1, [r0, #0]
 8005e9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005e9e:	6001      	str	r1, [r0, #0]
 8005ea0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ea2:	bf00      	nop
 8005ea4:	e000ed88 	.word	0xe000ed88

08005ea8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005eae:	f3ef 8305 	mrs	r3, IPSR
 8005eb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b0f      	cmp	r3, #15
 8005eb8:	d915      	bls.n	8005ee6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005eba:	4a18      	ldr	r2, [pc, #96]	@ (8005f1c <vPortValidateInterruptPriority+0x74>)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ec4:	4b16      	ldr	r3, [pc, #88]	@ (8005f20 <vPortValidateInterruptPriority+0x78>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	7afa      	ldrb	r2, [r7, #11]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d20b      	bcs.n	8005ee6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	607b      	str	r3, [r7, #4]
}
 8005ee0:	bf00      	nop
 8005ee2:	bf00      	nop
 8005ee4:	e7fd      	b.n	8005ee2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f24 <vPortValidateInterruptPriority+0x7c>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005eee:	4b0e      	ldr	r3, [pc, #56]	@ (8005f28 <vPortValidateInterruptPriority+0x80>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d90b      	bls.n	8005f0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	603b      	str	r3, [r7, #0]
}
 8005f08:	bf00      	nop
 8005f0a:	bf00      	nop
 8005f0c:	e7fd      	b.n	8005f0a <vPortValidateInterruptPriority+0x62>
	}
 8005f0e:	bf00      	nop
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	e000e3f0 	.word	0xe000e3f0
 8005f20:	20000f58 	.word	0x20000f58
 8005f24:	e000ed0c 	.word	0xe000ed0c
 8005f28:	20000f5c 	.word	0x20000f5c

08005f2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08a      	sub	sp, #40	@ 0x28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f34:	2300      	movs	r3, #0
 8005f36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f38:	f7fe fd72 	bl	8004a20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f3c:	4b5c      	ldr	r3, [pc, #368]	@ (80060b0 <pvPortMalloc+0x184>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f44:	f000 f924 	bl	8006190 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f48:	4b5a      	ldr	r3, [pc, #360]	@ (80060b4 <pvPortMalloc+0x188>)
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4013      	ands	r3, r2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f040 8095 	bne.w	8006080 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01e      	beq.n	8005f9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005f5c:	2208      	movs	r2, #8
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4413      	add	r3, r2
 8005f62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d015      	beq.n	8005f9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f023 0307 	bic.w	r3, r3, #7
 8005f74:	3308      	adds	r3, #8
 8005f76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f003 0307 	and.w	r3, r3, #7
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <pvPortMalloc+0x6e>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	617b      	str	r3, [r7, #20]
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop
 8005f98:	e7fd      	b.n	8005f96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d06f      	beq.n	8006080 <pvPortMalloc+0x154>
 8005fa0:	4b45      	ldr	r3, [pc, #276]	@ (80060b8 <pvPortMalloc+0x18c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d86a      	bhi.n	8006080 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005faa:	4b44      	ldr	r3, [pc, #272]	@ (80060bc <pvPortMalloc+0x190>)
 8005fac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fae:	4b43      	ldr	r3, [pc, #268]	@ (80060bc <pvPortMalloc+0x190>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fb4:	e004      	b.n	8005fc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d903      	bls.n	8005fd2 <pvPortMalloc+0xa6>
 8005fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1f1      	bne.n	8005fb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005fd2:	4b37      	ldr	r3, [pc, #220]	@ (80060b0 <pvPortMalloc+0x184>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d051      	beq.n	8006080 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	4413      	add	r3, r2
 8005fe4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	1ad2      	subs	r2, r2, r3
 8005ff6:	2308      	movs	r3, #8
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d920      	bls.n	8006040 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4413      	add	r3, r2
 8006004:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00b      	beq.n	8006028 <pvPortMalloc+0xfc>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	613b      	str	r3, [r7, #16]
}
 8006022:	bf00      	nop
 8006024:	bf00      	nop
 8006026:	e7fd      	b.n	8006024 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	1ad2      	subs	r2, r2, r3
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800603a:	69b8      	ldr	r0, [r7, #24]
 800603c:	f000 f90a 	bl	8006254 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006040:	4b1d      	ldr	r3, [pc, #116]	@ (80060b8 <pvPortMalloc+0x18c>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	4a1b      	ldr	r2, [pc, #108]	@ (80060b8 <pvPortMalloc+0x18c>)
 800604c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800604e:	4b1a      	ldr	r3, [pc, #104]	@ (80060b8 <pvPortMalloc+0x18c>)
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	4b1b      	ldr	r3, [pc, #108]	@ (80060c0 <pvPortMalloc+0x194>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d203      	bcs.n	8006062 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800605a:	4b17      	ldr	r3, [pc, #92]	@ (80060b8 <pvPortMalloc+0x18c>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a18      	ldr	r2, [pc, #96]	@ (80060c0 <pvPortMalloc+0x194>)
 8006060:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	4b13      	ldr	r3, [pc, #76]	@ (80060b4 <pvPortMalloc+0x188>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	431a      	orrs	r2, r3
 800606c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006076:	4b13      	ldr	r3, [pc, #76]	@ (80060c4 <pvPortMalloc+0x198>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	3301      	adds	r3, #1
 800607c:	4a11      	ldr	r2, [pc, #68]	@ (80060c4 <pvPortMalloc+0x198>)
 800607e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006080:	f7fe fcdc 	bl	8004a3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00b      	beq.n	80060a6 <pvPortMalloc+0x17a>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	60fb      	str	r3, [r7, #12]
}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	e7fd      	b.n	80060a2 <pvPortMalloc+0x176>
	return pvReturn;
 80060a6:	69fb      	ldr	r3, [r7, #28]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3728      	adds	r7, #40	@ 0x28
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20001b20 	.word	0x20001b20
 80060b4:	20001b34 	.word	0x20001b34
 80060b8:	20001b24 	.word	0x20001b24
 80060bc:	20001b18 	.word	0x20001b18
 80060c0:	20001b28 	.word	0x20001b28
 80060c4:	20001b2c 	.word	0x20001b2c

080060c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d04f      	beq.n	800617a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060da:	2308      	movs	r3, #8
 80060dc:	425b      	negs	r3, r3
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4413      	add	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	4b25      	ldr	r3, [pc, #148]	@ (8006184 <vPortFree+0xbc>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4013      	ands	r3, r2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10b      	bne.n	800610e <vPortFree+0x46>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	60fb      	str	r3, [r7, #12]
}
 8006108:	bf00      	nop
 800610a:	bf00      	nop
 800610c:	e7fd      	b.n	800610a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00b      	beq.n	800612e <vPortFree+0x66>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	60bb      	str	r3, [r7, #8]
}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	e7fd      	b.n	800612a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	4b14      	ldr	r3, [pc, #80]	@ (8006184 <vPortFree+0xbc>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4013      	ands	r3, r2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01e      	beq.n	800617a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d11a      	bne.n	800617a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	4b0e      	ldr	r3, [pc, #56]	@ (8006184 <vPortFree+0xbc>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	43db      	mvns	r3, r3
 800614e:	401a      	ands	r2, r3
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006154:	f7fe fc64 	bl	8004a20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	4b0a      	ldr	r3, [pc, #40]	@ (8006188 <vPortFree+0xc0>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4413      	add	r3, r2
 8006162:	4a09      	ldr	r2, [pc, #36]	@ (8006188 <vPortFree+0xc0>)
 8006164:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006166:	6938      	ldr	r0, [r7, #16]
 8006168:	f000 f874 	bl	8006254 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800616c:	4b07      	ldr	r3, [pc, #28]	@ (800618c <vPortFree+0xc4>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3301      	adds	r3, #1
 8006172:	4a06      	ldr	r2, [pc, #24]	@ (800618c <vPortFree+0xc4>)
 8006174:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006176:	f7fe fc61 	bl	8004a3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800617a:	bf00      	nop
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20001b34 	.word	0x20001b34
 8006188:	20001b24 	.word	0x20001b24
 800618c:	20001b30 	.word	0x20001b30

08006190 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006196:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800619a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800619c:	4b27      	ldr	r3, [pc, #156]	@ (800623c <prvHeapInit+0xac>)
 800619e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f003 0307 	and.w	r3, r3, #7
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00c      	beq.n	80061c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3307      	adds	r3, #7
 80061ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0307 	bic.w	r3, r3, #7
 80061b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	4a1f      	ldr	r2, [pc, #124]	@ (800623c <prvHeapInit+0xac>)
 80061c0:	4413      	add	r3, r2
 80061c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006240 <prvHeapInit+0xb0>)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006240 <prvHeapInit+0xb0>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	4413      	add	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061dc:	2208      	movs	r2, #8
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	1a9b      	subs	r3, r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0307 	bic.w	r3, r3, #7
 80061ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4a15      	ldr	r2, [pc, #84]	@ (8006244 <prvHeapInit+0xb4>)
 80061f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061f2:	4b14      	ldr	r3, [pc, #80]	@ (8006244 <prvHeapInit+0xb4>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2200      	movs	r2, #0
 80061f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061fa:	4b12      	ldr	r3, [pc, #72]	@ (8006244 <prvHeapInit+0xb4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2200      	movs	r2, #0
 8006200:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	1ad2      	subs	r2, r2, r3
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006210:	4b0c      	ldr	r3, [pc, #48]	@ (8006244 <prvHeapInit+0xb4>)
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	4a0a      	ldr	r2, [pc, #40]	@ (8006248 <prvHeapInit+0xb8>)
 800621e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	4a09      	ldr	r2, [pc, #36]	@ (800624c <prvHeapInit+0xbc>)
 8006226:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006228:	4b09      	ldr	r3, [pc, #36]	@ (8006250 <prvHeapInit+0xc0>)
 800622a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800622e:	601a      	str	r2, [r3, #0]
}
 8006230:	bf00      	nop
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	20000f60 	.word	0x20000f60
 8006240:	20001b18 	.word	0x20001b18
 8006244:	20001b20 	.word	0x20001b20
 8006248:	20001b28 	.word	0x20001b28
 800624c:	20001b24 	.word	0x20001b24
 8006250:	20001b34 	.word	0x20001b34

08006254 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800625c:	4b28      	ldr	r3, [pc, #160]	@ (8006300 <prvInsertBlockIntoFreeList+0xac>)
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	e002      	b.n	8006268 <prvInsertBlockIntoFreeList+0x14>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	60fb      	str	r3, [r7, #12]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	429a      	cmp	r2, r3
 8006270:	d8f7      	bhi.n	8006262 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	4413      	add	r3, r2
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	429a      	cmp	r2, r3
 8006282:	d108      	bne.n	8006296 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	441a      	add	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	441a      	add	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d118      	bne.n	80062dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	4b15      	ldr	r3, [pc, #84]	@ (8006304 <prvInsertBlockIntoFreeList+0xb0>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d00d      	beq.n	80062d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	441a      	add	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	e008      	b.n	80062e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006304 <prvInsertBlockIntoFreeList+0xb0>)
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	e003      	b.n	80062e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d002      	beq.n	80062f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062f2:	bf00      	nop
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	20001b18 	.word	0x20001b18
 8006304:	20001b20 	.word	0x20001b20

08006308 <memset>:
 8006308:	4402      	add	r2, r0
 800630a:	4603      	mov	r3, r0
 800630c:	4293      	cmp	r3, r2
 800630e:	d100      	bne.n	8006312 <memset+0xa>
 8006310:	4770      	bx	lr
 8006312:	f803 1b01 	strb.w	r1, [r3], #1
 8006316:	e7f9      	b.n	800630c <memset+0x4>

08006318 <_reclaim_reent>:
 8006318:	4b29      	ldr	r3, [pc, #164]	@ (80063c0 <_reclaim_reent+0xa8>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4283      	cmp	r3, r0
 800631e:	b570      	push	{r4, r5, r6, lr}
 8006320:	4604      	mov	r4, r0
 8006322:	d04b      	beq.n	80063bc <_reclaim_reent+0xa4>
 8006324:	69c3      	ldr	r3, [r0, #28]
 8006326:	b1ab      	cbz	r3, 8006354 <_reclaim_reent+0x3c>
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	b16b      	cbz	r3, 8006348 <_reclaim_reent+0x30>
 800632c:	2500      	movs	r5, #0
 800632e:	69e3      	ldr	r3, [r4, #28]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	5959      	ldr	r1, [r3, r5]
 8006334:	2900      	cmp	r1, #0
 8006336:	d13b      	bne.n	80063b0 <_reclaim_reent+0x98>
 8006338:	3504      	adds	r5, #4
 800633a:	2d80      	cmp	r5, #128	@ 0x80
 800633c:	d1f7      	bne.n	800632e <_reclaim_reent+0x16>
 800633e:	69e3      	ldr	r3, [r4, #28]
 8006340:	4620      	mov	r0, r4
 8006342:	68d9      	ldr	r1, [r3, #12]
 8006344:	f000 f872 	bl	800642c <_free_r>
 8006348:	69e3      	ldr	r3, [r4, #28]
 800634a:	6819      	ldr	r1, [r3, #0]
 800634c:	b111      	cbz	r1, 8006354 <_reclaim_reent+0x3c>
 800634e:	4620      	mov	r0, r4
 8006350:	f000 f86c 	bl	800642c <_free_r>
 8006354:	6961      	ldr	r1, [r4, #20]
 8006356:	b111      	cbz	r1, 800635e <_reclaim_reent+0x46>
 8006358:	4620      	mov	r0, r4
 800635a:	f000 f867 	bl	800642c <_free_r>
 800635e:	69e1      	ldr	r1, [r4, #28]
 8006360:	b111      	cbz	r1, 8006368 <_reclaim_reent+0x50>
 8006362:	4620      	mov	r0, r4
 8006364:	f000 f862 	bl	800642c <_free_r>
 8006368:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800636a:	b111      	cbz	r1, 8006372 <_reclaim_reent+0x5a>
 800636c:	4620      	mov	r0, r4
 800636e:	f000 f85d 	bl	800642c <_free_r>
 8006372:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006374:	b111      	cbz	r1, 800637c <_reclaim_reent+0x64>
 8006376:	4620      	mov	r0, r4
 8006378:	f000 f858 	bl	800642c <_free_r>
 800637c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800637e:	b111      	cbz	r1, 8006386 <_reclaim_reent+0x6e>
 8006380:	4620      	mov	r0, r4
 8006382:	f000 f853 	bl	800642c <_free_r>
 8006386:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006388:	b111      	cbz	r1, 8006390 <_reclaim_reent+0x78>
 800638a:	4620      	mov	r0, r4
 800638c:	f000 f84e 	bl	800642c <_free_r>
 8006390:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006392:	b111      	cbz	r1, 800639a <_reclaim_reent+0x82>
 8006394:	4620      	mov	r0, r4
 8006396:	f000 f849 	bl	800642c <_free_r>
 800639a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800639c:	b111      	cbz	r1, 80063a4 <_reclaim_reent+0x8c>
 800639e:	4620      	mov	r0, r4
 80063a0:	f000 f844 	bl	800642c <_free_r>
 80063a4:	6a23      	ldr	r3, [r4, #32]
 80063a6:	b14b      	cbz	r3, 80063bc <_reclaim_reent+0xa4>
 80063a8:	4620      	mov	r0, r4
 80063aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063ae:	4718      	bx	r3
 80063b0:	680e      	ldr	r6, [r1, #0]
 80063b2:	4620      	mov	r0, r4
 80063b4:	f000 f83a 	bl	800642c <_free_r>
 80063b8:	4631      	mov	r1, r6
 80063ba:	e7bb      	b.n	8006334 <_reclaim_reent+0x1c>
 80063bc:	bd70      	pop	{r4, r5, r6, pc}
 80063be:	bf00      	nop
 80063c0:	20000010 	.word	0x20000010

080063c4 <__libc_init_array>:
 80063c4:	b570      	push	{r4, r5, r6, lr}
 80063c6:	4d0d      	ldr	r5, [pc, #52]	@ (80063fc <__libc_init_array+0x38>)
 80063c8:	4c0d      	ldr	r4, [pc, #52]	@ (8006400 <__libc_init_array+0x3c>)
 80063ca:	1b64      	subs	r4, r4, r5
 80063cc:	10a4      	asrs	r4, r4, #2
 80063ce:	2600      	movs	r6, #0
 80063d0:	42a6      	cmp	r6, r4
 80063d2:	d109      	bne.n	80063e8 <__libc_init_array+0x24>
 80063d4:	4d0b      	ldr	r5, [pc, #44]	@ (8006404 <__libc_init_array+0x40>)
 80063d6:	4c0c      	ldr	r4, [pc, #48]	@ (8006408 <__libc_init_array+0x44>)
 80063d8:	f000 f87e 	bl	80064d8 <_init>
 80063dc:	1b64      	subs	r4, r4, r5
 80063de:	10a4      	asrs	r4, r4, #2
 80063e0:	2600      	movs	r6, #0
 80063e2:	42a6      	cmp	r6, r4
 80063e4:	d105      	bne.n	80063f2 <__libc_init_array+0x2e>
 80063e6:	bd70      	pop	{r4, r5, r6, pc}
 80063e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ec:	4798      	blx	r3
 80063ee:	3601      	adds	r6, #1
 80063f0:	e7ee      	b.n	80063d0 <__libc_init_array+0xc>
 80063f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f6:	4798      	blx	r3
 80063f8:	3601      	adds	r6, #1
 80063fa:	e7f2      	b.n	80063e2 <__libc_init_array+0x1e>
 80063fc:	08006618 	.word	0x08006618
 8006400:	08006618 	.word	0x08006618
 8006404:	08006618 	.word	0x08006618
 8006408:	0800661c 	.word	0x0800661c

0800640c <__retarget_lock_acquire_recursive>:
 800640c:	4770      	bx	lr

0800640e <__retarget_lock_release_recursive>:
 800640e:	4770      	bx	lr

08006410 <memcpy>:
 8006410:	440a      	add	r2, r1
 8006412:	4291      	cmp	r1, r2
 8006414:	f100 33ff 	add.w	r3, r0, #4294967295
 8006418:	d100      	bne.n	800641c <memcpy+0xc>
 800641a:	4770      	bx	lr
 800641c:	b510      	push	{r4, lr}
 800641e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006426:	4291      	cmp	r1, r2
 8006428:	d1f9      	bne.n	800641e <memcpy+0xe>
 800642a:	bd10      	pop	{r4, pc}

0800642c <_free_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4605      	mov	r5, r0
 8006430:	2900      	cmp	r1, #0
 8006432:	d041      	beq.n	80064b8 <_free_r+0x8c>
 8006434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006438:	1f0c      	subs	r4, r1, #4
 800643a:	2b00      	cmp	r3, #0
 800643c:	bfb8      	it	lt
 800643e:	18e4      	addlt	r4, r4, r3
 8006440:	f000 f83e 	bl	80064c0 <__malloc_lock>
 8006444:	4a1d      	ldr	r2, [pc, #116]	@ (80064bc <_free_r+0x90>)
 8006446:	6813      	ldr	r3, [r2, #0]
 8006448:	b933      	cbnz	r3, 8006458 <_free_r+0x2c>
 800644a:	6063      	str	r3, [r4, #4]
 800644c:	6014      	str	r4, [r2, #0]
 800644e:	4628      	mov	r0, r5
 8006450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006454:	f000 b83a 	b.w	80064cc <__malloc_unlock>
 8006458:	42a3      	cmp	r3, r4
 800645a:	d908      	bls.n	800646e <_free_r+0x42>
 800645c:	6820      	ldr	r0, [r4, #0]
 800645e:	1821      	adds	r1, r4, r0
 8006460:	428b      	cmp	r3, r1
 8006462:	bf01      	itttt	eq
 8006464:	6819      	ldreq	r1, [r3, #0]
 8006466:	685b      	ldreq	r3, [r3, #4]
 8006468:	1809      	addeq	r1, r1, r0
 800646a:	6021      	streq	r1, [r4, #0]
 800646c:	e7ed      	b.n	800644a <_free_r+0x1e>
 800646e:	461a      	mov	r2, r3
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	b10b      	cbz	r3, 8006478 <_free_r+0x4c>
 8006474:	42a3      	cmp	r3, r4
 8006476:	d9fa      	bls.n	800646e <_free_r+0x42>
 8006478:	6811      	ldr	r1, [r2, #0]
 800647a:	1850      	adds	r0, r2, r1
 800647c:	42a0      	cmp	r0, r4
 800647e:	d10b      	bne.n	8006498 <_free_r+0x6c>
 8006480:	6820      	ldr	r0, [r4, #0]
 8006482:	4401      	add	r1, r0
 8006484:	1850      	adds	r0, r2, r1
 8006486:	4283      	cmp	r3, r0
 8006488:	6011      	str	r1, [r2, #0]
 800648a:	d1e0      	bne.n	800644e <_free_r+0x22>
 800648c:	6818      	ldr	r0, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	6053      	str	r3, [r2, #4]
 8006492:	4408      	add	r0, r1
 8006494:	6010      	str	r0, [r2, #0]
 8006496:	e7da      	b.n	800644e <_free_r+0x22>
 8006498:	d902      	bls.n	80064a0 <_free_r+0x74>
 800649a:	230c      	movs	r3, #12
 800649c:	602b      	str	r3, [r5, #0]
 800649e:	e7d6      	b.n	800644e <_free_r+0x22>
 80064a0:	6820      	ldr	r0, [r4, #0]
 80064a2:	1821      	adds	r1, r4, r0
 80064a4:	428b      	cmp	r3, r1
 80064a6:	bf04      	itt	eq
 80064a8:	6819      	ldreq	r1, [r3, #0]
 80064aa:	685b      	ldreq	r3, [r3, #4]
 80064ac:	6063      	str	r3, [r4, #4]
 80064ae:	bf04      	itt	eq
 80064b0:	1809      	addeq	r1, r1, r0
 80064b2:	6021      	streq	r1, [r4, #0]
 80064b4:	6054      	str	r4, [r2, #4]
 80064b6:	e7ca      	b.n	800644e <_free_r+0x22>
 80064b8:	bd38      	pop	{r3, r4, r5, pc}
 80064ba:	bf00      	nop
 80064bc:	20001c74 	.word	0x20001c74

080064c0 <__malloc_lock>:
 80064c0:	4801      	ldr	r0, [pc, #4]	@ (80064c8 <__malloc_lock+0x8>)
 80064c2:	f7ff bfa3 	b.w	800640c <__retarget_lock_acquire_recursive>
 80064c6:	bf00      	nop
 80064c8:	20001c70 	.word	0x20001c70

080064cc <__malloc_unlock>:
 80064cc:	4801      	ldr	r0, [pc, #4]	@ (80064d4 <__malloc_unlock+0x8>)
 80064ce:	f7ff bf9e 	b.w	800640e <__retarget_lock_release_recursive>
 80064d2:	bf00      	nop
 80064d4:	20001c70 	.word	0x20001c70

080064d8 <_init>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	bf00      	nop
 80064dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064de:	bc08      	pop	{r3}
 80064e0:	469e      	mov	lr, r3
 80064e2:	4770      	bx	lr

080064e4 <_fini>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	bf00      	nop
 80064e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ea:	bc08      	pop	{r3}
 80064ec:	469e      	mov	lr, r3
 80064ee:	4770      	bx	lr
