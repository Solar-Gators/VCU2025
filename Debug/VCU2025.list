
VCU2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009900  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08009ab0  08009ab0  0000aab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bd8  08009bd8  0000b060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009bd8  08009bd8  0000b060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009bd8  08009bd8  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bd8  08009bd8  0000abd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009bdc  08009bdc  0000abdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009be0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ce4  20000060  08009c40  0000b060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d44  08009c40  0000bd44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef2c  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040fd  00000000  00000000  00029fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa0  00000000  00000000  0002e0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014a9  00000000  00000000  0002fb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bb48  00000000  00000000  00031009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001de9c  00000000  00000000  0005cb51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e55a  00000000  00000000  0007a9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00188f47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074d8  00000000  00000000  00188f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00190464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009a98 	.word	0x08009a98

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08009a98 	.word	0x08009a98

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2uiz>:
 800098c:	004a      	lsls	r2, r1, #1
 800098e:	d211      	bcs.n	80009b4 <__aeabi_d2uiz+0x28>
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000994:	d211      	bcs.n	80009ba <__aeabi_d2uiz+0x2e>
 8000996:	d50d      	bpl.n	80009b4 <__aeabi_d2uiz+0x28>
 8000998:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d40e      	bmi.n	80009c0 <__aeabi_d2uiz+0x34>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009be:	d102      	bne.n	80009c6 <__aeabi_d2uiz+0x3a>
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	0000      	movs	r0, r0
	...

08000a70 <INA226_Initialize>:
#include <INA226.h>
#include <stdio.h>
#include <math.h>

//Initialize INA226 Component using max current expected and resistance of shunt resistor.
HAL_StatusTypeDef  INA226_Initialize(INA226_t *dev, I2C_HandleTypeDef *i2cHandle, float maxCurrent, float shuntResistance ){
 8000a70:	b5b0      	push	{r4, r5, r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a7e:	edc7 0a00 	vstr	s1, [r7]
	dev->i2cHandle = i2cHandle;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	601a      	str	r2, [r3, #0]
	dev->config = 0;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	829a      	strh	r2, [r3, #20]
	dev->shuntVoltage = 0; //max is 81.92mV
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2200      	movs	r2, #0
 8000a92:	82da      	strh	r2, [r3, #22]
	dev->busVoltage = 0;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2200      	movs	r2, #0
 8000a98:	831a      	strh	r2, [r3, #24]
	dev->power = 0;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
	dev->current = 0;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f04f 0200 	mov.w	r2, #0
 8000aa8:	621a      	str	r2, [r3, #32]
	dev->calibration = 0;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f04f 0200 	mov.w	r2, #0
 8000ab0:	625a      	str	r2, [r3, #36]	@ 0x24

	//Current LSB = (Maximum Expected Current)/2^15
	dev->current_LSB = (maxCurrent) / pow(2, 15); // 10A
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff fd00 	bl	80004b8 <__aeabi_f2d>
 8000ab8:	f04f 0200 	mov.w	r2, #0
 8000abc:	4b46      	ldr	r3, [pc, #280]	@ (8000bd8 <INA226_Initialize+0x168>)
 8000abe:	f7ff fe7d 	bl	80007bc <__aeabi_ddiv>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	68f9      	ldr	r1, [r7, #12]
 8000ac8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	dev->rShunt = shuntResistance; //20 mOHM
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	611a      	str	r2, [r3, #16]

	//store # of errors to check for issues
	uint8_t errNum = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	75fb      	strb	r3, [r7, #23]


	//Check device manufacturing and DIE ID


	status = INA226_ReadRegister(dev,INA226_MANUF_ID_REG , &regData);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	461a      	mov	r2, r3
 8000adc:	21fe      	movs	r1, #254	@ 0xfe
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f000 f87c 	bl	8000bdc <INA226_ReadRegister>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	75bb      	strb	r3, [r7, #22]

	if(regData != INA226_MANUF_ID){
 8000ae8:	8abb      	ldrh	r3, [r7, #20]
 8000aea:	f245 4249 	movw	r2, #21577	@ 0x5449
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d001      	beq.n	8000af6 <INA226_Initialize+0x86>
		//leave since ID doesn't match
		return 255;
 8000af2:	23ff      	movs	r3, #255	@ 0xff
 8000af4:	e066      	b.n	8000bc4 <INA226_Initialize+0x154>
	}

	status = INA226_ReadRegister(dev,INA226_DIE_ID_REG, &regData);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	461a      	mov	r2, r3
 8000afc:	21ff      	movs	r1, #255	@ 0xff
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f000 f86c 	bl	8000bdc <INA226_ReadRegister>
 8000b04:	4603      	mov	r3, r0
 8000b06:	75bb      	strb	r3, [r7, #22]

	if(regData != INA226_DIE_ID){
 8000b08:	8abb      	ldrh	r3, [r7, #20]
 8000b0a:	f242 2260 	movw	r2, #8800	@ 0x2260
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d001      	beq.n	8000b16 <INA226_Initialize+0xa6>
		//leave since ID doesn't match
		return 255;
 8000b12:	23ff      	movs	r3, #255	@ 0xff
 8000b14:	e056      	b.n	8000bc4 <INA226_Initialize+0x154>

	//Configutation Register: Sets different measuring parameters (Page 22-23)
	  // Bit(B)15 -> reset, B11-B9 -> determines average # of samples taken, B8-6 -> Bus Voltage Conversion Time(CT)
	  // B5-B3 -> Shunt Voltage CT, B2-B0 -> Operating Mode (probing timeframe)

	status = INA226_ReadRegister(dev,INA226_CONFIG_REG , &regData);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f000 f85c 	bl	8000bdc <INA226_ReadRegister>
 8000b24:	4603      	mov	r3, r0
 8000b26:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 8000b28:	7dbb      	ldrb	r3, [r7, #22]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	bf14      	ite	ne
 8000b2e:	2301      	movne	r3, #1
 8000b30:	2300      	moveq	r3, #0
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	461a      	mov	r2, r3
 8000b36:	7dfb      	ldrb	r3, [r7, #23]
 8000b38:	4413      	add	r3, r2
 8000b3a:	75fb      	strb	r3, [r7, #23]
	dev->config = regData;
 8000b3c:	8aba      	ldrh	r2, [r7, #20]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	829a      	strh	r2, [r3, #20]


	//calibration register value (page 15)
	CAL = (0.00512)/(dev->current_LSB * shuntResistance);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000b48:	6838      	ldr	r0, [r7, #0]
 8000b4a:	f7ff fcb5 	bl	80004b8 <__aeabi_f2d>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	460b      	mov	r3, r1
 8000b52:	4620      	mov	r0, r4
 8000b54:	4629      	mov	r1, r5
 8000b56:	f7ff fd07 	bl	8000568 <__aeabi_dmul>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	a11c      	add	r1, pc, #112	@ (adr r1, 8000bd0 <INA226_Initialize+0x160>)
 8000b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b64:	f7ff fe2a 	bl	80007bc <__aeabi_ddiv>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f7ff ff0c 	bl	800098c <__aeabi_d2uiz>
 8000b74:	4603      	mov	r3, r0
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	827b      	strh	r3, [r7, #18]
	status = INA226_WriteRegister(dev, INA226_CALIB_REG, &CAL);
 8000b7a:	f107 0312 	add.w	r3, r7, #18
 8000b7e:	461a      	mov	r2, r3
 8000b80:	2105      	movs	r1, #5
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f000 f855 	bl	8000c32 <INA226_WriteRegister>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	75bb      	strb	r3, [r7, #22]
	status = INA226_ReadRegister(dev,INA226_CALIB_REG , &regData);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	461a      	mov	r2, r3
 8000b92:	2105      	movs	r1, #5
 8000b94:	68f8      	ldr	r0, [r7, #12]
 8000b96:	f000 f821 	bl	8000bdc <INA226_ReadRegister>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 8000b9e:	7dbb      	ldrb	r3, [r7, #22]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	bf14      	ite	ne
 8000ba4:	2301      	movne	r3, #1
 8000ba6:	2300      	moveq	r3, #0
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	461a      	mov	r2, r3
 8000bac:	7dfb      	ldrb	r3, [r7, #23]
 8000bae:	4413      	add	r3, r2
 8000bb0:	75fb      	strb	r3, [r7, #23]
	dev->calibration = regData;
 8000bb2:	8abb      	ldrh	r3, [r7, #20]
 8000bb4:	ee07 3a90 	vmov	s15, r3
 8000bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bdb0      	pop	{r4, r5, r7, pc}
 8000bcc:	f3af 8000 	nop.w
 8000bd0:	88e368f1 	.word	0x88e368f1
 8000bd4:	3f74f8b5 	.word	0x3f74f8b5
 8000bd8:	40e00000 	.word	0x40e00000

08000bdc <INA226_ReadRegister>:



//Low Level Functions

HAL_StatusTypeDef INA226_ReadRegister(INA226_t *dev, uint8_t reg, uint16_t *data){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af04      	add	r7, sp, #16
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	460b      	mov	r3, r1
 8000be6:	607a      	str	r2, [r7, #4]
 8000be8:	72fb      	strb	r3, [r7, #11]
    // Read 2 bytes (16 bits) from the register
	uint8_t temp[2];
	HAL_StatusTypeDef status;

    status = HAL_I2C_Mem_Read(dev->i2cHandle, INA226_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT,temp, 2, HAL_MAX_DELAY);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	7afb      	ldrb	r3, [r7, #11]
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	9302      	str	r3, [sp, #8]
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	9301      	str	r3, [sp, #4]
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2301      	movs	r3, #1
 8000c04:	2188      	movs	r1, #136	@ 0x88
 8000c06:	f003 f8f5 	bl	8003df4 <HAL_I2C_Mem_Read>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	75fb      	strb	r3, [r7, #23]
    //temp is full rn
    uint16_t alldata;

    //Index first, beacause it reads LSB first
    alldata = (uint16_t)temp[0];
 8000c0e:	7c3b      	ldrb	r3, [r7, #16]
 8000c10:	82bb      	strh	r3, [r7, #20]

    //shift regdata left 8 so # is xxxxxxxx00000000
    alldata = (alldata << 8);
 8000c12:	8abb      	ldrh	r3, [r7, #20]
 8000c14:	021b      	lsls	r3, r3, #8
 8000c16:	82bb      	strh	r3, [r7, #20]
    alldata = alldata | (uint16_t)temp[1];
 8000c18:	7c7b      	ldrb	r3, [r7, #17]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	8abb      	ldrh	r3, [r7, #20]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	82bb      	strh	r3, [r7, #20]
    *data = alldata;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	8aba      	ldrh	r2, [r7, #20]
 8000c26:	801a      	strh	r2, [r3, #0]
    return status;
 8000c28:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <INA226_WriteRegister>:

HAL_StatusTypeDef INA226_WriteRegister(INA226_t *dev, uint8_t reg, uint16_t *data){
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b08a      	sub	sp, #40	@ 0x28
 8000c36:	af04      	add	r7, sp, #16
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	72fb      	strb	r3, [r7, #11]
    // Write 2 bytes (16 bits) to the specified register
	uint16_t passData = ((*data >> 8) | (*data << 8));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	881b      	ldrh	r3, [r3, #0]
 8000c44:	0a1b      	lsrs	r3, r3, #8
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	b21b      	sxth	r3, r3
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	b21b      	sxth	r3, r3
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef status;



	//Pass in a pointer to the 16 bit # as an 8 bit pointer, but use length 2 to write 2 bits.
    status = HAL_I2C_Mem_Write(dev->i2cHandle, INA226_I2C_ADDR, (uint16_t)reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&passData, 2, HAL_MAX_DELAY);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6818      	ldr	r0, [r3, #0]
 8000c60:	7afb      	ldrb	r3, [r7, #11]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
 8000c68:	9302      	str	r3, [sp, #8]
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2301      	movs	r3, #1
 8000c76:	2188      	movs	r1, #136	@ 0x88
 8000c78:	f002 ffa8 	bl	8003bcc <HAL_I2C_Mem_Write>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	75fb      	strb	r3, [r7, #23]
    return status;
 8000c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	0000      	movs	r0, r0
 8000c8c:	0000      	movs	r0, r0
	...

08000c90 <getCurrentAmp>:

// return current value after multiplication
float getCurrentAmp(INA226_t *dev){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	uint16_t regData;
	float currentData;
	float rawVoltage;
	INA226_ReadRegister(dev, INA226_SHUNT_VOLT_REG, &regData);
 8000c98:	f107 030e 	add.w	r3, r7, #14
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff9b 	bl	8000bdc <INA226_ReadRegister>
	rawVoltage = (float)regData * 81.82 / 32768;
 8000ca6:	89fb      	ldrh	r3, [r7, #14]
 8000ca8:	ee07 3a90 	vmov	s15, r3
 8000cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cb0:	ee17 0a90 	vmov	r0, s15
 8000cb4:	f7ff fc00 	bl	80004b8 <__aeabi_f2d>
 8000cb8:	a321      	add	r3, pc, #132	@ (adr r3, 8000d40 <getCurrentAmp+0xb0>)
 8000cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cbe:	f7ff fc53 	bl	8000568 <__aeabi_dmul>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	4610      	mov	r0, r2
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f04f 0200 	mov.w	r2, #0
 8000cce:	4b1a      	ldr	r3, [pc, #104]	@ (8000d38 <getCurrentAmp+0xa8>)
 8000cd0:	f7ff fd74 	bl	80007bc <__aeabi_ddiv>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	460b      	mov	r3, r1
 8000cd8:	4610      	mov	r0, r2
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f7ff fe76 	bl	80009cc <__aeabi_d2f>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	617b      	str	r3, [r7, #20]
	currentData = ((rawVoltage/0.02)/1000); //mA to A
 8000ce4:	6978      	ldr	r0, [r7, #20]
 8000ce6:	f7ff fbe7 	bl	80004b8 <__aeabi_f2d>
 8000cea:	a311      	add	r3, pc, #68	@ (adr r3, 8000d30 <getCurrentAmp+0xa0>)
 8000cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf0:	f7ff fd64 	bl	80007bc <__aeabi_ddiv>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f04f 0200 	mov.w	r2, #0
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <getCurrentAmp+0xac>)
 8000d02:	f7ff fd5b 	bl	80007bc <__aeabi_ddiv>
 8000d06:	4602      	mov	r2, r0
 8000d08:	460b      	mov	r3, r1
 8000d0a:	4610      	mov	r0, r2
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f7ff fe5d 	bl	80009cc <__aeabi_d2f>
 8000d12:	4603      	mov	r3, r0
 8000d14:	613b      	str	r3, [r7, #16]
	dev->current = currentData;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	621a      	str	r2, [r3, #32]
	return currentData;
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	ee07 3a90 	vmov	s15, r3
}
 8000d22:	eeb0 0a67 	vmov.f32	s0, s15
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	f3af 8000 	nop.w
 8000d30:	47ae147b 	.word	0x47ae147b
 8000d34:	3f947ae1 	.word	0x3f947ae1
 8000d38:	40e00000 	.word	0x40e00000
 8000d3c:	408f4000 	.word	0x408f4000
 8000d40:	e147ae14 	.word	0xe147ae14
 8000d44:	4054747a 	.word	0x4054747a

08000d48 <getPowerWatt>:

// return power value after multiplication
float getPowerWatt(INA226_t *dev){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
	uint16_t regData;
	float rawBusVoltage;
	float powerData;
	INA226_ReadRegister(dev, INA226_BUS_VOLT_REG,&regData);
 8000d50:	f107 030e 	add.w	r3, r7, #14
 8000d54:	461a      	mov	r2, r3
 8000d56:	2102      	movs	r1, #2
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff3f 	bl	8000bdc <INA226_ReadRegister>
	rawBusVoltage = (float)regData * 40.96 / 32768;
 8000d5e:	89fb      	ldrh	r3, [r7, #14]
 8000d60:	ee07 3a90 	vmov	s15, r3
 8000d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d68:	ee17 0a90 	vmov	r0, s15
 8000d6c:	f7ff fba4 	bl	80004b8 <__aeabi_f2d>
 8000d70:	a314      	add	r3, pc, #80	@ (adr r3, 8000dc4 <getPowerWatt+0x7c>)
 8000d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d76:	f7ff fbf7 	bl	8000568 <__aeabi_dmul>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	4610      	mov	r0, r2
 8000d80:	4619      	mov	r1, r3
 8000d82:	f04f 0200 	mov.w	r2, #0
 8000d86:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <getPowerWatt+0x78>)
 8000d88:	f7ff fd18 	bl	80007bc <__aeabi_ddiv>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	4610      	mov	r0, r2
 8000d92:	4619      	mov	r1, r3
 8000d94:	f7ff fe1a 	bl	80009cc <__aeabi_d2f>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	617b      	str	r3, [r7, #20]
	powerData = (rawBusVoltage*dev->current);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	edd3 7a08 	vldr	s15, [r3, #32]
 8000da2:	ed97 7a05 	vldr	s14, [r7, #20]
 8000da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000daa:	edc7 7a04 	vstr	s15, [r7, #16]
	return powerData;
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	ee07 3a90 	vmov	s15, r3
}
 8000db4:	eeb0 0a67 	vmov.f32	s0, s15
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40e00000 	.word	0x40e00000
 8000dc4:	47ae147b 	.word	0x47ae147b
 8000dc8:	40447ae1 	.word	0x40447ae1

08000dcc <HAL_GPIO_EXTI_Callback>:
uint8_t TxData_status[8] = { 0 };
uint32_t TxMailbox_status = { 0 };

//CAN tranmission with kill_switch
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000dcc:	b5b0      	push	{r4, r5, r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == GPIO_PIN_13) {
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ddc:	d14e      	bne.n	8000e7c <HAL_GPIO_EXTI_Callback+0xb0>
		//OR current byte 1 to show enable the kill switch

    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == RESET) {
 8000dde:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000de2:	4828      	ldr	r0, [pc, #160]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000de4:	f002 fdf4 	bl	80039d0 <HAL_GPIO_ReadPin>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d110      	bne.n	8000e10 <HAL_GPIO_EXTI_Callback+0x44>
      kill_switch = true;
 8000dee:	4b26      	ldr	r3, [pc, #152]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
      TxData_status[1] |= (1 << 5); // Bit 5 = Kill switch enabled
 8000df4:	4b25      	ldr	r3, [pc, #148]	@ (8000e8c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000df6:	785b      	ldrb	r3, [r3, #1]
 8000df8:	f043 0320 	orr.w	r3, r3, #32
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000e00:	705a      	strb	r2, [r3, #1]
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, SET); // Turn on kill switch LED
 8000e02:	2201      	movs	r2, #1
 8000e04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e08:	481e      	ldr	r0, [pc, #120]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000e0a:	f002 fdf9 	bl	8003a00 <HAL_GPIO_WritePin>
 8000e0e:	e00f      	b.n	8000e30 <HAL_GPIO_EXTI_Callback+0x64>
    }
    else {
      kill_switch = false;
 8000e10:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
      TxData_status[1] &= ~(1 << 5); // Bit 5 = Kill switch disabled
 8000e16:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000e18:	785b      	ldrb	r3, [r3, #1]
 8000e1a:	f023 0320 	bic.w	r3, r3, #32
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000e22:	705a      	strb	r2, [r3, #1]
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, RESET); // Turn off kill switch LED
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e2a:	4816      	ldr	r0, [pc, #88]	@ (8000e84 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000e2c:	f002 fde8 	bl	8003a00 <HAL_GPIO_WritePin>
    }

		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8000e30:	bf00      	nop
 8000e32:	4817      	ldr	r0, [pc, #92]	@ (8000e90 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000e34:	f001 fd82 	bl	800293c <HAL_CAN_GetTxMailboxesFreeLevel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0f9      	beq.n	8000e32 <HAL_GPIO_EXTI_Callback+0x66>
		HAL_StatusTypeDef status;
		status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader_status, TxData_status, &TxMailbox_status);
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000e40:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000e42:	4915      	ldr	r1, [pc, #84]	@ (8000e98 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000e44:	4812      	ldr	r0, [pc, #72]	@ (8000e90 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000e46:	f001 fca9 	bl	800279c <HAL_CAN_AddTxMessage>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	73fb      	strb	r3, [r7, #15]
		messages_sent++;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	@ (8000e9c <HAL_GPIO_EXTI_Callback+0xd0>)
 8000e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e54:	1c54      	adds	r4, r2, #1
 8000e56:	f143 0500 	adc.w	r5, r3, #0
 8000e5a:	4b10      	ldr	r3, [pc, #64]	@ (8000e9c <HAL_GPIO_EXTI_Callback+0xd0>)
 8000e5c:	e9c3 4500 	strd	r4, r5, [r3]
		if (status == HAL_ERROR){
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d102      	bne.n	8000e6c <HAL_GPIO_EXTI_Callback+0xa0>
			Error_Handler();
 8000e66:	f000 ff29 	bl	8001cbc <Error_Handler>
		else if(status == HAL_BUSY){
			HAL_CAN_BUSY++;
		}

	}
}
 8000e6a:	e007      	b.n	8000e7c <HAL_GPIO_EXTI_Callback+0xb0>
		else if(status == HAL_BUSY){
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d104      	bne.n	8000e7c <HAL_GPIO_EXTI_Callback+0xb0>
			HAL_CAN_BUSY++;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	4a09      	ldr	r2, [pc, #36]	@ (8000ea0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bdb0      	pop	{r4, r5, r7, pc}
 8000e84:	48000800 	.word	0x48000800
 8000e88:	200001a5 	.word	0x200001a5
 8000e8c:	200001d8 	.word	0x200001d8
 8000e90:	2000007c 	.word	0x2000007c
 8000e94:	200001e0 	.word	0x200001e0
 8000e98:	200001c0 	.word	0x200001c0
 8000e9c:	200001b8 	.word	0x200001b8
 8000ea0:	200001b4 	.word	0x200001b4

08000ea4 <HAL_CAN_RxFifo0MsgPendingCallback>:

// Can reception
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	@ 0x30
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint8_t RxData[8] = { 0 };  // Array to store the received data
 8000eac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
  CAN_RxHeaderTypeDef RxHeader;
  if (HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000eb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000eba:	f107 020c 	add.w	r2, r7, #12
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f001 fd70 	bl	80029a6 <HAL_CAN_GetRxMessage>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
  {
    Error_Handler();
 8000ecc:	f000 fef6 	bl	8001cbc <Error_Handler>
  }
  if (RxHeader.StdId == 0x000 && RxHeader.IDE == CAN_ID_STD)
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d118      	bne.n	8000f08 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d115      	bne.n	8000f08 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
  {
	  if (RxData[0] == 0) {
 8000edc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d111      	bne.n	8000f08 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
      last_throttle_recieved_tick = HAL_GetTick();
 8000ee4:	f001 fa0a 	bl	80022fc <HAL_GetTick>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a6b      	ldr	r2, [pc, #428]	@ (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8000eec:	6013      	str	r3, [r2, #0]
		  throttle = (uint16_t)RxData[2]<<8 | RxData[1];
 8000eee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000ef2:	b21b      	sxth	r3, r3
 8000ef4:	021b      	lsls	r3, r3, #8
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b21b      	sxth	r3, r3
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b65      	ldr	r3, [pc, #404]	@ (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8000f06:	801a      	strh	r2, [r3, #0]
	  }
  }
  if (RxHeader.StdId == 0x7FF && RxHeader.IDE == CAN_ID_STD) {
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	f040 80be 	bne.w	8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f040 80ba 	bne.w	8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
	  if(RxData[0] == 1){
 8000f1c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	f040 80b5 	bne.w	8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
		  //byte 1
		  //ignition switch
		  if((RxData[1] & 0x01) != 0x00){
 8000f26:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
			  ignition_switch = true;
 8000f32:	4b5b      	ldr	r3, [pc, #364]	@ (80010a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
 8000f38:	e002      	b.n	8000f40 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
		  }
		  else{
			  ignition_switch = false;
 8000f3a:	4b59      	ldr	r3, [pc, #356]	@ (80010a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x02) != 0x00){
 8000f40:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000f44:	f003 0302 	and.w	r3, r3, #2
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
			  brakes_active = true; // turn brakes on
 8000f4c:	4b55      	ldr	r3, [pc, #340]	@ (80010a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
 8000f52:	e002      	b.n	8000f5a <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
		  }else{
			  brakes_active = false; // turn breaks off
 8000f54:	4b53      	ldr	r3, [pc, #332]	@ (80010a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x20) != 0x00){
 8000f5a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_CAN_RxFifo0MsgPendingCallback+0xca>
			  direction = true; //Forward
 8000f66:	4b50      	ldr	r3, [pc, #320]	@ (80010a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
 8000f6c:	e002      	b.n	8000f74 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
		  }else{
			  direction = false; // Reverse
 8000f6e:	4b4e      	ldr	r3, [pc, #312]	@ (80010a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x10) != 0x00){
 8000f74:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000f78:	f003 0310 	and.w	r3, r3, #16
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>
			  mc_main_ctrl = true;
 8000f80:	4b4a      	ldr	r3, [pc, #296]	@ (80010ac <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	e002      	b.n	8000f8e <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
		  }else{
			  mc_main_ctrl = false;
 8000f88:	4b48      	ldr	r3, [pc, #288]	@ (80010ac <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[1] & 0x04) != 0x00){
 8000f8e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00c      	beq.n	8000fb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
			  array = true;
 8000f9a:	4b45      	ldr	r3, [pc, #276]	@ (80010b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
        if (array != old_array) {
 8000fa0:	4b43      	ldr	r3, [pc, #268]	@ (80010b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000fa2:	781a      	ldrb	r2, [r3, #0]
 8000fa4:	4b43      	ldr	r3, [pc, #268]	@ (80010b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d00f      	beq.n	8000fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
          start_array_process = true;
 8000fac:	4b42      	ldr	r3, [pc, #264]	@ (80010b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	e00b      	b.n	8000fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
        }
		  }else{
			  array = false;
 8000fb4:	4b3e      	ldr	r3, [pc, #248]	@ (80010b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
        if (array != old_array) {
 8000fba:	4b3d      	ldr	r3, [pc, #244]	@ (80010b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000fbc:	781a      	ldrb	r2, [r3, #0]
 8000fbe:	4b3d      	ldr	r3, [pc, #244]	@ (80010b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d002      	beq.n	8000fcc <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
          start_array_process = true;
 8000fc6:	4b3c      	ldr	r3, [pc, #240]	@ (80010b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
        }
		  }
      old_array = array;
 8000fcc:	4b38      	ldr	r3, [pc, #224]	@ (80010b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8000fce:	781a      	ldrb	r2, [r3, #0]
 8000fd0:	4b38      	ldr	r3, [pc, #224]	@ (80010b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000fd2:	701a      	strb	r2, [r3, #0]

		  //byte #2
		  if((RxData[2] & 0x01) != 0x00){
 8000fd4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d010      	beq.n	8001002 <HAL_CAN_RxFifo0MsgPendingCallback+0x15e>
			  if (blinkers_active != true) {
 8000fe0:	4b36      	ldr	r3, [pc, #216]	@ (80010bc <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	f083 0301 	eor.w	r3, r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d005      	beq.n	8000ffa <HAL_CAN_RxFifo0MsgPendingCallback+0x156>
				  blinkers_active = true;
 8000fee:	4b33      	ldr	r3, [pc, #204]	@ (80010bc <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 8000ff4:	4b32      	ldr	r3, [pc, #200]	@ (80010c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
			  }
			  blinkers_active = true; // turn brakes on
 8000ffa:	4b30      	ldr	r3, [pc, #192]	@ (80010bc <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
 8001000:	e002      	b.n	8001008 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>

		  }else{
			  blinkers_active = false;
 8001002:	4b2e      	ldr	r3, [pc, #184]	@ (80010bc <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[2] & 0x02) != 0x00){
 8001008:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d010      	beq.n	8001036 <HAL_CAN_RxFifo0MsgPendingCallback+0x192>
			  if (left_turn_active != true) {
 8001014:	4b2b      	ldr	r3, [pc, #172]	@ (80010c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	f083 0301 	eor.w	r3, r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d005      	beq.n	800102e <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
				  left_turn_active = true;
 8001022:	4b28      	ldr	r3, [pc, #160]	@ (80010c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 8001028:	4b25      	ldr	r3, [pc, #148]	@ (80010c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
			  }
			  left_turn_active = true; // turn brakes on
 800102e:	4b25      	ldr	r3, [pc, #148]	@ (80010c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]
 8001034:	e002      	b.n	800103c <HAL_CAN_RxFifo0MsgPendingCallback+0x198>


		  }else{
			  left_turn_active = false; // turn brakes off
 8001036:	4b23      	ldr	r3, [pc, #140]	@ (80010c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
		  }

		  if((RxData[2] & 0x04) != 0x00){
 800103c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d013      	beq.n	8001070 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>
			  if(right_turn_active != true){
 8001048:	4b1f      	ldr	r3, [pc, #124]	@ (80010c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	f083 0301 	eor.w	r3, r3, #1
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d008      	beq.n	8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>
				  right_turn_active = true; // Turn on right
 8001056:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8001058:	2201      	movs	r2, #1
 800105a:	701a      	strb	r2, [r3, #0]
				  left_turn_active = false; //Turn off left
 800105c:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
				  signal_counter = 0;
 8001062:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
			  }
			  right_turn_active = true;
 8001068:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 800106a:	2201      	movs	r2, #1
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	e002      	b.n	8001076 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d2>
		  }else{
			  right_turn_active = false;
 8001070:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
		  }

      if((RxData[2] & 0x10) != 0x00){
 8001076:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800107a:	f003 0310 	and.w	r3, r3, #16
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e6>
        regen_enable = 1;
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 8001084:	2201      	movs	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
        regen_enable = 0;
      }

	  }
  }
}
 8001088:	e002      	b.n	8001090 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
        regen_enable = 0;
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800108c:	2200      	movs	r2, #0
 800108e:	701a      	strb	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	3730      	adds	r7, #48	@ 0x30
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000198 	.word	0x20000198
 800109c:	20000190 	.word	0x20000190
 80010a0:	200001a0 	.word	0x200001a0
 80010a4:	2000019c 	.word	0x2000019c
 80010a8:	200001a1 	.word	0x200001a1
 80010ac:	200001a2 	.word	0x200001a2
 80010b0:	200001a3 	.word	0x200001a3
 80010b4:	200001a4 	.word	0x200001a4
 80010b8:	200001a6 	.word	0x200001a6
 80010bc:	2000019d 	.word	0x2000019d
 80010c0:	200001b0 	.word	0x200001b0
 80010c4:	2000019e 	.word	0x2000019e
 80010c8:	2000019f 	.word	0x2000019f
 80010cc:	20000194 	.word	0x20000194

080010d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

  brakes_active = false;
 80010d4:	4b4d      	ldr	r3, [pc, #308]	@ (800120c <main+0x13c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
  blinkers_active = false;
 80010da:	4b4d      	ldr	r3, [pc, #308]	@ (8001210 <main+0x140>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
  left_turn_active = false;
 80010e0:	4b4c      	ldr	r3, [pc, #304]	@ (8001214 <main+0x144>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
  right_turn_active = true;
 80010e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001218 <main+0x148>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]


  direction = false;
 80010ec:	4b4b      	ldr	r3, [pc, #300]	@ (800121c <main+0x14c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
  mc_pwreco_ctrl = false;
 80010f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001220 <main+0x150>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
  mc_main_ctrl = false;
 80010f8:	4b4a      	ldr	r3, [pc, #296]	@ (8001224 <main+0x154>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
  array = false;
 80010fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001228 <main+0x158>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001104:	f001 f8cd 	bl	80022a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001108:	f000 f8b6 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110c:	f000 fa8e 	bl	800162c <MX_GPIO_Init>
  MX_DAC1_Init();
 8001110:	f000 f980 	bl	8001414 <MX_DAC1_Init>
  MX_CAN1_Init();
 8001114:	f000 f8f6 	bl	8001304 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001118:	f000 f946 	bl	80013a8 <MX_CAN2_Init>
  MX_TIM1_Init();
 800111c:	f000 f9f6 	bl	800150c <MX_TIM1_Init>
  MX_I2C2_Init();
 8001120:	f000 f9b4 	bl	800148c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8001124:	4841      	ldr	r0, [pc, #260]	@ (800122c <main+0x15c>)
 8001126:	f001 faf5 	bl	8002714 <HAL_CAN_Start>

  //intalize can RX interupt
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800112a:	2102      	movs	r1, #2
 800112c:	483f      	ldr	r0, [pc, #252]	@ (800122c <main+0x15c>)
 800112e:	f001 fd5c 	bl	8002bea <HAL_CAN_ActivateNotification>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <main+0x6c>
  {
	  Error_Handler();
 8001138:	f000 fdc0 	bl	8001cbc <Error_Handler>
  }

  TxHeader_status.IDE = CAN_ID_STD; // Standard ID (not extended)
 800113c:	4b3c      	ldr	r3, [pc, #240]	@ (8001230 <main+0x160>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  TxHeader_status.StdId = 0x02; // 11 bit Identifier
 8001142:	4b3b      	ldr	r3, [pc, #236]	@ (8001230 <main+0x160>)
 8001144:	2202      	movs	r2, #2
 8001146:	601a      	str	r2, [r3, #0]
  TxData_status[0] = 0x02; // 0x02 is the ID for the status message
 8001148:	4b3a      	ldr	r3, [pc, #232]	@ (8001234 <main+0x164>)
 800114a:	2202      	movs	r2, #2
 800114c:	701a      	strb	r2, [r3, #0]
  TxHeader_status.RTR = CAN_RTR_DATA; // Std RTR Data frame
 800114e:	4b38      	ldr	r3, [pc, #224]	@ (8001230 <main+0x160>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  TxHeader_status.DLC = 8; // 8 bytes being transmitted
 8001154:	4b36      	ldr	r3, [pc, #216]	@ (8001230 <main+0x160>)
 8001156:	2208      	movs	r2, #8
 8001158:	611a      	str	r2, [r3, #16]

  if(INA226_Initialize(&INA226_IVP, &hi2c2, 10, 20) != HAL_OK){ Error_Handler();}
 800115a:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800115e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8001162:	4935      	ldr	r1, [pc, #212]	@ (8001238 <main+0x168>)
 8001164:	4835      	ldr	r0, [pc, #212]	@ (800123c <main+0x16c>)
 8001166:	f7ff fc83 	bl	8000a70 <INA226_Initialize>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <main+0xa4>
 8001170:	f000 fda4 	bl	8001cbc <Error_Handler>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	2104      	movs	r1, #4
 8001178:	4831      	ldr	r0, [pc, #196]	@ (8001240 <main+0x170>)
 800117a:	f002 fc41 	bl	8003a00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2108      	movs	r1, #8
 8001182:	482f      	ldr	r0, [pc, #188]	@ (8001240 <main+0x170>)
 8001184:	f002 fc3c 	bl	8003a00 <HAL_GPIO_WritePin>

  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == RESET) {
 8001188:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800118c:	482c      	ldr	r0, [pc, #176]	@ (8001240 <main+0x170>)
 800118e:	f002 fc1f 	bl	80039d0 <HAL_GPIO_ReadPin>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d109      	bne.n	80011ac <main+0xdc>
    kill_switch = true;
 8001198:	4b2a      	ldr	r3, [pc, #168]	@ (8001244 <main+0x174>)
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, SET); // Turn on kill switch LED
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011a4:	4826      	ldr	r0, [pc, #152]	@ (8001240 <main+0x170>)
 80011a6:	f002 fc2b 	bl	8003a00 <HAL_GPIO_WritePin>
 80011aa:	e008      	b.n	80011be <main+0xee>
  }
  else {
    kill_switch = false;
 80011ac:	4b25      	ldr	r3, [pc, #148]	@ (8001244 <main+0x174>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, RESET); // Turn off kill switch LED
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011b8:	4821      	ldr	r0, [pc, #132]	@ (8001240 <main+0x170>)
 80011ba:	f002 fc21 	bl	8003a00 <HAL_GPIO_WritePin>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011be:	f005 fdcb 	bl	8006d58 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HeartBeat */
  HeartBeatHandle = osThreadNew(Heart_Beat, NULL, &HeartBeat_attributes);
 80011c2:	4a21      	ldr	r2, [pc, #132]	@ (8001248 <main+0x178>)
 80011c4:	2100      	movs	r1, #0
 80011c6:	4821      	ldr	r0, [pc, #132]	@ (800124c <main+0x17c>)
 80011c8:	f005 fe10 	bl	8006dec <osThreadNew>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a20      	ldr	r2, [pc, #128]	@ (8001250 <main+0x180>)
 80011d0:	6013      	str	r3, [r2, #0]

  /* creation of UpdateThrottle */
  UpdateThrottleHandle = osThreadNew(Update_Throttle, NULL, &UpdateThrottle_attributes);
 80011d2:	4a20      	ldr	r2, [pc, #128]	@ (8001254 <main+0x184>)
 80011d4:	2100      	movs	r1, #0
 80011d6:	4820      	ldr	r0, [pc, #128]	@ (8001258 <main+0x188>)
 80011d8:	f005 fe08 	bl	8006dec <osThreadNew>
 80011dc:	4603      	mov	r3, r0
 80011de:	4a1f      	ldr	r2, [pc, #124]	@ (800125c <main+0x18c>)
 80011e0:	6013      	str	r3, [r2, #0]

  /* creation of LightsControl */
  LightsControlHandle = osThreadNew(Lights_Control, NULL, &LightsControl_attributes);
 80011e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001260 <main+0x190>)
 80011e4:	2100      	movs	r1, #0
 80011e6:	481f      	ldr	r0, [pc, #124]	@ (8001264 <main+0x194>)
 80011e8:	f005 fe00 	bl	8006dec <osThreadNew>
 80011ec:	4603      	mov	r3, r0
 80011ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001268 <main+0x198>)
 80011f0:	6013      	str	r3, [r2, #0]

  /* creation of ReadSensors */
  ReadSensorsHandle = osThreadNew(Read_Sensors, NULL, &ReadSensors_attributes);
 80011f2:	4a1e      	ldr	r2, [pc, #120]	@ (800126c <main+0x19c>)
 80011f4:	2100      	movs	r1, #0
 80011f6:	481e      	ldr	r0, [pc, #120]	@ (8001270 <main+0x1a0>)
 80011f8:	f005 fdf8 	bl	8006dec <osThreadNew>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001274 <main+0x1a4>)
 8001200:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001202:	f005 fdcd 	bl	8006da0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001206:	bf00      	nop
 8001208:	e7fd      	b.n	8001206 <main+0x136>
 800120a:	bf00      	nop
 800120c:	2000019c 	.word	0x2000019c
 8001210:	2000019d 	.word	0x2000019d
 8001214:	2000019e 	.word	0x2000019e
 8001218:	2000019f 	.word	0x2000019f
 800121c:	200001a1 	.word	0x200001a1
 8001220:	200001ac 	.word	0x200001ac
 8001224:	200001a2 	.word	0x200001a2
 8001228:	200001a3 	.word	0x200001a3
 800122c:	2000007c 	.word	0x2000007c
 8001230:	200001c0 	.word	0x200001c0
 8001234:	200001d8 	.word	0x200001d8
 8001238:	200000e0 	.word	0x200000e0
 800123c:	200001e8 	.word	0x200001e8
 8001240:	48000800 	.word	0x48000800
 8001244:	200001a5 	.word	0x200001a5
 8001248:	08009b00 	.word	0x08009b00
 800124c:	08001755 	.word	0x08001755
 8001250:	20000180 	.word	0x20000180
 8001254:	08009b24 	.word	0x08009b24
 8001258:	08001779 	.word	0x08001779
 800125c:	20000184 	.word	0x20000184
 8001260:	08009b48 	.word	0x08009b48
 8001264:	08001965 	.word	0x08001965
 8001268:	20000188 	.word	0x20000188
 800126c:	08009b6c 	.word	0x08009b6c
 8001270:	08001ae5 	.word	0x08001ae5
 8001274:	2000018c 	.word	0x2000018c

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b096      	sub	sp, #88	@ 0x58
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	2244      	movs	r2, #68	@ 0x44
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f008 fb16 	bl	80098b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	463b      	mov	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800129a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800129e:	f003 fa2b 	bl	80046f8 <HAL_PWREx_ControlVoltageScaling>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012a8:	f000 fd08 	bl	8001cbc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012ac:	2310      	movs	r3, #16
 80012ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80012b8:	2360      	movs	r3, #96	@ 0x60
 80012ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012bc:	2300      	movs	r3, #0
 80012be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4618      	mov	r0, r3
 80012c6:	f003 fa6d 	bl	80047a4 <HAL_RCC_OscConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80012d0:	f000 fcf4 	bl	8001cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d4:	230f      	movs	r3, #15
 80012d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012e8:	463b      	mov	r3, r7
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 fe73 	bl	8004fd8 <HAL_RCC_ClockConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012f8:	f000 fce0 	bl	8001cbc <Error_Handler>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3758      	adds	r7, #88	@ 0x58
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	@ 0x28
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800130a:	4b25      	ldr	r3, [pc, #148]	@ (80013a0 <MX_CAN1_Init+0x9c>)
 800130c:	4a25      	ldr	r2, [pc, #148]	@ (80013a4 <MX_CAN1_Init+0xa0>)
 800130e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8001310:	4b23      	ldr	r3, [pc, #140]	@ (80013a0 <MX_CAN1_Init+0x9c>)
 8001312:	2202      	movs	r2, #2
 8001314:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001316:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <MX_CAN1_Init+0x9c>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800131c:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <MX_CAN1_Init+0x9c>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001322:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <MX_CAN1_Init+0x9c>)
 8001324:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001328:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800132a:	4b1d      	ldr	r3, [pc, #116]	@ (80013a0 <MX_CAN1_Init+0x9c>)
 800132c:	2200      	movs	r2, #0
 800132e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001330:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <MX_CAN1_Init+0x9c>)
 8001332:	2200      	movs	r2, #0
 8001334:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001336:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <MX_CAN1_Init+0x9c>)
 8001338:	2200      	movs	r2, #0
 800133a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800133c:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <MX_CAN1_Init+0x9c>)
 800133e:	2200      	movs	r2, #0
 8001340:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <MX_CAN1_Init+0x9c>)
 8001344:	2200      	movs	r2, #0
 8001346:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <MX_CAN1_Init+0x9c>)
 800134a:	2200      	movs	r2, #0
 800134c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800134e:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <MX_CAN1_Init+0x9c>)
 8001350:	2200      	movs	r2, #0
 8001352:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001354:	4812      	ldr	r0, [pc, #72]	@ (80013a0 <MX_CAN1_Init+0x9c>)
 8001356:	f001 f801 	bl	800235c <HAL_CAN_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001360:	f000 fcac 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001364:	2301      	movs	r3, #1
 8001366:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8001368:	2312      	movs	r3, #18
 800136a:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x000<<5;
 8001370:	2300      	movs	r3, #0
 8001372:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x000<<5;
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001384:	2301      	movs	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8001388:	2314      	movs	r3, #20
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800138c:	463b      	mov	r3, r7
 800138e:	4619      	mov	r1, r3
 8001390:	4803      	ldr	r0, [pc, #12]	@ (80013a0 <MX_CAN1_Init+0x9c>)
 8001392:	f001 f8df 	bl	8002554 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	@ 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	2000007c 	.word	0x2000007c
 80013a4:	40006400 	.word	0x40006400

080013a8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80013ac:	4b17      	ldr	r3, [pc, #92]	@ (800140c <MX_CAN2_Init+0x64>)
 80013ae:	4a18      	ldr	r2, [pc, #96]	@ (8001410 <MX_CAN2_Init+0x68>)
 80013b0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 2;
 80013b2:	4b16      	ldr	r3, [pc, #88]	@ (800140c <MX_CAN2_Init+0x64>)
 80013b4:	2202      	movs	r2, #2
 80013b6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80013b8:	4b14      	ldr	r3, [pc, #80]	@ (800140c <MX_CAN2_Init+0x64>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013be:	4b13      	ldr	r3, [pc, #76]	@ (800140c <MX_CAN2_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <MX_CAN2_Init+0x64>)
 80013c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013ca:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	@ (800140c <MX_CAN2_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <MX_CAN2_Init+0x64>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <MX_CAN2_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <MX_CAN2_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <MX_CAN2_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <MX_CAN2_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <MX_CAN2_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_CAN2_Init+0x64>)
 80013f8:	f000 ffb0 	bl	800235c <HAL_CAN_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8001402:	f000 fc5b 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200000a4 	.word	0x200000a4
 8001410:	40006800 	.word	0x40006800

08001414 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	@ 0x28
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2224      	movs	r2, #36	@ 0x24
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f008 fa49 	bl	80098b8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001426:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <MX_DAC1_Init+0x70>)
 8001428:	4a17      	ldr	r2, [pc, #92]	@ (8001488 <MX_DAC1_Init+0x74>)
 800142a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800142c:	4815      	ldr	r0, [pc, #84]	@ (8001484 <MX_DAC1_Init+0x70>)
 800142e:	f001 ff13 	bl	8003258 <HAL_DAC_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001438:	f000 fc40 	bl	8001cbc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	2200      	movs	r2, #0
 8001454:	4619      	mov	r1, r3
 8001456:	480b      	ldr	r0, [pc, #44]	@ (8001484 <MX_DAC1_Init+0x70>)
 8001458:	f001 fff6 	bl	8003448 <HAL_DAC_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001462:	f000 fc2b 	bl	8001cbc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	2210      	movs	r2, #16
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	@ (8001484 <MX_DAC1_Init+0x70>)
 800146e:	f001 ffeb 	bl	8003448 <HAL_DAC_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8001478:	f000 fc20 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	3728      	adds	r7, #40	@ 0x28
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200000cc 	.word	0x200000cc
 8001488:	40007400 	.word	0x40007400

0800148c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001490:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <MX_I2C2_Init+0x74>)
 8001492:	4a1c      	ldr	r2, [pc, #112]	@ (8001504 <MX_I2C2_Init+0x78>)
 8001494:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 8001496:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <MX_I2C2_Init+0x74>)
 8001498:	4a1b      	ldr	r2, [pc, #108]	@ (8001508 <MX_I2C2_Init+0x7c>)
 800149a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800149c:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <MX_I2C2_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014a2:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <MX_I2C2_Init+0x74>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a8:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <MX_I2C2_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014ae:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <MX_I2C2_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <MX_I2C2_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ba:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <MX_I2C2_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <MX_I2C2_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014c6:	480e      	ldr	r0, [pc, #56]	@ (8001500 <MX_I2C2_Init+0x74>)
 80014c8:	f002 fae4 	bl	8003a94 <HAL_I2C_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80014d2:	f000 fbf3 	bl	8001cbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014d6:	2100      	movs	r1, #0
 80014d8:	4809      	ldr	r0, [pc, #36]	@ (8001500 <MX_I2C2_Init+0x74>)
 80014da:	f003 f867 	bl	80045ac <HAL_I2CEx_ConfigAnalogFilter>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80014e4:	f000 fbea 	bl	8001cbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014e8:	2100      	movs	r1, #0
 80014ea:	4805      	ldr	r0, [pc, #20]	@ (8001500 <MX_I2C2_Init+0x74>)
 80014ec:	f003 f8a9 	bl	8004642 <HAL_I2CEx_ConfigDigitalFilter>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80014f6:	f000 fbe1 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200000e0 	.word	0x200000e0
 8001504:	40005800 	.word	0x40005800
 8001508:	00100d14 	.word	0x00100d14

0800150c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b096      	sub	sp, #88	@ 0x58
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001512:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	615a      	str	r2, [r3, #20]
 8001530:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	222c      	movs	r2, #44	@ 0x2c
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f008 f9bd 	bl	80098b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800153e:	4b39      	ldr	r3, [pc, #228]	@ (8001624 <MX_TIM1_Init+0x118>)
 8001540:	4a39      	ldr	r2, [pc, #228]	@ (8001628 <MX_TIM1_Init+0x11c>)
 8001542:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001544:	4b37      	ldr	r3, [pc, #220]	@ (8001624 <MX_TIM1_Init+0x118>)
 8001546:	2200      	movs	r2, #0
 8001548:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	4b36      	ldr	r3, [pc, #216]	@ (8001624 <MX_TIM1_Init+0x118>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001550:	4b34      	ldr	r3, [pc, #208]	@ (8001624 <MX_TIM1_Init+0x118>)
 8001552:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001556:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001558:	4b32      	ldr	r3, [pc, #200]	@ (8001624 <MX_TIM1_Init+0x118>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800155e:	4b31      	ldr	r3, [pc, #196]	@ (8001624 <MX_TIM1_Init+0x118>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001564:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <MX_TIM1_Init+0x118>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800156a:	482e      	ldr	r0, [pc, #184]	@ (8001624 <MX_TIM1_Init+0x118>)
 800156c:	f004 fd10 	bl	8005f90 <HAL_TIM_OC_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001576:	f000 fba1 	bl	8001cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001586:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800158a:	4619      	mov	r1, r3
 800158c:	4825      	ldr	r0, [pc, #148]	@ (8001624 <MX_TIM1_Init+0x118>)
 800158e:	f005 fa7b 	bl	8006a88 <HAL_TIMEx_MasterConfigSynchronization>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001598:	f000 fb90 	bl	8001cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800159c:	2300      	movs	r3, #0
 800159e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 100;
 80015a0:	2364      	movs	r3, #100	@ 0x64
 80015a2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a4:	2300      	movs	r3, #0
 80015a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015a8:	2300      	movs	r3, #0
 80015aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80015bc:	2200      	movs	r2, #0
 80015be:	4619      	mov	r1, r3
 80015c0:	4818      	ldr	r0, [pc, #96]	@ (8001624 <MX_TIM1_Init+0x118>)
 80015c2:	f004 fe43 	bl	800624c <HAL_TIM_OC_ConfigChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015cc:	f000 fb76 	bl	8001cbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4807      	ldr	r0, [pc, #28]	@ (8001624 <MX_TIM1_Init+0x118>)
 8001606:	f005 fac7 	bl	8006b98 <HAL_TIMEx_ConfigBreakDeadTime>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001610:	f000 fb54 	bl	8001cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001614:	4803      	ldr	r0, [pc, #12]	@ (8001624 <MX_TIM1_Init+0x118>)
 8001616:	f000 fd09 	bl	800202c <HAL_TIM_MspPostInit>

}
 800161a:	bf00      	nop
 800161c:	3758      	adds	r7, #88	@ 0x58
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000134 	.word	0x20000134
 8001628:	40012c00 	.word	0x40012c00

0800162c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001642:	4b41      	ldr	r3, [pc, #260]	@ (8001748 <MX_GPIO_Init+0x11c>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001646:	4a40      	ldr	r2, [pc, #256]	@ (8001748 <MX_GPIO_Init+0x11c>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164e:	4b3e      	ldr	r3, [pc, #248]	@ (8001748 <MX_GPIO_Init+0x11c>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165a:	4b3b      	ldr	r3, [pc, #236]	@ (8001748 <MX_GPIO_Init+0x11c>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165e:	4a3a      	ldr	r2, [pc, #232]	@ (8001748 <MX_GPIO_Init+0x11c>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001666:	4b38      	ldr	r3, [pc, #224]	@ (8001748 <MX_GPIO_Init+0x11c>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	4b35      	ldr	r3, [pc, #212]	@ (8001748 <MX_GPIO_Init+0x11c>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001676:	4a34      	ldr	r2, [pc, #208]	@ (8001748 <MX_GPIO_Init+0x11c>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167e:	4b32      	ldr	r3, [pc, #200]	@ (8001748 <MX_GPIO_Init+0x11c>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800168a:	2200      	movs	r2, #0
 800168c:	f24c 010f 	movw	r1, #49167	@ 0xc00f
 8001690:	482e      	ldr	r0, [pc, #184]	@ (800174c <MX_GPIO_Init+0x120>)
 8001692:	f002 f9b5 	bl	8003a00 <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2107      	movs	r1, #7
 800169a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800169e:	f002 f9af 	bl	8003a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_13, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	f242 0102 	movw	r1, #8194	@ 0x2002
 80016a8:	4829      	ldr	r0, [pc, #164]	@ (8001750 <MX_GPIO_Init+0x124>)
 80016aa:	f002 f9a9 	bl	8003a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016b4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80016b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	4619      	mov	r1, r3
 80016c4:	4821      	ldr	r0, [pc, #132]	@ (800174c <MX_GPIO_Init+0x120>)
 80016c6:	f001 fff1 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC1
                           PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 80016ca:	f24c 030f 	movw	r3, #49167	@ 0xc00f
 80016ce:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d0:	2301      	movs	r3, #1
 80016d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	4619      	mov	r1, r3
 80016e2:	481a      	ldr	r0, [pc, #104]	@ (800174c <MX_GPIO_Init+0x120>)
 80016e4:	f001 ffe2 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : MC_Main_Pin PA1 PA2 */
  GPIO_InitStruct.Pin = MC_Main_Pin|GPIO_PIN_1|GPIO_PIN_2;
 80016e8:	2307      	movs	r3, #7
 80016ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	4619      	mov	r1, r3
 80016fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001702:	f001 ffd3 	bl	80036ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 8001706:	f242 0302 	movw	r3, #8194	@ 0x2002
 800170a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170c:	2301      	movs	r3, #1
 800170e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	4619      	mov	r1, r3
 800171e:	480c      	ldr	r0, [pc, #48]	@ (8001750 <MX_GPIO_Init+0x124>)
 8001720:	f001 ffc4 	bl	80036ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2105      	movs	r1, #5
 8001728:	2028      	movs	r0, #40	@ 0x28
 800172a:	f001 fd6b 	bl	8003204 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800172e:	2028      	movs	r0, #40	@ 0x28
 8001730:	f001 fd84 	bl	800323c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8001734:	2201      	movs	r2, #1
 8001736:	2101      	movs	r1, #1
 8001738:	4804      	ldr	r0, [pc, #16]	@ (800174c <MX_GPIO_Init+0x120>)
 800173a:	f002 f961 	bl	8003a00 <HAL_GPIO_WritePin>

/* USER CODE END MX_GPIO_Init_2 */
}
 800173e:	bf00      	nop
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	48000800 	.word	0x48000800
 8001750:	48000400 	.word	0x48000400

08001754 <Heart_Beat>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Heart_Beat */
void Heart_Beat(void *argument)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]


  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800175c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001760:	4804      	ldr	r0, [pc, #16]	@ (8001774 <Heart_Beat+0x20>)
 8001762:	f002 f965 	bl	8003a30 <HAL_GPIO_TogglePin>
    osDelay(500);
 8001766:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800176a:	f005 fbd1 	bl	8006f10 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800176e:	bf00      	nop
 8001770:	e7f4      	b.n	800175c <Heart_Beat+0x8>
 8001772:	bf00      	nop
 8001774:	48000400 	.word	0x48000400

08001778 <Update_Throttle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Update_Throttle */
void Update_Throttle(void *argument)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Update_Throttle */

  HAL_DAC_Start(&hdac1,DAC_CHANNEL_1); //Start DAC 1 and 2
 8001780:	2100      	movs	r1, #0
 8001782:	486a      	ldr	r0, [pc, #424]	@ (800192c <Update_Throttle+0x1b4>)
 8001784:	f001 fd8a 	bl	800329c <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 8001788:	2110      	movs	r1, #16
 800178a:	4868      	ldr	r0, [pc, #416]	@ (800192c <Update_Throttle+0x1b4>)
 800178c:	f001 fd86 	bl	800329c <HAL_DAC_Start>

  /* Infinite loop */
  for(;;)
  {
    if (HAL_GetTick() - last_throttle_recieved_tick > 300) {
 8001790:	f000 fdb4 	bl	80022fc <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	4b66      	ldr	r3, [pc, #408]	@ (8001930 <Update_Throttle+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80017a0:	d902      	bls.n	80017a8 <Update_Throttle+0x30>
      throttle = 0; // Set throttle to 0 if no message received for .3 second
 80017a2:	4b64      	ldr	r3, [pc, #400]	@ (8001934 <Update_Throttle+0x1bc>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	801a      	strh	r2, [r3, #0]
    }

    if (throttle > 0) {
 80017a8:	4b62      	ldr	r3, [pc, #392]	@ (8001934 <Update_Throttle+0x1bc>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <Update_Throttle+0x44>
    	volatile int testing = 1000;
 80017b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b4:	60fb      	str	r3, [r7, #12]
    	testing++;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	3301      	adds	r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
    }

    if (kill_switch || HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80017bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001938 <Update_Throttle+0x1c0>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d107      	bne.n	80017d4 <Update_Throttle+0x5c>
 80017c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017c8:	485c      	ldr	r0, [pc, #368]	@ (800193c <Update_Throttle+0x1c4>)
 80017ca:	f002 f901 	bl	80039d0 <HAL_GPIO_ReadPin>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d106      	bne.n	80017e2 <Update_Throttle+0x6a>
      HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0); // Set throttle to 0 if kill switch is on
 80017d4:	2300      	movs	r3, #0
 80017d6:	2200      	movs	r2, #0
 80017d8:	2110      	movs	r1, #16
 80017da:	4854      	ldr	r0, [pc, #336]	@ (800192c <Update_Throttle+0x1b4>)
 80017dc:	f001 fe05 	bl	80033ea <HAL_DAC_SetValue>
 80017e0:	e006      	b.n	80017f0 <Update_Throttle+0x78>
    }
    else {
	    HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, throttle);
 80017e2:	4b54      	ldr	r3, [pc, #336]	@ (8001934 <Update_Throttle+0x1bc>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	2200      	movs	r2, #0
 80017e8:	2110      	movs	r1, #16
 80017ea:	4850      	ldr	r0, [pc, #320]	@ (800192c <Update_Throttle+0x1b4>)
 80017ec:	f001 fdfd 	bl	80033ea <HAL_DAC_SetValue>
    }


    if (regen_enable && throttle == 0) {
 80017f0:	4b53      	ldr	r3, [pc, #332]	@ (8001940 <Update_Throttle+0x1c8>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d008      	beq.n	800180a <Update_Throttle+0x92>
 80017f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001934 <Update_Throttle+0x1bc>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d104      	bne.n	800180a <Update_Throttle+0x92>
      regen = 2500; // also try 2048
 8001800:	4b50      	ldr	r3, [pc, #320]	@ (8001944 <Update_Throttle+0x1cc>)
 8001802:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001806:	801a      	strh	r2, [r3, #0]
 8001808:	e002      	b.n	8001810 <Update_Throttle+0x98>
    } else {
      regen = 0;
 800180a:	4b4e      	ldr	r3, [pc, #312]	@ (8001944 <Update_Throttle+0x1cc>)
 800180c:	2200      	movs	r2, #0
 800180e:	801a      	strh	r2, [r3, #0]
    }
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, regen);
 8001810:	4b4c      	ldr	r3, [pc, #304]	@ (8001944 <Update_Throttle+0x1cc>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	4844      	ldr	r0, [pc, #272]	@ (800192c <Update_Throttle+0x1b4>)
 800181a:	f001 fde6 	bl	80033ea <HAL_DAC_SetValue>

	  //change for bistable relay
	  //gonna have to think about this section

    // i think these are active low (at least this top one is most likely, so im assuming the next one is too)
	  if(mc_main_ctrl){
 800181e:	4b4a      	ldr	r3, [pc, #296]	@ (8001948 <Update_Throttle+0x1d0>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d006      	beq.n	8001834 <Update_Throttle+0xbc>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	2101      	movs	r1, #1
 800182a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182e:	f002 f8e7 	bl	8003a00 <HAL_GPIO_WritePin>
 8001832:	e005      	b.n	8001840 <Update_Throttle+0xc8>
	  }else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001834:	2201      	movs	r2, #1
 8001836:	2101      	movs	r1, #1
 8001838:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183c:	f002 f8e0 	bl	8003a00 <HAL_GPIO_WritePin>
	  }

	  if(mc_pwreco_ctrl){
 8001840:	4b42      	ldr	r3, [pc, #264]	@ (800194c <Update_Throttle+0x1d4>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <Update_Throttle+0xde>
		  //closed power
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	2102      	movs	r1, #2
 800184c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001850:	f002 f8d6 	bl	8003a00 <HAL_GPIO_WritePin>
 8001854:	e005      	b.n	8001862 <Update_Throttle+0xea>
	  }else{
		  //open eco
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001856:	2201      	movs	r2, #1
 8001858:	2102      	movs	r1, #2
 800185a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800185e:	f002 f8cf 	bl	8003a00 <HAL_GPIO_WritePin>
	  }

	  if(direction == true){
 8001862:	4b3b      	ldr	r3, [pc, #236]	@ (8001950 <Update_Throttle+0x1d8>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <Update_Throttle+0x100>
		  //closed forward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	2104      	movs	r1, #4
 800186e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001872:	f002 f8c5 	bl	8003a00 <HAL_GPIO_WritePin>
 8001876:	e005      	b.n	8001884 <Update_Throttle+0x10c>
	  }else{
		  //open backward
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8001878:	2201      	movs	r2, #1
 800187a:	2104      	movs	r1, #4
 800187c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001880:	f002 f8be 	bl	8003a00 <HAL_GPIO_WritePin>
	  }

    // enable precharger for 250ms before enabling array contactor
    if (array && start_array_process && precharge_start_tick == 0) {
 8001884:	4b33      	ldr	r3, [pc, #204]	@ (8001954 <Update_Throttle+0x1dc>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d014      	beq.n	80018b6 <Update_Throttle+0x13e>
 800188c:	4b32      	ldr	r3, [pc, #200]	@ (8001958 <Update_Throttle+0x1e0>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d010      	beq.n	80018b6 <Update_Throttle+0x13e>
 8001894:	4b31      	ldr	r3, [pc, #196]	@ (800195c <Update_Throttle+0x1e4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10c      	bne.n	80018b6 <Update_Throttle+0x13e>
        array_precharge_contactor_en = true;
 800189c:	4b30      	ldr	r3, [pc, #192]	@ (8001960 <Update_Throttle+0x1e8>)
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET); // enable precharge contactor
 80018a2:	2201      	movs	r2, #1
 80018a4:	2104      	movs	r1, #4
 80018a6:	4825      	ldr	r0, [pc, #148]	@ (800193c <Update_Throttle+0x1c4>)
 80018a8:	f002 f8aa 	bl	8003a00 <HAL_GPIO_WritePin>
        precharge_start_tick = HAL_GetTick();
 80018ac:	f000 fd26 	bl	80022fc <HAL_GetTick>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4a2a      	ldr	r2, [pc, #168]	@ (800195c <Update_Throttle+0x1e4>)
 80018b4:	6013      	str	r3, [r2, #0]
    }
    if (precharge_start_tick && (HAL_GetTick() - precharge_start_tick > 250)) {
 80018b6:	4b29      	ldr	r3, [pc, #164]	@ (800195c <Update_Throttle+0x1e4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d017      	beq.n	80018ee <Update_Throttle+0x176>
 80018be:	f000 fd1d 	bl	80022fc <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4b25      	ldr	r3, [pc, #148]	@ (800195c <Update_Throttle+0x1e4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2bfa      	cmp	r3, #250	@ 0xfa
 80018cc:	d90f      	bls.n	80018ee <Update_Throttle+0x176>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET); // enable array contactor
 80018ce:	2201      	movs	r2, #1
 80018d0:	2108      	movs	r1, #8
 80018d2:	481a      	ldr	r0, [pc, #104]	@ (800193c <Update_Throttle+0x1c4>)
 80018d4:	f002 f894 	bl	8003a00 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET); // disable precharge contactor
 80018d8:	2200      	movs	r2, #0
 80018da:	2104      	movs	r1, #4
 80018dc:	4817      	ldr	r0, [pc, #92]	@ (800193c <Update_Throttle+0x1c4>)
 80018de:	f002 f88f 	bl	8003a00 <HAL_GPIO_WritePin>
        start_array_process = false;
 80018e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <Update_Throttle+0x1e0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
        precharge_start_tick = 0;
 80018e8:	4b1c      	ldr	r3, [pc, #112]	@ (800195c <Update_Throttle+0x1e4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
    }

    if (!array && start_array_process) {
 80018ee:	4b19      	ldr	r3, [pc, #100]	@ (8001954 <Update_Throttle+0x1dc>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	f083 0301 	eor.w	r3, r3, #1
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d013      	beq.n	8001924 <Update_Throttle+0x1ac>
 80018fc:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <Update_Throttle+0x1e0>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d00f      	beq.n	8001924 <Update_Throttle+0x1ac>
        array_precharge_contactor_en = false;
 8001904:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <Update_Throttle+0x1e8>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET); // disable precharge contactor
 800190a:	2200      	movs	r2, #0
 800190c:	2104      	movs	r1, #4
 800190e:	480b      	ldr	r0, [pc, #44]	@ (800193c <Update_Throttle+0x1c4>)
 8001910:	f002 f876 	bl	8003a00 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET); // disable array contactor
 8001914:	2200      	movs	r2, #0
 8001916:	2108      	movs	r1, #8
 8001918:	4808      	ldr	r0, [pc, #32]	@ (800193c <Update_Throttle+0x1c4>)
 800191a:	f002 f871 	bl	8003a00 <HAL_GPIO_WritePin>
        start_array_process = false;
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <Update_Throttle+0x1e0>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
    }

	  osDelay(20);
 8001924:	2014      	movs	r0, #20
 8001926:	f005 faf3 	bl	8006f10 <osDelay>
    if (HAL_GetTick() - last_throttle_recieved_tick > 300) {
 800192a:	e731      	b.n	8001790 <Update_Throttle+0x18>
 800192c:	200000cc 	.word	0x200000cc
 8001930:	20000198 	.word	0x20000198
 8001934:	20000190 	.word	0x20000190
 8001938:	200001a5 	.word	0x200001a5
 800193c:	48000800 	.word	0x48000800
 8001940:	20000194 	.word	0x20000194
 8001944:	20000192 	.word	0x20000192
 8001948:	200001a2 	.word	0x200001a2
 800194c:	200001ac 	.word	0x200001ac
 8001950:	200001a1 	.word	0x200001a1
 8001954:	200001a3 	.word	0x200001a3
 8001958:	200001a6 	.word	0x200001a6
 800195c:	200001a8 	.word	0x200001a8
 8001960:	200001a7 	.word	0x200001a7

08001964 <Lights_Control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Lights_Control */
void Lights_Control(void *argument)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  //left_turn_active = true;

  /* Infinite loop */
  for(;;)
  {
	  if (blinkers_active) {
 800196c:	4b56      	ldr	r3, [pc, #344]	@ (8001ac8 <Lights_Control+0x164>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d032      	beq.n	80019da <Lights_Control+0x76>
		  if (signal_counter < 5) {
 8001974:	4b55      	ldr	r3, [pc, #340]	@ (8001acc <Lights_Control+0x168>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b04      	cmp	r3, #4
 800197a:	dc0b      	bgt.n	8001994 <Lights_Control+0x30>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001982:	4853      	ldr	r0, [pc, #332]	@ (8001ad0 <Lights_Control+0x16c>)
 8001984:	f002 f83c 	bl	8003a00 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	2102      	movs	r1, #2
 800198c:	4850      	ldr	r0, [pc, #320]	@ (8001ad0 <Lights_Control+0x16c>)
 800198e:	f002 f837 	bl	8003a00 <HAL_GPIO_WritePin>
 8001992:	e00a      	b.n	80019aa <Lights_Control+0x46>
		  }
		  else {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8001994:	2201      	movs	r2, #1
 8001996:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800199a:	484d      	ldr	r0, [pc, #308]	@ (8001ad0 <Lights_Control+0x16c>)
 800199c:	f002 f830 	bl	8003a00 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 80019a0:	2201      	movs	r2, #1
 80019a2:	2102      	movs	r1, #2
 80019a4:	484a      	ldr	r0, [pc, #296]	@ (8001ad0 <Lights_Control+0x16c>)
 80019a6:	f002 f82b 	bl	8003a00 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 80019aa:	4b48      	ldr	r3, [pc, #288]	@ (8001acc <Lights_Control+0x168>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	4a46      	ldr	r2, [pc, #280]	@ (8001acc <Lights_Control+0x168>)
 80019b2:	6013      	str	r3, [r2, #0]
		  signal_counter = signal_counter%10;
 80019b4:	4b45      	ldr	r3, [pc, #276]	@ (8001acc <Lights_Control+0x168>)
 80019b6:	6819      	ldr	r1, [r3, #0]
 80019b8:	4b46      	ldr	r3, [pc, #280]	@ (8001ad4 <Lights_Control+0x170>)
 80019ba:	fb83 2301 	smull	r2, r3, r3, r1
 80019be:	109a      	asrs	r2, r3, #2
 80019c0:	17cb      	asrs	r3, r1, #31
 80019c2:	1ad2      	subs	r2, r2, r3
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	1aca      	subs	r2, r1, r3
 80019ce:	4b3f      	ldr	r3, [pc, #252]	@ (8001acc <Lights_Control+0x168>)
 80019d0:	601a      	str	r2, [r3, #0]
		  osDelay(100);
 80019d2:	2064      	movs	r0, #100	@ 0x64
 80019d4:	f005 fa9c 	bl	8006f10 <osDelay>
		  continue;
 80019d8:	e074      	b.n	8001ac4 <Lights_Control+0x160>
	  }

	  if(left_turn_active){
 80019da:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad8 <Lights_Control+0x174>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d016      	beq.n	8001a10 <Lights_Control+0xac>
		  if(signal_counter < 5){
 80019e2:	4b3a      	ldr	r3, [pc, #232]	@ (8001acc <Lights_Control+0x168>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	dc06      	bgt.n	80019f8 <Lights_Control+0x94>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019f0:	4837      	ldr	r0, [pc, #220]	@ (8001ad0 <Lights_Control+0x16c>)
 80019f2:	f002 f805 	bl	8003a00 <HAL_GPIO_WritePin>
 80019f6:	e005      	b.n	8001a04 <Lights_Control+0xa0>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 80019f8:	2201      	movs	r2, #1
 80019fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019fe:	4834      	ldr	r0, [pc, #208]	@ (8001ad0 <Lights_Control+0x16c>)
 8001a00:	f001 fffe 	bl	8003a00 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 8001a04:	4b31      	ldr	r3, [pc, #196]	@ (8001acc <Lights_Control+0x168>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	4a30      	ldr	r2, [pc, #192]	@ (8001acc <Lights_Control+0x168>)
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e010      	b.n	8001a32 <Lights_Control+0xce>

	  }else{
		  if(brakes_active){
 8001a10:	4b32      	ldr	r3, [pc, #200]	@ (8001adc <Lights_Control+0x178>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d006      	beq.n	8001a26 <Lights_Control+0xc2>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a1e:	482c      	ldr	r0, [pc, #176]	@ (8001ad0 <Lights_Control+0x16c>)
 8001a20:	f001 ffee 	bl	8003a00 <HAL_GPIO_WritePin>
 8001a24:	e005      	b.n	8001a32 <Lights_Control+0xce>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8001a26:	2200      	movs	r2, #0
 8001a28:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a2c:	4828      	ldr	r0, [pc, #160]	@ (8001ad0 <Lights_Control+0x16c>)
 8001a2e:	f001 ffe7 	bl	8003a00 <HAL_GPIO_WritePin>
		  }
	  }

	  if(right_turn_active){
 8001a32:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae0 <Lights_Control+0x17c>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d014      	beq.n	8001a64 <Lights_Control+0x100>
		  if(signal_counter < 5){
 8001a3a:	4b24      	ldr	r3, [pc, #144]	@ (8001acc <Lights_Control+0x168>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	dc05      	bgt.n	8001a4e <Lights_Control+0xea>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2102      	movs	r1, #2
 8001a46:	4822      	ldr	r0, [pc, #136]	@ (8001ad0 <Lights_Control+0x16c>)
 8001a48:	f001 ffda 	bl	8003a00 <HAL_GPIO_WritePin>
 8001a4c:	e004      	b.n	8001a58 <Lights_Control+0xf4>
		  }else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	2102      	movs	r1, #2
 8001a52:	481f      	ldr	r0, [pc, #124]	@ (8001ad0 <Lights_Control+0x16c>)
 8001a54:	f001 ffd4 	bl	8003a00 <HAL_GPIO_WritePin>
		  }
		  signal_counter++;
 8001a58:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <Lights_Control+0x168>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001acc <Lights_Control+0x168>)
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	e00e      	b.n	8001a82 <Lights_Control+0x11e>
	  }
	  else{
		  if(brakes_active){
 8001a64:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <Lights_Control+0x178>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <Lights_Control+0x114>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2102      	movs	r1, #2
 8001a70:	4817      	ldr	r0, [pc, #92]	@ (8001ad0 <Lights_Control+0x16c>)
 8001a72:	f001 ffc5 	bl	8003a00 <HAL_GPIO_WritePin>
 8001a76:	e004      	b.n	8001a82 <Lights_Control+0x11e>
		  }
		  else{
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2102      	movs	r1, #2
 8001a7c:	4814      	ldr	r0, [pc, #80]	@ (8001ad0 <Lights_Control+0x16c>)
 8001a7e:	f001 ffbf 	bl	8003a00 <HAL_GPIO_WritePin>
		  }
	  }

	  if(brakes_active){
 8001a82:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <Lights_Control+0x178>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <Lights_Control+0x132>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET); //sets center rear light (brake light)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	4810      	ldr	r0, [pc, #64]	@ (8001ad0 <Lights_Control+0x16c>)
 8001a90:	f001 ffb6 	bl	8003a00 <HAL_GPIO_WritePin>
 8001a94:	e004      	b.n	8001aa0 <Lights_Control+0x13c>
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2101      	movs	r1, #1
 8001a9a:	480d      	ldr	r0, [pc, #52]	@ (8001ad0 <Lights_Control+0x16c>)
 8001a9c:	f001 ffb0 	bl	8003a00 <HAL_GPIO_WritePin>
	  }
	  signal_counter = signal_counter%10;
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8001acc <Lights_Control+0x168>)
 8001aa2:	6819      	ldr	r1, [r3, #0]
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <Lights_Control+0x170>)
 8001aa6:	fb83 2301 	smull	r2, r3, r3, r1
 8001aaa:	109a      	asrs	r2, r3, #2
 8001aac:	17cb      	asrs	r3, r1, #31
 8001aae:	1ad2      	subs	r2, r2, r3
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	1aca      	subs	r2, r1, r3
 8001aba:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <Lights_Control+0x168>)
 8001abc:	601a      	str	r2, [r3, #0]
	  osDelay(100);
 8001abe:	2064      	movs	r0, #100	@ 0x64
 8001ac0:	f005 fa26 	bl	8006f10 <osDelay>
	  if (blinkers_active) {
 8001ac4:	e752      	b.n	800196c <Lights_Control+0x8>
 8001ac6:	bf00      	nop
 8001ac8:	2000019d 	.word	0x2000019d
 8001acc:	200001b0 	.word	0x200001b0
 8001ad0:	48000800 	.word	0x48000800
 8001ad4:	66666667 	.word	0x66666667
 8001ad8:	2000019e 	.word	0x2000019e
 8001adc:	2000019c 	.word	0x2000019c
 8001ae0:	2000019f 	.word	0x2000019f

08001ae4 <Read_Sensors>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Read_Sensors */
void Read_Sensors(void *argument)
{
 8001ae4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ae8:	b08e      	sub	sp, #56	@ 0x38
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Read_Sensors */

	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = { 0 };
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
	uint32_t TxMailbox = { 0 };
 8001af8:	2300      	movs	r3, #0
 8001afa:	613b      	str	r3, [r7, #16]

	TxHeader.IDE = CAN_ID_STD; // Standard ID (not extended)
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
	TxHeader.StdId = 0x07; // 11 bit Identifier
 8001b00:	2307      	movs	r3, #7
 8001b02:	61fb      	str	r3, [r7, #28]
	TxHeader.RTR = CAN_RTR_DATA; // Std RTR Data frame
 8001b04:	2300      	movs	r3, #0
 8001b06:	62bb      	str	r3, [r7, #40]	@ 0x28
	TxHeader.DLC = 8; // 8 bytes being transmitted
 8001b08:	2308      	movs	r3, #8
 8001b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	//Message ID 2 for VCU
	TxData[0] = 7;
 8001b0c:	2307      	movs	r3, #7
 8001b0e:	753b      	strb	r3, [r7, #20]

	HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001b10:	f107 0310 	add.w	r3, r7, #16
 8001b14:	f107 0214 	add.w	r2, r7, #20
 8001b18:	f107 011c 	add.w	r1, r7, #28
 8001b1c:	4853      	ldr	r0, [pc, #332]	@ (8001c6c <Read_Sensors+0x188>)
 8001b1e:	f000 fe3d 	bl	800279c <HAL_CAN_AddTxMessage>

  /* Infinite loop */
  for(;;)
  {
	  //INA226_t *data = (INA226_t *)argument;
	  INA226_IVP.current = getCurrentAmp(&INA226_IVP);
 8001b22:	4853      	ldr	r0, [pc, #332]	@ (8001c70 <Read_Sensors+0x18c>)
 8001b24:	f7ff f8b4 	bl	8000c90 <getCurrentAmp>
 8001b28:	eef0 7a40 	vmov.f32	s15, s0
 8001b2c:	4b50      	ldr	r3, [pc, #320]	@ (8001c70 <Read_Sensors+0x18c>)
 8001b2e:	edc3 7a08 	vstr	s15, [r3, #32]
	  INA226_IVP.power = getPowerWatt(&INA226_IVP);
 8001b32:	484f      	ldr	r0, [pc, #316]	@ (8001c70 <Read_Sensors+0x18c>)
 8001b34:	f7ff f908 	bl	8000d48 <getPowerWatt>
 8001b38:	eef0 7a40 	vmov.f32	s15, s0
 8001b3c:	4b4c      	ldr	r3, [pc, #304]	@ (8001c70 <Read_Sensors+0x18c>)
 8001b3e:	edc3 7a07 	vstr	s15, [r3, #28]

    union FloatBytes power;
    power.f = INA226_IVP.power;
 8001b42:	4b4b      	ldr	r3, [pc, #300]	@ (8001c70 <Read_Sensors+0x18c>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	60fb      	str	r3, [r7, #12]

	  //Assign CAN message
	  TxData[2] = power.bytes[0]; //LSB
 8001b48:	7b3b      	ldrb	r3, [r7, #12]
 8001b4a:	75bb      	strb	r3, [r7, #22]
	  TxData[3] = power.bytes[1];
 8001b4c:	7b7b      	ldrb	r3, [r7, #13]
 8001b4e:	75fb      	strb	r3, [r7, #23]
	  TxData[4] = power.bytes[2];
 8001b50:	7bbb      	ldrb	r3, [r7, #14]
 8001b52:	763b      	strb	r3, [r7, #24]
	  TxData[5] = power.bytes[3]; //MSB
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	767b      	strb	r3, [r7, #25]

	  while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8001b58:	bf00      	nop
 8001b5a:	4844      	ldr	r0, [pc, #272]	@ (8001c6c <Read_Sensors+0x188>)
 8001b5c:	f000 feee 	bl	800293c <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f9      	beq.n	8001b5a <Read_Sensors+0x76>
	  HAL_StatusTypeDef status;
	  status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	f107 0214 	add.w	r2, r7, #20
 8001b6e:	f107 011c 	add.w	r1, r7, #28
 8001b72:	483e      	ldr	r0, [pc, #248]	@ (8001c6c <Read_Sensors+0x188>)
 8001b74:	f000 fe12 	bl	800279c <HAL_CAN_AddTxMessage>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	  messages_sent++;
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c74 <Read_Sensors+0x190>)
 8001b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b84:	1c54      	adds	r4, r2, #1
 8001b86:	f143 0500 	adc.w	r5, r3, #0
 8001b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c74 <Read_Sensors+0x190>)
 8001b8c:	e9c3 4500 	strd	r4, r5, [r3]
	  if (status == HAL_ERROR){
 8001b90:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d102      	bne.n	8001b9e <Read_Sensors+0xba>
		  Error_Handler();
 8001b98:	f000 f890 	bl	8001cbc <Error_Handler>
 8001b9c:	e008      	b.n	8001bb0 <Read_Sensors+0xcc>
	  }
	  else if(status == HAL_BUSY){
 8001b9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d104      	bne.n	8001bb0 <Read_Sensors+0xcc>
		  HAL_CAN_BUSY++;
 8001ba6:	4b34      	ldr	r3, [pc, #208]	@ (8001c78 <Read_Sensors+0x194>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	4a32      	ldr	r2, [pc, #200]	@ (8001c78 <Read_Sensors+0x194>)
 8001bae:	6013      	str	r3, [r2, #0]
	  }

    // also send status message
    TxData_status[1] = 0; // Reset status byte
 8001bb0:	4b32      	ldr	r3, [pc, #200]	@ (8001c7c <Read_Sensors+0x198>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	705a      	strb	r2, [r3, #1]
    // for byte 1, bit 0 = mc, bit 1 = array, bit 2 = kill switch
    if (mc_main_ctrl)
 8001bb6:	4b32      	ldr	r3, [pc, #200]	@ (8001c80 <Read_Sensors+0x19c>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d006      	beq.n	8001bcc <Read_Sensors+0xe8>
        TxData_status[1] |= (1 << 0); // Bit 0 = MC status
 8001bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8001c7c <Read_Sensors+0x198>)
 8001bc0:	785b      	ldrb	r3, [r3, #1]
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c7c <Read_Sensors+0x198>)
 8001bca:	705a      	strb	r2, [r3, #1]
    if (array)
 8001bcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001c84 <Read_Sensors+0x1a0>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <Read_Sensors+0xfe>
        TxData_status[1] |= (1 << 2); // Bit 2 = array status 
 8001bd4:	4b29      	ldr	r3, [pc, #164]	@ (8001c7c <Read_Sensors+0x198>)
 8001bd6:	785b      	ldrb	r3, [r3, #1]
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4b27      	ldr	r3, [pc, #156]	@ (8001c7c <Read_Sensors+0x198>)
 8001be0:	705a      	strb	r2, [r3, #1]
    if (direction)
 8001be2:	4b29      	ldr	r3, [pc, #164]	@ (8001c88 <Read_Sensors+0x1a4>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d006      	beq.n	8001bf8 <Read_Sensors+0x114>
        TxData_status[1] |= (1 << 3); // Bit 3 = Direction status
 8001bea:	4b24      	ldr	r3, [pc, #144]	@ (8001c7c <Read_Sensors+0x198>)
 8001bec:	785b      	ldrb	r3, [r3, #1]
 8001bee:	f043 0308 	orr.w	r3, r3, #8
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	4b21      	ldr	r3, [pc, #132]	@ (8001c7c <Read_Sensors+0x198>)
 8001bf6:	705a      	strb	r2, [r3, #1]
    if(kill_switch)
 8001bf8:	4b24      	ldr	r3, [pc, #144]	@ (8001c8c <Read_Sensors+0x1a8>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d006      	beq.n	8001c0e <Read_Sensors+0x12a>
    	TxData_status[1] |= (1 << 4); // Bit 4 = Kill switch status
 8001c00:	4b1e      	ldr	r3, [pc, #120]	@ (8001c7c <Read_Sensors+0x198>)
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	f043 0310 	orr.w	r3, r3, #16
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c7c <Read_Sensors+0x198>)
 8001c0c:	705a      	strb	r2, [r3, #1]

    while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8001c0e:	bf00      	nop
 8001c10:	4816      	ldr	r0, [pc, #88]	@ (8001c6c <Read_Sensors+0x188>)
 8001c12:	f000 fe93 	bl	800293c <HAL_CAN_GetTxMailboxesFreeLevel>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f9      	beq.n	8001c10 <Read_Sensors+0x12c>
    HAL_StatusTypeDef status2;
    status2 = HAL_CAN_AddTxMessage(&hcan1, &TxHeader_status, TxData_status, &TxMailbox_status);
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001c90 <Read_Sensors+0x1ac>)
 8001c1e:	4a17      	ldr	r2, [pc, #92]	@ (8001c7c <Read_Sensors+0x198>)
 8001c20:	491c      	ldr	r1, [pc, #112]	@ (8001c94 <Read_Sensors+0x1b0>)
 8001c22:	4812      	ldr	r0, [pc, #72]	@ (8001c6c <Read_Sensors+0x188>)
 8001c24:	f000 fdba 	bl	800279c <HAL_CAN_AddTxMessage>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    messages_sent++;
 8001c2e:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <Read_Sensors+0x190>)
 8001c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c34:	f112 0801 	adds.w	r8, r2, #1
 8001c38:	f143 0900 	adc.w	r9, r3, #0
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <Read_Sensors+0x190>)
 8001c3e:	e9c3 8900 	strd	r8, r9, [r3]
    if (status2 == HAL_ERROR){
 8001c42:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d102      	bne.n	8001c50 <Read_Sensors+0x16c>
        Error_Handler();
 8001c4a:	f000 f837 	bl	8001cbc <Error_Handler>
 8001c4e:	e008      	b.n	8001c62 <Read_Sensors+0x17e>
    }
    else if(status2 == HAL_BUSY){
 8001c50:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d104      	bne.n	8001c62 <Read_Sensors+0x17e>
        HAL_CAN_BUSY++;
 8001c58:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <Read_Sensors+0x194>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	4a06      	ldr	r2, [pc, #24]	@ (8001c78 <Read_Sensors+0x194>)
 8001c60:	6013      	str	r3, [r2, #0]
    }

    osDelay(10);
 8001c62:	200a      	movs	r0, #10
 8001c64:	f005 f954 	bl	8006f10 <osDelay>
  {
 8001c68:	e75b      	b.n	8001b22 <Read_Sensors+0x3e>
 8001c6a:	bf00      	nop
 8001c6c:	2000007c 	.word	0x2000007c
 8001c70:	200001e8 	.word	0x200001e8
 8001c74:	200001b8 	.word	0x200001b8
 8001c78:	200001b4 	.word	0x200001b4
 8001c7c:	200001d8 	.word	0x200001d8
 8001c80:	200001a2 	.word	0x200001a2
 8001c84:	200001a3 	.word	0x200001a3
 8001c88:	200001a1 	.word	0x200001a1
 8001c8c:	200001a5 	.word	0x200001a5
 8001c90:	200001e0 	.word	0x200001e0
 8001c94:	200001c0 	.word	0x200001c0

08001c98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a04      	ldr	r2, [pc, #16]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001caa:	f000 fb13 	bl	80022d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40001000 	.word	0x40001000

08001cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc0:	b672      	cpsid	i
}
 8001cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <Error_Handler+0x8>

08001cc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	4b11      	ldr	r3, [pc, #68]	@ (8001d14 <HAL_MspInit+0x4c>)
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd2:	4a10      	ldr	r2, [pc, #64]	@ (8001d14 <HAL_MspInit+0x4c>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cda:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <HAL_MspInit+0x4c>)
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <HAL_MspInit+0x4c>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cea:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <HAL_MspInit+0x4c>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cf2:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <HAL_MspInit+0x4c>)
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	210f      	movs	r1, #15
 8001d02:	f06f 0001 	mvn.w	r0, #1
 8001d06:	f001 fa7d 	bl	8003204 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40021000 	.word	0x40021000

08001d18 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	@ 0x30
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a56      	ldr	r2, [pc, #344]	@ (8001e90 <HAL_CAN_MspInit+0x178>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d14b      	bne.n	8001dd2 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001d3a:	4b56      	ldr	r3, [pc, #344]	@ (8001e94 <HAL_CAN_MspInit+0x17c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	4a54      	ldr	r2, [pc, #336]	@ (8001e94 <HAL_CAN_MspInit+0x17c>)
 8001d42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001d44:	4b53      	ldr	r3, [pc, #332]	@ (8001e94 <HAL_CAN_MspInit+0x17c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d10b      	bne.n	8001d64 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001d4c:	4b52      	ldr	r3, [pc, #328]	@ (8001e98 <HAL_CAN_MspInit+0x180>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d50:	4a51      	ldr	r2, [pc, #324]	@ (8001e98 <HAL_CAN_MspInit+0x180>)
 8001d52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d56:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d58:	4b4f      	ldr	r3, [pc, #316]	@ (8001e98 <HAL_CAN_MspInit+0x180>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d64:	4b4c      	ldr	r3, [pc, #304]	@ (8001e98 <HAL_CAN_MspInit+0x180>)
 8001d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d68:	4a4b      	ldr	r2, [pc, #300]	@ (8001e98 <HAL_CAN_MspInit+0x180>)
 8001d6a:	f043 0302 	orr.w	r3, r3, #2
 8001d6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d70:	4b49      	ldr	r3, [pc, #292]	@ (8001e98 <HAL_CAN_MspInit+0x180>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d86:	2301      	movs	r3, #1
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d8e:	2309      	movs	r3, #9
 8001d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d92:	f107 031c 	add.w	r3, r7, #28
 8001d96:	4619      	mov	r1, r3
 8001d98:	4840      	ldr	r0, [pc, #256]	@ (8001e9c <HAL_CAN_MspInit+0x184>)
 8001d9a:	f001 fc87 	bl	80036ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da4:	2302      	movs	r3, #2
 8001da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dac:	2303      	movs	r3, #3
 8001dae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001db0:	2309      	movs	r3, #9
 8001db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db4:	f107 031c 	add.w	r3, r7, #28
 8001db8:	4619      	mov	r1, r3
 8001dba:	4838      	ldr	r0, [pc, #224]	@ (8001e9c <HAL_CAN_MspInit+0x184>)
 8001dbc:	f001 fc76 	bl	80036ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2105      	movs	r1, #5
 8001dc4:	2014      	movs	r0, #20
 8001dc6:	f001 fa1d 	bl	8003204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001dca:	2014      	movs	r0, #20
 8001dcc:	f001 fa36 	bl	800323c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001dd0:	e059      	b.n	8001e86 <HAL_CAN_MspInit+0x16e>
  else if(hcan->Instance==CAN2)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a32      	ldr	r2, [pc, #200]	@ (8001ea0 <HAL_CAN_MspInit+0x188>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d154      	bne.n	8001e86 <HAL_CAN_MspInit+0x16e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8001e98 <HAL_CAN_MspInit+0x180>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de0:	4a2d      	ldr	r2, [pc, #180]	@ (8001e98 <HAL_CAN_MspInit+0x180>)
 8001de2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e98 <HAL_CAN_MspInit+0x180>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001df4:	4b27      	ldr	r3, [pc, #156]	@ (8001e94 <HAL_CAN_MspInit+0x17c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	4a26      	ldr	r2, [pc, #152]	@ (8001e94 <HAL_CAN_MspInit+0x17c>)
 8001dfc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001dfe:	4b25      	ldr	r3, [pc, #148]	@ (8001e94 <HAL_CAN_MspInit+0x17c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d10b      	bne.n	8001e1e <HAL_CAN_MspInit+0x106>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001e06:	4b24      	ldr	r3, [pc, #144]	@ (8001e98 <HAL_CAN_MspInit+0x180>)
 8001e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0a:	4a23      	ldr	r2, [pc, #140]	@ (8001e98 <HAL_CAN_MspInit+0x180>)
 8001e0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e10:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e12:	4b21      	ldr	r3, [pc, #132]	@ (8001e98 <HAL_CAN_MspInit+0x180>)
 8001e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e98 <HAL_CAN_MspInit+0x180>)
 8001e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e22:	4a1d      	ldr	r2, [pc, #116]	@ (8001e98 <HAL_CAN_MspInit+0x180>)
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <HAL_CAN_MspInit+0x180>)
 8001e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e36:	2320      	movs	r3, #32
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_CAN2;
 8001e46:	2303      	movs	r3, #3
 8001e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4812      	ldr	r0, [pc, #72]	@ (8001e9c <HAL_CAN_MspInit+0x184>)
 8001e52:	f001 fc2b 	bl	80036ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e56:	2340      	movs	r3, #64	@ 0x40
 8001e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_CAN2;
 8001e66:	2308      	movs	r3, #8
 8001e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	4619      	mov	r1, r3
 8001e70:	480a      	ldr	r0, [pc, #40]	@ (8001e9c <HAL_CAN_MspInit+0x184>)
 8001e72:	f001 fc1b 	bl	80036ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2105      	movs	r1, #5
 8001e7a:	2057      	movs	r0, #87	@ 0x57
 8001e7c:	f001 f9c2 	bl	8003204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001e80:	2057      	movs	r0, #87	@ 0x57
 8001e82:	f001 f9db 	bl	800323c <HAL_NVIC_EnableIRQ>
}
 8001e86:	bf00      	nop
 8001e88:	3730      	adds	r7, #48	@ 0x30
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40006400 	.word	0x40006400
 8001e94:	20000210 	.word	0x20000210
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	48000400 	.word	0x48000400
 8001ea0:	40006800 	.word	0x40006800

08001ea4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	@ 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a19      	ldr	r2, [pc, #100]	@ (8001f28 <HAL_DAC_MspInit+0x84>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d12c      	bne.n	8001f20 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001ec6:	4b19      	ldr	r3, [pc, #100]	@ (8001f2c <HAL_DAC_MspInit+0x88>)
 8001ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eca:	4a18      	ldr	r2, [pc, #96]	@ (8001f2c <HAL_DAC_MspInit+0x88>)
 8001ecc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001ed0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ed2:	4b16      	ldr	r3, [pc, #88]	@ (8001f2c <HAL_DAC_MspInit+0x88>)
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ede:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <HAL_DAC_MspInit+0x88>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee2:	4a12      	ldr	r2, [pc, #72]	@ (8001f2c <HAL_DAC_MspInit+0x88>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eea:	4b10      	ldr	r3, [pc, #64]	@ (8001f2c <HAL_DAC_MspInit+0x88>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ef6:	2330      	movs	r3, #48	@ 0x30
 8001ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001efa:	2303      	movs	r3, #3
 8001efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f02:	f107 0314 	add.w	r3, r7, #20
 8001f06:	4619      	mov	r1, r3
 8001f08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f0c:	f001 fbce 	bl	80036ac <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001f10:	2200      	movs	r2, #0
 8001f12:	210f      	movs	r1, #15
 8001f14:	2036      	movs	r0, #54	@ 0x36
 8001f16:	f001 f975 	bl	8003204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f1a:	2036      	movs	r0, #54	@ 0x36
 8001f1c:	f001 f98e 	bl	800323c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8001f20:	bf00      	nop
 8001f22:	3728      	adds	r7, #40	@ 0x28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40007400 	.word	0x40007400
 8001f2c:	40021000 	.word	0x40021000

08001f30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b0ac      	sub	sp, #176	@ 0xb0
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	228c      	movs	r2, #140	@ 0x8c
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f007 fcb1 	bl	80098b8 <memset>
  if(hi2c->Instance==I2C2)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a21      	ldr	r2, [pc, #132]	@ (8001fe0 <HAL_I2C_MspInit+0xb0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d13b      	bne.n	8001fd8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f60:	2380      	movs	r3, #128	@ 0x80
 8001f62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f68:	f107 0310 	add.w	r3, r7, #16
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f003 fa73 	bl	8005458 <HAL_RCCEx_PeriphCLKConfig>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001f78:	f7ff fea0 	bl	8001cbc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7c:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <HAL_I2C_MspInit+0xb4>)
 8001f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f80:	4a18      	ldr	r2, [pc, #96]	@ (8001fe4 <HAL_I2C_MspInit+0xb4>)
 8001f82:	f043 0302 	orr.w	r3, r3, #2
 8001f86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f88:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <HAL_I2C_MspInit+0xb4>)
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f94:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f9c:	2312      	movs	r3, #18
 8001f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fae:	2304      	movs	r3, #4
 8001fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480b      	ldr	r0, [pc, #44]	@ (8001fe8 <HAL_I2C_MspInit+0xb8>)
 8001fbc:	f001 fb76 	bl	80036ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fc0:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <HAL_I2C_MspInit+0xb4>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc4:	4a07      	ldr	r2, [pc, #28]	@ (8001fe4 <HAL_I2C_MspInit+0xb4>)
 8001fc6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fca:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fcc:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <HAL_I2C_MspInit+0xb4>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001fd8:	bf00      	nop
 8001fda:	37b0      	adds	r7, #176	@ 0xb0
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40005800 	.word	0x40005800
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	48000400 	.word	0x48000400

08001fec <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8002024 <HAL_TIM_OC_MspInit+0x38>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d10b      	bne.n	8002016 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8002028 <HAL_TIM_OC_MspInit+0x3c>)
 8002000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002002:	4a09      	ldr	r2, [pc, #36]	@ (8002028 <HAL_TIM_OC_MspInit+0x3c>)
 8002004:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002008:	6613      	str	r3, [r2, #96]	@ 0x60
 800200a:	4b07      	ldr	r3, [pc, #28]	@ (8002028 <HAL_TIM_OC_MspInit+0x3c>)
 800200c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800200e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40012c00 	.word	0x40012c00
 8002028:	40021000 	.word	0x40021000

0800202c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 030c 	add.w	r3, r7, #12
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a12      	ldr	r2, [pc, #72]	@ (8002094 <HAL_TIM_MspPostInit+0x68>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d11d      	bne.n	800208a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <HAL_TIM_MspPostInit+0x6c>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002052:	4a11      	ldr	r2, [pc, #68]	@ (8002098 <HAL_TIM_MspPostInit+0x6c>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800205a:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <HAL_TIM_MspPostInit+0x6c>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002066:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800206a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002078:	2301      	movs	r3, #1
 800207a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	4619      	mov	r1, r3
 8002082:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002086:	f001 fb11 	bl	80036ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800208a:	bf00      	nop
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40012c00 	.word	0x40012c00
 8002098:	40021000 	.word	0x40021000

0800209c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08e      	sub	sp, #56	@ 0x38
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80020aa:	4b34      	ldr	r3, [pc, #208]	@ (800217c <HAL_InitTick+0xe0>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ae:	4a33      	ldr	r2, [pc, #204]	@ (800217c <HAL_InitTick+0xe0>)
 80020b0:	f043 0310 	orr.w	r3, r3, #16
 80020b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020b6:	4b31      	ldr	r3, [pc, #196]	@ (800217c <HAL_InitTick+0xe0>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020c2:	f107 0210 	add.w	r2, r7, #16
 80020c6:	f107 0314 	add.w	r3, r7, #20
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 f931 	bl	8005334 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d103      	bne.n	80020e4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020dc:	f003 f914 	bl	8005308 <HAL_RCC_GetPCLK1Freq>
 80020e0:	6378      	str	r0, [r7, #52]	@ 0x34
 80020e2:	e004      	b.n	80020ee <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020e4:	f003 f910 	bl	8005308 <HAL_RCC_GetPCLK1Freq>
 80020e8:	4603      	mov	r3, r0
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020f0:	4a23      	ldr	r2, [pc, #140]	@ (8002180 <HAL_InitTick+0xe4>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	0c9b      	lsrs	r3, r3, #18
 80020f8:	3b01      	subs	r3, #1
 80020fa:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020fc:	4b21      	ldr	r3, [pc, #132]	@ (8002184 <HAL_InitTick+0xe8>)
 80020fe:	4a22      	ldr	r2, [pc, #136]	@ (8002188 <HAL_InitTick+0xec>)
 8002100:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002102:	4b20      	ldr	r3, [pc, #128]	@ (8002184 <HAL_InitTick+0xe8>)
 8002104:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002108:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800210a:	4a1e      	ldr	r2, [pc, #120]	@ (8002184 <HAL_InitTick+0xe8>)
 800210c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002110:	4b1c      	ldr	r3, [pc, #112]	@ (8002184 <HAL_InitTick+0xe8>)
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002116:	4b1b      	ldr	r3, [pc, #108]	@ (8002184 <HAL_InitTick+0xe8>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211c:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <HAL_InitTick+0xe8>)
 800211e:	2200      	movs	r2, #0
 8002120:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002122:	4818      	ldr	r0, [pc, #96]	@ (8002184 <HAL_InitTick+0xe8>)
 8002124:	f003 fe62 	bl	8005dec <HAL_TIM_Base_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800212e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002132:	2b00      	cmp	r3, #0
 8002134:	d11b      	bne.n	800216e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002136:	4813      	ldr	r0, [pc, #76]	@ (8002184 <HAL_InitTick+0xe8>)
 8002138:	f003 feba 	bl	8005eb0 <HAL_TIM_Base_Start_IT>
 800213c:	4603      	mov	r3, r0
 800213e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002142:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002146:	2b00      	cmp	r3, #0
 8002148:	d111      	bne.n	800216e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800214a:	2036      	movs	r0, #54	@ 0x36
 800214c:	f001 f876 	bl	800323c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b0f      	cmp	r3, #15
 8002154:	d808      	bhi.n	8002168 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002156:	2200      	movs	r2, #0
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	2036      	movs	r0, #54	@ 0x36
 800215c:	f001 f852 	bl	8003204 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002160:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <HAL_InitTick+0xf0>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	e002      	b.n	800216e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800216e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002172:	4618      	mov	r0, r3
 8002174:	3738      	adds	r7, #56	@ 0x38
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	431bde83 	.word	0x431bde83
 8002184:	20000214 	.word	0x20000214
 8002188:	40001000 	.word	0x40001000
 800218c:	20000004 	.word	0x20000004

08002190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <NMI_Handler+0x4>

08002198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <HardFault_Handler+0x4>

080021a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <MemManage_Handler+0x4>

080021a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <BusFault_Handler+0x4>

080021b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b4:	bf00      	nop
 80021b6:	e7fd      	b.n	80021b4 <UsageFault_Handler+0x4>

080021b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80021cc:	4802      	ldr	r0, [pc, #8]	@ (80021d8 <CAN1_RX0_IRQHandler+0x10>)
 80021ce:	f000 fd32 	bl	8002c36 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	2000007c 	.word	0x2000007c

080021dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80021e0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80021e4:	f001 fc3e 	bl	8003a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}

080021ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (htim6.Instance != NULL)
 80021f0:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <TIM6_DAC_IRQHandler+0x24>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <TIM6_DAC_IRQHandler+0x12>
  {
    HAL_TIM_IRQHandler(&htim6);
 80021f8:	4805      	ldr	r0, [pc, #20]	@ (8002210 <TIM6_DAC_IRQHandler+0x24>)
 80021fa:	f003 ff20 	bl	800603e <HAL_TIM_IRQHandler>
  }
  if (hdac1.Instance != NULL)
 80021fe:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <TIM6_DAC_IRQHandler+0x28>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <TIM6_DAC_IRQHandler+0x20>
  {
    HAL_DAC_IRQHandler(&hdac1);
 8002206:	4803      	ldr	r0, [pc, #12]	@ (8002214 <TIM6_DAC_IRQHandler+0x28>)
 8002208:	f001 f895 	bl	8003336 <HAL_DAC_IRQHandler>
  }
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000214 	.word	0x20000214
 8002214:	200000cc 	.word	0x200000cc

08002218 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800221c:	4802      	ldr	r0, [pc, #8]	@ (8002228 <CAN2_RX0_IRQHandler+0x10>)
 800221e:	f000 fd0a 	bl	8002c36 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200000a4 	.word	0x200000a4

0800222c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002230:	4b06      	ldr	r3, [pc, #24]	@ (800224c <SystemInit+0x20>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002236:	4a05      	ldr	r2, [pc, #20]	@ (800224c <SystemInit+0x20>)
 8002238:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800223c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002250:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002288 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002254:	f7ff ffea 	bl	800222c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002258:	480c      	ldr	r0, [pc, #48]	@ (800228c <LoopForever+0x6>)
  ldr r1, =_edata
 800225a:	490d      	ldr	r1, [pc, #52]	@ (8002290 <LoopForever+0xa>)
  ldr r2, =_sidata
 800225c:	4a0d      	ldr	r2, [pc, #52]	@ (8002294 <LoopForever+0xe>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002260:	e002      	b.n	8002268 <LoopCopyDataInit>

08002262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002266:	3304      	adds	r3, #4

08002268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800226c:	d3f9      	bcc.n	8002262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226e:	4a0a      	ldr	r2, [pc, #40]	@ (8002298 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002270:	4c0a      	ldr	r4, [pc, #40]	@ (800229c <LoopForever+0x16>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002274:	e001      	b.n	800227a <LoopFillZerobss>

08002276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002278:	3204      	adds	r2, #4

0800227a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800227c:	d3fb      	bcc.n	8002276 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800227e:	f007 fb81 	bl	8009984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002282:	f7fe ff25 	bl	80010d0 <main>

08002286 <LoopForever>:

LoopForever:
    b LoopForever
 8002286:	e7fe      	b.n	8002286 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002288:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800228c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002290:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002294:	08009be0 	.word	0x08009be0
  ldr r2, =_sbss
 8002298:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800229c:	20001d44 	.word	0x20001d44

080022a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022a0:	e7fe      	b.n	80022a0 <ADC1_2_IRQHandler>

080022a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022a8:	2300      	movs	r3, #0
 80022aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022ac:	2003      	movs	r0, #3
 80022ae:	f000 ff9e 	bl	80031ee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022b2:	200f      	movs	r0, #15
 80022b4:	f7ff fef2 	bl	800209c <HAL_InitTick>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	71fb      	strb	r3, [r7, #7]
 80022c2:	e001      	b.n	80022c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022c4:	f7ff fd00 	bl	8001cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022c8:	79fb      	ldrb	r3, [r7, #7]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022d8:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <HAL_IncTick+0x20>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	461a      	mov	r2, r3
 80022de:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <HAL_IncTick+0x24>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	4a04      	ldr	r2, [pc, #16]	@ (80022f8 <HAL_IncTick+0x24>)
 80022e6:	6013      	str	r3, [r2, #0]
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	20000008 	.word	0x20000008
 80022f8:	20000260 	.word	0x20000260

080022fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002300:	4b03      	ldr	r3, [pc, #12]	@ (8002310 <HAL_GetTick+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000260 	.word	0x20000260

08002314 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800231c:	f7ff ffee 	bl	80022fc <HAL_GetTick>
 8002320:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800232c:	d005      	beq.n	800233a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800232e:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <HAL_Delay+0x44>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4413      	add	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800233a:	bf00      	nop
 800233c:	f7ff ffde 	bl	80022fc <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	429a      	cmp	r2, r3
 800234a:	d8f7      	bhi.n	800233c <HAL_Delay+0x28>
  {
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000008 	.word	0x20000008

0800235c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e0ed      	b.n	800254a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d102      	bne.n	8002380 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff fccc 	bl	8001d18 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0201 	orr.w	r2, r2, #1
 800238e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002390:	f7ff ffb4 	bl	80022fc <HAL_GetTick>
 8002394:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002396:	e012      	b.n	80023be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002398:	f7ff ffb0 	bl	80022fc <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b0a      	cmp	r3, #10
 80023a4:	d90b      	bls.n	80023be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2205      	movs	r2, #5
 80023b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e0c5      	b.n	800254a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0e5      	beq.n	8002398 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0202 	bic.w	r2, r2, #2
 80023da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023dc:	f7ff ff8e 	bl	80022fc <HAL_GetTick>
 80023e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023e2:	e012      	b.n	800240a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023e4:	f7ff ff8a 	bl	80022fc <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b0a      	cmp	r3, #10
 80023f0:	d90b      	bls.n	800240a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2205      	movs	r2, #5
 8002402:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e09f      	b.n	800254a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1e5      	bne.n	80023e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	7e1b      	ldrb	r3, [r3, #24]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d108      	bne.n	8002432 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	e007      	b.n	8002442 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002440:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7e5b      	ldrb	r3, [r3, #25]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d108      	bne.n	800245c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e007      	b.n	800246c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800246a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	7e9b      	ldrb	r3, [r3, #26]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d108      	bne.n	8002486 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0220 	orr.w	r2, r2, #32
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	e007      	b.n	8002496 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0220 	bic.w	r2, r2, #32
 8002494:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	7edb      	ldrb	r3, [r3, #27]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d108      	bne.n	80024b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0210 	bic.w	r2, r2, #16
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	e007      	b.n	80024c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0210 	orr.w	r2, r2, #16
 80024be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	7f1b      	ldrb	r3, [r3, #28]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d108      	bne.n	80024da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0208 	orr.w	r2, r2, #8
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	e007      	b.n	80024ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0208 	bic.w	r2, r2, #8
 80024e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	7f5b      	ldrb	r3, [r3, #29]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d108      	bne.n	8002504 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0204 	orr.w	r2, r2, #4
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e007      	b.n	8002514 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0204 	bic.w	r2, r2, #4
 8002512:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	ea42 0103 	orr.w	r1, r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	1e5a      	subs	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3020 	ldrb.w	r3, [r3, #32]
 800256a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800256c:	7cfb      	ldrb	r3, [r7, #19]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d003      	beq.n	800257a <HAL_CAN_ConfigFilter+0x26>
 8002572:	7cfb      	ldrb	r3, [r7, #19]
 8002574:	2b02      	cmp	r3, #2
 8002576:	f040 80be 	bne.w	80026f6 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800257a:	4b65      	ldr	r3, [pc, #404]	@ (8002710 <HAL_CAN_ConfigFilter+0x1bc>)
 800257c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002584:	f043 0201 	orr.w	r2, r3, #1
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002594:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	431a      	orrs	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	2201      	movs	r2, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	401a      	ands	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d123      	bne.n	8002624 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	43db      	mvns	r3, r3
 80025e6:	401a      	ands	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80025fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	3248      	adds	r2, #72	@ 0x48
 8002604:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002618:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800261a:	6979      	ldr	r1, [r7, #20]
 800261c:	3348      	adds	r3, #72	@ 0x48
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	440b      	add	r3, r1
 8002622:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d122      	bne.n	8002672 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	431a      	orrs	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800264c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	3248      	adds	r2, #72	@ 0x48
 8002652:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002666:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002668:	6979      	ldr	r1, [r7, #20]
 800266a:	3348      	adds	r3, #72	@ 0x48
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	440b      	add	r3, r1
 8002670:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	43db      	mvns	r3, r3
 8002684:	401a      	ands	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800268c:	e007      	b.n	800269e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	431a      	orrs	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d109      	bne.n	80026ba <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	401a      	ands	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80026b8:	e007      	b.n	80026ca <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d107      	bne.n	80026e2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	431a      	orrs	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80026e8:	f023 0201 	bic.w	r2, r3, #1
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e006      	b.n	8002704 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
  }
}
 8002704:	4618      	mov	r0, r3
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	40006400 	.word	0x40006400

08002714 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b01      	cmp	r3, #1
 8002726:	d12e      	bne.n	8002786 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2202      	movs	r2, #2
 800272c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002740:	f7ff fddc 	bl	80022fc <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002746:	e012      	b.n	800276e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002748:	f7ff fdd8 	bl	80022fc <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b0a      	cmp	r3, #10
 8002754:	d90b      	bls.n	800276e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2205      	movs	r2, #5
 8002766:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e012      	b.n	8002794 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1e5      	bne.n	8002748 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	e006      	b.n	8002794 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
  }
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800279c:	b480      	push	{r7}
 800279e:	b089      	sub	sp, #36	@ 0x24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80027ba:	7ffb      	ldrb	r3, [r7, #31]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d003      	beq.n	80027c8 <HAL_CAN_AddTxMessage+0x2c>
 80027c0:	7ffb      	ldrb	r3, [r7, #31]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	f040 80ad 	bne.w	8002922 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d105      	bne.n	80027e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8095 	beq.w	8002912 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	0e1b      	lsrs	r3, r3, #24
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80027f2:	2201      	movs	r2, #1
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	409a      	lsls	r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10d      	bne.n	8002820 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800280e:	68f9      	ldr	r1, [r7, #12]
 8002810:	6809      	ldr	r1, [r1, #0]
 8002812:	431a      	orrs	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3318      	adds	r3, #24
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	440b      	add	r3, r1
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	e00f      	b.n	8002840 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800282a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002830:	68f9      	ldr	r1, [r7, #12]
 8002832:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002834:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	3318      	adds	r3, #24
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	440b      	add	r3, r1
 800283e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3318      	adds	r3, #24
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	440b      	add	r3, r1
 8002850:	3304      	adds	r3, #4
 8002852:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	7d1b      	ldrb	r3, [r3, #20]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d111      	bne.n	8002880 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	3318      	adds	r3, #24
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	4413      	add	r3, r2
 8002868:	3304      	adds	r3, #4
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	6811      	ldr	r1, [r2, #0]
 8002870:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	3318      	adds	r3, #24
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	440b      	add	r3, r1
 800287c:	3304      	adds	r3, #4
 800287e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3307      	adds	r3, #7
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	061a      	lsls	r2, r3, #24
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3306      	adds	r3, #6
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	041b      	lsls	r3, r3, #16
 8002890:	431a      	orrs	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3305      	adds	r3, #5
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	4313      	orrs	r3, r2
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	3204      	adds	r2, #4
 80028a0:	7812      	ldrb	r2, [r2, #0]
 80028a2:	4610      	mov	r0, r2
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	6811      	ldr	r1, [r2, #0]
 80028a8:	ea43 0200 	orr.w	r2, r3, r0
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	440b      	add	r3, r1
 80028b2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80028b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3303      	adds	r3, #3
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	061a      	lsls	r2, r3, #24
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3302      	adds	r3, #2
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	041b      	lsls	r3, r3, #16
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3301      	adds	r3, #1
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	021b      	lsls	r3, r3, #8
 80028d2:	4313      	orrs	r3, r2
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	7812      	ldrb	r2, [r2, #0]
 80028d8:	4610      	mov	r0, r2
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	6811      	ldr	r1, [r2, #0]
 80028de:	ea43 0200 	orr.w	r2, r3, r0
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	440b      	add	r3, r1
 80028e8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80028ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	3318      	adds	r3, #24
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	4413      	add	r3, r2
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	6811      	ldr	r1, [r2, #0]
 8002900:	f043 0201 	orr.w	r2, r3, #1
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	3318      	adds	r3, #24
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	440b      	add	r3, r1
 800290c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e00e      	b.n	8002930 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002916:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e006      	b.n	8002930 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002926:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
  }
}
 8002930:	4618      	mov	r0, r3
 8002932:	3724      	adds	r7, #36	@ 0x24
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002950:	7afb      	ldrb	r3, [r7, #11]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d002      	beq.n	800295c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002956:	7afb      	ldrb	r3, [r7, #11]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d11d      	bne.n	8002998 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3301      	adds	r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3301      	adds	r3, #1
 8002982:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3301      	adds	r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002998:	68fb      	ldr	r3, [r7, #12]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80029a6:	b480      	push	{r7}
 80029a8:	b087      	sub	sp, #28
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029ba:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d003      	beq.n	80029ca <HAL_CAN_GetRxMessage+0x24>
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	f040 8103 	bne.w	8002bd0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10e      	bne.n	80029ee <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d116      	bne.n	8002a0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e0f7      	b.n	8002bde <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d107      	bne.n	8002a0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a00:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0e8      	b.n	8002bde <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	331b      	adds	r3, #27
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	4413      	add	r3, r2
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0204 	and.w	r2, r3, #4
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10c      	bne.n	8002a44 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	331b      	adds	r3, #27
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	4413      	add	r3, r2
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	0d5b      	lsrs	r3, r3, #21
 8002a3a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e00b      	b.n	8002a5c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	331b      	adds	r3, #27
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	4413      	add	r3, r2
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	08db      	lsrs	r3, r3, #3
 8002a54:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	331b      	adds	r3, #27
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	4413      	add	r3, r2
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0202 	and.w	r2, r3, #2
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	331b      	adds	r3, #27
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3304      	adds	r3, #4
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2208      	movs	r2, #8
 8002a8e:	611a      	str	r2, [r3, #16]
 8002a90:	e00b      	b.n	8002aaa <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	331b      	adds	r3, #27
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 020f 	and.w	r2, r3, #15
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	331b      	adds	r3, #27
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	0a1b      	lsrs	r3, r3, #8
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	331b      	adds	r3, #27
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	4413      	add	r3, r2
 8002ace:	3304      	adds	r3, #4
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	0c1b      	lsrs	r3, r3, #16
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	011b      	lsls	r3, r3, #4
 8002ae2:	4413      	add	r3, r2
 8002ae4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0a1a      	lsrs	r2, r3, #8
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	3301      	adds	r3, #1
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	0c1a      	lsrs	r2, r3, #16
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	3302      	adds	r3, #2
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	0e1a      	lsrs	r2, r3, #24
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	3303      	adds	r3, #3
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	4413      	add	r3, r2
 8002b48:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	3304      	adds	r3, #4
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	0a1a      	lsrs	r2, r3, #8
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	3305      	adds	r3, #5
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	0c1a      	lsrs	r2, r3, #16
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	3306      	adds	r3, #6
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	0e1a      	lsrs	r2, r3, #24
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	3307      	adds	r3, #7
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d108      	bne.n	8002bbc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0220 	orr.w	r2, r2, #32
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	e007      	b.n	8002bcc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691a      	ldr	r2, [r3, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0220 	orr.w	r2, r2, #32
 8002bca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e006      	b.n	8002bde <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bfa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d002      	beq.n	8002c08 <HAL_CAN_ActivateNotification+0x1e>
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d109      	bne.n	8002c1c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6959      	ldr	r1, [r3, #20]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	e006      	b.n	8002c2a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
  }
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b08a      	sub	sp, #40	@ 0x28
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d07c      	beq.n	8002d76 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d023      	beq.n	8002cce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f983 	bl	8002fa4 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c9e:	e016      	b.n	8002cce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d004      	beq.n	8002cb4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb2:	e00c      	b.n	8002cce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d004      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc6:	e002      	b.n	8002cce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f989 	bl	8002fe0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d024      	beq.n	8002d22 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ce0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f963 	bl	8002fb8 <HAL_CAN_TxMailbox1CompleteCallback>
 8002cf2:	e016      	b.n	8002d22 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d004      	beq.n	8002d08 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d06:	e00c      	b.n	8002d22 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d004      	beq.n	8002d1c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d1a:	e002      	b.n	8002d22 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f969 	bl	8002ff4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d024      	beq.n	8002d76 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f943 	bl	8002fcc <HAL_CAN_TxMailbox2CompleteCallback>
 8002d46:	e016      	b.n	8002d76 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d004      	beq.n	8002d5c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d5a:	e00c      	b.n	8002d76 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d004      	beq.n	8002d70 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d6e:	e002      	b.n	8002d76 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f949 	bl	8003008 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00c      	beq.n	8002d9a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d007      	beq.n	8002d9a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2210      	movs	r2, #16
 8002d98:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00b      	beq.n	8002dbc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d006      	beq.n	8002dbc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2208      	movs	r2, #8
 8002db4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f930 	bl	800301c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7fe f865 	bl	8000ea4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00c      	beq.n	8002dfe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f003 0310 	and.w	r3, r3, #16
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002df4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2210      	movs	r2, #16
 8002dfc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00b      	beq.n	8002e20 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d006      	beq.n	8002e20 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2208      	movs	r2, #8
 8002e18:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f912 	bl	8003044 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f8f9 	bl	8003030 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d006      	beq.n	8002e60 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2210      	movs	r2, #16
 8002e58:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f8fc 	bl	8003058 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00b      	beq.n	8002e82 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d006      	beq.n	8002e82 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2208      	movs	r2, #8
 8002e7a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f8f5 	bl	800306c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d07b      	beq.n	8002f84 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d072      	beq.n	8002f7c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	f043 0302 	orr.w	r3, r3, #2
 8002ecc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee4:	f043 0304 	orr.w	r3, r3, #4
 8002ee8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d043      	beq.n	8002f7c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d03e      	beq.n	8002f7c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f04:	2b60      	cmp	r3, #96	@ 0x60
 8002f06:	d02b      	beq.n	8002f60 <HAL_CAN_IRQHandler+0x32a>
 8002f08:	2b60      	cmp	r3, #96	@ 0x60
 8002f0a:	d82e      	bhi.n	8002f6a <HAL_CAN_IRQHandler+0x334>
 8002f0c:	2b50      	cmp	r3, #80	@ 0x50
 8002f0e:	d022      	beq.n	8002f56 <HAL_CAN_IRQHandler+0x320>
 8002f10:	2b50      	cmp	r3, #80	@ 0x50
 8002f12:	d82a      	bhi.n	8002f6a <HAL_CAN_IRQHandler+0x334>
 8002f14:	2b40      	cmp	r3, #64	@ 0x40
 8002f16:	d019      	beq.n	8002f4c <HAL_CAN_IRQHandler+0x316>
 8002f18:	2b40      	cmp	r3, #64	@ 0x40
 8002f1a:	d826      	bhi.n	8002f6a <HAL_CAN_IRQHandler+0x334>
 8002f1c:	2b30      	cmp	r3, #48	@ 0x30
 8002f1e:	d010      	beq.n	8002f42 <HAL_CAN_IRQHandler+0x30c>
 8002f20:	2b30      	cmp	r3, #48	@ 0x30
 8002f22:	d822      	bhi.n	8002f6a <HAL_CAN_IRQHandler+0x334>
 8002f24:	2b10      	cmp	r3, #16
 8002f26:	d002      	beq.n	8002f2e <HAL_CAN_IRQHandler+0x2f8>
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d005      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002f2c:	e01d      	b.n	8002f6a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	f043 0308 	orr.w	r3, r3, #8
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f36:	e019      	b.n	8002f6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	f043 0310 	orr.w	r3, r3, #16
 8002f3e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f40:	e014      	b.n	8002f6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f44:	f043 0320 	orr.w	r3, r3, #32
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f4a:	e00f      	b.n	8002f6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f52:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f54:	e00a      	b.n	8002f6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f5c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f5e:	e005      	b.n	8002f6c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f66:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f68:	e000      	b.n	8002f6c <HAL_CAN_IRQHandler+0x336>
            break;
 8002f6a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699a      	ldr	r2, [r3, #24]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f7a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2204      	movs	r2, #4
 8002f82:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d008      	beq.n	8002f9c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f872 	bl	8003080 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	3728      	adds	r7, #40	@ 0x28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a4:	4b0c      	ldr	r3, [pc, #48]	@ (80030d8 <__NVIC_SetPriorityGrouping+0x44>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030b0:	4013      	ands	r3, r2
 80030b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030c6:	4a04      	ldr	r2, [pc, #16]	@ (80030d8 <__NVIC_SetPriorityGrouping+0x44>)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	60d3      	str	r3, [r2, #12]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e0:	4b04      	ldr	r3, [pc, #16]	@ (80030f4 <__NVIC_GetPriorityGrouping+0x18>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	0a1b      	lsrs	r3, r3, #8
 80030e6:	f003 0307 	and.w	r3, r3, #7
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	2b00      	cmp	r3, #0
 8003108:	db0b      	blt.n	8003122 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	f003 021f 	and.w	r2, r3, #31
 8003110:	4907      	ldr	r1, [pc, #28]	@ (8003130 <__NVIC_EnableIRQ+0x38>)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	2001      	movs	r0, #1
 800311a:	fa00 f202 	lsl.w	r2, r0, r2
 800311e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000e100 	.word	0xe000e100

08003134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003144:	2b00      	cmp	r3, #0
 8003146:	db0a      	blt.n	800315e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	490c      	ldr	r1, [pc, #48]	@ (8003180 <__NVIC_SetPriority+0x4c>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	0112      	lsls	r2, r2, #4
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	440b      	add	r3, r1
 8003158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800315c:	e00a      	b.n	8003174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4908      	ldr	r1, [pc, #32]	@ (8003184 <__NVIC_SetPriority+0x50>)
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	3b04      	subs	r3, #4
 800316c:	0112      	lsls	r2, r2, #4
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	440b      	add	r3, r1
 8003172:	761a      	strb	r2, [r3, #24]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000e100 	.word	0xe000e100
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003188:	b480      	push	{r7}
 800318a:	b089      	sub	sp, #36	@ 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f1c3 0307 	rsb	r3, r3, #7
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	bf28      	it	cs
 80031a6:	2304      	movcs	r3, #4
 80031a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2b06      	cmp	r3, #6
 80031b0:	d902      	bls.n	80031b8 <NVIC_EncodePriority+0x30>
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3b03      	subs	r3, #3
 80031b6:	e000      	b.n	80031ba <NVIC_EncodePriority+0x32>
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	f04f 32ff 	mov.w	r2, #4294967295
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43da      	mvns	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	401a      	ands	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d0:	f04f 31ff 	mov.w	r1, #4294967295
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	43d9      	mvns	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e0:	4313      	orrs	r3, r2
         );
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3724      	adds	r7, #36	@ 0x24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff ff4c 	bl	8003094 <__NVIC_SetPriorityGrouping>
}
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003216:	f7ff ff61 	bl	80030dc <__NVIC_GetPriorityGrouping>
 800321a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	6978      	ldr	r0, [r7, #20]
 8003222:	f7ff ffb1 	bl	8003188 <NVIC_EncodePriority>
 8003226:	4602      	mov	r2, r0
 8003228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff ff80 	bl	8003134 <__NVIC_SetPriority>
}
 8003234:	bf00      	nop
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff ff54 	bl	80030f8 <__NVIC_EnableIRQ>
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e014      	b.n	8003294 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	791b      	ldrb	r3, [r3, #4]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d105      	bne.n	8003280 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fe fe12 	bl	8001ea4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	795b      	ldrb	r3, [r3, #5]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_DAC_Start+0x16>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e03b      	b.n	800332a <HAL_DAC_Start+0x8e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6819      	ldr	r1, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2201      	movs	r2, #1
 80032cc:	409a      	lsls	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10f      	bne.n	80032fc <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d118      	bne.n	800331c <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0201 	orr.w	r2, r2, #1
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	e00f      	b.n	800331c <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8003306:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800330a:	d107      	bne.n	800331c <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0202 	orr.w	r2, r2, #2
 800331a:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800334c:	d120      	bne.n	8003390 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003354:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800335c:	d118      	bne.n	8003390 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2204      	movs	r2, #4
 8003362:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f043 0201 	orr.w	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003378:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003388:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f852 	bl	8003434 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800339a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800339e:	d120      	bne.n	80033e2 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033ae:	d118      	bne.n	80033e2 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2204      	movs	r2, #4
 80033b4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	f043 0202 	orr.w	r2, r3, #2
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80033ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80033da:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f95a 	bl	8003696 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b087      	sub	sp, #28
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d105      	bne.n	8003414 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4413      	add	r3, r2
 800340e:	3308      	adds	r3, #8
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	e004      	b.n	800341e <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	3314      	adds	r3, #20
 800341c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	461a      	mov	r2, r3
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	371c      	adds	r7, #28
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b088      	sub	sp, #32
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	795b      	ldrb	r3, [r3, #5]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_DAC_ConfigChannel+0x1c>
 8003460:	2302      	movs	r3, #2
 8003462:	e114      	b.n	800368e <HAL_DAC_ConfigChannel+0x246>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2202      	movs	r2, #2
 800346e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b04      	cmp	r3, #4
 8003476:	f040 8081 	bne.w	800357c <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800347a:	f7fe ff3f 	bl	80022fc <HAL_GetTick>
 800347e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d140      	bne.n	8003508 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003486:	e018      	b.n	80034ba <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003488:	f7fe ff38 	bl	80022fc <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d911      	bls.n	80034ba <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800349c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f043 0208 	orr.w	r2, r3, #8
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2203      	movs	r2, #3
 80034b4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e0e9      	b.n	800368e <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1df      	bne.n	8003488 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80034c8:	2001      	movs	r0, #1
 80034ca:	f7fe ff23 	bl	8002314 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	6992      	ldr	r2, [r2, #24]
 80034d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80034d8:	e023      	b.n	8003522 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80034da:	f7fe ff0f 	bl	80022fc <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d90f      	bls.n	8003508 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	da0a      	bge.n	8003508 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f043 0208 	orr.w	r2, r3, #8
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2203      	movs	r2, #3
 8003502:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e0c2      	b.n	800368e <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350e:	2b00      	cmp	r3, #0
 8003510:	dbe3      	blt.n	80034da <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8003512:	2001      	movs	r0, #1
 8003514:	f7fe fefe 	bl	8002314 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	6992      	ldr	r2, [r2, #24]
 8003520:	645a      	str	r2, [r3, #68]	@ 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003532:	fa01 f303 	lsl.w	r3, r1, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	ea02 0103 	and.w	r1, r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f003 0310 	and.w	r3, r3, #16
 8003546:	409a      	lsls	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	649a      	str	r2, [r3, #72]	@ 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f003 0310 	and.w	r3, r3, #16
 800355c:	21ff      	movs	r1, #255	@ 0xff
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	ea02 0103 	and.w	r1, r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	6a1a      	ldr	r2, [r3, #32]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	409a      	lsls	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d11d      	bne.n	80035c0 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	221f      	movs	r2, #31
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2207      	movs	r2, #7
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	431a      	orrs	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f003 0310 	and.w	r3, r3, #16
 8003614:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43da      	mvns	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	400a      	ands	r2, r1
 8003624:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	fa02 f303 	lsl.w	r3, r2, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6819      	ldr	r1, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	22c0      	movs	r2, #192	@ 0xc0
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43da      	mvns	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	400a      	ands	r2, r1
 800367e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ba:	e166      	b.n	800398a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	2101      	movs	r1, #1
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	fa01 f303 	lsl.w	r3, r1, r3
 80036c8:	4013      	ands	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 8158 	beq.w	8003984 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d005      	beq.n	80036ec <HAL_GPIO_Init+0x40>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d130      	bne.n	800374e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	2203      	movs	r2, #3
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	4013      	ands	r3, r2
 8003702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003722:	2201      	movs	r2, #1
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	fa02 f303 	lsl.w	r3, r2, r3
 800372a:	43db      	mvns	r3, r3
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	091b      	lsrs	r3, r3, #4
 8003738:	f003 0201 	and.w	r2, r3, #1
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b03      	cmp	r3, #3
 8003758:	d017      	beq.n	800378a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	2203      	movs	r2, #3
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43db      	mvns	r3, r3
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4013      	ands	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	4313      	orrs	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 0303 	and.w	r3, r3, #3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d123      	bne.n	80037de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	08da      	lsrs	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3208      	adds	r2, #8
 800379e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	f003 0307 	and.w	r3, r3, #7
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	220f      	movs	r2, #15
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	43db      	mvns	r3, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	08da      	lsrs	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3208      	adds	r2, #8
 80037d8:	6939      	ldr	r1, [r7, #16]
 80037da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	2203      	movs	r2, #3
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f003 0203 	and.w	r2, r3, #3
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 80b2 	beq.w	8003984 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003820:	4b61      	ldr	r3, [pc, #388]	@ (80039a8 <HAL_GPIO_Init+0x2fc>)
 8003822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003824:	4a60      	ldr	r2, [pc, #384]	@ (80039a8 <HAL_GPIO_Init+0x2fc>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6613      	str	r3, [r2, #96]	@ 0x60
 800382c:	4b5e      	ldr	r3, [pc, #376]	@ (80039a8 <HAL_GPIO_Init+0x2fc>)
 800382e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003838:	4a5c      	ldr	r2, [pc, #368]	@ (80039ac <HAL_GPIO_Init+0x300>)
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	089b      	lsrs	r3, r3, #2
 800383e:	3302      	adds	r3, #2
 8003840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003844:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	220f      	movs	r2, #15
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003862:	d02b      	beq.n	80038bc <HAL_GPIO_Init+0x210>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a52      	ldr	r2, [pc, #328]	@ (80039b0 <HAL_GPIO_Init+0x304>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d025      	beq.n	80038b8 <HAL_GPIO_Init+0x20c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a51      	ldr	r2, [pc, #324]	@ (80039b4 <HAL_GPIO_Init+0x308>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d01f      	beq.n	80038b4 <HAL_GPIO_Init+0x208>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a50      	ldr	r2, [pc, #320]	@ (80039b8 <HAL_GPIO_Init+0x30c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d019      	beq.n	80038b0 <HAL_GPIO_Init+0x204>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a4f      	ldr	r2, [pc, #316]	@ (80039bc <HAL_GPIO_Init+0x310>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d013      	beq.n	80038ac <HAL_GPIO_Init+0x200>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a4e      	ldr	r2, [pc, #312]	@ (80039c0 <HAL_GPIO_Init+0x314>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00d      	beq.n	80038a8 <HAL_GPIO_Init+0x1fc>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a4d      	ldr	r2, [pc, #308]	@ (80039c4 <HAL_GPIO_Init+0x318>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d007      	beq.n	80038a4 <HAL_GPIO_Init+0x1f8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a4c      	ldr	r2, [pc, #304]	@ (80039c8 <HAL_GPIO_Init+0x31c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d101      	bne.n	80038a0 <HAL_GPIO_Init+0x1f4>
 800389c:	2307      	movs	r3, #7
 800389e:	e00e      	b.n	80038be <HAL_GPIO_Init+0x212>
 80038a0:	2308      	movs	r3, #8
 80038a2:	e00c      	b.n	80038be <HAL_GPIO_Init+0x212>
 80038a4:	2306      	movs	r3, #6
 80038a6:	e00a      	b.n	80038be <HAL_GPIO_Init+0x212>
 80038a8:	2305      	movs	r3, #5
 80038aa:	e008      	b.n	80038be <HAL_GPIO_Init+0x212>
 80038ac:	2304      	movs	r3, #4
 80038ae:	e006      	b.n	80038be <HAL_GPIO_Init+0x212>
 80038b0:	2303      	movs	r3, #3
 80038b2:	e004      	b.n	80038be <HAL_GPIO_Init+0x212>
 80038b4:	2302      	movs	r3, #2
 80038b6:	e002      	b.n	80038be <HAL_GPIO_Init+0x212>
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <HAL_GPIO_Init+0x212>
 80038bc:	2300      	movs	r3, #0
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	f002 0203 	and.w	r2, r2, #3
 80038c4:	0092      	lsls	r2, r2, #2
 80038c6:	4093      	lsls	r3, r2
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038ce:	4937      	ldr	r1, [pc, #220]	@ (80039ac <HAL_GPIO_Init+0x300>)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	089b      	lsrs	r3, r3, #2
 80038d4:	3302      	adds	r3, #2
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038dc:	4b3b      	ldr	r3, [pc, #236]	@ (80039cc <HAL_GPIO_Init+0x320>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4013      	ands	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003900:	4a32      	ldr	r2, [pc, #200]	@ (80039cc <HAL_GPIO_Init+0x320>)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003906:	4b31      	ldr	r3, [pc, #196]	@ (80039cc <HAL_GPIO_Init+0x320>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	43db      	mvns	r3, r3
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4013      	ands	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800392a:	4a28      	ldr	r2, [pc, #160]	@ (80039cc <HAL_GPIO_Init+0x320>)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003930:	4b26      	ldr	r3, [pc, #152]	@ (80039cc <HAL_GPIO_Init+0x320>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	43db      	mvns	r3, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4013      	ands	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003954:	4a1d      	ldr	r2, [pc, #116]	@ (80039cc <HAL_GPIO_Init+0x320>)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800395a:	4b1c      	ldr	r3, [pc, #112]	@ (80039cc <HAL_GPIO_Init+0x320>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	43db      	mvns	r3, r3
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4013      	ands	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800397e:	4a13      	ldr	r2, [pc, #76]	@ (80039cc <HAL_GPIO_Init+0x320>)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	3301      	adds	r3, #1
 8003988:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	f47f ae91 	bne.w	80036bc <HAL_GPIO_Init+0x10>
  }
}
 800399a:	bf00      	nop
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40010000 	.word	0x40010000
 80039b0:	48000400 	.word	0x48000400
 80039b4:	48000800 	.word	0x48000800
 80039b8:	48000c00 	.word	0x48000c00
 80039bc:	48001000 	.word	0x48001000
 80039c0:	48001400 	.word	0x48001400
 80039c4:	48001800 	.word	0x48001800
 80039c8:	48001c00 	.word	0x48001c00
 80039cc:	40010400 	.word	0x40010400

080039d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	460b      	mov	r3, r1
 80039da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	887b      	ldrh	r3, [r7, #2]
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
 80039ec:	e001      	b.n	80039f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039ee:	2300      	movs	r3, #0
 80039f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a10:	787b      	ldrb	r3, [r7, #1]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a16:	887a      	ldrh	r2, [r7, #2]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a1c:	e002      	b.n	8003a24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a1e:	887a      	ldrh	r2, [r7, #2]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a42:	887a      	ldrh	r2, [r7, #2]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4013      	ands	r3, r2
 8003a48:	041a      	lsls	r2, r3, #16
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	43d9      	mvns	r1, r3
 8003a4e:	887b      	ldrh	r3, [r7, #2]
 8003a50:	400b      	ands	r3, r1
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	619a      	str	r2, [r3, #24]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a6e:	4b08      	ldr	r3, [pc, #32]	@ (8003a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d006      	beq.n	8003a88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a7a:	4a05      	ldr	r2, [pc, #20]	@ (8003a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fd f9a2 	bl	8000dcc <HAL_GPIO_EXTI_Callback>
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40010400 	.word	0x40010400

08003a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e08d      	b.n	8003bc2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fe fa38 	bl	8001f30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2224      	movs	r2, #36	@ 0x24
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0201 	bic.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ae4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003af4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d107      	bne.n	8003b0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	e006      	b.n	8003b1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d108      	bne.n	8003b36 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b32:	605a      	str	r2, [r3, #4]
 8003b34:	e007      	b.n	8003b46 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69d9      	ldr	r1, [r3, #28]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1a      	ldr	r2, [r3, #32]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	4608      	mov	r0, r1
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4603      	mov	r3, r0
 8003bdc:	817b      	strh	r3, [r7, #10]
 8003bde:	460b      	mov	r3, r1
 8003be0:	813b      	strh	r3, [r7, #8]
 8003be2:	4613      	mov	r3, r2
 8003be4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	f040 80f9 	bne.w	8003de6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <HAL_I2C_Mem_Write+0x34>
 8003bfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c06:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0ed      	b.n	8003de8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_I2C_Mem_Write+0x4e>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e0e6      	b.n	8003de8 <HAL_I2C_Mem_Write+0x21c>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c22:	f7fe fb6b 	bl	80022fc <HAL_GetTick>
 8003c26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2319      	movs	r3, #25
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 fac3 	bl	80041c0 <I2C_WaitOnFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0d1      	b.n	8003de8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2221      	movs	r2, #33	@ 0x21
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2240      	movs	r2, #64	@ 0x40
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a3a      	ldr	r2, [r7, #32]
 8003c5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c6c:	88f8      	ldrh	r0, [r7, #6]
 8003c6e:	893a      	ldrh	r2, [r7, #8]
 8003c70:	8979      	ldrh	r1, [r7, #10]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 f9d3 	bl	8004028 <I2C_RequestMemoryWrite>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0a9      	b.n	8003de8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2bff      	cmp	r3, #255	@ 0xff
 8003c9c:	d90e      	bls.n	8003cbc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	22ff      	movs	r2, #255	@ 0xff
 8003ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	8979      	ldrh	r1, [r7, #10]
 8003cac:	2300      	movs	r3, #0
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 fc47 	bl	8004548 <I2C_TransferConfig>
 8003cba:	e00f      	b.n	8003cdc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	8979      	ldrh	r1, [r7, #10]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f000 fc36 	bl	8004548 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fac6 	bl	8004272 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e07b      	b.n	8003de8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf4:	781a      	ldrb	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d034      	beq.n	8003d94 <HAL_I2C_Mem_Write+0x1c8>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d130      	bne.n	8003d94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2180      	movs	r1, #128	@ 0x80
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fa3f 	bl	80041c0 <I2C_WaitOnFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e04d      	b.n	8003de8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2bff      	cmp	r3, #255	@ 0xff
 8003d54:	d90e      	bls.n	8003d74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	22ff      	movs	r2, #255	@ 0xff
 8003d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	8979      	ldrh	r1, [r7, #10]
 8003d64:	2300      	movs	r3, #0
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 fbeb 	bl	8004548 <I2C_TransferConfig>
 8003d72:	e00f      	b.n	8003d94 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	8979      	ldrh	r1, [r7, #10]
 8003d86:	2300      	movs	r3, #0
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fbda 	bl	8004548 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d19e      	bne.n	8003cdc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 faac 	bl	8004300 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e01a      	b.n	8003de8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2220      	movs	r2, #32
 8003db8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6859      	ldr	r1, [r3, #4]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8003df0 <HAL_I2C_Mem_Write+0x224>)
 8003dc6:	400b      	ands	r3, r1
 8003dc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	e000      	b.n	8003de8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003de6:	2302      	movs	r3, #2
  }
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	fe00e800 	.word	0xfe00e800

08003df4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	461a      	mov	r2, r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	817b      	strh	r3, [r7, #10]
 8003e06:	460b      	mov	r3, r1
 8003e08:	813b      	strh	r3, [r7, #8]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	f040 80fd 	bne.w	8004016 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_I2C_Mem_Read+0x34>
 8003e22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d105      	bne.n	8003e34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0f1      	b.n	8004018 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_I2C_Mem_Read+0x4e>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e0ea      	b.n	8004018 <HAL_I2C_Mem_Read+0x224>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e4a:	f7fe fa57 	bl	80022fc <HAL_GetTick>
 8003e4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	2319      	movs	r3, #25
 8003e56:	2201      	movs	r2, #1
 8003e58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f9af 	bl	80041c0 <I2C_WaitOnFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0d5      	b.n	8004018 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2222      	movs	r2, #34	@ 0x22
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2240      	movs	r2, #64	@ 0x40
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a3a      	ldr	r2, [r7, #32]
 8003e86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e94:	88f8      	ldrh	r0, [r7, #6]
 8003e96:	893a      	ldrh	r2, [r7, #8]
 8003e98:	8979      	ldrh	r1, [r7, #10]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f913 	bl	80040d0 <I2C_RequestMemoryRead>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d005      	beq.n	8003ebc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0ad      	b.n	8004018 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2bff      	cmp	r3, #255	@ 0xff
 8003ec4:	d90e      	bls.n	8003ee4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	8979      	ldrh	r1, [r7, #10]
 8003ed4:	4b52      	ldr	r3, [pc, #328]	@ (8004020 <HAL_I2C_Mem_Read+0x22c>)
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 fb33 	bl	8004548 <I2C_TransferConfig>
 8003ee2:	e00f      	b.n	8003f04 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	8979      	ldrh	r1, [r7, #10]
 8003ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8004020 <HAL_I2C_Mem_Read+0x22c>)
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 fb22 	bl	8004548 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2104      	movs	r1, #4
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 f956 	bl	80041c0 <I2C_WaitOnFlagUntilTimeout>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e07c      	b.n	8004018 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d034      	beq.n	8003fc4 <HAL_I2C_Mem_Read+0x1d0>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d130      	bne.n	8003fc4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2180      	movs	r1, #128	@ 0x80
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f927 	bl	80041c0 <I2C_WaitOnFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e04d      	b.n	8004018 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2bff      	cmp	r3, #255	@ 0xff
 8003f84:	d90e      	bls.n	8003fa4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	8979      	ldrh	r1, [r7, #10]
 8003f94:	2300      	movs	r3, #0
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 fad3 	bl	8004548 <I2C_TransferConfig>
 8003fa2:	e00f      	b.n	8003fc4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	8979      	ldrh	r1, [r7, #10]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 fac2 	bl	8004548 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d19a      	bne.n	8003f04 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f994 	bl	8004300 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e01a      	b.n	8004018 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6859      	ldr	r1, [r3, #4]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8004024 <HAL_I2C_Mem_Read+0x230>)
 8003ff6:	400b      	ands	r3, r1
 8003ff8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e000      	b.n	8004018 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	80002400 	.word	0x80002400
 8004024:	fe00e800 	.word	0xfe00e800

08004028 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	4608      	mov	r0, r1
 8004032:	4611      	mov	r1, r2
 8004034:	461a      	mov	r2, r3
 8004036:	4603      	mov	r3, r0
 8004038:	817b      	strh	r3, [r7, #10]
 800403a:	460b      	mov	r3, r1
 800403c:	813b      	strh	r3, [r7, #8]
 800403e:	4613      	mov	r3, r2
 8004040:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	b2da      	uxtb	r2, r3
 8004046:	8979      	ldrh	r1, [r7, #10]
 8004048:	4b20      	ldr	r3, [pc, #128]	@ (80040cc <I2C_RequestMemoryWrite+0xa4>)
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 fa79 	bl	8004548 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004056:	69fa      	ldr	r2, [r7, #28]
 8004058:	69b9      	ldr	r1, [r7, #24]
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f000 f909 	bl	8004272 <I2C_WaitOnTXISFlagUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d001      	beq.n	800406a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e02c      	b.n	80040c4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800406a:	88fb      	ldrh	r3, [r7, #6]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d105      	bne.n	800407c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004070:	893b      	ldrh	r3, [r7, #8]
 8004072:	b2da      	uxtb	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	629a      	str	r2, [r3, #40]	@ 0x28
 800407a:	e015      	b.n	80040a8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800407c:	893b      	ldrh	r3, [r7, #8]
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	b29b      	uxth	r3, r3
 8004082:	b2da      	uxtb	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	69b9      	ldr	r1, [r7, #24]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f8ef 	bl	8004272 <I2C_WaitOnTXISFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e012      	b.n	80040c4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800409e:	893b      	ldrh	r3, [r7, #8]
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	2200      	movs	r2, #0
 80040b0:	2180      	movs	r1, #128	@ 0x80
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f000 f884 	bl	80041c0 <I2C_WaitOnFlagUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	80002000 	.word	0x80002000

080040d0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	4608      	mov	r0, r1
 80040da:	4611      	mov	r1, r2
 80040dc:	461a      	mov	r2, r3
 80040de:	4603      	mov	r3, r0
 80040e0:	817b      	strh	r3, [r7, #10]
 80040e2:	460b      	mov	r3, r1
 80040e4:	813b      	strh	r3, [r7, #8]
 80040e6:	4613      	mov	r3, r2
 80040e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80040ea:	88fb      	ldrh	r3, [r7, #6]
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	8979      	ldrh	r1, [r7, #10]
 80040f0:	4b20      	ldr	r3, [pc, #128]	@ (8004174 <I2C_RequestMemoryRead+0xa4>)
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	2300      	movs	r3, #0
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 fa26 	bl	8004548 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fc:	69fa      	ldr	r2, [r7, #28]
 80040fe:	69b9      	ldr	r1, [r7, #24]
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 f8b6 	bl	8004272 <I2C_WaitOnTXISFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e02c      	b.n	800416a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d105      	bne.n	8004122 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004116:	893b      	ldrh	r3, [r7, #8]
 8004118:	b2da      	uxtb	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004120:	e015      	b.n	800414e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004122:	893b      	ldrh	r3, [r7, #8]
 8004124:	0a1b      	lsrs	r3, r3, #8
 8004126:	b29b      	uxth	r3, r3
 8004128:	b2da      	uxtb	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	69b9      	ldr	r1, [r7, #24]
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f89c 	bl	8004272 <I2C_WaitOnTXISFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e012      	b.n	800416a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004144:	893b      	ldrh	r3, [r7, #8]
 8004146:	b2da      	uxtb	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	2200      	movs	r2, #0
 8004156:	2140      	movs	r1, #64	@ 0x40
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f831 	bl	80041c0 <I2C_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	80002000 	.word	0x80002000

08004178 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b02      	cmp	r3, #2
 800418c:	d103      	bne.n	8004196 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2200      	movs	r2, #0
 8004194:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d007      	beq.n	80041b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	619a      	str	r2, [r3, #24]
  }
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	4613      	mov	r3, r2
 80041ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041d0:	e03b      	b.n	800424a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	6839      	ldr	r1, [r7, #0]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f8d6 	bl	8004388 <I2C_IsErrorOccurred>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e041      	b.n	800426a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d02d      	beq.n	800424a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ee:	f7fe f885 	bl	80022fc <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d302      	bcc.n	8004204 <I2C_WaitOnFlagUntilTimeout+0x44>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d122      	bne.n	800424a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699a      	ldr	r2, [r3, #24]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	4013      	ands	r3, r2
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	429a      	cmp	r2, r3
 8004212:	bf0c      	ite	eq
 8004214:	2301      	moveq	r3, #1
 8004216:	2300      	movne	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	429a      	cmp	r2, r3
 8004220:	d113      	bne.n	800424a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004226:	f043 0220 	orr.w	r2, r3, #32
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e00f      	b.n	800426a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699a      	ldr	r2, [r3, #24]
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4013      	ands	r3, r2
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	429a      	cmp	r2, r3
 8004258:	bf0c      	ite	eq
 800425a:	2301      	moveq	r3, #1
 800425c:	2300      	movne	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	461a      	mov	r2, r3
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	429a      	cmp	r2, r3
 8004266:	d0b4      	beq.n	80041d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800427e:	e033      	b.n	80042e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f87f 	bl	8004388 <I2C_IsErrorOccurred>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e031      	b.n	80042f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	d025      	beq.n	80042e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429c:	f7fe f82e 	bl	80022fc <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d302      	bcc.n	80042b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d11a      	bne.n	80042e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d013      	beq.n	80042e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c4:	f043 0220 	orr.w	r2, r3, #32
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e007      	b.n	80042f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d1c4      	bne.n	8004280 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800430c:	e02f      	b.n	800436e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 f838 	bl	8004388 <I2C_IsErrorOccurred>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e02d      	b.n	800437e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004322:	f7fd ffeb 	bl	80022fc <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	429a      	cmp	r2, r3
 8004330:	d302      	bcc.n	8004338 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d11a      	bne.n	800436e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b20      	cmp	r3, #32
 8004344:	d013      	beq.n	800436e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434a:	f043 0220 	orr.w	r2, r3, #32
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e007      	b.n	800437e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b20      	cmp	r3, #32
 800437a:	d1c8      	bne.n	800430e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08a      	sub	sp, #40	@ 0x28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d068      	beq.n	8004486 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2210      	movs	r2, #16
 80043ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043bc:	e049      	b.n	8004452 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d045      	beq.n	8004452 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043c6:	f7fd ff99 	bl	80022fc <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d302      	bcc.n	80043dc <I2C_IsErrorOccurred+0x54>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d13a      	bne.n	8004452 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043fe:	d121      	bne.n	8004444 <I2C_IsErrorOccurred+0xbc>
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004406:	d01d      	beq.n	8004444 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004408:	7cfb      	ldrb	r3, [r7, #19]
 800440a:	2b20      	cmp	r3, #32
 800440c:	d01a      	beq.n	8004444 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800441c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800441e:	f7fd ff6d 	bl	80022fc <HAL_GetTick>
 8004422:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004424:	e00e      	b.n	8004444 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004426:	f7fd ff69 	bl	80022fc <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b19      	cmp	r3, #25
 8004432:	d907      	bls.n	8004444 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	f043 0320 	orr.w	r3, r3, #32
 800443a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004442:	e006      	b.n	8004452 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	f003 0320 	and.w	r3, r3, #32
 800444e:	2b20      	cmp	r3, #32
 8004450:	d1e9      	bne.n	8004426 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	f003 0320 	and.w	r3, r3, #32
 800445c:	2b20      	cmp	r3, #32
 800445e:	d003      	beq.n	8004468 <I2C_IsErrorOccurred+0xe0>
 8004460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0aa      	beq.n	80043be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004468:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800446c:	2b00      	cmp	r3, #0
 800446e:	d103      	bne.n	8004478 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2220      	movs	r2, #32
 8004476:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	f043 0304 	orr.w	r3, r3, #4
 800447e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00b      	beq.n	80044b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80044a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	f043 0308 	orr.w	r3, r3, #8
 80044c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00b      	beq.n	80044f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	f043 0302 	orr.w	r3, r3, #2
 80044e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80044f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01c      	beq.n	8004536 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7ff fe3b 	bl	8004178 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6859      	ldr	r1, [r3, #4]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	4b0d      	ldr	r3, [pc, #52]	@ (8004544 <I2C_IsErrorOccurred+0x1bc>)
 800450e:	400b      	ands	r3, r1
 8004510:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	431a      	orrs	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004536:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800453a:	4618      	mov	r0, r3
 800453c:	3728      	adds	r7, #40	@ 0x28
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	fe00e800 	.word	0xfe00e800

08004548 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	607b      	str	r3, [r7, #4]
 8004552:	460b      	mov	r3, r1
 8004554:	817b      	strh	r3, [r7, #10]
 8004556:	4613      	mov	r3, r2
 8004558:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800455a:	897b      	ldrh	r3, [r7, #10]
 800455c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004560:	7a7b      	ldrb	r3, [r7, #9]
 8004562:	041b      	lsls	r3, r3, #16
 8004564:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004568:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	4313      	orrs	r3, r2
 8004572:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004576:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	0d5b      	lsrs	r3, r3, #21
 8004582:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004586:	4b08      	ldr	r3, [pc, #32]	@ (80045a8 <I2C_TransferConfig+0x60>)
 8004588:	430b      	orrs	r3, r1
 800458a:	43db      	mvns	r3, r3
 800458c:	ea02 0103 	and.w	r1, r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800459a:	bf00      	nop
 800459c:	371c      	adds	r7, #28
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	03ff63ff 	.word	0x03ff63ff

080045ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d138      	bne.n	8004634 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e032      	b.n	8004636 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2224      	movs	r2, #36	@ 0x24
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0201 	bic.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6819      	ldr	r1, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004630:	2300      	movs	r3, #0
 8004632:	e000      	b.n	8004636 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004634:	2302      	movs	r3, #2
  }
}
 8004636:	4618      	mov	r0, r3
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004642:	b480      	push	{r7}
 8004644:	b085      	sub	sp, #20
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b20      	cmp	r3, #32
 8004656:	d139      	bne.n	80046cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004662:	2302      	movs	r3, #2
 8004664:	e033      	b.n	80046ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2224      	movs	r2, #36	@ 0x24
 8004672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0201 	bic.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004694:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	021b      	lsls	r3, r3, #8
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	4313      	orrs	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e000      	b.n	80046ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046cc:	2302      	movs	r3, #2
  }
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80046e0:	4b04      	ldr	r3, [pc, #16]	@ (80046f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	40007000 	.word	0x40007000

080046f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004706:	d130      	bne.n	800476a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004708:	4b23      	ldr	r3, [pc, #140]	@ (8004798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004714:	d038      	beq.n	8004788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004716:	4b20      	ldr	r3, [pc, #128]	@ (8004798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800471e:	4a1e      	ldr	r2, [pc, #120]	@ (8004798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004720:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004724:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004726:	4b1d      	ldr	r3, [pc, #116]	@ (800479c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2232      	movs	r2, #50	@ 0x32
 800472c:	fb02 f303 	mul.w	r3, r2, r3
 8004730:	4a1b      	ldr	r2, [pc, #108]	@ (80047a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	0c9b      	lsrs	r3, r3, #18
 8004738:	3301      	adds	r3, #1
 800473a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800473c:	e002      	b.n	8004744 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	3b01      	subs	r3, #1
 8004742:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004744:	4b14      	ldr	r3, [pc, #80]	@ (8004798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800474c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004750:	d102      	bne.n	8004758 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1f2      	bne.n	800473e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004758:	4b0f      	ldr	r3, [pc, #60]	@ (8004798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004764:	d110      	bne.n	8004788 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e00f      	b.n	800478a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800476a:	4b0b      	ldr	r3, [pc, #44]	@ (8004798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004776:	d007      	beq.n	8004788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004778:	4b07      	ldr	r3, [pc, #28]	@ (8004798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004780:	4a05      	ldr	r2, [pc, #20]	@ (8004798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004782:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004786:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	40007000 	.word	0x40007000
 800479c:	20000000 	.word	0x20000000
 80047a0:	431bde83 	.word	0x431bde83

080047a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d102      	bne.n	80047b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	f000 bc08 	b.w	8004fc8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047b8:	4b96      	ldr	r3, [pc, #600]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 030c 	and.w	r3, r3, #12
 80047c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047c2:	4b94      	ldr	r3, [pc, #592]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0310 	and.w	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80e4 	beq.w	80049a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d007      	beq.n	80047f0 <HAL_RCC_OscConfig+0x4c>
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	2b0c      	cmp	r3, #12
 80047e4:	f040 808b 	bne.w	80048fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	f040 8087 	bne.w	80048fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80047f0:	4b88      	ldr	r3, [pc, #544]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_OscConfig+0x64>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e3df      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1a      	ldr	r2, [r3, #32]
 800480c:	4b81      	ldr	r3, [pc, #516]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d004      	beq.n	8004822 <HAL_RCC_OscConfig+0x7e>
 8004818:	4b7e      	ldr	r3, [pc, #504]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004820:	e005      	b.n	800482e <HAL_RCC_OscConfig+0x8a>
 8004822:	4b7c      	ldr	r3, [pc, #496]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800482e:	4293      	cmp	r3, r2
 8004830:	d223      	bcs.n	800487a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fdae 	bl	8005398 <RCC_SetFlashLatencyFromMSIRange>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e3c0      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004846:	4b73      	ldr	r3, [pc, #460]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a72      	ldr	r2, [pc, #456]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800484c:	f043 0308 	orr.w	r3, r3, #8
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	4b70      	ldr	r3, [pc, #448]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	496d      	ldr	r1, [pc, #436]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004860:	4313      	orrs	r3, r2
 8004862:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004864:	4b6b      	ldr	r3, [pc, #428]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	4968      	ldr	r1, [pc, #416]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004874:	4313      	orrs	r3, r2
 8004876:	604b      	str	r3, [r1, #4]
 8004878:	e025      	b.n	80048c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800487a:	4b66      	ldr	r3, [pc, #408]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a65      	ldr	r2, [pc, #404]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004880:	f043 0308 	orr.w	r3, r3, #8
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	4b63      	ldr	r3, [pc, #396]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	4960      	ldr	r1, [pc, #384]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004894:	4313      	orrs	r3, r2
 8004896:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004898:	4b5e      	ldr	r3, [pc, #376]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	69db      	ldr	r3, [r3, #28]
 80048a4:	021b      	lsls	r3, r3, #8
 80048a6:	495b      	ldr	r1, [pc, #364]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 fd6e 	bl	8005398 <RCC_SetFlashLatencyFromMSIRange>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e380      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048c6:	f000 fc87 	bl	80051d8 <HAL_RCC_GetSysClockFreq>
 80048ca:	4602      	mov	r2, r0
 80048cc:	4b51      	ldr	r3, [pc, #324]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	4950      	ldr	r1, [pc, #320]	@ (8004a18 <HAL_RCC_OscConfig+0x274>)
 80048d8:	5ccb      	ldrb	r3, [r1, r3]
 80048da:	f003 031f 	and.w	r3, r3, #31
 80048de:	fa22 f303 	lsr.w	r3, r2, r3
 80048e2:	4a4e      	ldr	r2, [pc, #312]	@ (8004a1c <HAL_RCC_OscConfig+0x278>)
 80048e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80048e6:	4b4e      	ldr	r3, [pc, #312]	@ (8004a20 <HAL_RCC_OscConfig+0x27c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fd fbd6 	bl	800209c <HAL_InitTick>
 80048f0:	4603      	mov	r3, r0
 80048f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d052      	beq.n	80049a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	e364      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d032      	beq.n	800496c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004906:	4b43      	ldr	r3, [pc, #268]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a42      	ldr	r2, [pc, #264]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800490c:	f043 0301 	orr.w	r3, r3, #1
 8004910:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004912:	f7fd fcf3 	bl	80022fc <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800491a:	f7fd fcef 	bl	80022fc <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e34d      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800492c:	4b39      	ldr	r3, [pc, #228]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004938:	4b36      	ldr	r3, [pc, #216]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a35      	ldr	r2, [pc, #212]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800493e:	f043 0308 	orr.w	r3, r3, #8
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	4b33      	ldr	r3, [pc, #204]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	4930      	ldr	r1, [pc, #192]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004952:	4313      	orrs	r3, r2
 8004954:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004956:	4b2f      	ldr	r3, [pc, #188]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	492b      	ldr	r1, [pc, #172]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004966:	4313      	orrs	r3, r2
 8004968:	604b      	str	r3, [r1, #4]
 800496a:	e01a      	b.n	80049a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800496c:	4b29      	ldr	r3, [pc, #164]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a28      	ldr	r2, [pc, #160]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004972:	f023 0301 	bic.w	r3, r3, #1
 8004976:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004978:	f7fd fcc0 	bl	80022fc <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004980:	f7fd fcbc 	bl	80022fc <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e31a      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004992:	4b20      	ldr	r3, [pc, #128]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0x1dc>
 800499e:	e000      	b.n	80049a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d073      	beq.n	8004a96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d005      	beq.n	80049c0 <HAL_RCC_OscConfig+0x21c>
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2b0c      	cmp	r3, #12
 80049b8:	d10e      	bne.n	80049d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d10b      	bne.n	80049d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c0:	4b14      	ldr	r3, [pc, #80]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d063      	beq.n	8004a94 <HAL_RCC_OscConfig+0x2f0>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d15f      	bne.n	8004a94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e2f7      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049e0:	d106      	bne.n	80049f0 <HAL_RCC_OscConfig+0x24c>
 80049e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a0b      	ldr	r2, [pc, #44]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80049e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049ec:	6013      	str	r3, [r2, #0]
 80049ee:	e025      	b.n	8004a3c <HAL_RCC_OscConfig+0x298>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049f8:	d114      	bne.n	8004a24 <HAL_RCC_OscConfig+0x280>
 80049fa:	4b06      	ldr	r3, [pc, #24]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a05      	ldr	r2, [pc, #20]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004a00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	4b03      	ldr	r3, [pc, #12]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a02      	ldr	r2, [pc, #8]	@ (8004a14 <HAL_RCC_OscConfig+0x270>)
 8004a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	e013      	b.n	8004a3c <HAL_RCC_OscConfig+0x298>
 8004a14:	40021000 	.word	0x40021000
 8004a18:	08009b90 	.word	0x08009b90
 8004a1c:	20000000 	.word	0x20000000
 8004a20:	20000004 	.word	0x20000004
 8004a24:	4ba0      	ldr	r3, [pc, #640]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a9f      	ldr	r2, [pc, #636]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a2e:	6013      	str	r3, [r2, #0]
 8004a30:	4b9d      	ldr	r3, [pc, #628]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a9c      	ldr	r2, [pc, #624]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d013      	beq.n	8004a6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fd fc5a 	bl	80022fc <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a4c:	f7fd fc56 	bl	80022fc <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b64      	cmp	r3, #100	@ 0x64
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e2b4      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a5e:	4b92      	ldr	r3, [pc, #584]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x2a8>
 8004a6a:	e014      	b.n	8004a96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fd fc46 	bl	80022fc <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a74:	f7fd fc42 	bl	80022fc <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	@ 0x64
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e2a0      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a86:	4b88      	ldr	r3, [pc, #544]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x2d0>
 8004a92:	e000      	b.n	8004a96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d060      	beq.n	8004b64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x310>
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b0c      	cmp	r3, #12
 8004aac:	d119      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d116      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ab4:	4b7c      	ldr	r3, [pc, #496]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_RCC_OscConfig+0x328>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e27d      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004acc:	4b76      	ldr	r3, [pc, #472]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	061b      	lsls	r3, r3, #24
 8004ada:	4973      	ldr	r1, [pc, #460]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae0:	e040      	b.n	8004b64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d023      	beq.n	8004b32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aea:	4b6f      	ldr	r3, [pc, #444]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a6e      	ldr	r2, [pc, #440]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af6:	f7fd fc01 	bl	80022fc <HAL_GetTick>
 8004afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004afc:	e008      	b.n	8004b10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004afe:	f7fd fbfd 	bl	80022fc <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e25b      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b10:	4b65      	ldr	r3, [pc, #404]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f0      	beq.n	8004afe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1c:	4b62      	ldr	r3, [pc, #392]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	495f      	ldr	r1, [pc, #380]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	604b      	str	r3, [r1, #4]
 8004b30:	e018      	b.n	8004b64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b32:	4b5d      	ldr	r3, [pc, #372]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a5c      	ldr	r2, [pc, #368]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fd fbdd 	bl	80022fc <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b46:	f7fd fbd9 	bl	80022fc <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e237      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b58:	4b53      	ldr	r3, [pc, #332]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f0      	bne.n	8004b46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d03c      	beq.n	8004bea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01c      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b78:	4b4b      	ldr	r3, [pc, #300]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b7e:	4a4a      	ldr	r2, [pc, #296]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b88:	f7fd fbb8 	bl	80022fc <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b90:	f7fd fbb4 	bl	80022fc <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e212      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ba2:	4b41      	ldr	r3, [pc, #260]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0ef      	beq.n	8004b90 <HAL_RCC_OscConfig+0x3ec>
 8004bb0:	e01b      	b.n	8004bea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bb8:	4a3b      	ldr	r2, [pc, #236]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc2:	f7fd fb9b 	bl	80022fc <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bca:	f7fd fb97 	bl	80022fc <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e1f5      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bdc:	4b32      	ldr	r3, [pc, #200]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1ef      	bne.n	8004bca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 80a6 	beq.w	8004d44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10d      	bne.n	8004c24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c08:	4b27      	ldr	r3, [pc, #156]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c0c:	4a26      	ldr	r2, [pc, #152]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c12:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c14:	4b24      	ldr	r3, [pc, #144]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c20:	2301      	movs	r3, #1
 8004c22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c24:	4b21      	ldr	r3, [pc, #132]	@ (8004cac <HAL_RCC_OscConfig+0x508>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d118      	bne.n	8004c62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c30:	4b1e      	ldr	r3, [pc, #120]	@ (8004cac <HAL_RCC_OscConfig+0x508>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1d      	ldr	r2, [pc, #116]	@ (8004cac <HAL_RCC_OscConfig+0x508>)
 8004c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c3c:	f7fd fb5e 	bl	80022fc <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c44:	f7fd fb5a 	bl	80022fc <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e1b8      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c56:	4b15      	ldr	r3, [pc, #84]	@ (8004cac <HAL_RCC_OscConfig+0x508>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d108      	bne.n	8004c7c <HAL_RCC_OscConfig+0x4d8>
 8004c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c70:	4a0d      	ldr	r2, [pc, #52]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c7a:	e029      	b.n	8004cd0 <HAL_RCC_OscConfig+0x52c>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2b05      	cmp	r3, #5
 8004c82:	d115      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x50c>
 8004c84:	4b08      	ldr	r3, [pc, #32]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c8a:	4a07      	ldr	r2, [pc, #28]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c8c:	f043 0304 	orr.w	r3, r3, #4
 8004c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004c94:	4b04      	ldr	r3, [pc, #16]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9a:	4a03      	ldr	r2, [pc, #12]	@ (8004ca8 <HAL_RCC_OscConfig+0x504>)
 8004c9c:	f043 0301 	orr.w	r3, r3, #1
 8004ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ca4:	e014      	b.n	8004cd0 <HAL_RCC_OscConfig+0x52c>
 8004ca6:	bf00      	nop
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	40007000 	.word	0x40007000
 8004cb0:	4b9d      	ldr	r3, [pc, #628]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cb6:	4a9c      	ldr	r2, [pc, #624]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cc0:	4b99      	ldr	r3, [pc, #612]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cc6:	4a98      	ldr	r2, [pc, #608]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004cc8:	f023 0304 	bic.w	r3, r3, #4
 8004ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d016      	beq.n	8004d06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd8:	f7fd fb10 	bl	80022fc <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cde:	e00a      	b.n	8004cf6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce0:	f7fd fb0c 	bl	80022fc <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e168      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cf6:	4b8c      	ldr	r3, [pc, #560]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0ed      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x53c>
 8004d04:	e015      	b.n	8004d32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d06:	f7fd faf9 	bl	80022fc <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d0c:	e00a      	b.n	8004d24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0e:	f7fd faf5 	bl	80022fc <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e151      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d24:	4b80      	ldr	r3, [pc, #512]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1ed      	bne.n	8004d0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d32:	7ffb      	ldrb	r3, [r7, #31]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d105      	bne.n	8004d44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d38:	4b7b      	ldr	r3, [pc, #492]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d3c:	4a7a      	ldr	r2, [pc, #488]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004d3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d42:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d03c      	beq.n	8004dca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01c      	beq.n	8004d92 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d58:	4b73      	ldr	r3, [pc, #460]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d5e:	4a72      	ldr	r2, [pc, #456]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004d60:	f043 0301 	orr.w	r3, r3, #1
 8004d64:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d68:	f7fd fac8 	bl	80022fc <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d70:	f7fd fac4 	bl	80022fc <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e122      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d82:	4b69      	ldr	r3, [pc, #420]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004d84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0ef      	beq.n	8004d70 <HAL_RCC_OscConfig+0x5cc>
 8004d90:	e01b      	b.n	8004dca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d92:	4b65      	ldr	r3, [pc, #404]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004d98:	4a63      	ldr	r2, [pc, #396]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004d9a:	f023 0301 	bic.w	r3, r3, #1
 8004d9e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da2:	f7fd faab 	bl	80022fc <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004daa:	f7fd faa7 	bl	80022fc <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e105      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004dbc:	4b5a      	ldr	r3, [pc, #360]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1ef      	bne.n	8004daa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 80f9 	beq.w	8004fc6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	f040 80cf 	bne.w	8004f7c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004dde:	4b52      	ldr	r3, [pc, #328]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f003 0203 	and.w	r2, r3, #3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d12c      	bne.n	8004e4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d123      	bne.n	8004e4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d11b      	bne.n	8004e4c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d113      	bne.n	8004e4c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2e:	085b      	lsrs	r3, r3, #1
 8004e30:	3b01      	subs	r3, #1
 8004e32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d109      	bne.n	8004e4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e42:	085b      	lsrs	r3, r3, #1
 8004e44:	3b01      	subs	r3, #1
 8004e46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d071      	beq.n	8004f30 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b0c      	cmp	r3, #12
 8004e50:	d068      	beq.n	8004f24 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e52:	4b35      	ldr	r3, [pc, #212]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d105      	bne.n	8004e6a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e5e:	4b32      	ldr	r3, [pc, #200]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e0ac      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e6e:	4b2e      	ldr	r3, [pc, #184]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a2d      	ldr	r2, [pc, #180]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004e74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e7a:	f7fd fa3f 	bl	80022fc <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e82:	f7fd fa3b 	bl	80022fc <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e099      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e94:	4b24      	ldr	r3, [pc, #144]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f0      	bne.n	8004e82 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ea0:	4b21      	ldr	r3, [pc, #132]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	4b21      	ldr	r3, [pc, #132]	@ (8004f2c <HAL_RCC_OscConfig+0x788>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004eb0:	3a01      	subs	r2, #1
 8004eb2:	0112      	lsls	r2, r2, #4
 8004eb4:	4311      	orrs	r1, r2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004eba:	0212      	lsls	r2, r2, #8
 8004ebc:	4311      	orrs	r1, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ec2:	0852      	lsrs	r2, r2, #1
 8004ec4:	3a01      	subs	r2, #1
 8004ec6:	0552      	lsls	r2, r2, #21
 8004ec8:	4311      	orrs	r1, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004ece:	0852      	lsrs	r2, r2, #1
 8004ed0:	3a01      	subs	r2, #1
 8004ed2:	0652      	lsls	r2, r2, #25
 8004ed4:	4311      	orrs	r1, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004eda:	06d2      	lsls	r2, r2, #27
 8004edc:	430a      	orrs	r2, r1
 8004ede:	4912      	ldr	r1, [pc, #72]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ee4:	4b10      	ldr	r3, [pc, #64]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a0f      	ldr	r2, [pc, #60]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4a0c      	ldr	r2, [pc, #48]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004efa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004efc:	f7fd f9fe 	bl	80022fc <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f04:	f7fd f9fa 	bl	80022fc <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e058      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f16:	4b04      	ldr	r3, [pc, #16]	@ (8004f28 <HAL_RCC_OscConfig+0x784>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f22:	e050      	b.n	8004fc6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e04f      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f30:	4b27      	ldr	r3, [pc, #156]	@ (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d144      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f3c:	4b24      	ldr	r3, [pc, #144]	@ (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a23      	ldr	r2, [pc, #140]	@ (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f48:	4b21      	ldr	r3, [pc, #132]	@ (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4a20      	ldr	r2, [pc, #128]	@ (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f54:	f7fd f9d2 	bl	80022fc <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f5c:	f7fd f9ce 	bl	80022fc <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e02c      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f6e:	4b18      	ldr	r3, [pc, #96]	@ (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f0      	beq.n	8004f5c <HAL_RCC_OscConfig+0x7b8>
 8004f7a:	e024      	b.n	8004fc6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b0c      	cmp	r3, #12
 8004f80:	d01f      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f82:	4b13      	ldr	r3, [pc, #76]	@ (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a12      	ldr	r2, [pc, #72]	@ (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004f88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f8e:	f7fd f9b5 	bl	80022fc <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f96:	f7fd f9b1 	bl	80022fc <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e00f      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa8:	4b09      	ldr	r3, [pc, #36]	@ (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1f0      	bne.n	8004f96 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004fb4:	4b06      	ldr	r3, [pc, #24]	@ (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	4905      	ldr	r1, [pc, #20]	@ (8004fd0 <HAL_RCC_OscConfig+0x82c>)
 8004fba:	4b06      	ldr	r3, [pc, #24]	@ (8004fd4 <HAL_RCC_OscConfig+0x830>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	60cb      	str	r3, [r1, #12]
 8004fc0:	e001      	b.n	8004fc6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e000      	b.n	8004fc8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3720      	adds	r7, #32
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	feeefffc 	.word	0xfeeefffc

08004fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e0e7      	b.n	80051bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fec:	4b75      	ldr	r3, [pc, #468]	@ (80051c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0307 	and.w	r3, r3, #7
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d910      	bls.n	800501c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffa:	4b72      	ldr	r3, [pc, #456]	@ (80051c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 0207 	bic.w	r2, r3, #7
 8005002:	4970      	ldr	r1, [pc, #448]	@ (80051c4 <HAL_RCC_ClockConfig+0x1ec>)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	4313      	orrs	r3, r2
 8005008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800500a:	4b6e      	ldr	r3, [pc, #440]	@ (80051c4 <HAL_RCC_ClockConfig+0x1ec>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	429a      	cmp	r2, r3
 8005016:	d001      	beq.n	800501c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0cf      	b.n	80051bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d010      	beq.n	800504a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	4b66      	ldr	r3, [pc, #408]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005034:	429a      	cmp	r2, r3
 8005036:	d908      	bls.n	800504a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005038:	4b63      	ldr	r3, [pc, #396]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	4960      	ldr	r1, [pc, #384]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005046:	4313      	orrs	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d04c      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b03      	cmp	r3, #3
 800505c:	d107      	bne.n	800506e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800505e:	4b5a      	ldr	r3, [pc, #360]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d121      	bne.n	80050ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e0a6      	b.n	80051bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d107      	bne.n	8005086 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005076:	4b54      	ldr	r3, [pc, #336]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d115      	bne.n	80050ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e09a      	b.n	80051bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d107      	bne.n	800509e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800508e:	4b4e      	ldr	r3, [pc, #312]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d109      	bne.n	80050ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e08e      	b.n	80051bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800509e:	4b4a      	ldr	r3, [pc, #296]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e086      	b.n	80051bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050ae:	4b46      	ldr	r3, [pc, #280]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f023 0203 	bic.w	r2, r3, #3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	4943      	ldr	r1, [pc, #268]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c0:	f7fd f91c 	bl	80022fc <HAL_GetTick>
 80050c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c6:	e00a      	b.n	80050de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c8:	f7fd f918 	bl	80022fc <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e06e      	b.n	80051bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050de:	4b3a      	ldr	r3, [pc, #232]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 020c 	and.w	r2, r3, #12
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d1eb      	bne.n	80050c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d010      	beq.n	800511e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	4b31      	ldr	r3, [pc, #196]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005108:	429a      	cmp	r2, r3
 800510a:	d208      	bcs.n	800511e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800510c:	4b2e      	ldr	r3, [pc, #184]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	492b      	ldr	r1, [pc, #172]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 800511a:	4313      	orrs	r3, r2
 800511c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800511e:	4b29      	ldr	r3, [pc, #164]	@ (80051c4 <HAL_RCC_ClockConfig+0x1ec>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d210      	bcs.n	800514e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512c:	4b25      	ldr	r3, [pc, #148]	@ (80051c4 <HAL_RCC_ClockConfig+0x1ec>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f023 0207 	bic.w	r2, r3, #7
 8005134:	4923      	ldr	r1, [pc, #140]	@ (80051c4 <HAL_RCC_ClockConfig+0x1ec>)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	4313      	orrs	r3, r2
 800513a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800513c:	4b21      	ldr	r3, [pc, #132]	@ (80051c4 <HAL_RCC_ClockConfig+0x1ec>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d001      	beq.n	800514e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e036      	b.n	80051bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	d008      	beq.n	800516c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800515a:	4b1b      	ldr	r3, [pc, #108]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	4918      	ldr	r1, [pc, #96]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005168:	4313      	orrs	r3, r2
 800516a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b00      	cmp	r3, #0
 8005176:	d009      	beq.n	800518c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005178:	4b13      	ldr	r3, [pc, #76]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	4910      	ldr	r1, [pc, #64]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005188:	4313      	orrs	r3, r2
 800518a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800518c:	f000 f824 	bl	80051d8 <HAL_RCC_GetSysClockFreq>
 8005190:	4602      	mov	r2, r0
 8005192:	4b0d      	ldr	r3, [pc, #52]	@ (80051c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	091b      	lsrs	r3, r3, #4
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	490b      	ldr	r1, [pc, #44]	@ (80051cc <HAL_RCC_ClockConfig+0x1f4>)
 800519e:	5ccb      	ldrb	r3, [r1, r3]
 80051a0:	f003 031f 	and.w	r3, r3, #31
 80051a4:	fa22 f303 	lsr.w	r3, r2, r3
 80051a8:	4a09      	ldr	r2, [pc, #36]	@ (80051d0 <HAL_RCC_ClockConfig+0x1f8>)
 80051aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051ac:	4b09      	ldr	r3, [pc, #36]	@ (80051d4 <HAL_RCC_ClockConfig+0x1fc>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fc ff73 	bl	800209c <HAL_InitTick>
 80051b6:	4603      	mov	r3, r0
 80051b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80051ba:	7afb      	ldrb	r3, [r7, #11]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40022000 	.word	0x40022000
 80051c8:	40021000 	.word	0x40021000
 80051cc:	08009b90 	.word	0x08009b90
 80051d0:	20000000 	.word	0x20000000
 80051d4:	20000004 	.word	0x20000004

080051d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d8:	b480      	push	{r7}
 80051da:	b089      	sub	sp, #36	@ 0x24
 80051dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	61fb      	str	r3, [r7, #28]
 80051e2:	2300      	movs	r3, #0
 80051e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051e6:	4b3e      	ldr	r3, [pc, #248]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051f0:	4b3b      	ldr	r3, [pc, #236]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_RCC_GetSysClockFreq+0x34>
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b0c      	cmp	r3, #12
 8005204:	d121      	bne.n	800524a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d11e      	bne.n	800524a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800520c:	4b34      	ldr	r3, [pc, #208]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0308 	and.w	r3, r3, #8
 8005214:	2b00      	cmp	r3, #0
 8005216:	d107      	bne.n	8005228 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005218:	4b31      	ldr	r3, [pc, #196]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800521a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800521e:	0a1b      	lsrs	r3, r3, #8
 8005220:	f003 030f 	and.w	r3, r3, #15
 8005224:	61fb      	str	r3, [r7, #28]
 8005226:	e005      	b.n	8005234 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005228:	4b2d      	ldr	r3, [pc, #180]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	091b      	lsrs	r3, r3, #4
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005234:	4a2b      	ldr	r2, [pc, #172]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10d      	bne.n	8005260 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005248:	e00a      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b04      	cmp	r3, #4
 800524e:	d102      	bne.n	8005256 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005250:	4b25      	ldr	r3, [pc, #148]	@ (80052e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005252:	61bb      	str	r3, [r7, #24]
 8005254:	e004      	b.n	8005260 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b08      	cmp	r3, #8
 800525a:	d101      	bne.n	8005260 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800525c:	4b23      	ldr	r3, [pc, #140]	@ (80052ec <HAL_RCC_GetSysClockFreq+0x114>)
 800525e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2b0c      	cmp	r3, #12
 8005264:	d134      	bne.n	80052d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005266:	4b1e      	ldr	r3, [pc, #120]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	f003 0303 	and.w	r3, r3, #3
 800526e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d003      	beq.n	800527e <HAL_RCC_GetSysClockFreq+0xa6>
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b03      	cmp	r3, #3
 800527a:	d003      	beq.n	8005284 <HAL_RCC_GetSysClockFreq+0xac>
 800527c:	e005      	b.n	800528a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800527e:	4b1a      	ldr	r3, [pc, #104]	@ (80052e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005280:	617b      	str	r3, [r7, #20]
      break;
 8005282:	e005      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005284:	4b19      	ldr	r3, [pc, #100]	@ (80052ec <HAL_RCC_GetSysClockFreq+0x114>)
 8005286:	617b      	str	r3, [r7, #20]
      break;
 8005288:	e002      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	617b      	str	r3, [r7, #20]
      break;
 800528e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005290:	4b13      	ldr	r3, [pc, #76]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	091b      	lsrs	r3, r3, #4
 8005296:	f003 0307 	and.w	r3, r3, #7
 800529a:	3301      	adds	r3, #1
 800529c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800529e:	4b10      	ldr	r3, [pc, #64]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	0a1b      	lsrs	r3, r3, #8
 80052a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	fb03 f202 	mul.w	r2, r3, r2
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052b6:	4b0a      	ldr	r3, [pc, #40]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	0e5b      	lsrs	r3, r3, #25
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	3301      	adds	r3, #1
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80052d0:	69bb      	ldr	r3, [r7, #24]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3724      	adds	r7, #36	@ 0x24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40021000 	.word	0x40021000
 80052e4:	08009ba8 	.word	0x08009ba8
 80052e8:	00f42400 	.word	0x00f42400
 80052ec:	007a1200 	.word	0x007a1200

080052f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052f4:	4b03      	ldr	r3, [pc, #12]	@ (8005304 <HAL_RCC_GetHCLKFreq+0x14>)
 80052f6:	681b      	ldr	r3, [r3, #0]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	20000000 	.word	0x20000000

08005308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800530c:	f7ff fff0 	bl	80052f0 <HAL_RCC_GetHCLKFreq>
 8005310:	4602      	mov	r2, r0
 8005312:	4b06      	ldr	r3, [pc, #24]	@ (800532c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	0a1b      	lsrs	r3, r3, #8
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	4904      	ldr	r1, [pc, #16]	@ (8005330 <HAL_RCC_GetPCLK1Freq+0x28>)
 800531e:	5ccb      	ldrb	r3, [r1, r3]
 8005320:	f003 031f 	and.w	r3, r3, #31
 8005324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005328:	4618      	mov	r0, r3
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40021000 	.word	0x40021000
 8005330:	08009ba0 	.word	0x08009ba0

08005334 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	220f      	movs	r2, #15
 8005342:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005344:	4b12      	ldr	r3, [pc, #72]	@ (8005390 <HAL_RCC_GetClockConfig+0x5c>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 0203 	and.w	r2, r3, #3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005350:	4b0f      	ldr	r3, [pc, #60]	@ (8005390 <HAL_RCC_GetClockConfig+0x5c>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800535c:	4b0c      	ldr	r3, [pc, #48]	@ (8005390 <HAL_RCC_GetClockConfig+0x5c>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005368:	4b09      	ldr	r3, [pc, #36]	@ (8005390 <HAL_RCC_GetClockConfig+0x5c>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	08db      	lsrs	r3, r3, #3
 800536e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005376:	4b07      	ldr	r3, [pc, #28]	@ (8005394 <HAL_RCC_GetClockConfig+0x60>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0207 	and.w	r2, r3, #7
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	601a      	str	r2, [r3, #0]
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	40021000 	.word	0x40021000
 8005394:	40022000 	.word	0x40022000

08005398 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80053a0:	2300      	movs	r3, #0
 80053a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053b0:	f7ff f994 	bl	80046dc <HAL_PWREx_GetVoltageRange>
 80053b4:	6178      	str	r0, [r7, #20]
 80053b6:	e014      	b.n	80053e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053b8:	4b25      	ldr	r3, [pc, #148]	@ (8005450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053bc:	4a24      	ldr	r2, [pc, #144]	@ (8005450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80053c4:	4b22      	ldr	r3, [pc, #136]	@ (8005450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053d0:	f7ff f984 	bl	80046dc <HAL_PWREx_GetVoltageRange>
 80053d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053da:	4a1d      	ldr	r2, [pc, #116]	@ (8005450 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80053dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053e8:	d10b      	bne.n	8005402 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b80      	cmp	r3, #128	@ 0x80
 80053ee:	d919      	bls.n	8005424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80053f4:	d902      	bls.n	80053fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053f6:	2302      	movs	r3, #2
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	e013      	b.n	8005424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053fc:	2301      	movs	r3, #1
 80053fe:	613b      	str	r3, [r7, #16]
 8005400:	e010      	b.n	8005424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b80      	cmp	r3, #128	@ 0x80
 8005406:	d902      	bls.n	800540e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005408:	2303      	movs	r3, #3
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	e00a      	b.n	8005424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b80      	cmp	r3, #128	@ 0x80
 8005412:	d102      	bne.n	800541a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005414:	2302      	movs	r3, #2
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	e004      	b.n	8005424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b70      	cmp	r3, #112	@ 0x70
 800541e:	d101      	bne.n	8005424 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005420:	2301      	movs	r3, #1
 8005422:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005424:	4b0b      	ldr	r3, [pc, #44]	@ (8005454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f023 0207 	bic.w	r2, r3, #7
 800542c:	4909      	ldr	r1, [pc, #36]	@ (8005454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005434:	4b07      	ldr	r3, [pc, #28]	@ (8005454 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	429a      	cmp	r2, r3
 8005440:	d001      	beq.n	8005446 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40021000 	.word	0x40021000
 8005454:	40022000 	.word	0x40022000

08005458 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005460:	2300      	movs	r3, #0
 8005462:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005464:	2300      	movs	r3, #0
 8005466:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005470:	2b00      	cmp	r3, #0
 8005472:	d041      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005478:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800547c:	d02a      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800547e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005482:	d824      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005484:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005488:	d008      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800548a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800548e:	d81e      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005494:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005498:	d010      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800549a:	e018      	b.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800549c:	4b86      	ldr	r3, [pc, #536]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4a85      	ldr	r2, [pc, #532]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054a8:	e015      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3304      	adds	r3, #4
 80054ae:	2100      	movs	r1, #0
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 facd 	bl	8005a50 <RCCEx_PLLSAI1_Config>
 80054b6:	4603      	mov	r3, r0
 80054b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054ba:	e00c      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3320      	adds	r3, #32
 80054c0:	2100      	movs	r1, #0
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fbb6 	bl	8005c34 <RCCEx_PLLSAI2_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80054cc:	e003      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	74fb      	strb	r3, [r7, #19]
      break;
 80054d2:	e000      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80054d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054d6:	7cfb      	ldrb	r3, [r7, #19]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10b      	bne.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054dc:	4b76      	ldr	r3, [pc, #472]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054ea:	4973      	ldr	r1, [pc, #460]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80054f2:	e001      	b.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f4:	7cfb      	ldrb	r3, [r7, #19]
 80054f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d041      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005508:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800550c:	d02a      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800550e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005512:	d824      	bhi.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005514:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005518:	d008      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800551a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800551e:	d81e      	bhi.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005524:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005528:	d010      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800552a:	e018      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800552c:	4b62      	ldr	r3, [pc, #392]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	4a61      	ldr	r2, [pc, #388]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005532:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005536:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005538:	e015      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3304      	adds	r3, #4
 800553e:	2100      	movs	r1, #0
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fa85 	bl	8005a50 <RCCEx_PLLSAI1_Config>
 8005546:	4603      	mov	r3, r0
 8005548:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800554a:	e00c      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3320      	adds	r3, #32
 8005550:	2100      	movs	r1, #0
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fb6e 	bl	8005c34 <RCCEx_PLLSAI2_Config>
 8005558:	4603      	mov	r3, r0
 800555a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800555c:	e003      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	74fb      	strb	r3, [r7, #19]
      break;
 8005562:	e000      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005566:	7cfb      	ldrb	r3, [r7, #19]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d10b      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800556c:	4b52      	ldr	r3, [pc, #328]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005572:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800557a:	494f      	ldr	r1, [pc, #316]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005582:	e001      	b.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005584:	7cfb      	ldrb	r3, [r7, #19]
 8005586:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 80a0 	beq.w	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005596:	2300      	movs	r3, #0
 8005598:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800559a:	4b47      	ldr	r3, [pc, #284]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800559c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800559e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d101      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80055aa:	2300      	movs	r3, #0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00d      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055b0:	4b41      	ldr	r3, [pc, #260]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055b4:	4a40      	ldr	r2, [pc, #256]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80055bc:	4b3e      	ldr	r3, [pc, #248]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055c8:	2301      	movs	r3, #1
 80055ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055cc:	4b3b      	ldr	r3, [pc, #236]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a3a      	ldr	r2, [pc, #232]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055d8:	f7fc fe90 	bl	80022fc <HAL_GetTick>
 80055dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055de:	e009      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e0:	f7fc fe8c 	bl	80022fc <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d902      	bls.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	74fb      	strb	r3, [r7, #19]
        break;
 80055f2:	e005      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055f4:	4b31      	ldr	r3, [pc, #196]	@ (80056bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0ef      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005600:	7cfb      	ldrb	r3, [r7, #19]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d15c      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005606:	4b2c      	ldr	r3, [pc, #176]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800560c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005610:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01f      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	429a      	cmp	r2, r3
 8005622:	d019      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005624:	4b24      	ldr	r3, [pc, #144]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800562a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800562e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005630:	4b21      	ldr	r3, [pc, #132]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005636:	4a20      	ldr	r2, [pc, #128]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800563c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005640:	4b1d      	ldr	r3, [pc, #116]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005646:	4a1c      	ldr	r2, [pc, #112]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800564c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005650:	4a19      	ldr	r2, [pc, #100]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d016      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005662:	f7fc fe4b 	bl	80022fc <HAL_GetTick>
 8005666:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005668:	e00b      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800566a:	f7fc fe47 	bl	80022fc <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005678:	4293      	cmp	r3, r2
 800567a:	d902      	bls.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	74fb      	strb	r3, [r7, #19]
            break;
 8005680:	e006      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005682:	4b0d      	ldr	r3, [pc, #52]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0ec      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005690:	7cfb      	ldrb	r3, [r7, #19]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10c      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005696:	4b08      	ldr	r3, [pc, #32]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056a6:	4904      	ldr	r1, [pc, #16]	@ (80056b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80056ae:	e009      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056b0:	7cfb      	ldrb	r3, [r7, #19]
 80056b2:	74bb      	strb	r3, [r7, #18]
 80056b4:	e006      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80056b6:	bf00      	nop
 80056b8:	40021000 	.word	0x40021000
 80056bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c0:	7cfb      	ldrb	r3, [r7, #19]
 80056c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056c4:	7c7b      	ldrb	r3, [r7, #17]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d105      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ca:	4ba6      	ldr	r3, [pc, #664]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ce:	4aa5      	ldr	r2, [pc, #660]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056e2:	4ba0      	ldr	r3, [pc, #640]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e8:	f023 0203 	bic.w	r2, r3, #3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f0:	499c      	ldr	r1, [pc, #624]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005704:	4b97      	ldr	r3, [pc, #604]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800570a:	f023 020c 	bic.w	r2, r3, #12
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005712:	4994      	ldr	r1, [pc, #592]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005726:	4b8f      	ldr	r3, [pc, #572]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005734:	498b      	ldr	r1, [pc, #556]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005748:	4b86      	ldr	r3, [pc, #536]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005756:	4983      	ldr	r1, [pc, #524]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005758:	4313      	orrs	r3, r2
 800575a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0310 	and.w	r3, r3, #16
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800576a:	4b7e      	ldr	r3, [pc, #504]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800576c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005770:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005778:	497a      	ldr	r1, [pc, #488]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800577a:	4313      	orrs	r3, r2
 800577c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800578c:	4b75      	ldr	r3, [pc, #468]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800578e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005792:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800579a:	4972      	ldr	r1, [pc, #456]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800579c:	4313      	orrs	r3, r2
 800579e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057ae:	4b6d      	ldr	r3, [pc, #436]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057bc:	4969      	ldr	r1, [pc, #420]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00a      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057d0:	4b64      	ldr	r3, [pc, #400]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057de:	4961      	ldr	r1, [pc, #388]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057f2:	4b5c      	ldr	r3, [pc, #368]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80057f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005800:	4958      	ldr	r1, [pc, #352]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005814:	4b53      	ldr	r3, [pc, #332]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800581a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005822:	4950      	ldr	r1, [pc, #320]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005836:	4b4b      	ldr	r3, [pc, #300]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800583c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005844:	4947      	ldr	r1, [pc, #284]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005858:	4b42      	ldr	r3, [pc, #264]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800585a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800585e:	f023 0203 	bic.w	r2, r3, #3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005866:	493f      	ldr	r1, [pc, #252]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d028      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800587a:	4b3a      	ldr	r3, [pc, #232]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800587c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005880:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005888:	4936      	ldr	r1, [pc, #216]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800588a:	4313      	orrs	r3, r2
 800588c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005894:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005898:	d106      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800589a:	4b32      	ldr	r3, [pc, #200]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	4a31      	ldr	r2, [pc, #196]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058a4:	60d3      	str	r3, [r2, #12]
 80058a6:	e011      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058b0:	d10c      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3304      	adds	r3, #4
 80058b6:	2101      	movs	r1, #1
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 f8c9 	bl	8005a50 <RCCEx_PLLSAI1_Config>
 80058be:	4603      	mov	r3, r0
 80058c0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80058c2:	7cfb      	ldrb	r3, [r7, #19]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80058c8:	7cfb      	ldrb	r3, [r7, #19]
 80058ca:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d028      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058d8:	4b22      	ldr	r3, [pc, #136]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058e6:	491f      	ldr	r1, [pc, #124]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058e8:	4313      	orrs	r3, r2
 80058ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058f6:	d106      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4a19      	ldr	r2, [pc, #100]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80058fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005902:	60d3      	str	r3, [r2, #12]
 8005904:	e011      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800590a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800590e:	d10c      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3304      	adds	r3, #4
 8005914:	2101      	movs	r1, #1
 8005916:	4618      	mov	r0, r3
 8005918:	f000 f89a 	bl	8005a50 <RCCEx_PLLSAI1_Config>
 800591c:	4603      	mov	r3, r0
 800591e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005920:	7cfb      	ldrb	r3, [r7, #19]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8005926:	7cfb      	ldrb	r3, [r7, #19]
 8005928:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d02a      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005936:	4b0b      	ldr	r3, [pc, #44]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800593c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005944:	4907      	ldr	r1, [pc, #28]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005946:	4313      	orrs	r3, r2
 8005948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005950:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005954:	d108      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005956:	4b03      	ldr	r3, [pc, #12]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	4a02      	ldr	r2, [pc, #8]	@ (8005964 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800595c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005960:	60d3      	str	r3, [r2, #12]
 8005962:	e013      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8005964:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800596c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005970:	d10c      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3304      	adds	r3, #4
 8005976:	2101      	movs	r1, #1
 8005978:	4618      	mov	r0, r3
 800597a:	f000 f869 	bl	8005a50 <RCCEx_PLLSAI1_Config>
 800597e:	4603      	mov	r3, r0
 8005980:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005982:	7cfb      	ldrb	r3, [r7, #19]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8005988:	7cfb      	ldrb	r3, [r7, #19]
 800598a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d02f      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005998:	4b2c      	ldr	r3, [pc, #176]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800599e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059a6:	4929      	ldr	r1, [pc, #164]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059b6:	d10d      	bne.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3304      	adds	r3, #4
 80059bc:	2102      	movs	r1, #2
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 f846 	bl	8005a50 <RCCEx_PLLSAI1_Config>
 80059c4:	4603      	mov	r3, r0
 80059c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059c8:	7cfb      	ldrb	r3, [r7, #19]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d014      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80059ce:	7cfb      	ldrb	r3, [r7, #19]
 80059d0:	74bb      	strb	r3, [r7, #18]
 80059d2:	e011      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059dc:	d10c      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3320      	adds	r3, #32
 80059e2:	2102      	movs	r1, #2
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 f925 	bl	8005c34 <RCCEx_PLLSAI2_Config>
 80059ea:	4603      	mov	r3, r0
 80059ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059ee:	7cfb      	ldrb	r3, [r7, #19]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80059f4:	7cfb      	ldrb	r3, [r7, #19]
 80059f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00b      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a04:	4b11      	ldr	r3, [pc, #68]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a0a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a14:	490d      	ldr	r1, [pc, #52]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00b      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a28:	4b08      	ldr	r3, [pc, #32]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a2e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a38:	4904      	ldr	r1, [pc, #16]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005a40:	7cbb      	ldrb	r3, [r7, #18]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40021000 	.word	0x40021000

08005a50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a5e:	4b74      	ldr	r3, [pc, #464]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d018      	beq.n	8005a9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a6a:	4b71      	ldr	r3, [pc, #452]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f003 0203 	and.w	r2, r3, #3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d10d      	bne.n	8005a96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
       ||
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d009      	beq.n	8005a96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a82:	4b6b      	ldr	r3, [pc, #428]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	091b      	lsrs	r3, r3, #4
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
       ||
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d047      	beq.n	8005b26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	73fb      	strb	r3, [r7, #15]
 8005a9a:	e044      	b.n	8005b26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d018      	beq.n	8005ad6 <RCCEx_PLLSAI1_Config+0x86>
 8005aa4:	2b03      	cmp	r3, #3
 8005aa6:	d825      	bhi.n	8005af4 <RCCEx_PLLSAI1_Config+0xa4>
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d002      	beq.n	8005ab2 <RCCEx_PLLSAI1_Config+0x62>
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d009      	beq.n	8005ac4 <RCCEx_PLLSAI1_Config+0x74>
 8005ab0:	e020      	b.n	8005af4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ab2:	4b5f      	ldr	r3, [pc, #380]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d11d      	bne.n	8005afa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ac2:	e01a      	b.n	8005afa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ac4:	4b5a      	ldr	r3, [pc, #360]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d116      	bne.n	8005afe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ad4:	e013      	b.n	8005afe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ad6:	4b56      	ldr	r3, [pc, #344]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10f      	bne.n	8005b02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ae2:	4b53      	ldr	r3, [pc, #332]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d109      	bne.n	8005b02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005af2:	e006      	b.n	8005b02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	73fb      	strb	r3, [r7, #15]
      break;
 8005af8:	e004      	b.n	8005b04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005afa:	bf00      	nop
 8005afc:	e002      	b.n	8005b04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005afe:	bf00      	nop
 8005b00:	e000      	b.n	8005b04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005b02:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10d      	bne.n	8005b26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b0a:	4b49      	ldr	r3, [pc, #292]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6819      	ldr	r1, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	430b      	orrs	r3, r1
 8005b20:	4943      	ldr	r1, [pc, #268]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d17c      	bne.n	8005c26 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005b2c:	4b40      	ldr	r3, [pc, #256]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a3f      	ldr	r2, [pc, #252]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005b36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b38:	f7fc fbe0 	bl	80022fc <HAL_GetTick>
 8005b3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b3e:	e009      	b.n	8005b54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b40:	f7fc fbdc 	bl	80022fc <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d902      	bls.n	8005b54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	73fb      	strb	r3, [r7, #15]
        break;
 8005b52:	e005      	b.n	8005b60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b54:	4b36      	ldr	r3, [pc, #216]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1ef      	bne.n	8005b40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d15f      	bne.n	8005c26 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d110      	bne.n	8005b8e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b6c:	4b30      	ldr	r3, [pc, #192]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005b74:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6892      	ldr	r2, [r2, #8]
 8005b7c:	0211      	lsls	r1, r2, #8
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	68d2      	ldr	r2, [r2, #12]
 8005b82:	06d2      	lsls	r2, r2, #27
 8005b84:	430a      	orrs	r2, r1
 8005b86:	492a      	ldr	r1, [pc, #168]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	610b      	str	r3, [r1, #16]
 8005b8c:	e027      	b.n	8005bde <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d112      	bne.n	8005bba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b94:	4b26      	ldr	r3, [pc, #152]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005b9c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6892      	ldr	r2, [r2, #8]
 8005ba4:	0211      	lsls	r1, r2, #8
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	6912      	ldr	r2, [r2, #16]
 8005baa:	0852      	lsrs	r2, r2, #1
 8005bac:	3a01      	subs	r2, #1
 8005bae:	0552      	lsls	r2, r2, #21
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	491f      	ldr	r1, [pc, #124]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	610b      	str	r3, [r1, #16]
 8005bb8:	e011      	b.n	8005bde <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005bba:	4b1d      	ldr	r3, [pc, #116]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005bc2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6892      	ldr	r2, [r2, #8]
 8005bca:	0211      	lsls	r1, r2, #8
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6952      	ldr	r2, [r2, #20]
 8005bd0:	0852      	lsrs	r2, r2, #1
 8005bd2:	3a01      	subs	r2, #1
 8005bd4:	0652      	lsls	r2, r2, #25
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	4915      	ldr	r1, [pc, #84]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005bde:	4b14      	ldr	r3, [pc, #80]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a13      	ldr	r2, [pc, #76]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005be4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005be8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bea:	f7fc fb87 	bl	80022fc <HAL_GetTick>
 8005bee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bf0:	e009      	b.n	8005c06 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bf2:	f7fc fb83 	bl	80022fc <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d902      	bls.n	8005c06 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	73fb      	strb	r3, [r7, #15]
          break;
 8005c04:	e005      	b.n	8005c12 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005c06:	4b0a      	ldr	r3, [pc, #40]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0ef      	beq.n	8005bf2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d106      	bne.n	8005c26 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005c18:	4b05      	ldr	r3, [pc, #20]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c1a:	691a      	ldr	r2, [r3, #16]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	4903      	ldr	r1, [pc, #12]	@ (8005c30 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40021000 	.word	0x40021000

08005c34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c42:	4b69      	ldr	r3, [pc, #420]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d018      	beq.n	8005c80 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c4e:	4b66      	ldr	r3, [pc, #408]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f003 0203 	and.w	r2, r3, #3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d10d      	bne.n	8005c7a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
       ||
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d009      	beq.n	8005c7a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005c66:	4b60      	ldr	r3, [pc, #384]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	091b      	lsrs	r3, r3, #4
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
       ||
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d047      	beq.n	8005d0a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	73fb      	strb	r3, [r7, #15]
 8005c7e:	e044      	b.n	8005d0a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d018      	beq.n	8005cba <RCCEx_PLLSAI2_Config+0x86>
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d825      	bhi.n	8005cd8 <RCCEx_PLLSAI2_Config+0xa4>
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d002      	beq.n	8005c96 <RCCEx_PLLSAI2_Config+0x62>
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d009      	beq.n	8005ca8 <RCCEx_PLLSAI2_Config+0x74>
 8005c94:	e020      	b.n	8005cd8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c96:	4b54      	ldr	r3, [pc, #336]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d11d      	bne.n	8005cde <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ca6:	e01a      	b.n	8005cde <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ca8:	4b4f      	ldr	r3, [pc, #316]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d116      	bne.n	8005ce2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cb8:	e013      	b.n	8005ce2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005cba:	4b4b      	ldr	r3, [pc, #300]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10f      	bne.n	8005ce6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005cc6:	4b48      	ldr	r3, [pc, #288]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d109      	bne.n	8005ce6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cd6:	e006      	b.n	8005ce6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	73fb      	strb	r3, [r7, #15]
      break;
 8005cdc:	e004      	b.n	8005ce8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005cde:	bf00      	nop
 8005ce0:	e002      	b.n	8005ce8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ce2:	bf00      	nop
 8005ce4:	e000      	b.n	8005ce8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005ce6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10d      	bne.n	8005d0a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005cee:	4b3e      	ldr	r3, [pc, #248]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6819      	ldr	r1, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	430b      	orrs	r3, r1
 8005d04:	4938      	ldr	r1, [pc, #224]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d166      	bne.n	8005dde <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005d10:	4b35      	ldr	r3, [pc, #212]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a34      	ldr	r2, [pc, #208]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d1c:	f7fc faee 	bl	80022fc <HAL_GetTick>
 8005d20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d22:	e009      	b.n	8005d38 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d24:	f7fc faea 	bl	80022fc <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d902      	bls.n	8005d38 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	73fb      	strb	r3, [r7, #15]
        break;
 8005d36:	e005      	b.n	8005d44 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005d38:	4b2b      	ldr	r3, [pc, #172]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1ef      	bne.n	8005d24 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d149      	bne.n	8005dde <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d110      	bne.n	8005d72 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d50:	4b25      	ldr	r3, [pc, #148]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005d58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6892      	ldr	r2, [r2, #8]
 8005d60:	0211      	lsls	r1, r2, #8
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68d2      	ldr	r2, [r2, #12]
 8005d66:	06d2      	lsls	r2, r2, #27
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	491f      	ldr	r1, [pc, #124]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	614b      	str	r3, [r1, #20]
 8005d70:	e011      	b.n	8005d96 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d72:	4b1d      	ldr	r3, [pc, #116]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005d7a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6892      	ldr	r2, [r2, #8]
 8005d82:	0211      	lsls	r1, r2, #8
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6912      	ldr	r2, [r2, #16]
 8005d88:	0852      	lsrs	r2, r2, #1
 8005d8a:	3a01      	subs	r2, #1
 8005d8c:	0652      	lsls	r2, r2, #25
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	4915      	ldr	r1, [pc, #84]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d92:	4313      	orrs	r3, r2
 8005d94:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d96:	4b14      	ldr	r3, [pc, #80]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a13      	ldr	r2, [pc, #76]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005da0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da2:	f7fc faab 	bl	80022fc <HAL_GetTick>
 8005da6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005da8:	e009      	b.n	8005dbe <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005daa:	f7fc faa7 	bl	80022fc <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d902      	bls.n	8005dbe <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	73fb      	strb	r3, [r7, #15]
          break;
 8005dbc:	e005      	b.n	8005dca <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d0ef      	beq.n	8005daa <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005dd0:	4b05      	ldr	r3, [pc, #20]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005dd2:	695a      	ldr	r2, [r3, #20]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	4903      	ldr	r1, [pc, #12]	@ (8005de8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40021000 	.word	0x40021000

08005dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e049      	b.n	8005e92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d106      	bne.n	8005e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f841 	bl	8005e9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3304      	adds	r3, #4
 8005e28:	4619      	mov	r1, r3
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	f000 fab0 	bl	8006390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ea2:	bf00      	nop
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
	...

08005eb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d001      	beq.n	8005ec8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e04f      	b.n	8005f68 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a23      	ldr	r2, [pc, #140]	@ (8005f74 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d01d      	beq.n	8005f26 <HAL_TIM_Base_Start_IT+0x76>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef2:	d018      	beq.n	8005f26 <HAL_TIM_Base_Start_IT+0x76>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8005f78 <HAL_TIM_Base_Start_IT+0xc8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <HAL_TIM_Base_Start_IT+0x76>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1e      	ldr	r2, [pc, #120]	@ (8005f7c <HAL_TIM_Base_Start_IT+0xcc>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00e      	beq.n	8005f26 <HAL_TIM_Base_Start_IT+0x76>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8005f80 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d009      	beq.n	8005f26 <HAL_TIM_Base_Start_IT+0x76>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1b      	ldr	r2, [pc, #108]	@ (8005f84 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d004      	beq.n	8005f26 <HAL_TIM_Base_Start_IT+0x76>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a19      	ldr	r2, [pc, #100]	@ (8005f88 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d115      	bne.n	8005f52 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	4b17      	ldr	r3, [pc, #92]	@ (8005f8c <HAL_TIM_Base_Start_IT+0xdc>)
 8005f2e:	4013      	ands	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b06      	cmp	r3, #6
 8005f36:	d015      	beq.n	8005f64 <HAL_TIM_Base_Start_IT+0xb4>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f3e:	d011      	beq.n	8005f64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0201 	orr.w	r2, r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f50:	e008      	b.n	8005f64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f042 0201 	orr.w	r2, r2, #1
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	e000      	b.n	8005f66 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	40012c00 	.word	0x40012c00
 8005f78:	40000400 	.word	0x40000400
 8005f7c:	40000800 	.word	0x40000800
 8005f80:	40000c00 	.word	0x40000c00
 8005f84:	40013400 	.word	0x40013400
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	00010007 	.word	0x00010007

08005f90 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e049      	b.n	8006036 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f7fc f818 	bl	8001fec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3304      	adds	r3, #4
 8005fcc:	4619      	mov	r1, r3
 8005fce:	4610      	mov	r0, r2
 8005fd0:	f000 f9de 	bl	8006390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b084      	sub	sp, #16
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d020      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f003 0302 	and.w	r3, r3, #2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d01b      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f06f 0202 	mvn.w	r2, #2
 8006072:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	f003 0303 	and.w	r3, r3, #3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f963 	bl	8006354 <HAL_TIM_IC_CaptureCallback>
 800608e:	e005      	b.n	800609c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f955 	bl	8006340 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f966 	bl	8006368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	f003 0304 	and.w	r3, r3, #4
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d020      	beq.n	80060ee <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01b      	beq.n	80060ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f06f 0204 	mvn.w	r2, #4
 80060be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f93d 	bl	8006354 <HAL_TIM_IC_CaptureCallback>
 80060da:	e005      	b.n	80060e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f92f 	bl	8006340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f940 	bl	8006368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d020      	beq.n	800613a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d01b      	beq.n	800613a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f06f 0208 	mvn.w	r2, #8
 800610a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2204      	movs	r2, #4
 8006110:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	f003 0303 	and.w	r3, r3, #3
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f917 	bl	8006354 <HAL_TIM_IC_CaptureCallback>
 8006126:	e005      	b.n	8006134 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f909 	bl	8006340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f91a 	bl	8006368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f003 0310 	and.w	r3, r3, #16
 8006140:	2b00      	cmp	r3, #0
 8006142:	d020      	beq.n	8006186 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	2b00      	cmp	r3, #0
 800614c:	d01b      	beq.n	8006186 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f06f 0210 	mvn.w	r2, #16
 8006156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2208      	movs	r2, #8
 800615c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f8f1 	bl	8006354 <HAL_TIM_IC_CaptureCallback>
 8006172:	e005      	b.n	8006180 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f8e3 	bl	8006340 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f8f4 	bl	8006368 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00c      	beq.n	80061aa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f06f 0201 	mvn.w	r2, #1
 80061a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7fb fd77 	bl	8001c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d104      	bne.n	80061be <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d00c      	beq.n	80061d8 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d007      	beq.n	80061d8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80061d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 fd68 	bl	8006ca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00c      	beq.n	80061fc <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d007      	beq.n	80061fc <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80061f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fd60 	bl	8006cbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00c      	beq.n	8006220 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d007      	beq.n	8006220 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f8ae 	bl	800637c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f003 0320 	and.w	r3, r3, #32
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00c      	beq.n	8006244 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f003 0320 	and.w	r3, r3, #32
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0220 	mvn.w	r2, #32
 800623c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fd28 	bl	8006c94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006244:	bf00      	nop
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006266:	2302      	movs	r3, #2
 8006268:	e066      	b.n	8006338 <HAL_TIM_OC_ConfigChannel+0xec>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b14      	cmp	r3, #20
 8006276:	d857      	bhi.n	8006328 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006278:	a201      	add	r2, pc, #4	@ (adr r2, 8006280 <HAL_TIM_OC_ConfigChannel+0x34>)
 800627a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627e:	bf00      	nop
 8006280:	080062d5 	.word	0x080062d5
 8006284:	08006329 	.word	0x08006329
 8006288:	08006329 	.word	0x08006329
 800628c:	08006329 	.word	0x08006329
 8006290:	080062e3 	.word	0x080062e3
 8006294:	08006329 	.word	0x08006329
 8006298:	08006329 	.word	0x08006329
 800629c:	08006329 	.word	0x08006329
 80062a0:	080062f1 	.word	0x080062f1
 80062a4:	08006329 	.word	0x08006329
 80062a8:	08006329 	.word	0x08006329
 80062ac:	08006329 	.word	0x08006329
 80062b0:	080062ff 	.word	0x080062ff
 80062b4:	08006329 	.word	0x08006329
 80062b8:	08006329 	.word	0x08006329
 80062bc:	08006329 	.word	0x08006329
 80062c0:	0800630d 	.word	0x0800630d
 80062c4:	08006329 	.word	0x08006329
 80062c8:	08006329 	.word	0x08006329
 80062cc:	08006329 	.word	0x08006329
 80062d0:	0800631b 	.word	0x0800631b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 f8fe 	bl	80064dc <TIM_OC1_SetConfig>
      break;
 80062e0:	e025      	b.n	800632e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68b9      	ldr	r1, [r7, #8]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 f987 	bl	80065fc <TIM_OC2_SetConfig>
      break;
 80062ee:	e01e      	b.n	800632e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68b9      	ldr	r1, [r7, #8]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 fa0a 	bl	8006710 <TIM_OC3_SetConfig>
      break;
 80062fc:	e017      	b.n	800632e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68b9      	ldr	r1, [r7, #8]
 8006304:	4618      	mov	r0, r3
 8006306:	f000 fa8b 	bl	8006820 <TIM_OC4_SetConfig>
      break;
 800630a:	e010      	b.n	800632e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 faee 	bl	80068f4 <TIM_OC5_SetConfig>
      break;
 8006318:	e009      	b.n	800632e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68b9      	ldr	r1, [r7, #8]
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fb4b 	bl	80069bc <TIM_OC6_SetConfig>
      break;
 8006326:	e002      	b.n	800632e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	75fb      	strb	r3, [r7, #23]
      break;
 800632c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006336:	7dfb      	ldrb	r3, [r7, #23]
}
 8006338:	4618      	mov	r0, r3
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a46      	ldr	r2, [pc, #280]	@ (80064bc <TIM_Base_SetConfig+0x12c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d013      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ae:	d00f      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a43      	ldr	r2, [pc, #268]	@ (80064c0 <TIM_Base_SetConfig+0x130>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00b      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a42      	ldr	r2, [pc, #264]	@ (80064c4 <TIM_Base_SetConfig+0x134>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d007      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a41      	ldr	r2, [pc, #260]	@ (80064c8 <TIM_Base_SetConfig+0x138>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d003      	beq.n	80063d0 <TIM_Base_SetConfig+0x40>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a40      	ldr	r2, [pc, #256]	@ (80064cc <TIM_Base_SetConfig+0x13c>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d108      	bne.n	80063e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a35      	ldr	r2, [pc, #212]	@ (80064bc <TIM_Base_SetConfig+0x12c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d01f      	beq.n	800642a <TIM_Base_SetConfig+0x9a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f0:	d01b      	beq.n	800642a <TIM_Base_SetConfig+0x9a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a32      	ldr	r2, [pc, #200]	@ (80064c0 <TIM_Base_SetConfig+0x130>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d017      	beq.n	800642a <TIM_Base_SetConfig+0x9a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a31      	ldr	r2, [pc, #196]	@ (80064c4 <TIM_Base_SetConfig+0x134>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d013      	beq.n	800642a <TIM_Base_SetConfig+0x9a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a30      	ldr	r2, [pc, #192]	@ (80064c8 <TIM_Base_SetConfig+0x138>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00f      	beq.n	800642a <TIM_Base_SetConfig+0x9a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a2f      	ldr	r2, [pc, #188]	@ (80064cc <TIM_Base_SetConfig+0x13c>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d00b      	beq.n	800642a <TIM_Base_SetConfig+0x9a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a2e      	ldr	r2, [pc, #184]	@ (80064d0 <TIM_Base_SetConfig+0x140>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d007      	beq.n	800642a <TIM_Base_SetConfig+0x9a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a2d      	ldr	r2, [pc, #180]	@ (80064d4 <TIM_Base_SetConfig+0x144>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d003      	beq.n	800642a <TIM_Base_SetConfig+0x9a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a2c      	ldr	r2, [pc, #176]	@ (80064d8 <TIM_Base_SetConfig+0x148>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d108      	bne.n	800643c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	4313      	orrs	r3, r2
 800643a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	4313      	orrs	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	689a      	ldr	r2, [r3, #8]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a16      	ldr	r2, [pc, #88]	@ (80064bc <TIM_Base_SetConfig+0x12c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00f      	beq.n	8006488 <TIM_Base_SetConfig+0xf8>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a18      	ldr	r2, [pc, #96]	@ (80064cc <TIM_Base_SetConfig+0x13c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00b      	beq.n	8006488 <TIM_Base_SetConfig+0xf8>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a17      	ldr	r2, [pc, #92]	@ (80064d0 <TIM_Base_SetConfig+0x140>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d007      	beq.n	8006488 <TIM_Base_SetConfig+0xf8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a16      	ldr	r2, [pc, #88]	@ (80064d4 <TIM_Base_SetConfig+0x144>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d003      	beq.n	8006488 <TIM_Base_SetConfig+0xf8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a15      	ldr	r2, [pc, #84]	@ (80064d8 <TIM_Base_SetConfig+0x148>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d103      	bne.n	8006490 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d105      	bne.n	80064ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f023 0201 	bic.w	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	611a      	str	r2, [r3, #16]
  }
}
 80064ae:	bf00      	nop
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40012c00 	.word	0x40012c00
 80064c0:	40000400 	.word	0x40000400
 80064c4:	40000800 	.word	0x40000800
 80064c8:	40000c00 	.word	0x40000c00
 80064cc:	40013400 	.word	0x40013400
 80064d0:	40014000 	.word	0x40014000
 80064d4:	40014400 	.word	0x40014400
 80064d8:	40014800 	.word	0x40014800

080064dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	f023 0201 	bic.w	r2, r3, #1
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800650a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800650e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 0303 	bic.w	r3, r3, #3
 8006516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	4313      	orrs	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f023 0302 	bic.w	r3, r3, #2
 8006528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	4313      	orrs	r3, r2
 8006532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a2c      	ldr	r2, [pc, #176]	@ (80065e8 <TIM_OC1_SetConfig+0x10c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00f      	beq.n	800655c <TIM_OC1_SetConfig+0x80>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a2b      	ldr	r2, [pc, #172]	@ (80065ec <TIM_OC1_SetConfig+0x110>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00b      	beq.n	800655c <TIM_OC1_SetConfig+0x80>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a2a      	ldr	r2, [pc, #168]	@ (80065f0 <TIM_OC1_SetConfig+0x114>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d007      	beq.n	800655c <TIM_OC1_SetConfig+0x80>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a29      	ldr	r2, [pc, #164]	@ (80065f4 <TIM_OC1_SetConfig+0x118>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d003      	beq.n	800655c <TIM_OC1_SetConfig+0x80>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a28      	ldr	r2, [pc, #160]	@ (80065f8 <TIM_OC1_SetConfig+0x11c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d10c      	bne.n	8006576 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f023 0308 	bic.w	r3, r3, #8
 8006562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	4313      	orrs	r3, r2
 800656c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f023 0304 	bic.w	r3, r3, #4
 8006574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a1b      	ldr	r2, [pc, #108]	@ (80065e8 <TIM_OC1_SetConfig+0x10c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00f      	beq.n	800659e <TIM_OC1_SetConfig+0xc2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a1a      	ldr	r2, [pc, #104]	@ (80065ec <TIM_OC1_SetConfig+0x110>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d00b      	beq.n	800659e <TIM_OC1_SetConfig+0xc2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a19      	ldr	r2, [pc, #100]	@ (80065f0 <TIM_OC1_SetConfig+0x114>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d007      	beq.n	800659e <TIM_OC1_SetConfig+0xc2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a18      	ldr	r2, [pc, #96]	@ (80065f4 <TIM_OC1_SetConfig+0x118>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d003      	beq.n	800659e <TIM_OC1_SetConfig+0xc2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a17      	ldr	r2, [pc, #92]	@ (80065f8 <TIM_OC1_SetConfig+0x11c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d111      	bne.n	80065c2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4313      	orrs	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	621a      	str	r2, [r3, #32]
}
 80065dc:	bf00      	nop
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	40012c00 	.word	0x40012c00
 80065ec:	40013400 	.word	0x40013400
 80065f0:	40014000 	.word	0x40014000
 80065f4:	40014400 	.word	0x40014400
 80065f8:	40014800 	.word	0x40014800

080065fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	f023 0210 	bic.w	r2, r3, #16
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800662a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800662e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	021b      	lsls	r3, r3, #8
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	4313      	orrs	r3, r2
 8006642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f023 0320 	bic.w	r3, r3, #32
 800664a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a28      	ldr	r2, [pc, #160]	@ (80066fc <TIM_OC2_SetConfig+0x100>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d003      	beq.n	8006668 <TIM_OC2_SetConfig+0x6c>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a27      	ldr	r2, [pc, #156]	@ (8006700 <TIM_OC2_SetConfig+0x104>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d10d      	bne.n	8006684 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800666e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4313      	orrs	r3, r2
 800667a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006682:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a1d      	ldr	r2, [pc, #116]	@ (80066fc <TIM_OC2_SetConfig+0x100>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00f      	beq.n	80066ac <TIM_OC2_SetConfig+0xb0>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a1c      	ldr	r2, [pc, #112]	@ (8006700 <TIM_OC2_SetConfig+0x104>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00b      	beq.n	80066ac <TIM_OC2_SetConfig+0xb0>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a1b      	ldr	r2, [pc, #108]	@ (8006704 <TIM_OC2_SetConfig+0x108>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d007      	beq.n	80066ac <TIM_OC2_SetConfig+0xb0>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a1a      	ldr	r2, [pc, #104]	@ (8006708 <TIM_OC2_SetConfig+0x10c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_OC2_SetConfig+0xb0>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a19      	ldr	r2, [pc, #100]	@ (800670c <TIM_OC2_SetConfig+0x110>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d113      	bne.n	80066d4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	621a      	str	r2, [r3, #32]
}
 80066ee:	bf00      	nop
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40013400 	.word	0x40013400
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400
 800670c:	40014800 	.word	0x40014800

08006710 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800673e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0303 	bic.w	r3, r3, #3
 800674a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800675c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	021b      	lsls	r3, r3, #8
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	4313      	orrs	r3, r2
 8006768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a27      	ldr	r2, [pc, #156]	@ (800680c <TIM_OC3_SetConfig+0xfc>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d003      	beq.n	800677a <TIM_OC3_SetConfig+0x6a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a26      	ldr	r2, [pc, #152]	@ (8006810 <TIM_OC3_SetConfig+0x100>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d10d      	bne.n	8006796 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a1c      	ldr	r2, [pc, #112]	@ (800680c <TIM_OC3_SetConfig+0xfc>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00f      	beq.n	80067be <TIM_OC3_SetConfig+0xae>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006810 <TIM_OC3_SetConfig+0x100>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00b      	beq.n	80067be <TIM_OC3_SetConfig+0xae>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a1a      	ldr	r2, [pc, #104]	@ (8006814 <TIM_OC3_SetConfig+0x104>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d007      	beq.n	80067be <TIM_OC3_SetConfig+0xae>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a19      	ldr	r2, [pc, #100]	@ (8006818 <TIM_OC3_SetConfig+0x108>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d003      	beq.n	80067be <TIM_OC3_SetConfig+0xae>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a18      	ldr	r2, [pc, #96]	@ (800681c <TIM_OC3_SetConfig+0x10c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d113      	bne.n	80067e6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	011b      	lsls	r3, r3, #4
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	621a      	str	r2, [r3, #32]
}
 8006800:	bf00      	nop
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40013400 	.word	0x40013400
 8006814:	40014000 	.word	0x40014000
 8006818:	40014400 	.word	0x40014400
 800681c:	40014800 	.word	0x40014800

08006820 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800684e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800685a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	021b      	lsls	r3, r3, #8
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800686e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	031b      	lsls	r3, r3, #12
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a18      	ldr	r2, [pc, #96]	@ (80068e0 <TIM_OC4_SetConfig+0xc0>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00f      	beq.n	80068a4 <TIM_OC4_SetConfig+0x84>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a17      	ldr	r2, [pc, #92]	@ (80068e4 <TIM_OC4_SetConfig+0xc4>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00b      	beq.n	80068a4 <TIM_OC4_SetConfig+0x84>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a16      	ldr	r2, [pc, #88]	@ (80068e8 <TIM_OC4_SetConfig+0xc8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d007      	beq.n	80068a4 <TIM_OC4_SetConfig+0x84>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a15      	ldr	r2, [pc, #84]	@ (80068ec <TIM_OC4_SetConfig+0xcc>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d003      	beq.n	80068a4 <TIM_OC4_SetConfig+0x84>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a14      	ldr	r2, [pc, #80]	@ (80068f0 <TIM_OC4_SetConfig+0xd0>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d109      	bne.n	80068b8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	019b      	lsls	r3, r3, #6
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	371c      	adds	r7, #28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40012c00 	.word	0x40012c00
 80068e4:	40013400 	.word	0x40013400
 80068e8:	40014000 	.word	0x40014000
 80068ec:	40014400 	.word	0x40014400
 80068f0:	40014800 	.word	0x40014800

080068f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800691a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006938:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	041b      	lsls	r3, r3, #16
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a17      	ldr	r2, [pc, #92]	@ (80069a8 <TIM_OC5_SetConfig+0xb4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d00f      	beq.n	800696e <TIM_OC5_SetConfig+0x7a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a16      	ldr	r2, [pc, #88]	@ (80069ac <TIM_OC5_SetConfig+0xb8>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00b      	beq.n	800696e <TIM_OC5_SetConfig+0x7a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a15      	ldr	r2, [pc, #84]	@ (80069b0 <TIM_OC5_SetConfig+0xbc>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d007      	beq.n	800696e <TIM_OC5_SetConfig+0x7a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a14      	ldr	r2, [pc, #80]	@ (80069b4 <TIM_OC5_SetConfig+0xc0>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d003      	beq.n	800696e <TIM_OC5_SetConfig+0x7a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a13      	ldr	r2, [pc, #76]	@ (80069b8 <TIM_OC5_SetConfig+0xc4>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d109      	bne.n	8006982 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006974:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	021b      	lsls	r3, r3, #8
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	4313      	orrs	r3, r2
 8006980:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	621a      	str	r2, [r3, #32]
}
 800699c:	bf00      	nop
 800699e:	371c      	adds	r7, #28
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	40012c00 	.word	0x40012c00
 80069ac:	40013400 	.word	0x40013400
 80069b0:	40014000 	.word	0x40014000
 80069b4:	40014400 	.word	0x40014400
 80069b8:	40014800 	.word	0x40014800

080069bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	021b      	lsls	r3, r3, #8
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	051b      	lsls	r3, r3, #20
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a18      	ldr	r2, [pc, #96]	@ (8006a74 <TIM_OC6_SetConfig+0xb8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00f      	beq.n	8006a38 <TIM_OC6_SetConfig+0x7c>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a17      	ldr	r2, [pc, #92]	@ (8006a78 <TIM_OC6_SetConfig+0xbc>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d00b      	beq.n	8006a38 <TIM_OC6_SetConfig+0x7c>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a16      	ldr	r2, [pc, #88]	@ (8006a7c <TIM_OC6_SetConfig+0xc0>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d007      	beq.n	8006a38 <TIM_OC6_SetConfig+0x7c>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a15      	ldr	r2, [pc, #84]	@ (8006a80 <TIM_OC6_SetConfig+0xc4>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d003      	beq.n	8006a38 <TIM_OC6_SetConfig+0x7c>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a14      	ldr	r2, [pc, #80]	@ (8006a84 <TIM_OC6_SetConfig+0xc8>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d109      	bne.n	8006a4c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	029b      	lsls	r3, r3, #10
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	621a      	str	r2, [r3, #32]
}
 8006a66:	bf00      	nop
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40012c00 	.word	0x40012c00
 8006a78:	40013400 	.word	0x40013400
 8006a7c:	40014000 	.word	0x40014000
 8006a80:	40014400 	.word	0x40014400
 8006a84:	40014800 	.word	0x40014800

08006a88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d101      	bne.n	8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	e068      	b.n	8006b72 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a2e      	ldr	r2, [pc, #184]	@ (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d004      	beq.n	8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a2d      	ldr	r2, [pc, #180]	@ (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d108      	bne.n	8006ae6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006ada:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a1e      	ldr	r2, [pc, #120]	@ (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d01d      	beq.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b12:	d018      	beq.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a1b      	ldr	r2, [pc, #108]	@ (8006b88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d013      	beq.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a1a      	ldr	r2, [pc, #104]	@ (8006b8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d00e      	beq.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a18      	ldr	r2, [pc, #96]	@ (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d009      	beq.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a13      	ldr	r2, [pc, #76]	@ (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d004      	beq.n	8006b46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a14      	ldr	r2, [pc, #80]	@ (8006b94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d10c      	bne.n	8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3714      	adds	r7, #20
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40012c00 	.word	0x40012c00
 8006b84:	40013400 	.word	0x40013400
 8006b88:	40000400 	.word	0x40000400
 8006b8c:	40000800 	.word	0x40000800
 8006b90:	40000c00 	.word	0x40000c00
 8006b94:	40014000 	.word	0x40014000

08006b98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d101      	bne.n	8006bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	e065      	b.n	8006c80 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	041b      	lsls	r3, r3, #16
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a16      	ldr	r2, [pc, #88]	@ (8006c8c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d004      	beq.n	8006c42 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a14      	ldr	r2, [pc, #80]	@ (8006c90 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d115      	bne.n	8006c6e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4c:	051b      	lsls	r3, r3, #20
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	69db      	ldr	r3, [r3, #28]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	40012c00 	.word	0x40012c00
 8006c90:	40013400 	.word	0x40013400

08006c94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <__NVIC_SetPriority>:
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	6039      	str	r1, [r7, #0]
 8006cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	db0a      	blt.n	8006cfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	490c      	ldr	r1, [pc, #48]	@ (8006d1c <__NVIC_SetPriority+0x4c>)
 8006cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cee:	0112      	lsls	r2, r2, #4
 8006cf0:	b2d2      	uxtb	r2, r2
 8006cf2:	440b      	add	r3, r1
 8006cf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006cf8:	e00a      	b.n	8006d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	4908      	ldr	r1, [pc, #32]	@ (8006d20 <__NVIC_SetPriority+0x50>)
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	3b04      	subs	r3, #4
 8006d08:	0112      	lsls	r2, r2, #4
 8006d0a:	b2d2      	uxtb	r2, r2
 8006d0c:	440b      	add	r3, r1
 8006d0e:	761a      	strb	r2, [r3, #24]
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr
 8006d1c:	e000e100 	.word	0xe000e100
 8006d20:	e000ed00 	.word	0xe000ed00

08006d24 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006d28:	4b05      	ldr	r3, [pc, #20]	@ (8006d40 <SysTick_Handler+0x1c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006d2c:	f001 fd46 	bl	80087bc <xTaskGetSchedulerState>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d001      	beq.n	8006d3a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006d36:	f002 fb3f 	bl	80093b8 <xPortSysTickHandler>
  }
}
 8006d3a:	bf00      	nop
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	e000e010 	.word	0xe000e010

08006d44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006d44:	b580      	push	{r7, lr}
 8006d46:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006d48:	2100      	movs	r1, #0
 8006d4a:	f06f 0004 	mvn.w	r0, #4
 8006d4e:	f7ff ffbf 	bl	8006cd0 <__NVIC_SetPriority>
#endif
}
 8006d52:	bf00      	nop
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d5e:	f3ef 8305 	mrs	r3, IPSR
 8006d62:	603b      	str	r3, [r7, #0]
  return(result);
 8006d64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006d6a:	f06f 0305 	mvn.w	r3, #5
 8006d6e:	607b      	str	r3, [r7, #4]
 8006d70:	e00c      	b.n	8006d8c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006d72:	4b0a      	ldr	r3, [pc, #40]	@ (8006d9c <osKernelInitialize+0x44>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d105      	bne.n	8006d86 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006d7a:	4b08      	ldr	r3, [pc, #32]	@ (8006d9c <osKernelInitialize+0x44>)
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	607b      	str	r3, [r7, #4]
 8006d84:	e002      	b.n	8006d8c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006d86:	f04f 33ff 	mov.w	r3, #4294967295
 8006d8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006d8c:	687b      	ldr	r3, [r7, #4]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	20000264 	.word	0x20000264

08006da0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006da6:	f3ef 8305 	mrs	r3, IPSR
 8006daa:	603b      	str	r3, [r7, #0]
  return(result);
 8006dac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <osKernelStart+0x1a>
    stat = osErrorISR;
 8006db2:	f06f 0305 	mvn.w	r3, #5
 8006db6:	607b      	str	r3, [r7, #4]
 8006db8:	e010      	b.n	8006ddc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006dba:	4b0b      	ldr	r3, [pc, #44]	@ (8006de8 <osKernelStart+0x48>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d109      	bne.n	8006dd6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006dc2:	f7ff ffbf 	bl	8006d44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006dc6:	4b08      	ldr	r3, [pc, #32]	@ (8006de8 <osKernelStart+0x48>)
 8006dc8:	2202      	movs	r2, #2
 8006dca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006dcc:	f001 f892 	bl	8007ef4 <vTaskStartScheduler>
      stat = osOK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	607b      	str	r3, [r7, #4]
 8006dd4:	e002      	b.n	8006ddc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ddc:	687b      	ldr	r3, [r7, #4]
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	20000264 	.word	0x20000264

08006dec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08e      	sub	sp, #56	@ 0x38
 8006df0:	af04      	add	r7, sp, #16
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dfc:	f3ef 8305 	mrs	r3, IPSR
 8006e00:	617b      	str	r3, [r7, #20]
  return(result);
 8006e02:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d17e      	bne.n	8006f06 <osThreadNew+0x11a>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d07b      	beq.n	8006f06 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006e0e:	2380      	movs	r3, #128	@ 0x80
 8006e10:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006e12:	2318      	movs	r3, #24
 8006e14:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006e16:	2300      	movs	r3, #0
 8006e18:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d045      	beq.n	8006eb2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <osThreadNew+0x48>
        name = attr->name;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d008      	beq.n	8006e5a <osThreadNew+0x6e>
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	2b38      	cmp	r3, #56	@ 0x38
 8006e4c:	d805      	bhi.n	8006e5a <osThreadNew+0x6e>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <osThreadNew+0x72>
        return (NULL);
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	e054      	b.n	8006f08 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	089b      	lsrs	r3, r3, #2
 8006e6c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00e      	beq.n	8006e94 <osThreadNew+0xa8>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	2ba7      	cmp	r3, #167	@ 0xa7
 8006e7c:	d90a      	bls.n	8006e94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d006      	beq.n	8006e94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <osThreadNew+0xa8>
        mem = 1;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	61bb      	str	r3, [r7, #24]
 8006e92:	e010      	b.n	8006eb6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10c      	bne.n	8006eb6 <osThreadNew+0xca>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d108      	bne.n	8006eb6 <osThreadNew+0xca>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d104      	bne.n	8006eb6 <osThreadNew+0xca>
          mem = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	61bb      	str	r3, [r7, #24]
 8006eb0:	e001      	b.n	8006eb6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d110      	bne.n	8006ede <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ec4:	9202      	str	r2, [sp, #8]
 8006ec6:	9301      	str	r3, [sp, #4]
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	6a3a      	ldr	r2, [r7, #32]
 8006ed0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 fe1a 	bl	8007b0c <xTaskCreateStatic>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	613b      	str	r3, [r7, #16]
 8006edc:	e013      	b.n	8006f06 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d110      	bne.n	8006f06 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	f107 0310 	add.w	r3, r7, #16
 8006eec:	9301      	str	r3, [sp, #4]
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 fe68 	bl	8007bcc <xTaskCreate>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d001      	beq.n	8006f06 <osThreadNew+0x11a>
            hTask = NULL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006f06:	693b      	ldr	r3, [r7, #16]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3728      	adds	r7, #40	@ 0x28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f18:	f3ef 8305 	mrs	r3, IPSR
 8006f1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <osDelay+0x1c>
    stat = osErrorISR;
 8006f24:	f06f 0305 	mvn.w	r3, #5
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	e007      	b.n	8006f3c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 ffa6 	bl	8007e88 <vTaskDelay>
    }
  }

  return (stat);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
	...

08006f48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4a07      	ldr	r2, [pc, #28]	@ (8006f74 <vApplicationGetIdleTaskMemory+0x2c>)
 8006f58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	4a06      	ldr	r2, [pc, #24]	@ (8006f78 <vApplicationGetIdleTaskMemory+0x30>)
 8006f5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2280      	movs	r2, #128	@ 0x80
 8006f64:	601a      	str	r2, [r3, #0]
}
 8006f66:	bf00      	nop
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	20000268 	.word	0x20000268
 8006f78:	20000310 	.word	0x20000310

08006f7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4a07      	ldr	r2, [pc, #28]	@ (8006fa8 <vApplicationGetTimerTaskMemory+0x2c>)
 8006f8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	4a06      	ldr	r2, [pc, #24]	@ (8006fac <vApplicationGetTimerTaskMemory+0x30>)
 8006f92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006f9a:	601a      	str	r2, [r3, #0]
}
 8006f9c:	bf00      	nop
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	20000510 	.word	0x20000510
 8006fac:	200005b8 	.word	0x200005b8

08006fb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f103 0208 	add.w	r2, r3, #8
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f103 0208 	add.w	r2, r3, #8
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f103 0208 	add.w	r2, r3, #8
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ffe:	bf00      	nop
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800700a:	b480      	push	{r7}
 800700c:	b085      	sub	sp, #20
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	601a      	str	r2, [r3, #0]
}
 8007046:	bf00      	nop
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007052:	b480      	push	{r7}
 8007054:	b085      	sub	sp, #20
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
 800705a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007068:	d103      	bne.n	8007072 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	e00c      	b.n	800708c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3308      	adds	r3, #8
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	e002      	b.n	8007080 <vListInsert+0x2e>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	429a      	cmp	r2, r3
 800708a:	d2f6      	bcs.n	800707a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	601a      	str	r2, [r3, #0]
}
 80070b8:	bf00      	nop
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	6892      	ldr	r2, [r2, #8]
 80070da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	6852      	ldr	r2, [r2, #4]
 80070e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d103      	bne.n	80070f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	1e5a      	subs	r2, r3, #1
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3714      	adds	r7, #20
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10b      	bne.n	8007144 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800713e:	bf00      	nop
 8007140:	bf00      	nop
 8007142:	e7fd      	b.n	8007140 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007144:	f002 f8a8 	bl	8009298 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007150:	68f9      	ldr	r1, [r7, #12]
 8007152:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007154:	fb01 f303 	mul.w	r3, r1, r3
 8007158:	441a      	add	r2, r3
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007174:	3b01      	subs	r3, #1
 8007176:	68f9      	ldr	r1, [r7, #12]
 8007178:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800717a:	fb01 f303 	mul.w	r3, r1, r3
 800717e:	441a      	add	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	22ff      	movs	r2, #255	@ 0xff
 8007188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	22ff      	movs	r2, #255	@ 0xff
 8007190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d114      	bne.n	80071c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d01a      	beq.n	80071d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3310      	adds	r3, #16
 80071a6:	4618      	mov	r0, r3
 80071a8:	f001 f942 	bl	8008430 <xTaskRemoveFromEventList>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d012      	beq.n	80071d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80071b2:	4b0d      	ldr	r3, [pc, #52]	@ (80071e8 <xQueueGenericReset+0xd0>)
 80071b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	e009      	b.n	80071d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3310      	adds	r3, #16
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7ff fef1 	bl	8006fb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3324      	adds	r3, #36	@ 0x24
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff feec 	bl	8006fb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80071d8:	f002 f890 	bl	80092fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80071dc:	2301      	movs	r3, #1
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3710      	adds	r7, #16
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	e000ed04 	.word	0xe000ed04

080071ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08e      	sub	sp, #56	@ 0x38
 80071f0:	af02      	add	r7, sp, #8
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10b      	bne.n	8007218 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	e7fd      	b.n	8007214 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d10b      	bne.n	8007236 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007230:	bf00      	nop
 8007232:	bf00      	nop
 8007234:	e7fd      	b.n	8007232 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <xQueueGenericCreateStatic+0x56>
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <xQueueGenericCreateStatic+0x5a>
 8007242:	2301      	movs	r3, #1
 8007244:	e000      	b.n	8007248 <xQueueGenericCreateStatic+0x5c>
 8007246:	2300      	movs	r3, #0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10b      	bne.n	8007264 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	623b      	str	r3, [r7, #32]
}
 800725e:	bf00      	nop
 8007260:	bf00      	nop
 8007262:	e7fd      	b.n	8007260 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d102      	bne.n	8007270 <xQueueGenericCreateStatic+0x84>
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d101      	bne.n	8007274 <xQueueGenericCreateStatic+0x88>
 8007270:	2301      	movs	r3, #1
 8007272:	e000      	b.n	8007276 <xQueueGenericCreateStatic+0x8a>
 8007274:	2300      	movs	r3, #0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10b      	bne.n	8007292 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	61fb      	str	r3, [r7, #28]
}
 800728c:	bf00      	nop
 800728e:	bf00      	nop
 8007290:	e7fd      	b.n	800728e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007292:	2350      	movs	r3, #80	@ 0x50
 8007294:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2b50      	cmp	r3, #80	@ 0x50
 800729a:	d00b      	beq.n	80072b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	61bb      	str	r3, [r7, #24]
}
 80072ae:	bf00      	nop
 80072b0:	bf00      	nop
 80072b2:	e7fd      	b.n	80072b0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80072b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80072ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00d      	beq.n	80072dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80072c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80072cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	4613      	mov	r3, r2
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	68b9      	ldr	r1, [r7, #8]
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f000 f805 	bl	80072e6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80072de:	4618      	mov	r0, r3
 80072e0:	3730      	adds	r7, #48	@ 0x30
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	607a      	str	r2, [r7, #4]
 80072f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d103      	bne.n	8007302 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	69ba      	ldr	r2, [r7, #24]
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	e002      	b.n	8007308 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007314:	2101      	movs	r1, #1
 8007316:	69b8      	ldr	r0, [r7, #24]
 8007318:	f7ff fefe 	bl	8007118 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	78fa      	ldrb	r2, [r7, #3]
 8007320:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007324:	bf00      	nop
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b08e      	sub	sp, #56	@ 0x38
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800733a:	2300      	movs	r3, #0
 800733c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10b      	bne.n	8007360 <xQueueGenericSend+0x34>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800735a:	bf00      	nop
 800735c:	bf00      	nop
 800735e:	e7fd      	b.n	800735c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d103      	bne.n	800736e <xQueueGenericSend+0x42>
 8007366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <xQueueGenericSend+0x46>
 800736e:	2301      	movs	r3, #1
 8007370:	e000      	b.n	8007374 <xQueueGenericSend+0x48>
 8007372:	2300      	movs	r3, #0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10b      	bne.n	8007390 <xQueueGenericSend+0x64>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800738a:	bf00      	nop
 800738c:	bf00      	nop
 800738e:	e7fd      	b.n	800738c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2b02      	cmp	r3, #2
 8007394:	d103      	bne.n	800739e <xQueueGenericSend+0x72>
 8007396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800739a:	2b01      	cmp	r3, #1
 800739c:	d101      	bne.n	80073a2 <xQueueGenericSend+0x76>
 800739e:	2301      	movs	r3, #1
 80073a0:	e000      	b.n	80073a4 <xQueueGenericSend+0x78>
 80073a2:	2300      	movs	r3, #0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10b      	bne.n	80073c0 <xQueueGenericSend+0x94>
	__asm volatile
 80073a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	623b      	str	r3, [r7, #32]
}
 80073ba:	bf00      	nop
 80073bc:	bf00      	nop
 80073be:	e7fd      	b.n	80073bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073c0:	f001 f9fc 	bl	80087bc <xTaskGetSchedulerState>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d102      	bne.n	80073d0 <xQueueGenericSend+0xa4>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d101      	bne.n	80073d4 <xQueueGenericSend+0xa8>
 80073d0:	2301      	movs	r3, #1
 80073d2:	e000      	b.n	80073d6 <xQueueGenericSend+0xaa>
 80073d4:	2300      	movs	r3, #0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10b      	bne.n	80073f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80073da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	61fb      	str	r3, [r7, #28]
}
 80073ec:	bf00      	nop
 80073ee:	bf00      	nop
 80073f0:	e7fd      	b.n	80073ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073f2:	f001 ff51 	bl	8009298 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073fe:	429a      	cmp	r2, r3
 8007400:	d302      	bcc.n	8007408 <xQueueGenericSend+0xdc>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b02      	cmp	r3, #2
 8007406:	d129      	bne.n	800745c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	68b9      	ldr	r1, [r7, #8]
 800740c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800740e:	f000 fa0f 	bl	8007830 <prvCopyDataToQueue>
 8007412:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007418:	2b00      	cmp	r3, #0
 800741a:	d010      	beq.n	800743e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800741c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741e:	3324      	adds	r3, #36	@ 0x24
 8007420:	4618      	mov	r0, r3
 8007422:	f001 f805 	bl	8008430 <xTaskRemoveFromEventList>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d013      	beq.n	8007454 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800742c:	4b3f      	ldr	r3, [pc, #252]	@ (800752c <xQueueGenericSend+0x200>)
 800742e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	e00a      	b.n	8007454 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800743e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d007      	beq.n	8007454 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007444:	4b39      	ldr	r3, [pc, #228]	@ (800752c <xQueueGenericSend+0x200>)
 8007446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800744a:	601a      	str	r2, [r3, #0]
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007454:	f001 ff52 	bl	80092fc <vPortExitCritical>
				return pdPASS;
 8007458:	2301      	movs	r3, #1
 800745a:	e063      	b.n	8007524 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d103      	bne.n	800746a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007462:	f001 ff4b 	bl	80092fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007466:	2300      	movs	r3, #0
 8007468:	e05c      	b.n	8007524 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800746a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800746c:	2b00      	cmp	r3, #0
 800746e:	d106      	bne.n	800747e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007470:	f107 0314 	add.w	r3, r7, #20
 8007474:	4618      	mov	r0, r3
 8007476:	f001 f83f 	bl	80084f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800747a:	2301      	movs	r3, #1
 800747c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800747e:	f001 ff3d 	bl	80092fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007482:	f000 fda7 	bl	8007fd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007486:	f001 ff07 	bl	8009298 <vPortEnterCritical>
 800748a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007490:	b25b      	sxtb	r3, r3
 8007492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007496:	d103      	bne.n	80074a0 <xQueueGenericSend+0x174>
 8007498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074a6:	b25b      	sxtb	r3, r3
 80074a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ac:	d103      	bne.n	80074b6 <xQueueGenericSend+0x18a>
 80074ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074b6:	f001 ff21 	bl	80092fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074ba:	1d3a      	adds	r2, r7, #4
 80074bc:	f107 0314 	add.w	r3, r7, #20
 80074c0:	4611      	mov	r1, r2
 80074c2:	4618      	mov	r0, r3
 80074c4:	f001 f82e 	bl	8008524 <xTaskCheckForTimeOut>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d124      	bne.n	8007518 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074d0:	f000 faa6 	bl	8007a20 <prvIsQueueFull>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d018      	beq.n	800750c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80074da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074dc:	3310      	adds	r3, #16
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	4611      	mov	r1, r2
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 ff52 	bl	800838c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80074e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074ea:	f000 fa31 	bl	8007950 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074ee:	f000 fd7f 	bl	8007ff0 <xTaskResumeAll>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f47f af7c 	bne.w	80073f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80074fa:	4b0c      	ldr	r3, [pc, #48]	@ (800752c <xQueueGenericSend+0x200>)
 80074fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	e772      	b.n	80073f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800750c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800750e:	f000 fa1f 	bl	8007950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007512:	f000 fd6d 	bl	8007ff0 <xTaskResumeAll>
 8007516:	e76c      	b.n	80073f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007518:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800751a:	f000 fa19 	bl	8007950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800751e:	f000 fd67 	bl	8007ff0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007522:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007524:	4618      	mov	r0, r3
 8007526:	3738      	adds	r7, #56	@ 0x38
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	e000ed04 	.word	0xe000ed04

08007530 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b090      	sub	sp, #64	@ 0x40
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
 800753c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007544:	2b00      	cmp	r3, #0
 8007546:	d10b      	bne.n	8007560 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800755a:	bf00      	nop
 800755c:	bf00      	nop
 800755e:	e7fd      	b.n	800755c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d103      	bne.n	800756e <xQueueGenericSendFromISR+0x3e>
 8007566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <xQueueGenericSendFromISR+0x42>
 800756e:	2301      	movs	r3, #1
 8007570:	e000      	b.n	8007574 <xQueueGenericSendFromISR+0x44>
 8007572:	2300      	movs	r3, #0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10b      	bne.n	8007590 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800758a:	bf00      	nop
 800758c:	bf00      	nop
 800758e:	e7fd      	b.n	800758c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b02      	cmp	r3, #2
 8007594:	d103      	bne.n	800759e <xQueueGenericSendFromISR+0x6e>
 8007596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800759a:	2b01      	cmp	r3, #1
 800759c:	d101      	bne.n	80075a2 <xQueueGenericSendFromISR+0x72>
 800759e:	2301      	movs	r3, #1
 80075a0:	e000      	b.n	80075a4 <xQueueGenericSendFromISR+0x74>
 80075a2:	2300      	movs	r3, #0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10b      	bne.n	80075c0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	623b      	str	r3, [r7, #32]
}
 80075ba:	bf00      	nop
 80075bc:	bf00      	nop
 80075be:	e7fd      	b.n	80075bc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075c0:	f001 ff4a 	bl	8009458 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075c4:	f3ef 8211 	mrs	r2, BASEPRI
 80075c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	61fa      	str	r2, [r7, #28]
 80075da:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80075dc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075de:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d302      	bcc.n	80075f2 <xQueueGenericSendFromISR+0xc2>
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d12f      	bne.n	8007652 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007600:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007608:	f000 f912 	bl	8007830 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800760c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007614:	d112      	bne.n	800763c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761a:	2b00      	cmp	r3, #0
 800761c:	d016      	beq.n	800764c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800761e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007620:	3324      	adds	r3, #36	@ 0x24
 8007622:	4618      	mov	r0, r3
 8007624:	f000 ff04 	bl	8008430 <xTaskRemoveFromEventList>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00e      	beq.n	800764c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00b      	beq.n	800764c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	e007      	b.n	800764c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800763c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007640:	3301      	adds	r3, #1
 8007642:	b2db      	uxtb	r3, r3
 8007644:	b25a      	sxtb	r2, r3
 8007646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800764c:	2301      	movs	r3, #1
 800764e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007650:	e001      	b.n	8007656 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007652:	2300      	movs	r3, #0
 8007654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007658:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007660:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007664:	4618      	mov	r0, r3
 8007666:	3740      	adds	r7, #64	@ 0x40
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08c      	sub	sp, #48	@ 0x30
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007678:	2300      	movs	r3, #0
 800767a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10b      	bne.n	800769e <xQueueReceive+0x32>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	623b      	str	r3, [r7, #32]
}
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	e7fd      	b.n	800769a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d103      	bne.n	80076ac <xQueueReceive+0x40>
 80076a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <xQueueReceive+0x44>
 80076ac:	2301      	movs	r3, #1
 80076ae:	e000      	b.n	80076b2 <xQueueReceive+0x46>
 80076b0:	2300      	movs	r3, #0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10b      	bne.n	80076ce <xQueueReceive+0x62>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	61fb      	str	r3, [r7, #28]
}
 80076c8:	bf00      	nop
 80076ca:	bf00      	nop
 80076cc:	e7fd      	b.n	80076ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076ce:	f001 f875 	bl	80087bc <xTaskGetSchedulerState>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d102      	bne.n	80076de <xQueueReceive+0x72>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <xQueueReceive+0x76>
 80076de:	2301      	movs	r3, #1
 80076e0:	e000      	b.n	80076e4 <xQueueReceive+0x78>
 80076e2:	2300      	movs	r3, #0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10b      	bne.n	8007700 <xQueueReceive+0x94>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	61bb      	str	r3, [r7, #24]
}
 80076fa:	bf00      	nop
 80076fc:	bf00      	nop
 80076fe:	e7fd      	b.n	80076fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007700:	f001 fdca 	bl	8009298 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007708:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800770a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770c:	2b00      	cmp	r3, #0
 800770e:	d01f      	beq.n	8007750 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007714:	f000 f8f6 	bl	8007904 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771a:	1e5a      	subs	r2, r3, #1
 800771c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00f      	beq.n	8007748 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800772a:	3310      	adds	r3, #16
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fe7f 	bl	8008430 <xTaskRemoveFromEventList>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d007      	beq.n	8007748 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007738:	4b3c      	ldr	r3, [pc, #240]	@ (800782c <xQueueReceive+0x1c0>)
 800773a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007748:	f001 fdd8 	bl	80092fc <vPortExitCritical>
				return pdPASS;
 800774c:	2301      	movs	r3, #1
 800774e:	e069      	b.n	8007824 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d103      	bne.n	800775e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007756:	f001 fdd1 	bl	80092fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800775a:	2300      	movs	r3, #0
 800775c:	e062      	b.n	8007824 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800775e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007760:	2b00      	cmp	r3, #0
 8007762:	d106      	bne.n	8007772 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007764:	f107 0310 	add.w	r3, r7, #16
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fec5 	bl	80084f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800776e:	2301      	movs	r3, #1
 8007770:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007772:	f001 fdc3 	bl	80092fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007776:	f000 fc2d 	bl	8007fd4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800777a:	f001 fd8d 	bl	8009298 <vPortEnterCritical>
 800777e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007780:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007784:	b25b      	sxtb	r3, r3
 8007786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778a:	d103      	bne.n	8007794 <xQueueReceive+0x128>
 800778c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007796:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800779a:	b25b      	sxtb	r3, r3
 800779c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a0:	d103      	bne.n	80077aa <xQueueReceive+0x13e>
 80077a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077aa:	f001 fda7 	bl	80092fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077ae:	1d3a      	adds	r2, r7, #4
 80077b0:	f107 0310 	add.w	r3, r7, #16
 80077b4:	4611      	mov	r1, r2
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 feb4 	bl	8008524 <xTaskCheckForTimeOut>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d123      	bne.n	800780a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077c4:	f000 f916 	bl	80079f4 <prvIsQueueEmpty>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d017      	beq.n	80077fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077d0:	3324      	adds	r3, #36	@ 0x24
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	4611      	mov	r1, r2
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 fdd8 	bl	800838c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077de:	f000 f8b7 	bl	8007950 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077e2:	f000 fc05 	bl	8007ff0 <xTaskResumeAll>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d189      	bne.n	8007700 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80077ec:	4b0f      	ldr	r3, [pc, #60]	@ (800782c <xQueueReceive+0x1c0>)
 80077ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	e780      	b.n	8007700 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80077fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007800:	f000 f8a6 	bl	8007950 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007804:	f000 fbf4 	bl	8007ff0 <xTaskResumeAll>
 8007808:	e77a      	b.n	8007700 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800780a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800780c:	f000 f8a0 	bl	8007950 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007810:	f000 fbee 	bl	8007ff0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007814:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007816:	f000 f8ed 	bl	80079f4 <prvIsQueueEmpty>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	f43f af6f 	beq.w	8007700 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007822:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007824:	4618      	mov	r0, r3
 8007826:	3730      	adds	r7, #48	@ 0x30
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}
 800782c:	e000ed04 	.word	0xe000ed04

08007830 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800783c:	2300      	movs	r3, #0
 800783e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007844:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10d      	bne.n	800786a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d14d      	bne.n	80078f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 ffcc 	bl	80087f8 <xTaskPriorityDisinherit>
 8007860:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	609a      	str	r2, [r3, #8]
 8007868:	e043      	b.n	80078f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d119      	bne.n	80078a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6858      	ldr	r0, [r3, #4]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007878:	461a      	mov	r2, r3
 800787a:	68b9      	ldr	r1, [r7, #8]
 800787c:	f002 f8a8 	bl	80099d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007888:	441a      	add	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	429a      	cmp	r2, r3
 8007898:	d32b      	bcc.n	80078f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	605a      	str	r2, [r3, #4]
 80078a2:	e026      	b.n	80078f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	68d8      	ldr	r0, [r3, #12]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ac:	461a      	mov	r2, r3
 80078ae:	68b9      	ldr	r1, [r7, #8]
 80078b0:	f002 f88e 	bl	80099d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078bc:	425b      	negs	r3, r3
 80078be:	441a      	add	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	68da      	ldr	r2, [r3, #12]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d207      	bcs.n	80078e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	689a      	ldr	r2, [r3, #8]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d8:	425b      	negs	r3, r3
 80078da:	441a      	add	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d105      	bne.n	80078f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d002      	beq.n	80078f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	3b01      	subs	r3, #1
 80078f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	1c5a      	adds	r2, r3, #1
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80078fa:	697b      	ldr	r3, [r7, #20]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d018      	beq.n	8007948 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68da      	ldr	r2, [r3, #12]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800791e:	441a      	add	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68da      	ldr	r2, [r3, #12]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	429a      	cmp	r2, r3
 800792e:	d303      	bcc.n	8007938 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68d9      	ldr	r1, [r3, #12]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007940:	461a      	mov	r2, r3
 8007942:	6838      	ldr	r0, [r7, #0]
 8007944:	f002 f844 	bl	80099d0 <memcpy>
	}
}
 8007948:	bf00      	nop
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007958:	f001 fc9e 	bl	8009298 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007962:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007964:	e011      	b.n	800798a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796a:	2b00      	cmp	r3, #0
 800796c:	d012      	beq.n	8007994 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	3324      	adds	r3, #36	@ 0x24
 8007972:	4618      	mov	r0, r3
 8007974:	f000 fd5c 	bl	8008430 <xTaskRemoveFromEventList>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800797e:	f000 fe35 	bl	80085ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007982:	7bfb      	ldrb	r3, [r7, #15]
 8007984:	3b01      	subs	r3, #1
 8007986:	b2db      	uxtb	r3, r3
 8007988:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800798a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800798e:	2b00      	cmp	r3, #0
 8007990:	dce9      	bgt.n	8007966 <prvUnlockQueue+0x16>
 8007992:	e000      	b.n	8007996 <prvUnlockQueue+0x46>
					break;
 8007994:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	22ff      	movs	r2, #255	@ 0xff
 800799a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800799e:	f001 fcad 	bl	80092fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079a2:	f001 fc79 	bl	8009298 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079ae:	e011      	b.n	80079d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d012      	beq.n	80079de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3310      	adds	r3, #16
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 fd37 	bl	8008430 <xTaskRemoveFromEventList>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079c8:	f000 fe10 	bl	80085ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	dce9      	bgt.n	80079b0 <prvUnlockQueue+0x60>
 80079dc:	e000      	b.n	80079e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80079de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	22ff      	movs	r2, #255	@ 0xff
 80079e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80079e8:	f001 fc88 	bl	80092fc <vPortExitCritical>
}
 80079ec:	bf00      	nop
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079fc:	f001 fc4c 	bl	8009298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d102      	bne.n	8007a0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	60fb      	str	r3, [r7, #12]
 8007a0c:	e001      	b.n	8007a12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a12:	f001 fc73 	bl	80092fc <vPortExitCritical>

	return xReturn;
 8007a16:	68fb      	ldr	r3, [r7, #12]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a28:	f001 fc36 	bl	8009298 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d102      	bne.n	8007a3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	e001      	b.n	8007a42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a42:	f001 fc5b 	bl	80092fc <vPortExitCritical>

	return xReturn;
 8007a46:	68fb      	ldr	r3, [r7, #12]
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3710      	adds	r7, #16
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]
 8007a5e:	e014      	b.n	8007a8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a60:	4a0f      	ldr	r2, [pc, #60]	@ (8007aa0 <vQueueAddToRegistry+0x50>)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10b      	bne.n	8007a84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a6c:	490c      	ldr	r1, [pc, #48]	@ (8007aa0 <vQueueAddToRegistry+0x50>)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a76:	4a0a      	ldr	r2, [pc, #40]	@ (8007aa0 <vQueueAddToRegistry+0x50>)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	4413      	add	r3, r2
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a82:	e006      	b.n	8007a92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	3301      	adds	r3, #1
 8007a88:	60fb      	str	r3, [r7, #12]
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2b07      	cmp	r3, #7
 8007a8e:	d9e7      	bls.n	8007a60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a90:	bf00      	nop
 8007a92:	bf00      	nop
 8007a94:	3714      	adds	r7, #20
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	200009b8 	.word	0x200009b8

08007aa4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ab4:	f001 fbf0 	bl	8009298 <vPortEnterCritical>
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007abe:	b25b      	sxtb	r3, r3
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac4:	d103      	bne.n	8007ace <vQueueWaitForMessageRestricted+0x2a>
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ad4:	b25b      	sxtb	r3, r3
 8007ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ada:	d103      	bne.n	8007ae4 <vQueueWaitForMessageRestricted+0x40>
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ae4:	f001 fc0a 	bl	80092fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d106      	bne.n	8007afe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	3324      	adds	r3, #36	@ 0x24
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	68b9      	ldr	r1, [r7, #8]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 fc6d 	bl	80083d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007afe:	6978      	ldr	r0, [r7, #20]
 8007b00:	f7ff ff26 	bl	8007950 <prvUnlockQueue>
	}
 8007b04:	bf00      	nop
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b08e      	sub	sp, #56	@ 0x38
 8007b10:	af04      	add	r7, sp, #16
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10b      	bne.n	8007b38 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b24:	f383 8811 	msr	BASEPRI, r3
 8007b28:	f3bf 8f6f 	isb	sy
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	623b      	str	r3, [r7, #32]
}
 8007b32:	bf00      	nop
 8007b34:	bf00      	nop
 8007b36:	e7fd      	b.n	8007b34 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10b      	bne.n	8007b56 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	61fb      	str	r3, [r7, #28]
}
 8007b50:	bf00      	nop
 8007b52:	bf00      	nop
 8007b54:	e7fd      	b.n	8007b52 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b56:	23a8      	movs	r3, #168	@ 0xa8
 8007b58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	2ba8      	cmp	r3, #168	@ 0xa8
 8007b5e:	d00b      	beq.n	8007b78 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	61bb      	str	r3, [r7, #24]
}
 8007b72:	bf00      	nop
 8007b74:	bf00      	nop
 8007b76:	e7fd      	b.n	8007b74 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b78:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d01e      	beq.n	8007bbe <xTaskCreateStatic+0xb2>
 8007b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d01b      	beq.n	8007bbe <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b88:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b8e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b92:	2202      	movs	r2, #2
 8007b94:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b98:	2300      	movs	r3, #0
 8007b9a:	9303      	str	r3, [sp, #12]
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9e:	9302      	str	r3, [sp, #8]
 8007ba0:	f107 0314 	add.w	r3, r7, #20
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	68b9      	ldr	r1, [r7, #8]
 8007bb0:	68f8      	ldr	r0, [r7, #12]
 8007bb2:	f000 f851 	bl	8007c58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007bb8:	f000 f8f6 	bl	8007da8 <prvAddNewTaskToReadyList>
 8007bbc:	e001      	b.n	8007bc2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007bc2:	697b      	ldr	r3, [r7, #20]
	}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3728      	adds	r7, #40	@ 0x28
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08c      	sub	sp, #48	@ 0x30
 8007bd0:	af04      	add	r7, sp, #16
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	603b      	str	r3, [r7, #0]
 8007bd8:	4613      	mov	r3, r2
 8007bda:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007bdc:	88fb      	ldrh	r3, [r7, #6]
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4618      	mov	r0, r3
 8007be2:	f001 fc7b 	bl	80094dc <pvPortMalloc>
 8007be6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00e      	beq.n	8007c0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007bee:	20a8      	movs	r0, #168	@ 0xa8
 8007bf0:	f001 fc74 	bl	80094dc <pvPortMalloc>
 8007bf4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c02:	e005      	b.n	8007c10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c04:	6978      	ldr	r0, [r7, #20]
 8007c06:	f001 fd37 	bl	8009678 <vPortFree>
 8007c0a:	e001      	b.n	8007c10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d017      	beq.n	8007c46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c1e:	88fa      	ldrh	r2, [r7, #6]
 8007c20:	2300      	movs	r3, #0
 8007c22:	9303      	str	r3, [sp, #12]
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	9302      	str	r3, [sp, #8]
 8007c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c2a:	9301      	str	r3, [sp, #4]
 8007c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	68b9      	ldr	r1, [r7, #8]
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 f80f 	bl	8007c58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c3a:	69f8      	ldr	r0, [r7, #28]
 8007c3c:	f000 f8b4 	bl	8007da8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c40:	2301      	movs	r3, #1
 8007c42:	61bb      	str	r3, [r7, #24]
 8007c44:	e002      	b.n	8007c4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c46:	f04f 33ff 	mov.w	r3, #4294967295
 8007c4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c4c:	69bb      	ldr	r3, [r7, #24]
	}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3720      	adds	r7, #32
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c68:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	461a      	mov	r2, r3
 8007c70:	21a5      	movs	r1, #165	@ 0xa5
 8007c72:	f001 fe21 	bl	80098b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007c80:	3b01      	subs	r3, #1
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	f023 0307 	bic.w	r3, r3, #7
 8007c8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	f003 0307 	and.w	r3, r3, #7
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00b      	beq.n	8007cb2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9e:	f383 8811 	msr	BASEPRI, r3
 8007ca2:	f3bf 8f6f 	isb	sy
 8007ca6:	f3bf 8f4f 	dsb	sy
 8007caa:	617b      	str	r3, [r7, #20]
}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	e7fd      	b.n	8007cae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d01f      	beq.n	8007cf8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cb8:	2300      	movs	r3, #0
 8007cba:	61fb      	str	r3, [r7, #28]
 8007cbc:	e012      	b.n	8007ce4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	7819      	ldrb	r1, [r3, #0]
 8007cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	4413      	add	r3, r2
 8007ccc:	3334      	adds	r3, #52	@ 0x34
 8007cce:	460a      	mov	r2, r1
 8007cd0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d006      	beq.n	8007cec <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	2b0f      	cmp	r3, #15
 8007ce8:	d9e9      	bls.n	8007cbe <prvInitialiseNewTask+0x66>
 8007cea:	e000      	b.n	8007cee <prvInitialiseNewTask+0x96>
			{
				break;
 8007cec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007cf6:	e003      	b.n	8007d00 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d02:	2b37      	cmp	r3, #55	@ 0x37
 8007d04:	d901      	bls.n	8007d0a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d06:	2337      	movs	r3, #55	@ 0x37
 8007d08:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d14:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d18:	2200      	movs	r2, #0
 8007d1a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1e:	3304      	adds	r3, #4
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7ff f965 	bl	8006ff0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d28:	3318      	adds	r3, #24
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff f960 	bl	8006ff0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d34:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d38:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d44:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d58:	3354      	adds	r3, #84	@ 0x54
 8007d5a:	224c      	movs	r2, #76	@ 0x4c
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f001 fdaa 	bl	80098b8 <memset>
 8007d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d66:	4a0d      	ldr	r2, [pc, #52]	@ (8007d9c <prvInitialiseNewTask+0x144>)
 8007d68:	659a      	str	r2, [r3, #88]	@ 0x58
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8007da0 <prvInitialiseNewTask+0x148>)
 8007d6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d72:	4a0c      	ldr	r2, [pc, #48]	@ (8007da4 <prvInitialiseNewTask+0x14c>)
 8007d74:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	68f9      	ldr	r1, [r7, #12]
 8007d7a:	69b8      	ldr	r0, [r7, #24]
 8007d7c:	f001 f95a 	bl	8009034 <pxPortInitialiseStack>
 8007d80:	4602      	mov	r2, r0
 8007d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d84:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d92:	bf00      	nop
 8007d94:	3720      	adds	r7, #32
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20001c04 	.word	0x20001c04
 8007da0:	20001c6c 	.word	0x20001c6c
 8007da4:	20001cd4 	.word	0x20001cd4

08007da8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007db0:	f001 fa72 	bl	8009298 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007db4:	4b2d      	ldr	r3, [pc, #180]	@ (8007e6c <prvAddNewTaskToReadyList+0xc4>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	3301      	adds	r3, #1
 8007dba:	4a2c      	ldr	r2, [pc, #176]	@ (8007e6c <prvAddNewTaskToReadyList+0xc4>)
 8007dbc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007dbe:	4b2c      	ldr	r3, [pc, #176]	@ (8007e70 <prvAddNewTaskToReadyList+0xc8>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d109      	bne.n	8007dda <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8007e70 <prvAddNewTaskToReadyList+0xc8>)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007dcc:	4b27      	ldr	r3, [pc, #156]	@ (8007e6c <prvAddNewTaskToReadyList+0xc4>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d110      	bne.n	8007df6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007dd4:	f000 fc2e 	bl	8008634 <prvInitialiseTaskLists>
 8007dd8:	e00d      	b.n	8007df6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007dda:	4b26      	ldr	r3, [pc, #152]	@ (8007e74 <prvAddNewTaskToReadyList+0xcc>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d109      	bne.n	8007df6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007de2:	4b23      	ldr	r3, [pc, #140]	@ (8007e70 <prvAddNewTaskToReadyList+0xc8>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d802      	bhi.n	8007df6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007df0:	4a1f      	ldr	r2, [pc, #124]	@ (8007e70 <prvAddNewTaskToReadyList+0xc8>)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007df6:	4b20      	ldr	r3, [pc, #128]	@ (8007e78 <prvAddNewTaskToReadyList+0xd0>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8007e78 <prvAddNewTaskToReadyList+0xd0>)
 8007dfe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e00:	4b1d      	ldr	r3, [pc, #116]	@ (8007e78 <prvAddNewTaskToReadyList+0xd0>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8007e7c <prvAddNewTaskToReadyList+0xd4>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d903      	bls.n	8007e1c <prvAddNewTaskToReadyList+0x74>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e18:	4a18      	ldr	r2, [pc, #96]	@ (8007e7c <prvAddNewTaskToReadyList+0xd4>)
 8007e1a:	6013      	str	r3, [r2, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e20:	4613      	mov	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4a15      	ldr	r2, [pc, #84]	@ (8007e80 <prvAddNewTaskToReadyList+0xd8>)
 8007e2a:	441a      	add	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	4619      	mov	r1, r3
 8007e32:	4610      	mov	r0, r2
 8007e34:	f7ff f8e9 	bl	800700a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e38:	f001 fa60 	bl	80092fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007e74 <prvAddNewTaskToReadyList+0xcc>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00e      	beq.n	8007e62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e44:	4b0a      	ldr	r3, [pc, #40]	@ (8007e70 <prvAddNewTaskToReadyList+0xc8>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d207      	bcs.n	8007e62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e52:	4b0c      	ldr	r3, [pc, #48]	@ (8007e84 <prvAddNewTaskToReadyList+0xdc>)
 8007e54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e62:	bf00      	nop
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	20000ecc 	.word	0x20000ecc
 8007e70:	200009f8 	.word	0x200009f8
 8007e74:	20000ed8 	.word	0x20000ed8
 8007e78:	20000ee8 	.word	0x20000ee8
 8007e7c:	20000ed4 	.word	0x20000ed4
 8007e80:	200009fc 	.word	0x200009fc
 8007e84:	e000ed04 	.word	0xe000ed04

08007e88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e90:	2300      	movs	r3, #0
 8007e92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d018      	beq.n	8007ecc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e9a:	4b14      	ldr	r3, [pc, #80]	@ (8007eec <vTaskDelay+0x64>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00b      	beq.n	8007eba <vTaskDelay+0x32>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	60bb      	str	r3, [r7, #8]
}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop
 8007eb8:	e7fd      	b.n	8007eb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007eba:	f000 f88b 	bl	8007fd4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fd09 	bl	80088d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ec6:	f000 f893 	bl	8007ff0 <xTaskResumeAll>
 8007eca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d107      	bne.n	8007ee2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007ed2:	4b07      	ldr	r3, [pc, #28]	@ (8007ef0 <vTaskDelay+0x68>)
 8007ed4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ed8:	601a      	str	r2, [r3, #0]
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ee2:	bf00      	nop
 8007ee4:	3710      	adds	r7, #16
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000ef4 	.word	0x20000ef4
 8007ef0:	e000ed04 	.word	0xe000ed04

08007ef4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08a      	sub	sp, #40	@ 0x28
 8007ef8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007efa:	2300      	movs	r3, #0
 8007efc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007efe:	2300      	movs	r3, #0
 8007f00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f02:	463a      	mov	r2, r7
 8007f04:	1d39      	adds	r1, r7, #4
 8007f06:	f107 0308 	add.w	r3, r7, #8
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7ff f81c 	bl	8006f48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	9202      	str	r2, [sp, #8]
 8007f18:	9301      	str	r3, [sp, #4]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	2300      	movs	r3, #0
 8007f20:	460a      	mov	r2, r1
 8007f22:	4924      	ldr	r1, [pc, #144]	@ (8007fb4 <vTaskStartScheduler+0xc0>)
 8007f24:	4824      	ldr	r0, [pc, #144]	@ (8007fb8 <vTaskStartScheduler+0xc4>)
 8007f26:	f7ff fdf1 	bl	8007b0c <xTaskCreateStatic>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	4a23      	ldr	r2, [pc, #140]	@ (8007fbc <vTaskStartScheduler+0xc8>)
 8007f2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f30:	4b22      	ldr	r3, [pc, #136]	@ (8007fbc <vTaskStartScheduler+0xc8>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	e001      	b.n	8007f42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d102      	bne.n	8007f4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007f48:	f000 fd1a 	bl	8008980 <xTimerCreateTimerTask>
 8007f4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d11b      	bne.n	8007f8c <vTaskStartScheduler+0x98>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	613b      	str	r3, [r7, #16]
}
 8007f66:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f68:	4b15      	ldr	r3, [pc, #84]	@ (8007fc0 <vTaskStartScheduler+0xcc>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3354      	adds	r3, #84	@ 0x54
 8007f6e:	4a15      	ldr	r2, [pc, #84]	@ (8007fc4 <vTaskStartScheduler+0xd0>)
 8007f70:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f72:	4b15      	ldr	r3, [pc, #84]	@ (8007fc8 <vTaskStartScheduler+0xd4>)
 8007f74:	f04f 32ff 	mov.w	r2, #4294967295
 8007f78:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f7a:	4b14      	ldr	r3, [pc, #80]	@ (8007fcc <vTaskStartScheduler+0xd8>)
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f80:	4b13      	ldr	r3, [pc, #76]	@ (8007fd0 <vTaskStartScheduler+0xdc>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f86:	f001 f8e3 	bl	8009150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f8a:	e00f      	b.n	8007fac <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f92:	d10b      	bne.n	8007fac <vTaskStartScheduler+0xb8>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	60fb      	str	r3, [r7, #12]
}
 8007fa6:	bf00      	nop
 8007fa8:	bf00      	nop
 8007faa:	e7fd      	b.n	8007fa8 <vTaskStartScheduler+0xb4>
}
 8007fac:	bf00      	nop
 8007fae:	3718      	adds	r7, #24
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	08009ae8 	.word	0x08009ae8
 8007fb8:	08008605 	.word	0x08008605
 8007fbc:	20000ef0 	.word	0x20000ef0
 8007fc0:	200009f8 	.word	0x200009f8
 8007fc4:	20000010 	.word	0x20000010
 8007fc8:	20000eec 	.word	0x20000eec
 8007fcc:	20000ed8 	.word	0x20000ed8
 8007fd0:	20000ed0 	.word	0x20000ed0

08007fd4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007fd8:	4b04      	ldr	r3, [pc, #16]	@ (8007fec <vTaskSuspendAll+0x18>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	4a03      	ldr	r2, [pc, #12]	@ (8007fec <vTaskSuspendAll+0x18>)
 8007fe0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007fe2:	bf00      	nop
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	20000ef4 	.word	0x20000ef4

08007ff0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ffe:	4b42      	ldr	r3, [pc, #264]	@ (8008108 <xTaskResumeAll+0x118>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10b      	bne.n	800801e <xTaskResumeAll+0x2e>
	__asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800a:	f383 8811 	msr	BASEPRI, r3
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	603b      	str	r3, [r7, #0]
}
 8008018:	bf00      	nop
 800801a:	bf00      	nop
 800801c:	e7fd      	b.n	800801a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800801e:	f001 f93b 	bl	8009298 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008022:	4b39      	ldr	r3, [pc, #228]	@ (8008108 <xTaskResumeAll+0x118>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3b01      	subs	r3, #1
 8008028:	4a37      	ldr	r2, [pc, #220]	@ (8008108 <xTaskResumeAll+0x118>)
 800802a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800802c:	4b36      	ldr	r3, [pc, #216]	@ (8008108 <xTaskResumeAll+0x118>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d162      	bne.n	80080fa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008034:	4b35      	ldr	r3, [pc, #212]	@ (800810c <xTaskResumeAll+0x11c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d05e      	beq.n	80080fa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800803c:	e02f      	b.n	800809e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800803e:	4b34      	ldr	r3, [pc, #208]	@ (8008110 <xTaskResumeAll+0x120>)
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3318      	adds	r3, #24
 800804a:	4618      	mov	r0, r3
 800804c:	f7ff f83a 	bl	80070c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	3304      	adds	r3, #4
 8008054:	4618      	mov	r0, r3
 8008056:	f7ff f835 	bl	80070c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800805e:	4b2d      	ldr	r3, [pc, #180]	@ (8008114 <xTaskResumeAll+0x124>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	429a      	cmp	r2, r3
 8008064:	d903      	bls.n	800806e <xTaskResumeAll+0x7e>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806a:	4a2a      	ldr	r2, [pc, #168]	@ (8008114 <xTaskResumeAll+0x124>)
 800806c:	6013      	str	r3, [r2, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008072:	4613      	mov	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4a27      	ldr	r2, [pc, #156]	@ (8008118 <xTaskResumeAll+0x128>)
 800807c:	441a      	add	r2, r3
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3304      	adds	r3, #4
 8008082:	4619      	mov	r1, r3
 8008084:	4610      	mov	r0, r2
 8008086:	f7fe ffc0 	bl	800700a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800808e:	4b23      	ldr	r3, [pc, #140]	@ (800811c <xTaskResumeAll+0x12c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008094:	429a      	cmp	r2, r3
 8008096:	d302      	bcc.n	800809e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008098:	4b21      	ldr	r3, [pc, #132]	@ (8008120 <xTaskResumeAll+0x130>)
 800809a:	2201      	movs	r2, #1
 800809c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800809e:	4b1c      	ldr	r3, [pc, #112]	@ (8008110 <xTaskResumeAll+0x120>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1cb      	bne.n	800803e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080ac:	f000 fb66 	bl	800877c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80080b0:	4b1c      	ldr	r3, [pc, #112]	@ (8008124 <xTaskResumeAll+0x134>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d010      	beq.n	80080de <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080bc:	f000 f846 	bl	800814c <xTaskIncrementTick>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d002      	beq.n	80080cc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80080c6:	4b16      	ldr	r3, [pc, #88]	@ (8008120 <xTaskResumeAll+0x130>)
 80080c8:	2201      	movs	r2, #1
 80080ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1f1      	bne.n	80080bc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80080d8:	4b12      	ldr	r3, [pc, #72]	@ (8008124 <xTaskResumeAll+0x134>)
 80080da:	2200      	movs	r2, #0
 80080dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080de:	4b10      	ldr	r3, [pc, #64]	@ (8008120 <xTaskResumeAll+0x130>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d009      	beq.n	80080fa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80080e6:	2301      	movs	r3, #1
 80080e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80080ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008128 <xTaskResumeAll+0x138>)
 80080ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080fa:	f001 f8ff 	bl	80092fc <vPortExitCritical>

	return xAlreadyYielded;
 80080fe:	68bb      	ldr	r3, [r7, #8]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	20000ef4 	.word	0x20000ef4
 800810c:	20000ecc 	.word	0x20000ecc
 8008110:	20000e8c 	.word	0x20000e8c
 8008114:	20000ed4 	.word	0x20000ed4
 8008118:	200009fc 	.word	0x200009fc
 800811c:	200009f8 	.word	0x200009f8
 8008120:	20000ee0 	.word	0x20000ee0
 8008124:	20000edc 	.word	0x20000edc
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008132:	4b05      	ldr	r3, [pc, #20]	@ (8008148 <xTaskGetTickCount+0x1c>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008138:	687b      	ldr	r3, [r7, #4]
}
 800813a:	4618      	mov	r0, r3
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	20000ed0 	.word	0x20000ed0

0800814c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008152:	2300      	movs	r3, #0
 8008154:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008156:	4b4f      	ldr	r3, [pc, #316]	@ (8008294 <xTaskIncrementTick+0x148>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	f040 8090 	bne.w	8008280 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008160:	4b4d      	ldr	r3, [pc, #308]	@ (8008298 <xTaskIncrementTick+0x14c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	3301      	adds	r3, #1
 8008166:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008168:	4a4b      	ldr	r2, [pc, #300]	@ (8008298 <xTaskIncrementTick+0x14c>)
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d121      	bne.n	80081b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008174:	4b49      	ldr	r3, [pc, #292]	@ (800829c <xTaskIncrementTick+0x150>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00b      	beq.n	8008196 <xTaskIncrementTick+0x4a>
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008182:	f383 8811 	msr	BASEPRI, r3
 8008186:	f3bf 8f6f 	isb	sy
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	603b      	str	r3, [r7, #0]
}
 8008190:	bf00      	nop
 8008192:	bf00      	nop
 8008194:	e7fd      	b.n	8008192 <xTaskIncrementTick+0x46>
 8008196:	4b41      	ldr	r3, [pc, #260]	@ (800829c <xTaskIncrementTick+0x150>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	60fb      	str	r3, [r7, #12]
 800819c:	4b40      	ldr	r3, [pc, #256]	@ (80082a0 <xTaskIncrementTick+0x154>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a3e      	ldr	r2, [pc, #248]	@ (800829c <xTaskIncrementTick+0x150>)
 80081a2:	6013      	str	r3, [r2, #0]
 80081a4:	4a3e      	ldr	r2, [pc, #248]	@ (80082a0 <xTaskIncrementTick+0x154>)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	4b3e      	ldr	r3, [pc, #248]	@ (80082a4 <xTaskIncrementTick+0x158>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	3301      	adds	r3, #1
 80081b0:	4a3c      	ldr	r2, [pc, #240]	@ (80082a4 <xTaskIncrementTick+0x158>)
 80081b2:	6013      	str	r3, [r2, #0]
 80081b4:	f000 fae2 	bl	800877c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081b8:	4b3b      	ldr	r3, [pc, #236]	@ (80082a8 <xTaskIncrementTick+0x15c>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d349      	bcc.n	8008256 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081c2:	4b36      	ldr	r3, [pc, #216]	@ (800829c <xTaskIncrementTick+0x150>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d104      	bne.n	80081d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081cc:	4b36      	ldr	r3, [pc, #216]	@ (80082a8 <xTaskIncrementTick+0x15c>)
 80081ce:	f04f 32ff 	mov.w	r2, #4294967295
 80081d2:	601a      	str	r2, [r3, #0]
					break;
 80081d4:	e03f      	b.n	8008256 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081d6:	4b31      	ldr	r3, [pc, #196]	@ (800829c <xTaskIncrementTick+0x150>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d203      	bcs.n	80081f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80081ee:	4a2e      	ldr	r2, [pc, #184]	@ (80082a8 <xTaskIncrementTick+0x15c>)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80081f4:	e02f      	b.n	8008256 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	3304      	adds	r3, #4
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fe ff62 	bl	80070c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008204:	2b00      	cmp	r3, #0
 8008206:	d004      	beq.n	8008212 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	3318      	adds	r3, #24
 800820c:	4618      	mov	r0, r3
 800820e:	f7fe ff59 	bl	80070c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008216:	4b25      	ldr	r3, [pc, #148]	@ (80082ac <xTaskIncrementTick+0x160>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	429a      	cmp	r2, r3
 800821c:	d903      	bls.n	8008226 <xTaskIncrementTick+0xda>
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008222:	4a22      	ldr	r2, [pc, #136]	@ (80082ac <xTaskIncrementTick+0x160>)
 8008224:	6013      	str	r3, [r2, #0]
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800822a:	4613      	mov	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4a1f      	ldr	r2, [pc, #124]	@ (80082b0 <xTaskIncrementTick+0x164>)
 8008234:	441a      	add	r2, r3
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	3304      	adds	r3, #4
 800823a:	4619      	mov	r1, r3
 800823c:	4610      	mov	r0, r2
 800823e:	f7fe fee4 	bl	800700a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008246:	4b1b      	ldr	r3, [pc, #108]	@ (80082b4 <xTaskIncrementTick+0x168>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824c:	429a      	cmp	r2, r3
 800824e:	d3b8      	bcc.n	80081c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008250:	2301      	movs	r3, #1
 8008252:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008254:	e7b5      	b.n	80081c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008256:	4b17      	ldr	r3, [pc, #92]	@ (80082b4 <xTaskIncrementTick+0x168>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800825c:	4914      	ldr	r1, [pc, #80]	@ (80082b0 <xTaskIncrementTick+0x164>)
 800825e:	4613      	mov	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4413      	add	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	440b      	add	r3, r1
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d901      	bls.n	8008272 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800826e:	2301      	movs	r3, #1
 8008270:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008272:	4b11      	ldr	r3, [pc, #68]	@ (80082b8 <xTaskIncrementTick+0x16c>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d007      	beq.n	800828a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800827a:	2301      	movs	r3, #1
 800827c:	617b      	str	r3, [r7, #20]
 800827e:	e004      	b.n	800828a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008280:	4b0e      	ldr	r3, [pc, #56]	@ (80082bc <xTaskIncrementTick+0x170>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3301      	adds	r3, #1
 8008286:	4a0d      	ldr	r2, [pc, #52]	@ (80082bc <xTaskIncrementTick+0x170>)
 8008288:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800828a:	697b      	ldr	r3, [r7, #20]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20000ef4 	.word	0x20000ef4
 8008298:	20000ed0 	.word	0x20000ed0
 800829c:	20000e84 	.word	0x20000e84
 80082a0:	20000e88 	.word	0x20000e88
 80082a4:	20000ee4 	.word	0x20000ee4
 80082a8:	20000eec 	.word	0x20000eec
 80082ac:	20000ed4 	.word	0x20000ed4
 80082b0:	200009fc 	.word	0x200009fc
 80082b4:	200009f8 	.word	0x200009f8
 80082b8:	20000ee0 	.word	0x20000ee0
 80082bc:	20000edc 	.word	0x20000edc

080082c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082c6:	4b2b      	ldr	r3, [pc, #172]	@ (8008374 <vTaskSwitchContext+0xb4>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d003      	beq.n	80082d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80082ce:	4b2a      	ldr	r3, [pc, #168]	@ (8008378 <vTaskSwitchContext+0xb8>)
 80082d0:	2201      	movs	r2, #1
 80082d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80082d4:	e047      	b.n	8008366 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80082d6:	4b28      	ldr	r3, [pc, #160]	@ (8008378 <vTaskSwitchContext+0xb8>)
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082dc:	4b27      	ldr	r3, [pc, #156]	@ (800837c <vTaskSwitchContext+0xbc>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	60fb      	str	r3, [r7, #12]
 80082e2:	e011      	b.n	8008308 <vTaskSwitchContext+0x48>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10b      	bne.n	8008302 <vTaskSwitchContext+0x42>
	__asm volatile
 80082ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ee:	f383 8811 	msr	BASEPRI, r3
 80082f2:	f3bf 8f6f 	isb	sy
 80082f6:	f3bf 8f4f 	dsb	sy
 80082fa:	607b      	str	r3, [r7, #4]
}
 80082fc:	bf00      	nop
 80082fe:	bf00      	nop
 8008300:	e7fd      	b.n	80082fe <vTaskSwitchContext+0x3e>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	3b01      	subs	r3, #1
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	491d      	ldr	r1, [pc, #116]	@ (8008380 <vTaskSwitchContext+0xc0>)
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	4613      	mov	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	440b      	add	r3, r1
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d0e3      	beq.n	80082e4 <vTaskSwitchContext+0x24>
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	4613      	mov	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4a16      	ldr	r2, [pc, #88]	@ (8008380 <vTaskSwitchContext+0xc0>)
 8008328:	4413      	add	r3, r2
 800832a:	60bb      	str	r3, [r7, #8]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	605a      	str	r2, [r3, #4]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	3308      	adds	r3, #8
 800833e:	429a      	cmp	r2, r3
 8008340:	d104      	bne.n	800834c <vTaskSwitchContext+0x8c>
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	605a      	str	r2, [r3, #4]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	4a0c      	ldr	r2, [pc, #48]	@ (8008384 <vTaskSwitchContext+0xc4>)
 8008354:	6013      	str	r3, [r2, #0]
 8008356:	4a09      	ldr	r2, [pc, #36]	@ (800837c <vTaskSwitchContext+0xbc>)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800835c:	4b09      	ldr	r3, [pc, #36]	@ (8008384 <vTaskSwitchContext+0xc4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3354      	adds	r3, #84	@ 0x54
 8008362:	4a09      	ldr	r2, [pc, #36]	@ (8008388 <vTaskSwitchContext+0xc8>)
 8008364:	6013      	str	r3, [r2, #0]
}
 8008366:	bf00      	nop
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	20000ef4 	.word	0x20000ef4
 8008378:	20000ee0 	.word	0x20000ee0
 800837c:	20000ed4 	.word	0x20000ed4
 8008380:	200009fc 	.word	0x200009fc
 8008384:	200009f8 	.word	0x200009f8
 8008388:	20000010 	.word	0x20000010

0800838c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10b      	bne.n	80083b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800839c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	60fb      	str	r3, [r7, #12]
}
 80083ae:	bf00      	nop
 80083b0:	bf00      	nop
 80083b2:	e7fd      	b.n	80083b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083b4:	4b07      	ldr	r3, [pc, #28]	@ (80083d4 <vTaskPlaceOnEventList+0x48>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3318      	adds	r3, #24
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7fe fe48 	bl	8007052 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80083c2:	2101      	movs	r1, #1
 80083c4:	6838      	ldr	r0, [r7, #0]
 80083c6:	f000 fa87 	bl	80088d8 <prvAddCurrentTaskToDelayedList>
}
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	200009f8 	.word	0x200009f8

080083d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10b      	bne.n	8008402 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80083ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	617b      	str	r3, [r7, #20]
}
 80083fc:	bf00      	nop
 80083fe:	bf00      	nop
 8008400:	e7fd      	b.n	80083fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008402:	4b0a      	ldr	r3, [pc, #40]	@ (800842c <vTaskPlaceOnEventListRestricted+0x54>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3318      	adds	r3, #24
 8008408:	4619      	mov	r1, r3
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f7fe fdfd 	bl	800700a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008416:	f04f 33ff 	mov.w	r3, #4294967295
 800841a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800841c:	6879      	ldr	r1, [r7, #4]
 800841e:	68b8      	ldr	r0, [r7, #8]
 8008420:	f000 fa5a 	bl	80088d8 <prvAddCurrentTaskToDelayedList>
	}
 8008424:	bf00      	nop
 8008426:	3718      	adds	r7, #24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	200009f8 	.word	0x200009f8

08008430 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10b      	bne.n	800845e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844a:	f383 8811 	msr	BASEPRI, r3
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f3bf 8f4f 	dsb	sy
 8008456:	60fb      	str	r3, [r7, #12]
}
 8008458:	bf00      	nop
 800845a:	bf00      	nop
 800845c:	e7fd      	b.n	800845a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	3318      	adds	r3, #24
 8008462:	4618      	mov	r0, r3
 8008464:	f7fe fe2e 	bl	80070c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008468:	4b1d      	ldr	r3, [pc, #116]	@ (80084e0 <xTaskRemoveFromEventList+0xb0>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d11d      	bne.n	80084ac <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	3304      	adds	r3, #4
 8008474:	4618      	mov	r0, r3
 8008476:	f7fe fe25 	bl	80070c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800847e:	4b19      	ldr	r3, [pc, #100]	@ (80084e4 <xTaskRemoveFromEventList+0xb4>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	429a      	cmp	r2, r3
 8008484:	d903      	bls.n	800848e <xTaskRemoveFromEventList+0x5e>
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848a:	4a16      	ldr	r2, [pc, #88]	@ (80084e4 <xTaskRemoveFromEventList+0xb4>)
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008492:	4613      	mov	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	4a13      	ldr	r2, [pc, #76]	@ (80084e8 <xTaskRemoveFromEventList+0xb8>)
 800849c:	441a      	add	r2, r3
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	3304      	adds	r3, #4
 80084a2:	4619      	mov	r1, r3
 80084a4:	4610      	mov	r0, r2
 80084a6:	f7fe fdb0 	bl	800700a <vListInsertEnd>
 80084aa:	e005      	b.n	80084b8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	3318      	adds	r3, #24
 80084b0:	4619      	mov	r1, r3
 80084b2:	480e      	ldr	r0, [pc, #56]	@ (80084ec <xTaskRemoveFromEventList+0xbc>)
 80084b4:	f7fe fda9 	bl	800700a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084bc:	4b0c      	ldr	r3, [pc, #48]	@ (80084f0 <xTaskRemoveFromEventList+0xc0>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d905      	bls.n	80084d2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80084c6:	2301      	movs	r3, #1
 80084c8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80084ca:	4b0a      	ldr	r3, [pc, #40]	@ (80084f4 <xTaskRemoveFromEventList+0xc4>)
 80084cc:	2201      	movs	r2, #1
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	e001      	b.n	80084d6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80084d2:	2300      	movs	r3, #0
 80084d4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80084d6:	697b      	ldr	r3, [r7, #20]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20000ef4 	.word	0x20000ef4
 80084e4:	20000ed4 	.word	0x20000ed4
 80084e8:	200009fc 	.word	0x200009fc
 80084ec:	20000e8c 	.word	0x20000e8c
 80084f0:	200009f8 	.word	0x200009f8
 80084f4:	20000ee0 	.word	0x20000ee0

080084f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008500:	4b06      	ldr	r3, [pc, #24]	@ (800851c <vTaskInternalSetTimeOutState+0x24>)
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008508:	4b05      	ldr	r3, [pc, #20]	@ (8008520 <vTaskInternalSetTimeOutState+0x28>)
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	605a      	str	r2, [r3, #4]
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	20000ee4 	.word	0x20000ee4
 8008520:	20000ed0 	.word	0x20000ed0

08008524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b088      	sub	sp, #32
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10b      	bne.n	800854c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	613b      	str	r3, [r7, #16]
}
 8008546:	bf00      	nop
 8008548:	bf00      	nop
 800854a:	e7fd      	b.n	8008548 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d10b      	bne.n	800856a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	60fb      	str	r3, [r7, #12]
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop
 8008568:	e7fd      	b.n	8008566 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800856a:	f000 fe95 	bl	8009298 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800856e:	4b1d      	ldr	r3, [pc, #116]	@ (80085e4 <xTaskCheckForTimeOut+0xc0>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	69ba      	ldr	r2, [r7, #24]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008586:	d102      	bne.n	800858e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008588:	2300      	movs	r3, #0
 800858a:	61fb      	str	r3, [r7, #28]
 800858c:	e023      	b.n	80085d6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	4b15      	ldr	r3, [pc, #84]	@ (80085e8 <xTaskCheckForTimeOut+0xc4>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	429a      	cmp	r2, r3
 8008598:	d007      	beq.n	80085aa <xTaskCheckForTimeOut+0x86>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d302      	bcc.n	80085aa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80085a4:	2301      	movs	r3, #1
 80085a6:	61fb      	str	r3, [r7, #28]
 80085a8:	e015      	b.n	80085d6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d20b      	bcs.n	80085cc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	1ad2      	subs	r2, r2, r3
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f7ff ff99 	bl	80084f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80085c6:	2300      	movs	r3, #0
 80085c8:	61fb      	str	r3, [r7, #28]
 80085ca:	e004      	b.n	80085d6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2200      	movs	r2, #0
 80085d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80085d2:	2301      	movs	r3, #1
 80085d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80085d6:	f000 fe91 	bl	80092fc <vPortExitCritical>

	return xReturn;
 80085da:	69fb      	ldr	r3, [r7, #28]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3720      	adds	r7, #32
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	20000ed0 	.word	0x20000ed0
 80085e8:	20000ee4 	.word	0x20000ee4

080085ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80085ec:	b480      	push	{r7}
 80085ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80085f0:	4b03      	ldr	r3, [pc, #12]	@ (8008600 <vTaskMissedYield+0x14>)
 80085f2:	2201      	movs	r2, #1
 80085f4:	601a      	str	r2, [r3, #0]
}
 80085f6:	bf00      	nop
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	20000ee0 	.word	0x20000ee0

08008604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800860c:	f000 f852 	bl	80086b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008610:	4b06      	ldr	r3, [pc, #24]	@ (800862c <prvIdleTask+0x28>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d9f9      	bls.n	800860c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008618:	4b05      	ldr	r3, [pc, #20]	@ (8008630 <prvIdleTask+0x2c>)
 800861a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008628:	e7f0      	b.n	800860c <prvIdleTask+0x8>
 800862a:	bf00      	nop
 800862c:	200009fc 	.word	0x200009fc
 8008630:	e000ed04 	.word	0xe000ed04

08008634 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800863a:	2300      	movs	r3, #0
 800863c:	607b      	str	r3, [r7, #4]
 800863e:	e00c      	b.n	800865a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	4613      	mov	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4a12      	ldr	r2, [pc, #72]	@ (8008694 <prvInitialiseTaskLists+0x60>)
 800864c:	4413      	add	r3, r2
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe fcae 	bl	8006fb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3301      	adds	r3, #1
 8008658:	607b      	str	r3, [r7, #4]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2b37      	cmp	r3, #55	@ 0x37
 800865e:	d9ef      	bls.n	8008640 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008660:	480d      	ldr	r0, [pc, #52]	@ (8008698 <prvInitialiseTaskLists+0x64>)
 8008662:	f7fe fca5 	bl	8006fb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008666:	480d      	ldr	r0, [pc, #52]	@ (800869c <prvInitialiseTaskLists+0x68>)
 8008668:	f7fe fca2 	bl	8006fb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800866c:	480c      	ldr	r0, [pc, #48]	@ (80086a0 <prvInitialiseTaskLists+0x6c>)
 800866e:	f7fe fc9f 	bl	8006fb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008672:	480c      	ldr	r0, [pc, #48]	@ (80086a4 <prvInitialiseTaskLists+0x70>)
 8008674:	f7fe fc9c 	bl	8006fb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008678:	480b      	ldr	r0, [pc, #44]	@ (80086a8 <prvInitialiseTaskLists+0x74>)
 800867a:	f7fe fc99 	bl	8006fb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800867e:	4b0b      	ldr	r3, [pc, #44]	@ (80086ac <prvInitialiseTaskLists+0x78>)
 8008680:	4a05      	ldr	r2, [pc, #20]	@ (8008698 <prvInitialiseTaskLists+0x64>)
 8008682:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008684:	4b0a      	ldr	r3, [pc, #40]	@ (80086b0 <prvInitialiseTaskLists+0x7c>)
 8008686:	4a05      	ldr	r2, [pc, #20]	@ (800869c <prvInitialiseTaskLists+0x68>)
 8008688:	601a      	str	r2, [r3, #0]
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	200009fc 	.word	0x200009fc
 8008698:	20000e5c 	.word	0x20000e5c
 800869c:	20000e70 	.word	0x20000e70
 80086a0:	20000e8c 	.word	0x20000e8c
 80086a4:	20000ea0 	.word	0x20000ea0
 80086a8:	20000eb8 	.word	0x20000eb8
 80086ac:	20000e84 	.word	0x20000e84
 80086b0:	20000e88 	.word	0x20000e88

080086b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086ba:	e019      	b.n	80086f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80086bc:	f000 fdec 	bl	8009298 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c0:	4b10      	ldr	r3, [pc, #64]	@ (8008704 <prvCheckTasksWaitingTermination+0x50>)
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3304      	adds	r3, #4
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fe fcf9 	bl	80070c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80086d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008708 <prvCheckTasksWaitingTermination+0x54>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	4a0b      	ldr	r2, [pc, #44]	@ (8008708 <prvCheckTasksWaitingTermination+0x54>)
 80086da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086dc:	4b0b      	ldr	r3, [pc, #44]	@ (800870c <prvCheckTasksWaitingTermination+0x58>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3b01      	subs	r3, #1
 80086e2:	4a0a      	ldr	r2, [pc, #40]	@ (800870c <prvCheckTasksWaitingTermination+0x58>)
 80086e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086e6:	f000 fe09 	bl	80092fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f810 	bl	8008710 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086f0:	4b06      	ldr	r3, [pc, #24]	@ (800870c <prvCheckTasksWaitingTermination+0x58>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1e1      	bne.n	80086bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80086f8:	bf00      	nop
 80086fa:	bf00      	nop
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20000ea0 	.word	0x20000ea0
 8008708:	20000ecc 	.word	0x20000ecc
 800870c:	20000eb4 	.word	0x20000eb4

08008710 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3354      	adds	r3, #84	@ 0x54
 800871c:	4618      	mov	r0, r3
 800871e:	f001 f8d3 	bl	80098c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008728:	2b00      	cmp	r3, #0
 800872a:	d108      	bne.n	800873e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008730:	4618      	mov	r0, r3
 8008732:	f000 ffa1 	bl	8009678 <vPortFree>
				vPortFree( pxTCB );
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 ff9e 	bl	8009678 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800873c:	e019      	b.n	8008772 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008744:	2b01      	cmp	r3, #1
 8008746:	d103      	bne.n	8008750 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 ff95 	bl	8009678 <vPortFree>
	}
 800874e:	e010      	b.n	8008772 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008756:	2b02      	cmp	r3, #2
 8008758:	d00b      	beq.n	8008772 <prvDeleteTCB+0x62>
	__asm volatile
 800875a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	60fb      	str	r3, [r7, #12]
}
 800876c:	bf00      	nop
 800876e:	bf00      	nop
 8008770:	e7fd      	b.n	800876e <prvDeleteTCB+0x5e>
	}
 8008772:	bf00      	nop
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
	...

0800877c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008782:	4b0c      	ldr	r3, [pc, #48]	@ (80087b4 <prvResetNextTaskUnblockTime+0x38>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d104      	bne.n	8008796 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800878c:	4b0a      	ldr	r3, [pc, #40]	@ (80087b8 <prvResetNextTaskUnblockTime+0x3c>)
 800878e:	f04f 32ff 	mov.w	r2, #4294967295
 8008792:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008794:	e008      	b.n	80087a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008796:	4b07      	ldr	r3, [pc, #28]	@ (80087b4 <prvResetNextTaskUnblockTime+0x38>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	4a04      	ldr	r2, [pc, #16]	@ (80087b8 <prvResetNextTaskUnblockTime+0x3c>)
 80087a6:	6013      	str	r3, [r2, #0]
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	20000e84 	.word	0x20000e84
 80087b8:	20000eec 	.word	0x20000eec

080087bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80087c2:	4b0b      	ldr	r3, [pc, #44]	@ (80087f0 <xTaskGetSchedulerState+0x34>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d102      	bne.n	80087d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80087ca:	2301      	movs	r3, #1
 80087cc:	607b      	str	r3, [r7, #4]
 80087ce:	e008      	b.n	80087e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087d0:	4b08      	ldr	r3, [pc, #32]	@ (80087f4 <xTaskGetSchedulerState+0x38>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80087d8:	2302      	movs	r3, #2
 80087da:	607b      	str	r3, [r7, #4]
 80087dc:	e001      	b.n	80087e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80087de:	2300      	movs	r3, #0
 80087e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087e2:	687b      	ldr	r3, [r7, #4]
	}
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr
 80087f0:	20000ed8 	.word	0x20000ed8
 80087f4:	20000ef4 	.word	0x20000ef4

080087f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008804:	2300      	movs	r3, #0
 8008806:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d058      	beq.n	80088c0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800880e:	4b2f      	ldr	r3, [pc, #188]	@ (80088cc <xTaskPriorityDisinherit+0xd4>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	429a      	cmp	r2, r3
 8008816:	d00b      	beq.n	8008830 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881c:	f383 8811 	msr	BASEPRI, r3
 8008820:	f3bf 8f6f 	isb	sy
 8008824:	f3bf 8f4f 	dsb	sy
 8008828:	60fb      	str	r3, [r7, #12]
}
 800882a:	bf00      	nop
 800882c:	bf00      	nop
 800882e:	e7fd      	b.n	800882c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10b      	bne.n	8008850 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883c:	f383 8811 	msr	BASEPRI, r3
 8008840:	f3bf 8f6f 	isb	sy
 8008844:	f3bf 8f4f 	dsb	sy
 8008848:	60bb      	str	r3, [r7, #8]
}
 800884a:	bf00      	nop
 800884c:	bf00      	nop
 800884e:	e7fd      	b.n	800884c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008854:	1e5a      	subs	r2, r3, #1
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008862:	429a      	cmp	r2, r3
 8008864:	d02c      	beq.n	80088c0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800886a:	2b00      	cmp	r3, #0
 800886c:	d128      	bne.n	80088c0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	3304      	adds	r3, #4
 8008872:	4618      	mov	r0, r3
 8008874:	f7fe fc26 	bl	80070c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008884:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008890:	4b0f      	ldr	r3, [pc, #60]	@ (80088d0 <xTaskPriorityDisinherit+0xd8>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	429a      	cmp	r2, r3
 8008896:	d903      	bls.n	80088a0 <xTaskPriorityDisinherit+0xa8>
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889c:	4a0c      	ldr	r2, [pc, #48]	@ (80088d0 <xTaskPriorityDisinherit+0xd8>)
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088a4:	4613      	mov	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4413      	add	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4a09      	ldr	r2, [pc, #36]	@ (80088d4 <xTaskPriorityDisinherit+0xdc>)
 80088ae:	441a      	add	r2, r3
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	3304      	adds	r3, #4
 80088b4:	4619      	mov	r1, r3
 80088b6:	4610      	mov	r0, r2
 80088b8:	f7fe fba7 	bl	800700a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80088bc:	2301      	movs	r3, #1
 80088be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088c0:	697b      	ldr	r3, [r7, #20]
	}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	200009f8 	.word	0x200009f8
 80088d0:	20000ed4 	.word	0x20000ed4
 80088d4:	200009fc 	.word	0x200009fc

080088d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80088e2:	4b21      	ldr	r3, [pc, #132]	@ (8008968 <prvAddCurrentTaskToDelayedList+0x90>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088e8:	4b20      	ldr	r3, [pc, #128]	@ (800896c <prvAddCurrentTaskToDelayedList+0x94>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3304      	adds	r3, #4
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fe fbe8 	bl	80070c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fa:	d10a      	bne.n	8008912 <prvAddCurrentTaskToDelayedList+0x3a>
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d007      	beq.n	8008912 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008902:	4b1a      	ldr	r3, [pc, #104]	@ (800896c <prvAddCurrentTaskToDelayedList+0x94>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	3304      	adds	r3, #4
 8008908:	4619      	mov	r1, r3
 800890a:	4819      	ldr	r0, [pc, #100]	@ (8008970 <prvAddCurrentTaskToDelayedList+0x98>)
 800890c:	f7fe fb7d 	bl	800700a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008910:	e026      	b.n	8008960 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4413      	add	r3, r2
 8008918:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800891a:	4b14      	ldr	r3, [pc, #80]	@ (800896c <prvAddCurrentTaskToDelayedList+0x94>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008922:	68ba      	ldr	r2, [r7, #8]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	429a      	cmp	r2, r3
 8008928:	d209      	bcs.n	800893e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800892a:	4b12      	ldr	r3, [pc, #72]	@ (8008974 <prvAddCurrentTaskToDelayedList+0x9c>)
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	4b0f      	ldr	r3, [pc, #60]	@ (800896c <prvAddCurrentTaskToDelayedList+0x94>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3304      	adds	r3, #4
 8008934:	4619      	mov	r1, r3
 8008936:	4610      	mov	r0, r2
 8008938:	f7fe fb8b 	bl	8007052 <vListInsert>
}
 800893c:	e010      	b.n	8008960 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800893e:	4b0e      	ldr	r3, [pc, #56]	@ (8008978 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	4b0a      	ldr	r3, [pc, #40]	@ (800896c <prvAddCurrentTaskToDelayedList+0x94>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3304      	adds	r3, #4
 8008948:	4619      	mov	r1, r3
 800894a:	4610      	mov	r0, r2
 800894c:	f7fe fb81 	bl	8007052 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008950:	4b0a      	ldr	r3, [pc, #40]	@ (800897c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68ba      	ldr	r2, [r7, #8]
 8008956:	429a      	cmp	r2, r3
 8008958:	d202      	bcs.n	8008960 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800895a:	4a08      	ldr	r2, [pc, #32]	@ (800897c <prvAddCurrentTaskToDelayedList+0xa4>)
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	6013      	str	r3, [r2, #0]
}
 8008960:	bf00      	nop
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	20000ed0 	.word	0x20000ed0
 800896c:	200009f8 	.word	0x200009f8
 8008970:	20000eb8 	.word	0x20000eb8
 8008974:	20000e88 	.word	0x20000e88
 8008978:	20000e84 	.word	0x20000e84
 800897c:	20000eec 	.word	0x20000eec

08008980 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08a      	sub	sp, #40	@ 0x28
 8008984:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008986:	2300      	movs	r3, #0
 8008988:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800898a:	f000 fb13 	bl	8008fb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800898e:	4b1d      	ldr	r3, [pc, #116]	@ (8008a04 <xTimerCreateTimerTask+0x84>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d021      	beq.n	80089da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008996:	2300      	movs	r3, #0
 8008998:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800899a:	2300      	movs	r3, #0
 800899c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800899e:	1d3a      	adds	r2, r7, #4
 80089a0:	f107 0108 	add.w	r1, r7, #8
 80089a4:	f107 030c 	add.w	r3, r7, #12
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7fe fae7 	bl	8006f7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80089ae:	6879      	ldr	r1, [r7, #4]
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	9202      	str	r2, [sp, #8]
 80089b6:	9301      	str	r3, [sp, #4]
 80089b8:	2302      	movs	r3, #2
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	2300      	movs	r3, #0
 80089be:	460a      	mov	r2, r1
 80089c0:	4911      	ldr	r1, [pc, #68]	@ (8008a08 <xTimerCreateTimerTask+0x88>)
 80089c2:	4812      	ldr	r0, [pc, #72]	@ (8008a0c <xTimerCreateTimerTask+0x8c>)
 80089c4:	f7ff f8a2 	bl	8007b0c <xTaskCreateStatic>
 80089c8:	4603      	mov	r3, r0
 80089ca:	4a11      	ldr	r2, [pc, #68]	@ (8008a10 <xTimerCreateTimerTask+0x90>)
 80089cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80089ce:	4b10      	ldr	r3, [pc, #64]	@ (8008a10 <xTimerCreateTimerTask+0x90>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80089d6:	2301      	movs	r3, #1
 80089d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10b      	bne.n	80089f8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	613b      	str	r3, [r7, #16]
}
 80089f2:	bf00      	nop
 80089f4:	bf00      	nop
 80089f6:	e7fd      	b.n	80089f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80089f8:	697b      	ldr	r3, [r7, #20]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3718      	adds	r7, #24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20000f28 	.word	0x20000f28
 8008a08:	08009af0 	.word	0x08009af0
 8008a0c:	08008b4d 	.word	0x08008b4d
 8008a10:	20000f2c 	.word	0x20000f2c

08008a14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b08a      	sub	sp, #40	@ 0x28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
 8008a20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10b      	bne.n	8008a44 <xTimerGenericCommand+0x30>
	__asm volatile
 8008a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a30:	f383 8811 	msr	BASEPRI, r3
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	623b      	str	r3, [r7, #32]
}
 8008a3e:	bf00      	nop
 8008a40:	bf00      	nop
 8008a42:	e7fd      	b.n	8008a40 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008a44:	4b19      	ldr	r3, [pc, #100]	@ (8008aac <xTimerGenericCommand+0x98>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d02a      	beq.n	8008aa2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2b05      	cmp	r3, #5
 8008a5c:	dc18      	bgt.n	8008a90 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008a5e:	f7ff fead 	bl	80087bc <xTaskGetSchedulerState>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d109      	bne.n	8008a7c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008a68:	4b10      	ldr	r3, [pc, #64]	@ (8008aac <xTimerGenericCommand+0x98>)
 8008a6a:	6818      	ldr	r0, [r3, #0]
 8008a6c:	f107 0110 	add.w	r1, r7, #16
 8008a70:	2300      	movs	r3, #0
 8008a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a74:	f7fe fc5a 	bl	800732c <xQueueGenericSend>
 8008a78:	6278      	str	r0, [r7, #36]	@ 0x24
 8008a7a:	e012      	b.n	8008aa2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008aac <xTimerGenericCommand+0x98>)
 8008a7e:	6818      	ldr	r0, [r3, #0]
 8008a80:	f107 0110 	add.w	r1, r7, #16
 8008a84:	2300      	movs	r3, #0
 8008a86:	2200      	movs	r2, #0
 8008a88:	f7fe fc50 	bl	800732c <xQueueGenericSend>
 8008a8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008a8e:	e008      	b.n	8008aa2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008a90:	4b06      	ldr	r3, [pc, #24]	@ (8008aac <xTimerGenericCommand+0x98>)
 8008a92:	6818      	ldr	r0, [r3, #0]
 8008a94:	f107 0110 	add.w	r1, r7, #16
 8008a98:	2300      	movs	r3, #0
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	f7fe fd48 	bl	8007530 <xQueueGenericSendFromISR>
 8008aa0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3728      	adds	r7, #40	@ 0x28
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	20000f28 	.word	0x20000f28

08008ab0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	af02      	add	r7, sp, #8
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aba:	4b23      	ldr	r3, [pc, #140]	@ (8008b48 <prvProcessExpiredTimer+0x98>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fe fafb 	bl	80070c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d023      	beq.n	8008b24 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	699a      	ldr	r2, [r3, #24]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	18d1      	adds	r1, r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	6978      	ldr	r0, [r7, #20]
 8008aea:	f000 f8d5 	bl	8008c98 <prvInsertTimerInActiveList>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d020      	beq.n	8008b36 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008af4:	2300      	movs	r3, #0
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	2300      	movs	r3, #0
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	2100      	movs	r1, #0
 8008afe:	6978      	ldr	r0, [r7, #20]
 8008b00:	f7ff ff88 	bl	8008a14 <xTimerGenericCommand>
 8008b04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d114      	bne.n	8008b36 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	60fb      	str	r3, [r7, #12]
}
 8008b1e:	bf00      	nop
 8008b20:	bf00      	nop
 8008b22:	e7fd      	b.n	8008b20 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b2a:	f023 0301 	bic.w	r3, r3, #1
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	6978      	ldr	r0, [r7, #20]
 8008b3c:	4798      	blx	r3
}
 8008b3e:	bf00      	nop
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20000f20 	.word	0x20000f20

08008b4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b54:	f107 0308 	add.w	r3, r7, #8
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f000 f859 	bl	8008c10 <prvGetNextExpireTime>
 8008b5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	4619      	mov	r1, r3
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f000 f805 	bl	8008b74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008b6a:	f000 f8d7 	bl	8008d1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008b6e:	bf00      	nop
 8008b70:	e7f0      	b.n	8008b54 <prvTimerTask+0x8>
	...

08008b74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008b7e:	f7ff fa29 	bl	8007fd4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b82:	f107 0308 	add.w	r3, r7, #8
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 f866 	bl	8008c58 <prvSampleTimeNow>
 8008b8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d130      	bne.n	8008bf6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10a      	bne.n	8008bb0 <prvProcessTimerOrBlockTask+0x3c>
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d806      	bhi.n	8008bb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008ba2:	f7ff fa25 	bl	8007ff0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008ba6:	68f9      	ldr	r1, [r7, #12]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7ff ff81 	bl	8008ab0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008bae:	e024      	b.n	8008bfa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d008      	beq.n	8008bc8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008bb6:	4b13      	ldr	r3, [pc, #76]	@ (8008c04 <prvProcessTimerOrBlockTask+0x90>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <prvProcessTimerOrBlockTask+0x50>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e000      	b.n	8008bc6 <prvProcessTimerOrBlockTask+0x52>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008bc8:	4b0f      	ldr	r3, [pc, #60]	@ (8008c08 <prvProcessTimerOrBlockTask+0x94>)
 8008bca:	6818      	ldr	r0, [r3, #0]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	1ad3      	subs	r3, r2, r3
 8008bd2:	683a      	ldr	r2, [r7, #0]
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	f7fe ff65 	bl	8007aa4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008bda:	f7ff fa09 	bl	8007ff0 <xTaskResumeAll>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10a      	bne.n	8008bfa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008be4:	4b09      	ldr	r3, [pc, #36]	@ (8008c0c <prvProcessTimerOrBlockTask+0x98>)
 8008be6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	f3bf 8f6f 	isb	sy
}
 8008bf4:	e001      	b.n	8008bfa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008bf6:	f7ff f9fb 	bl	8007ff0 <xTaskResumeAll>
}
 8008bfa:	bf00      	nop
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20000f24 	.word	0x20000f24
 8008c08:	20000f28 	.word	0x20000f28
 8008c0c:	e000ed04 	.word	0xe000ed04

08008c10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008c18:	4b0e      	ldr	r3, [pc, #56]	@ (8008c54 <prvGetNextExpireTime+0x44>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d101      	bne.n	8008c26 <prvGetNextExpireTime+0x16>
 8008c22:	2201      	movs	r2, #1
 8008c24:	e000      	b.n	8008c28 <prvGetNextExpireTime+0x18>
 8008c26:	2200      	movs	r2, #0
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d105      	bne.n	8008c40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c34:	4b07      	ldr	r3, [pc, #28]	@ (8008c54 <prvGetNextExpireTime+0x44>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	e001      	b.n	8008c44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008c44:	68fb      	ldr	r3, [r7, #12]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	20000f20 	.word	0x20000f20

08008c58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008c60:	f7ff fa64 	bl	800812c <xTaskGetTickCount>
 8008c64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008c66:	4b0b      	ldr	r3, [pc, #44]	@ (8008c94 <prvSampleTimeNow+0x3c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d205      	bcs.n	8008c7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008c70:	f000 f93a 	bl	8008ee8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	e002      	b.n	8008c82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008c82:	4a04      	ldr	r2, [pc, #16]	@ (8008c94 <prvSampleTimeNow+0x3c>)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008c88:	68fb      	ldr	r3, [r7, #12]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	20000f30 	.word	0x20000f30

08008c98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d812      	bhi.n	8008ce4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	1ad2      	subs	r2, r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d302      	bcc.n	8008cd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	617b      	str	r3, [r7, #20]
 8008cd0:	e01b      	b.n	8008d0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008cd2:	4b10      	ldr	r3, [pc, #64]	@ (8008d14 <prvInsertTimerInActiveList+0x7c>)
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3304      	adds	r3, #4
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4610      	mov	r0, r2
 8008cde:	f7fe f9b8 	bl	8007052 <vListInsert>
 8008ce2:	e012      	b.n	8008d0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d206      	bcs.n	8008cfa <prvInsertTimerInActiveList+0x62>
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d302      	bcc.n	8008cfa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	617b      	str	r3, [r7, #20]
 8008cf8:	e007      	b.n	8008d0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cfa:	4b07      	ldr	r3, [pc, #28]	@ (8008d18 <prvInsertTimerInActiveList+0x80>)
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	3304      	adds	r3, #4
 8008d02:	4619      	mov	r1, r3
 8008d04:	4610      	mov	r0, r2
 8008d06:	f7fe f9a4 	bl	8007052 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008d0a:	697b      	ldr	r3, [r7, #20]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	20000f24 	.word	0x20000f24
 8008d18:	20000f20 	.word	0x20000f20

08008d1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08e      	sub	sp, #56	@ 0x38
 8008d20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008d22:	e0ce      	b.n	8008ec2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	da19      	bge.n	8008d5e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008d2a:	1d3b      	adds	r3, r7, #4
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d10b      	bne.n	8008d4e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d3a:	f383 8811 	msr	BASEPRI, r3
 8008d3e:	f3bf 8f6f 	isb	sy
 8008d42:	f3bf 8f4f 	dsb	sy
 8008d46:	61fb      	str	r3, [r7, #28]
}
 8008d48:	bf00      	nop
 8008d4a:	bf00      	nop
 8008d4c:	e7fd      	b.n	8008d4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d54:	6850      	ldr	r0, [r2, #4]
 8008d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d58:	6892      	ldr	r2, [r2, #8]
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f2c0 80ae 	blt.w	8008ec2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d004      	beq.n	8008d7c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d74:	3304      	adds	r3, #4
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fe f9a4 	bl	80070c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d7c:	463b      	mov	r3, r7
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7ff ff6a 	bl	8008c58 <prvSampleTimeNow>
 8008d84:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2b09      	cmp	r3, #9
 8008d8a:	f200 8097 	bhi.w	8008ebc <prvProcessReceivedCommands+0x1a0>
 8008d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d94 <prvProcessReceivedCommands+0x78>)
 8008d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d94:	08008dbd 	.word	0x08008dbd
 8008d98:	08008dbd 	.word	0x08008dbd
 8008d9c:	08008dbd 	.word	0x08008dbd
 8008da0:	08008e33 	.word	0x08008e33
 8008da4:	08008e47 	.word	0x08008e47
 8008da8:	08008e93 	.word	0x08008e93
 8008dac:	08008dbd 	.word	0x08008dbd
 8008db0:	08008dbd 	.word	0x08008dbd
 8008db4:	08008e33 	.word	0x08008e33
 8008db8:	08008e47 	.word	0x08008e47
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dc2:	f043 0301 	orr.w	r3, r3, #1
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008dce:	68ba      	ldr	r2, [r7, #8]
 8008dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	18d1      	adds	r1, r2, r3
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ddc:	f7ff ff5c 	bl	8008c98 <prvInsertTimerInActiveList>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d06c      	beq.n	8008ec0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008dec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008df4:	f003 0304 	and.w	r3, r3, #4
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d061      	beq.n	8008ec0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	441a      	add	r2, r3
 8008e04:	2300      	movs	r3, #0
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e0e:	f7ff fe01 	bl	8008a14 <xTimerGenericCommand>
 8008e12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d152      	bne.n	8008ec0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1e:	f383 8811 	msr	BASEPRI, r3
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	f3bf 8f4f 	dsb	sy
 8008e2a:	61bb      	str	r3, [r7, #24]
}
 8008e2c:	bf00      	nop
 8008e2e:	bf00      	nop
 8008e30:	e7fd      	b.n	8008e2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e38:	f023 0301 	bic.w	r3, r3, #1
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008e44:	e03d      	b.n	8008ec2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e4c:	f043 0301 	orr.w	r3, r3, #1
 8008e50:	b2da      	uxtb	r2, r3
 8008e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e5c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e60:	699b      	ldr	r3, [r3, #24]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10b      	bne.n	8008e7e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	617b      	str	r3, [r7, #20]
}
 8008e78:	bf00      	nop
 8008e7a:	bf00      	nop
 8008e7c:	e7fd      	b.n	8008e7a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e80:	699a      	ldr	r2, [r3, #24]
 8008e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e84:	18d1      	adds	r1, r2, r3
 8008e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e8c:	f7ff ff04 	bl	8008c98 <prvInsertTimerInActiveList>
					break;
 8008e90:	e017      	b.n	8008ec2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e98:	f003 0302 	and.w	r3, r3, #2
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d103      	bne.n	8008ea8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008ea0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ea2:	f000 fbe9 	bl	8009678 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008ea6:	e00c      	b.n	8008ec2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008eae:	f023 0301 	bic.w	r3, r3, #1
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008eba:	e002      	b.n	8008ec2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008ebc:	bf00      	nop
 8008ebe:	e000      	b.n	8008ec2 <prvProcessReceivedCommands+0x1a6>
					break;
 8008ec0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ec2:	4b08      	ldr	r3, [pc, #32]	@ (8008ee4 <prvProcessReceivedCommands+0x1c8>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	1d39      	adds	r1, r7, #4
 8008ec8:	2200      	movs	r2, #0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe fbce 	bl	800766c <xQueueReceive>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f47f af26 	bne.w	8008d24 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008ed8:	bf00      	nop
 8008eda:	bf00      	nop
 8008edc:	3730      	adds	r7, #48	@ 0x30
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20000f28 	.word	0x20000f28

08008ee8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b088      	sub	sp, #32
 8008eec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008eee:	e049      	b.n	8008f84 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8008fac <prvSwitchTimerLists+0xc4>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008efa:	4b2c      	ldr	r3, [pc, #176]	@ (8008fac <prvSwitchTimerLists+0xc4>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	3304      	adds	r3, #4
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fe f8db 	bl	80070c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	6a1b      	ldr	r3, [r3, #32]
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f1c:	f003 0304 	and.w	r3, r3, #4
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d02f      	beq.n	8008f84 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d90e      	bls.n	8008f54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f42:	4b1a      	ldr	r3, [pc, #104]	@ (8008fac <prvSwitchTimerLists+0xc4>)
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	f7fe f880 	bl	8007052 <vListInsert>
 8008f52:	e017      	b.n	8008f84 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f54:	2300      	movs	r3, #0
 8008f56:	9300      	str	r3, [sp, #0]
 8008f58:	2300      	movs	r3, #0
 8008f5a:	693a      	ldr	r2, [r7, #16]
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f7ff fd58 	bl	8008a14 <xTimerGenericCommand>
 8008f64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10b      	bne.n	8008f84 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	603b      	str	r3, [r7, #0]
}
 8008f7e:	bf00      	nop
 8008f80:	bf00      	nop
 8008f82:	e7fd      	b.n	8008f80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008f84:	4b09      	ldr	r3, [pc, #36]	@ (8008fac <prvSwitchTimerLists+0xc4>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1b0      	bne.n	8008ef0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008f8e:	4b07      	ldr	r3, [pc, #28]	@ (8008fac <prvSwitchTimerLists+0xc4>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008f94:	4b06      	ldr	r3, [pc, #24]	@ (8008fb0 <prvSwitchTimerLists+0xc8>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a04      	ldr	r2, [pc, #16]	@ (8008fac <prvSwitchTimerLists+0xc4>)
 8008f9a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f9c:	4a04      	ldr	r2, [pc, #16]	@ (8008fb0 <prvSwitchTimerLists+0xc8>)
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	6013      	str	r3, [r2, #0]
}
 8008fa2:	bf00      	nop
 8008fa4:	3718      	adds	r7, #24
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	20000f20 	.word	0x20000f20
 8008fb0:	20000f24 	.word	0x20000f24

08008fb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008fba:	f000 f96d 	bl	8009298 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008fbe:	4b15      	ldr	r3, [pc, #84]	@ (8009014 <prvCheckForValidListAndQueue+0x60>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d120      	bne.n	8009008 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008fc6:	4814      	ldr	r0, [pc, #80]	@ (8009018 <prvCheckForValidListAndQueue+0x64>)
 8008fc8:	f7fd fff2 	bl	8006fb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008fcc:	4813      	ldr	r0, [pc, #76]	@ (800901c <prvCheckForValidListAndQueue+0x68>)
 8008fce:	f7fd ffef 	bl	8006fb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008fd2:	4b13      	ldr	r3, [pc, #76]	@ (8009020 <prvCheckForValidListAndQueue+0x6c>)
 8008fd4:	4a10      	ldr	r2, [pc, #64]	@ (8009018 <prvCheckForValidListAndQueue+0x64>)
 8008fd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008fd8:	4b12      	ldr	r3, [pc, #72]	@ (8009024 <prvCheckForValidListAndQueue+0x70>)
 8008fda:	4a10      	ldr	r2, [pc, #64]	@ (800901c <prvCheckForValidListAndQueue+0x68>)
 8008fdc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008fde:	2300      	movs	r3, #0
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	4b11      	ldr	r3, [pc, #68]	@ (8009028 <prvCheckForValidListAndQueue+0x74>)
 8008fe4:	4a11      	ldr	r2, [pc, #68]	@ (800902c <prvCheckForValidListAndQueue+0x78>)
 8008fe6:	2110      	movs	r1, #16
 8008fe8:	200a      	movs	r0, #10
 8008fea:	f7fe f8ff 	bl	80071ec <xQueueGenericCreateStatic>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	4a08      	ldr	r2, [pc, #32]	@ (8009014 <prvCheckForValidListAndQueue+0x60>)
 8008ff2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008ff4:	4b07      	ldr	r3, [pc, #28]	@ (8009014 <prvCheckForValidListAndQueue+0x60>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d005      	beq.n	8009008 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ffc:	4b05      	ldr	r3, [pc, #20]	@ (8009014 <prvCheckForValidListAndQueue+0x60>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	490b      	ldr	r1, [pc, #44]	@ (8009030 <prvCheckForValidListAndQueue+0x7c>)
 8009002:	4618      	mov	r0, r3
 8009004:	f7fe fd24 	bl	8007a50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009008:	f000 f978 	bl	80092fc <vPortExitCritical>
}
 800900c:	bf00      	nop
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20000f28 	.word	0x20000f28
 8009018:	20000ef8 	.word	0x20000ef8
 800901c:	20000f0c 	.word	0x20000f0c
 8009020:	20000f20 	.word	0x20000f20
 8009024:	20000f24 	.word	0x20000f24
 8009028:	20000fd4 	.word	0x20000fd4
 800902c:	20000f34 	.word	0x20000f34
 8009030:	08009af8 	.word	0x08009af8

08009034 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	3b04      	subs	r3, #4
 8009044:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800904c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	3b04      	subs	r3, #4
 8009052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	f023 0201 	bic.w	r2, r3, #1
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	3b04      	subs	r3, #4
 8009062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009064:	4a0c      	ldr	r2, [pc, #48]	@ (8009098 <pxPortInitialiseStack+0x64>)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	3b14      	subs	r3, #20
 800906e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	3b04      	subs	r3, #4
 800907a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f06f 0202 	mvn.w	r2, #2
 8009082:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	3b20      	subs	r3, #32
 8009088:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800908a:	68fb      	ldr	r3, [r7, #12]
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr
 8009098:	0800909d 	.word	0x0800909d

0800909c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80090a2:	2300      	movs	r3, #0
 80090a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80090a6:	4b13      	ldr	r3, [pc, #76]	@ (80090f4 <prvTaskExitError+0x58>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090ae:	d00b      	beq.n	80090c8 <prvTaskExitError+0x2c>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	60fb      	str	r3, [r7, #12]
}
 80090c2:	bf00      	nop
 80090c4:	bf00      	nop
 80090c6:	e7fd      	b.n	80090c4 <prvTaskExitError+0x28>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	60bb      	str	r3, [r7, #8]
}
 80090da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80090dc:	bf00      	nop
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d0fc      	beq.n	80090de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80090e4:	bf00      	nop
 80090e6:	bf00      	nop
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	2000000c 	.word	0x2000000c
	...

08009100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009100:	4b07      	ldr	r3, [pc, #28]	@ (8009120 <pxCurrentTCBConst2>)
 8009102:	6819      	ldr	r1, [r3, #0]
 8009104:	6808      	ldr	r0, [r1, #0]
 8009106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910a:	f380 8809 	msr	PSP, r0
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f04f 0000 	mov.w	r0, #0
 8009116:	f380 8811 	msr	BASEPRI, r0
 800911a:	4770      	bx	lr
 800911c:	f3af 8000 	nop.w

08009120 <pxCurrentTCBConst2>:
 8009120:	200009f8 	.word	0x200009f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009124:	bf00      	nop
 8009126:	bf00      	nop

08009128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009128:	4808      	ldr	r0, [pc, #32]	@ (800914c <prvPortStartFirstTask+0x24>)
 800912a:	6800      	ldr	r0, [r0, #0]
 800912c:	6800      	ldr	r0, [r0, #0]
 800912e:	f380 8808 	msr	MSP, r0
 8009132:	f04f 0000 	mov.w	r0, #0
 8009136:	f380 8814 	msr	CONTROL, r0
 800913a:	b662      	cpsie	i
 800913c:	b661      	cpsie	f
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	f3bf 8f6f 	isb	sy
 8009146:	df00      	svc	0
 8009148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800914a:	bf00      	nop
 800914c:	e000ed08 	.word	0xe000ed08

08009150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b086      	sub	sp, #24
 8009154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009156:	4b47      	ldr	r3, [pc, #284]	@ (8009274 <xPortStartScheduler+0x124>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a47      	ldr	r2, [pc, #284]	@ (8009278 <xPortStartScheduler+0x128>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d10b      	bne.n	8009178 <xPortStartScheduler+0x28>
	__asm volatile
 8009160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	60fb      	str	r3, [r7, #12]
}
 8009172:	bf00      	nop
 8009174:	bf00      	nop
 8009176:	e7fd      	b.n	8009174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009178:	4b3e      	ldr	r3, [pc, #248]	@ (8009274 <xPortStartScheduler+0x124>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a3f      	ldr	r2, [pc, #252]	@ (800927c <xPortStartScheduler+0x12c>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d10b      	bne.n	800919a <xPortStartScheduler+0x4a>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	613b      	str	r3, [r7, #16]
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop
 8009198:	e7fd      	b.n	8009196 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800919a:	4b39      	ldr	r3, [pc, #228]	@ (8009280 <xPortStartScheduler+0x130>)
 800919c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	22ff      	movs	r2, #255	@ 0xff
 80091aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	781b      	ldrb	r3, [r3, #0]
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80091b4:	78fb      	ldrb	r3, [r7, #3]
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	4b31      	ldr	r3, [pc, #196]	@ (8009284 <xPortStartScheduler+0x134>)
 80091c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80091c2:	4b31      	ldr	r3, [pc, #196]	@ (8009288 <xPortStartScheduler+0x138>)
 80091c4:	2207      	movs	r2, #7
 80091c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091c8:	e009      	b.n	80091de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80091ca:	4b2f      	ldr	r3, [pc, #188]	@ (8009288 <xPortStartScheduler+0x138>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3b01      	subs	r3, #1
 80091d0:	4a2d      	ldr	r2, [pc, #180]	@ (8009288 <xPortStartScheduler+0x138>)
 80091d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80091d4:	78fb      	ldrb	r3, [r7, #3]
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	005b      	lsls	r3, r3, #1
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80091de:	78fb      	ldrb	r3, [r7, #3]
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091e6:	2b80      	cmp	r3, #128	@ 0x80
 80091e8:	d0ef      	beq.n	80091ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80091ea:	4b27      	ldr	r3, [pc, #156]	@ (8009288 <xPortStartScheduler+0x138>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f1c3 0307 	rsb	r3, r3, #7
 80091f2:	2b04      	cmp	r3, #4
 80091f4:	d00b      	beq.n	800920e <xPortStartScheduler+0xbe>
	__asm volatile
 80091f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	60bb      	str	r3, [r7, #8]
}
 8009208:	bf00      	nop
 800920a:	bf00      	nop
 800920c:	e7fd      	b.n	800920a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800920e:	4b1e      	ldr	r3, [pc, #120]	@ (8009288 <xPortStartScheduler+0x138>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	021b      	lsls	r3, r3, #8
 8009214:	4a1c      	ldr	r2, [pc, #112]	@ (8009288 <xPortStartScheduler+0x138>)
 8009216:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009218:	4b1b      	ldr	r3, [pc, #108]	@ (8009288 <xPortStartScheduler+0x138>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009220:	4a19      	ldr	r2, [pc, #100]	@ (8009288 <xPortStartScheduler+0x138>)
 8009222:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	b2da      	uxtb	r2, r3
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800922c:	4b17      	ldr	r3, [pc, #92]	@ (800928c <xPortStartScheduler+0x13c>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a16      	ldr	r2, [pc, #88]	@ (800928c <xPortStartScheduler+0x13c>)
 8009232:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009236:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009238:	4b14      	ldr	r3, [pc, #80]	@ (800928c <xPortStartScheduler+0x13c>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a13      	ldr	r2, [pc, #76]	@ (800928c <xPortStartScheduler+0x13c>)
 800923e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009242:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009244:	f000 f8da 	bl	80093fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009248:	4b11      	ldr	r3, [pc, #68]	@ (8009290 <xPortStartScheduler+0x140>)
 800924a:	2200      	movs	r2, #0
 800924c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800924e:	f000 f8f9 	bl	8009444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009252:	4b10      	ldr	r3, [pc, #64]	@ (8009294 <xPortStartScheduler+0x144>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a0f      	ldr	r2, [pc, #60]	@ (8009294 <xPortStartScheduler+0x144>)
 8009258:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800925c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800925e:	f7ff ff63 	bl	8009128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009262:	f7ff f82d 	bl	80082c0 <vTaskSwitchContext>
	prvTaskExitError();
 8009266:	f7ff ff19 	bl	800909c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	e000ed00 	.word	0xe000ed00
 8009278:	410fc271 	.word	0x410fc271
 800927c:	410fc270 	.word	0x410fc270
 8009280:	e000e400 	.word	0xe000e400
 8009284:	20001024 	.word	0x20001024
 8009288:	20001028 	.word	0x20001028
 800928c:	e000ed20 	.word	0xe000ed20
 8009290:	2000000c 	.word	0x2000000c
 8009294:	e000ef34 	.word	0xe000ef34

08009298 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
	__asm volatile
 800929e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	607b      	str	r3, [r7, #4]
}
 80092b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80092b2:	4b10      	ldr	r3, [pc, #64]	@ (80092f4 <vPortEnterCritical+0x5c>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	3301      	adds	r3, #1
 80092b8:	4a0e      	ldr	r2, [pc, #56]	@ (80092f4 <vPortEnterCritical+0x5c>)
 80092ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80092bc:	4b0d      	ldr	r3, [pc, #52]	@ (80092f4 <vPortEnterCritical+0x5c>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d110      	bne.n	80092e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80092c4:	4b0c      	ldr	r3, [pc, #48]	@ (80092f8 <vPortEnterCritical+0x60>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00b      	beq.n	80092e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80092ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092d2:	f383 8811 	msr	BASEPRI, r3
 80092d6:	f3bf 8f6f 	isb	sy
 80092da:	f3bf 8f4f 	dsb	sy
 80092de:	603b      	str	r3, [r7, #0]
}
 80092e0:	bf00      	nop
 80092e2:	bf00      	nop
 80092e4:	e7fd      	b.n	80092e2 <vPortEnterCritical+0x4a>
	}
}
 80092e6:	bf00      	nop
 80092e8:	370c      	adds	r7, #12
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	2000000c 	.word	0x2000000c
 80092f8:	e000ed04 	.word	0xe000ed04

080092fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009302:	4b12      	ldr	r3, [pc, #72]	@ (800934c <vPortExitCritical+0x50>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10b      	bne.n	8009322 <vPortExitCritical+0x26>
	__asm volatile
 800930a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800930e:	f383 8811 	msr	BASEPRI, r3
 8009312:	f3bf 8f6f 	isb	sy
 8009316:	f3bf 8f4f 	dsb	sy
 800931a:	607b      	str	r3, [r7, #4]
}
 800931c:	bf00      	nop
 800931e:	bf00      	nop
 8009320:	e7fd      	b.n	800931e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009322:	4b0a      	ldr	r3, [pc, #40]	@ (800934c <vPortExitCritical+0x50>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3b01      	subs	r3, #1
 8009328:	4a08      	ldr	r2, [pc, #32]	@ (800934c <vPortExitCritical+0x50>)
 800932a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800932c:	4b07      	ldr	r3, [pc, #28]	@ (800934c <vPortExitCritical+0x50>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d105      	bne.n	8009340 <vPortExitCritical+0x44>
 8009334:	2300      	movs	r3, #0
 8009336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	f383 8811 	msr	BASEPRI, r3
}
 800933e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	2000000c 	.word	0x2000000c

08009350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009350:	f3ef 8009 	mrs	r0, PSP
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	4b15      	ldr	r3, [pc, #84]	@ (80093b0 <pxCurrentTCBConst>)
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	f01e 0f10 	tst.w	lr, #16
 8009360:	bf08      	it	eq
 8009362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936a:	6010      	str	r0, [r2, #0]
 800936c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009370:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009374:	f380 8811 	msr	BASEPRI, r0
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f7fe ff9e 	bl	80082c0 <vTaskSwitchContext>
 8009384:	f04f 0000 	mov.w	r0, #0
 8009388:	f380 8811 	msr	BASEPRI, r0
 800938c:	bc09      	pop	{r0, r3}
 800938e:	6819      	ldr	r1, [r3, #0]
 8009390:	6808      	ldr	r0, [r1, #0]
 8009392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009396:	f01e 0f10 	tst.w	lr, #16
 800939a:	bf08      	it	eq
 800939c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80093a0:	f380 8809 	msr	PSP, r0
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	f3af 8000 	nop.w

080093b0 <pxCurrentTCBConst>:
 80093b0:	200009f8 	.word	0x200009f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80093b4:	bf00      	nop
 80093b6:	bf00      	nop

080093b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
	__asm volatile
 80093be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c2:	f383 8811 	msr	BASEPRI, r3
 80093c6:	f3bf 8f6f 	isb	sy
 80093ca:	f3bf 8f4f 	dsb	sy
 80093ce:	607b      	str	r3, [r7, #4]
}
 80093d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80093d2:	f7fe febb 	bl	800814c <xTaskIncrementTick>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d003      	beq.n	80093e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80093dc:	4b06      	ldr	r3, [pc, #24]	@ (80093f8 <xPortSysTickHandler+0x40>)
 80093de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80093e2:	601a      	str	r2, [r3, #0]
 80093e4:	2300      	movs	r3, #0
 80093e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	f383 8811 	msr	BASEPRI, r3
}
 80093ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	e000ed04 	.word	0xe000ed04

080093fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80093fc:	b480      	push	{r7}
 80093fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009400:	4b0b      	ldr	r3, [pc, #44]	@ (8009430 <vPortSetupTimerInterrupt+0x34>)
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009406:	4b0b      	ldr	r3, [pc, #44]	@ (8009434 <vPortSetupTimerInterrupt+0x38>)
 8009408:	2200      	movs	r2, #0
 800940a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800940c:	4b0a      	ldr	r3, [pc, #40]	@ (8009438 <vPortSetupTimerInterrupt+0x3c>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a0a      	ldr	r2, [pc, #40]	@ (800943c <vPortSetupTimerInterrupt+0x40>)
 8009412:	fba2 2303 	umull	r2, r3, r2, r3
 8009416:	099b      	lsrs	r3, r3, #6
 8009418:	4a09      	ldr	r2, [pc, #36]	@ (8009440 <vPortSetupTimerInterrupt+0x44>)
 800941a:	3b01      	subs	r3, #1
 800941c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800941e:	4b04      	ldr	r3, [pc, #16]	@ (8009430 <vPortSetupTimerInterrupt+0x34>)
 8009420:	2207      	movs	r2, #7
 8009422:	601a      	str	r2, [r3, #0]
}
 8009424:	bf00      	nop
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
 800942e:	bf00      	nop
 8009430:	e000e010 	.word	0xe000e010
 8009434:	e000e018 	.word	0xe000e018
 8009438:	20000000 	.word	0x20000000
 800943c:	10624dd3 	.word	0x10624dd3
 8009440:	e000e014 	.word	0xe000e014

08009444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009444:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009454 <vPortEnableVFP+0x10>
 8009448:	6801      	ldr	r1, [r0, #0]
 800944a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800944e:	6001      	str	r1, [r0, #0]
 8009450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009452:	bf00      	nop
 8009454:	e000ed88 	.word	0xe000ed88

08009458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800945e:	f3ef 8305 	mrs	r3, IPSR
 8009462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2b0f      	cmp	r3, #15
 8009468:	d915      	bls.n	8009496 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800946a:	4a18      	ldr	r2, [pc, #96]	@ (80094cc <vPortValidateInterruptPriority+0x74>)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	4413      	add	r3, r2
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009474:	4b16      	ldr	r3, [pc, #88]	@ (80094d0 <vPortValidateInterruptPriority+0x78>)
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	7afa      	ldrb	r2, [r7, #11]
 800947a:	429a      	cmp	r2, r3
 800947c:	d20b      	bcs.n	8009496 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	607b      	str	r3, [r7, #4]
}
 8009490:	bf00      	nop
 8009492:	bf00      	nop
 8009494:	e7fd      	b.n	8009492 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009496:	4b0f      	ldr	r3, [pc, #60]	@ (80094d4 <vPortValidateInterruptPriority+0x7c>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800949e:	4b0e      	ldr	r3, [pc, #56]	@ (80094d8 <vPortValidateInterruptPriority+0x80>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d90b      	bls.n	80094be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	603b      	str	r3, [r7, #0]
}
 80094b8:	bf00      	nop
 80094ba:	bf00      	nop
 80094bc:	e7fd      	b.n	80094ba <vPortValidateInterruptPriority+0x62>
	}
 80094be:	bf00      	nop
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	e000e3f0 	.word	0xe000e3f0
 80094d0:	20001024 	.word	0x20001024
 80094d4:	e000ed0c 	.word	0xe000ed0c
 80094d8:	20001028 	.word	0x20001028

080094dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08a      	sub	sp, #40	@ 0x28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80094e4:	2300      	movs	r3, #0
 80094e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80094e8:	f7fe fd74 	bl	8007fd4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80094ec:	4b5c      	ldr	r3, [pc, #368]	@ (8009660 <pvPortMalloc+0x184>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d101      	bne.n	80094f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80094f4:	f000 f924 	bl	8009740 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80094f8:	4b5a      	ldr	r3, [pc, #360]	@ (8009664 <pvPortMalloc+0x188>)
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4013      	ands	r3, r2
 8009500:	2b00      	cmp	r3, #0
 8009502:	f040 8095 	bne.w	8009630 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d01e      	beq.n	800954a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800950c:	2208      	movs	r2, #8
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4413      	add	r3, r2
 8009512:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f003 0307 	and.w	r3, r3, #7
 800951a:	2b00      	cmp	r3, #0
 800951c:	d015      	beq.n	800954a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f023 0307 	bic.w	r3, r3, #7
 8009524:	3308      	adds	r3, #8
 8009526:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f003 0307 	and.w	r3, r3, #7
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00b      	beq.n	800954a <pvPortMalloc+0x6e>
	__asm volatile
 8009532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	617b      	str	r3, [r7, #20]
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop
 8009548:	e7fd      	b.n	8009546 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d06f      	beq.n	8009630 <pvPortMalloc+0x154>
 8009550:	4b45      	ldr	r3, [pc, #276]	@ (8009668 <pvPortMalloc+0x18c>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	429a      	cmp	r2, r3
 8009558:	d86a      	bhi.n	8009630 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800955a:	4b44      	ldr	r3, [pc, #272]	@ (800966c <pvPortMalloc+0x190>)
 800955c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800955e:	4b43      	ldr	r3, [pc, #268]	@ (800966c <pvPortMalloc+0x190>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009564:	e004      	b.n	8009570 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009568:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800956a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	429a      	cmp	r2, r3
 8009578:	d903      	bls.n	8009582 <pvPortMalloc+0xa6>
 800957a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d1f1      	bne.n	8009566 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009582:	4b37      	ldr	r3, [pc, #220]	@ (8009660 <pvPortMalloc+0x184>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009588:	429a      	cmp	r2, r3
 800958a:	d051      	beq.n	8009630 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2208      	movs	r2, #8
 8009592:	4413      	add	r3, r2
 8009594:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	6a3b      	ldr	r3, [r7, #32]
 800959c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800959e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a0:	685a      	ldr	r2, [r3, #4]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	1ad2      	subs	r2, r2, r3
 80095a6:	2308      	movs	r3, #8
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d920      	bls.n	80095f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80095ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4413      	add	r3, r2
 80095b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	f003 0307 	and.w	r3, r3, #7
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00b      	beq.n	80095d8 <pvPortMalloc+0xfc>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	613b      	str	r3, [r7, #16]
}
 80095d2:	bf00      	nop
 80095d4:	bf00      	nop
 80095d6:	e7fd      	b.n	80095d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80095d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	1ad2      	subs	r2, r2, r3
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80095e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80095ea:	69b8      	ldr	r0, [r7, #24]
 80095ec:	f000 f90a 	bl	8009804 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095f0:	4b1d      	ldr	r3, [pc, #116]	@ (8009668 <pvPortMalloc+0x18c>)
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	4a1b      	ldr	r2, [pc, #108]	@ (8009668 <pvPortMalloc+0x18c>)
 80095fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80095fe:	4b1a      	ldr	r3, [pc, #104]	@ (8009668 <pvPortMalloc+0x18c>)
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	4b1b      	ldr	r3, [pc, #108]	@ (8009670 <pvPortMalloc+0x194>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d203      	bcs.n	8009612 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800960a:	4b17      	ldr	r3, [pc, #92]	@ (8009668 <pvPortMalloc+0x18c>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a18      	ldr	r2, [pc, #96]	@ (8009670 <pvPortMalloc+0x194>)
 8009610:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	4b13      	ldr	r3, [pc, #76]	@ (8009664 <pvPortMalloc+0x188>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	431a      	orrs	r2, r3
 800961c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800961e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009622:	2200      	movs	r2, #0
 8009624:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009626:	4b13      	ldr	r3, [pc, #76]	@ (8009674 <pvPortMalloc+0x198>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3301      	adds	r3, #1
 800962c:	4a11      	ldr	r2, [pc, #68]	@ (8009674 <pvPortMalloc+0x198>)
 800962e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009630:	f7fe fcde 	bl	8007ff0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	f003 0307 	and.w	r3, r3, #7
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00b      	beq.n	8009656 <pvPortMalloc+0x17a>
	__asm volatile
 800963e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009642:	f383 8811 	msr	BASEPRI, r3
 8009646:	f3bf 8f6f 	isb	sy
 800964a:	f3bf 8f4f 	dsb	sy
 800964e:	60fb      	str	r3, [r7, #12]
}
 8009650:	bf00      	nop
 8009652:	bf00      	nop
 8009654:	e7fd      	b.n	8009652 <pvPortMalloc+0x176>
	return pvReturn;
 8009656:	69fb      	ldr	r3, [r7, #28]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3728      	adds	r7, #40	@ 0x28
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	20001bec 	.word	0x20001bec
 8009664:	20001c00 	.word	0x20001c00
 8009668:	20001bf0 	.word	0x20001bf0
 800966c:	20001be4 	.word	0x20001be4
 8009670:	20001bf4 	.word	0x20001bf4
 8009674:	20001bf8 	.word	0x20001bf8

08009678 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d04f      	beq.n	800972a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800968a:	2308      	movs	r3, #8
 800968c:	425b      	negs	r3, r3
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	4413      	add	r3, r2
 8009692:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	685a      	ldr	r2, [r3, #4]
 800969c:	4b25      	ldr	r3, [pc, #148]	@ (8009734 <vPortFree+0xbc>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4013      	ands	r3, r2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d10b      	bne.n	80096be <vPortFree+0x46>
	__asm volatile
 80096a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096aa:	f383 8811 	msr	BASEPRI, r3
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	60fb      	str	r3, [r7, #12]
}
 80096b8:	bf00      	nop
 80096ba:	bf00      	nop
 80096bc:	e7fd      	b.n	80096ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00b      	beq.n	80096de <vPortFree+0x66>
	__asm volatile
 80096c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	60bb      	str	r3, [r7, #8]
}
 80096d8:	bf00      	nop
 80096da:	bf00      	nop
 80096dc:	e7fd      	b.n	80096da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	685a      	ldr	r2, [r3, #4]
 80096e2:	4b14      	ldr	r3, [pc, #80]	@ (8009734 <vPortFree+0xbc>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4013      	ands	r3, r2
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d01e      	beq.n	800972a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d11a      	bne.n	800972a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	685a      	ldr	r2, [r3, #4]
 80096f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009734 <vPortFree+0xbc>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	43db      	mvns	r3, r3
 80096fe:	401a      	ands	r2, r3
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009704:	f7fe fc66 	bl	8007fd4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	685a      	ldr	r2, [r3, #4]
 800970c:	4b0a      	ldr	r3, [pc, #40]	@ (8009738 <vPortFree+0xc0>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4413      	add	r3, r2
 8009712:	4a09      	ldr	r2, [pc, #36]	@ (8009738 <vPortFree+0xc0>)
 8009714:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009716:	6938      	ldr	r0, [r7, #16]
 8009718:	f000 f874 	bl	8009804 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800971c:	4b07      	ldr	r3, [pc, #28]	@ (800973c <vPortFree+0xc4>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	3301      	adds	r3, #1
 8009722:	4a06      	ldr	r2, [pc, #24]	@ (800973c <vPortFree+0xc4>)
 8009724:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009726:	f7fe fc63 	bl	8007ff0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800972a:	bf00      	nop
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	20001c00 	.word	0x20001c00
 8009738:	20001bf0 	.word	0x20001bf0
 800973c:	20001bfc 	.word	0x20001bfc

08009740 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009746:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800974a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800974c:	4b27      	ldr	r3, [pc, #156]	@ (80097ec <prvHeapInit+0xac>)
 800974e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f003 0307 	and.w	r3, r3, #7
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00c      	beq.n	8009774 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3307      	adds	r3, #7
 800975e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f023 0307 	bic.w	r3, r3, #7
 8009766:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	4a1f      	ldr	r2, [pc, #124]	@ (80097ec <prvHeapInit+0xac>)
 8009770:	4413      	add	r3, r2
 8009772:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009778:	4a1d      	ldr	r2, [pc, #116]	@ (80097f0 <prvHeapInit+0xb0>)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800977e:	4b1c      	ldr	r3, [pc, #112]	@ (80097f0 <prvHeapInit+0xb0>)
 8009780:	2200      	movs	r2, #0
 8009782:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	4413      	add	r3, r2
 800978a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800978c:	2208      	movs	r2, #8
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	1a9b      	subs	r3, r3, r2
 8009792:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f023 0307 	bic.w	r3, r3, #7
 800979a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4a15      	ldr	r2, [pc, #84]	@ (80097f4 <prvHeapInit+0xb4>)
 80097a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80097a2:	4b14      	ldr	r3, [pc, #80]	@ (80097f4 <prvHeapInit+0xb4>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2200      	movs	r2, #0
 80097a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80097aa:	4b12      	ldr	r3, [pc, #72]	@ (80097f4 <prvHeapInit+0xb4>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2200      	movs	r2, #0
 80097b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	1ad2      	subs	r2, r2, r3
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80097c0:	4b0c      	ldr	r3, [pc, #48]	@ (80097f4 <prvHeapInit+0xb4>)
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	4a0a      	ldr	r2, [pc, #40]	@ (80097f8 <prvHeapInit+0xb8>)
 80097ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	4a09      	ldr	r2, [pc, #36]	@ (80097fc <prvHeapInit+0xbc>)
 80097d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80097d8:	4b09      	ldr	r3, [pc, #36]	@ (8009800 <prvHeapInit+0xc0>)
 80097da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80097de:	601a      	str	r2, [r3, #0]
}
 80097e0:	bf00      	nop
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr
 80097ec:	2000102c 	.word	0x2000102c
 80097f0:	20001be4 	.word	0x20001be4
 80097f4:	20001bec 	.word	0x20001bec
 80097f8:	20001bf4 	.word	0x20001bf4
 80097fc:	20001bf0 	.word	0x20001bf0
 8009800:	20001c00 	.word	0x20001c00

08009804 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800980c:	4b28      	ldr	r3, [pc, #160]	@ (80098b0 <prvInsertBlockIntoFreeList+0xac>)
 800980e:	60fb      	str	r3, [r7, #12]
 8009810:	e002      	b.n	8009818 <prvInsertBlockIntoFreeList+0x14>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	429a      	cmp	r2, r3
 8009820:	d8f7      	bhi.n	8009812 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	68ba      	ldr	r2, [r7, #8]
 800982c:	4413      	add	r3, r2
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	d108      	bne.n	8009846 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	685a      	ldr	r2, [r3, #4]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	441a      	add	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	441a      	add	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	d118      	bne.n	800988c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	4b15      	ldr	r3, [pc, #84]	@ (80098b4 <prvInsertBlockIntoFreeList+0xb0>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	429a      	cmp	r2, r3
 8009864:	d00d      	beq.n	8009882 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	685a      	ldr	r2, [r3, #4]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	441a      	add	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	601a      	str	r2, [r3, #0]
 8009880:	e008      	b.n	8009894 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009882:	4b0c      	ldr	r3, [pc, #48]	@ (80098b4 <prvInsertBlockIntoFreeList+0xb0>)
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	601a      	str	r2, [r3, #0]
 800988a:	e003      	b.n	8009894 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	429a      	cmp	r2, r3
 800989a:	d002      	beq.n	80098a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098a2:	bf00      	nop
 80098a4:	3714      	adds	r7, #20
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	20001be4 	.word	0x20001be4
 80098b4:	20001bec 	.word	0x20001bec

080098b8 <memset>:
 80098b8:	4402      	add	r2, r0
 80098ba:	4603      	mov	r3, r0
 80098bc:	4293      	cmp	r3, r2
 80098be:	d100      	bne.n	80098c2 <memset+0xa>
 80098c0:	4770      	bx	lr
 80098c2:	f803 1b01 	strb.w	r1, [r3], #1
 80098c6:	e7f9      	b.n	80098bc <memset+0x4>

080098c8 <_reclaim_reent>:
 80098c8:	4b2d      	ldr	r3, [pc, #180]	@ (8009980 <_reclaim_reent+0xb8>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4283      	cmp	r3, r0
 80098ce:	b570      	push	{r4, r5, r6, lr}
 80098d0:	4604      	mov	r4, r0
 80098d2:	d053      	beq.n	800997c <_reclaim_reent+0xb4>
 80098d4:	69c3      	ldr	r3, [r0, #28]
 80098d6:	b31b      	cbz	r3, 8009920 <_reclaim_reent+0x58>
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	b163      	cbz	r3, 80098f6 <_reclaim_reent+0x2e>
 80098dc:	2500      	movs	r5, #0
 80098de:	69e3      	ldr	r3, [r4, #28]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	5959      	ldr	r1, [r3, r5]
 80098e4:	b9b1      	cbnz	r1, 8009914 <_reclaim_reent+0x4c>
 80098e6:	3504      	adds	r5, #4
 80098e8:	2d80      	cmp	r5, #128	@ 0x80
 80098ea:	d1f8      	bne.n	80098de <_reclaim_reent+0x16>
 80098ec:	69e3      	ldr	r3, [r4, #28]
 80098ee:	4620      	mov	r0, r4
 80098f0:	68d9      	ldr	r1, [r3, #12]
 80098f2:	f000 f87b 	bl	80099ec <_free_r>
 80098f6:	69e3      	ldr	r3, [r4, #28]
 80098f8:	6819      	ldr	r1, [r3, #0]
 80098fa:	b111      	cbz	r1, 8009902 <_reclaim_reent+0x3a>
 80098fc:	4620      	mov	r0, r4
 80098fe:	f000 f875 	bl	80099ec <_free_r>
 8009902:	69e3      	ldr	r3, [r4, #28]
 8009904:	689d      	ldr	r5, [r3, #8]
 8009906:	b15d      	cbz	r5, 8009920 <_reclaim_reent+0x58>
 8009908:	4629      	mov	r1, r5
 800990a:	4620      	mov	r0, r4
 800990c:	682d      	ldr	r5, [r5, #0]
 800990e:	f000 f86d 	bl	80099ec <_free_r>
 8009912:	e7f8      	b.n	8009906 <_reclaim_reent+0x3e>
 8009914:	680e      	ldr	r6, [r1, #0]
 8009916:	4620      	mov	r0, r4
 8009918:	f000 f868 	bl	80099ec <_free_r>
 800991c:	4631      	mov	r1, r6
 800991e:	e7e1      	b.n	80098e4 <_reclaim_reent+0x1c>
 8009920:	6961      	ldr	r1, [r4, #20]
 8009922:	b111      	cbz	r1, 800992a <_reclaim_reent+0x62>
 8009924:	4620      	mov	r0, r4
 8009926:	f000 f861 	bl	80099ec <_free_r>
 800992a:	69e1      	ldr	r1, [r4, #28]
 800992c:	b111      	cbz	r1, 8009934 <_reclaim_reent+0x6c>
 800992e:	4620      	mov	r0, r4
 8009930:	f000 f85c 	bl	80099ec <_free_r>
 8009934:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009936:	b111      	cbz	r1, 800993e <_reclaim_reent+0x76>
 8009938:	4620      	mov	r0, r4
 800993a:	f000 f857 	bl	80099ec <_free_r>
 800993e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009940:	b111      	cbz	r1, 8009948 <_reclaim_reent+0x80>
 8009942:	4620      	mov	r0, r4
 8009944:	f000 f852 	bl	80099ec <_free_r>
 8009948:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800994a:	b111      	cbz	r1, 8009952 <_reclaim_reent+0x8a>
 800994c:	4620      	mov	r0, r4
 800994e:	f000 f84d 	bl	80099ec <_free_r>
 8009952:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009954:	b111      	cbz	r1, 800995c <_reclaim_reent+0x94>
 8009956:	4620      	mov	r0, r4
 8009958:	f000 f848 	bl	80099ec <_free_r>
 800995c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800995e:	b111      	cbz	r1, 8009966 <_reclaim_reent+0x9e>
 8009960:	4620      	mov	r0, r4
 8009962:	f000 f843 	bl	80099ec <_free_r>
 8009966:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009968:	b111      	cbz	r1, 8009970 <_reclaim_reent+0xa8>
 800996a:	4620      	mov	r0, r4
 800996c:	f000 f83e 	bl	80099ec <_free_r>
 8009970:	6a23      	ldr	r3, [r4, #32]
 8009972:	b11b      	cbz	r3, 800997c <_reclaim_reent+0xb4>
 8009974:	4620      	mov	r0, r4
 8009976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800997a:	4718      	bx	r3
 800997c:	bd70      	pop	{r4, r5, r6, pc}
 800997e:	bf00      	nop
 8009980:	20000010 	.word	0x20000010

08009984 <__libc_init_array>:
 8009984:	b570      	push	{r4, r5, r6, lr}
 8009986:	4d0d      	ldr	r5, [pc, #52]	@ (80099bc <__libc_init_array+0x38>)
 8009988:	4c0d      	ldr	r4, [pc, #52]	@ (80099c0 <__libc_init_array+0x3c>)
 800998a:	1b64      	subs	r4, r4, r5
 800998c:	10a4      	asrs	r4, r4, #2
 800998e:	2600      	movs	r6, #0
 8009990:	42a6      	cmp	r6, r4
 8009992:	d109      	bne.n	80099a8 <__libc_init_array+0x24>
 8009994:	4d0b      	ldr	r5, [pc, #44]	@ (80099c4 <__libc_init_array+0x40>)
 8009996:	4c0c      	ldr	r4, [pc, #48]	@ (80099c8 <__libc_init_array+0x44>)
 8009998:	f000 f87e 	bl	8009a98 <_init>
 800999c:	1b64      	subs	r4, r4, r5
 800999e:	10a4      	asrs	r4, r4, #2
 80099a0:	2600      	movs	r6, #0
 80099a2:	42a6      	cmp	r6, r4
 80099a4:	d105      	bne.n	80099b2 <__libc_init_array+0x2e>
 80099a6:	bd70      	pop	{r4, r5, r6, pc}
 80099a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ac:	4798      	blx	r3
 80099ae:	3601      	adds	r6, #1
 80099b0:	e7ee      	b.n	8009990 <__libc_init_array+0xc>
 80099b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80099b6:	4798      	blx	r3
 80099b8:	3601      	adds	r6, #1
 80099ba:	e7f2      	b.n	80099a2 <__libc_init_array+0x1e>
 80099bc:	08009bd8 	.word	0x08009bd8
 80099c0:	08009bd8 	.word	0x08009bd8
 80099c4:	08009bd8 	.word	0x08009bd8
 80099c8:	08009bdc 	.word	0x08009bdc

080099cc <__retarget_lock_acquire_recursive>:
 80099cc:	4770      	bx	lr

080099ce <__retarget_lock_release_recursive>:
 80099ce:	4770      	bx	lr

080099d0 <memcpy>:
 80099d0:	440a      	add	r2, r1
 80099d2:	4291      	cmp	r1, r2
 80099d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80099d8:	d100      	bne.n	80099dc <memcpy+0xc>
 80099da:	4770      	bx	lr
 80099dc:	b510      	push	{r4, lr}
 80099de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099e6:	4291      	cmp	r1, r2
 80099e8:	d1f9      	bne.n	80099de <memcpy+0xe>
 80099ea:	bd10      	pop	{r4, pc}

080099ec <_free_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4605      	mov	r5, r0
 80099f0:	2900      	cmp	r1, #0
 80099f2:	d041      	beq.n	8009a78 <_free_r+0x8c>
 80099f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f8:	1f0c      	subs	r4, r1, #4
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	bfb8      	it	lt
 80099fe:	18e4      	addlt	r4, r4, r3
 8009a00:	f000 f83e 	bl	8009a80 <__malloc_lock>
 8009a04:	4a1d      	ldr	r2, [pc, #116]	@ (8009a7c <_free_r+0x90>)
 8009a06:	6813      	ldr	r3, [r2, #0]
 8009a08:	b933      	cbnz	r3, 8009a18 <_free_r+0x2c>
 8009a0a:	6063      	str	r3, [r4, #4]
 8009a0c:	6014      	str	r4, [r2, #0]
 8009a0e:	4628      	mov	r0, r5
 8009a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a14:	f000 b83a 	b.w	8009a8c <__malloc_unlock>
 8009a18:	42a3      	cmp	r3, r4
 8009a1a:	d908      	bls.n	8009a2e <_free_r+0x42>
 8009a1c:	6820      	ldr	r0, [r4, #0]
 8009a1e:	1821      	adds	r1, r4, r0
 8009a20:	428b      	cmp	r3, r1
 8009a22:	bf01      	itttt	eq
 8009a24:	6819      	ldreq	r1, [r3, #0]
 8009a26:	685b      	ldreq	r3, [r3, #4]
 8009a28:	1809      	addeq	r1, r1, r0
 8009a2a:	6021      	streq	r1, [r4, #0]
 8009a2c:	e7ed      	b.n	8009a0a <_free_r+0x1e>
 8009a2e:	461a      	mov	r2, r3
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	b10b      	cbz	r3, 8009a38 <_free_r+0x4c>
 8009a34:	42a3      	cmp	r3, r4
 8009a36:	d9fa      	bls.n	8009a2e <_free_r+0x42>
 8009a38:	6811      	ldr	r1, [r2, #0]
 8009a3a:	1850      	adds	r0, r2, r1
 8009a3c:	42a0      	cmp	r0, r4
 8009a3e:	d10b      	bne.n	8009a58 <_free_r+0x6c>
 8009a40:	6820      	ldr	r0, [r4, #0]
 8009a42:	4401      	add	r1, r0
 8009a44:	1850      	adds	r0, r2, r1
 8009a46:	4283      	cmp	r3, r0
 8009a48:	6011      	str	r1, [r2, #0]
 8009a4a:	d1e0      	bne.n	8009a0e <_free_r+0x22>
 8009a4c:	6818      	ldr	r0, [r3, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	6053      	str	r3, [r2, #4]
 8009a52:	4408      	add	r0, r1
 8009a54:	6010      	str	r0, [r2, #0]
 8009a56:	e7da      	b.n	8009a0e <_free_r+0x22>
 8009a58:	d902      	bls.n	8009a60 <_free_r+0x74>
 8009a5a:	230c      	movs	r3, #12
 8009a5c:	602b      	str	r3, [r5, #0]
 8009a5e:	e7d6      	b.n	8009a0e <_free_r+0x22>
 8009a60:	6820      	ldr	r0, [r4, #0]
 8009a62:	1821      	adds	r1, r4, r0
 8009a64:	428b      	cmp	r3, r1
 8009a66:	bf04      	itt	eq
 8009a68:	6819      	ldreq	r1, [r3, #0]
 8009a6a:	685b      	ldreq	r3, [r3, #4]
 8009a6c:	6063      	str	r3, [r4, #4]
 8009a6e:	bf04      	itt	eq
 8009a70:	1809      	addeq	r1, r1, r0
 8009a72:	6021      	streq	r1, [r4, #0]
 8009a74:	6054      	str	r4, [r2, #4]
 8009a76:	e7ca      	b.n	8009a0e <_free_r+0x22>
 8009a78:	bd38      	pop	{r3, r4, r5, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20001d40 	.word	0x20001d40

08009a80 <__malloc_lock>:
 8009a80:	4801      	ldr	r0, [pc, #4]	@ (8009a88 <__malloc_lock+0x8>)
 8009a82:	f7ff bfa3 	b.w	80099cc <__retarget_lock_acquire_recursive>
 8009a86:	bf00      	nop
 8009a88:	20001d3c 	.word	0x20001d3c

08009a8c <__malloc_unlock>:
 8009a8c:	4801      	ldr	r0, [pc, #4]	@ (8009a94 <__malloc_unlock+0x8>)
 8009a8e:	f7ff bf9e 	b.w	80099ce <__retarget_lock_release_recursive>
 8009a92:	bf00      	nop
 8009a94:	20001d3c 	.word	0x20001d3c

08009a98 <_init>:
 8009a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a9a:	bf00      	nop
 8009a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a9e:	bc08      	pop	{r3}
 8009aa0:	469e      	mov	lr, r3
 8009aa2:	4770      	bx	lr

08009aa4 <_fini>:
 8009aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aa6:	bf00      	nop
 8009aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aaa:	bc08      	pop	{r3}
 8009aac:	469e      	mov	lr, r3
 8009aae:	4770      	bx	lr
